/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AmplifierProcessor swig_types[0]
#define SWIGTYPE_p_AudioDSP__FFTConvolutionDouble swig_types[1]
#define SWIGTYPE_p_AudioDSP__FFTConvolutionFloat swig_types[2]
#define SWIGTYPE_p_AudioDSP__FFTPlan swig_types[3]
#define SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble swig_types[4]
#define SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D swig_types[5]
#define SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat swig_types[6]
#define SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D swig_types[7]
#define SWIGTYPE_p_AudioDSP__FFTPlanRealDouble swig_types[8]
#define SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D swig_types[9]
#define SWIGTYPE_p_AudioDSP__FFTPlanRealFloat swig_types[10]
#define SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D swig_types[11]
#define SWIGTYPE_p_AudioDSP__WindowT_double_t swig_types[12]
#define SWIGTYPE_p_AudioDSP__complex_matrixT_double_t swig_types[13]
#define SWIGTYPE_p_AudioDSP__complex_vectorT_double_t swig_types[14]
#define SWIGTYPE_p_AudioDSP__sample_matrixT_double_t swig_types[15]
#define SWIGTYPE_p_AudioDSP__sample_matrixT_int_t swig_types[16]
#define SWIGTYPE_p_AudioDSP__sample_matrixT_long_t swig_types[17]
#define SWIGTYPE_p_AudioDSP__sample_matrix_viewT_double_t swig_types[18]
#define SWIGTYPE_p_AudioDSP__sample_vectorT_AudioDSP__sample_vectorT_DspFloatType_t_t swig_types[19]
#define SWIGTYPE_p_AudioDSP__sample_vectorT_double_p_t swig_types[20]
#define SWIGTYPE_p_AudioDSP__sample_vectorT_double_t swig_types[21]
#define SWIGTYPE_p_AudioDSP__sample_vectorT_int_t swig_types[22]
#define SWIGTYPE_p_AudioDSP__sample_vectorT_long_t swig_types[23]
#define SWIGTYPE_p_AudioDSP__wav_data swig_types[24]
#define SWIGTYPE_p_FilterProcessor swig_types[25]
#define SWIGTYPE_p_FunctionProcessor swig_types[26]
#define SWIGTYPE_p_GeneratorProcessor swig_types[27]
#define SWIGTYPE_p_MixerProcessor swig_types[28]
#define SWIGTYPE_p_MonoAdderOperatorProcessor swig_types[29]
#define SWIGTYPE_p_MonoBlendOperatorProcessor swig_types[30]
#define SWIGTYPE_p_MonoCascadeOperatorProcessor swig_types[31]
#define SWIGTYPE_p_MonoCascadeProcessor swig_types[32]
#define SWIGTYPE_p_MonoDownsampleProcessor swig_types[33]
#define SWIGTYPE_p_MonoFXProcessor swig_types[34]
#define SWIGTYPE_p_MonoModulatorOperatorProcessor swig_types[35]
#define SWIGTYPE_p_MonoMultiplierOperatorProcessor swig_types[36]
#define SWIGTYPE_p_MonoOperatorProcessor swig_types[37]
#define SWIGTYPE_p_MonoOversampleProcessor swig_types[38]
#define SWIGTYPE_p_MonoProcessor swig_types[39]
#define SWIGTYPE_p_MonoSubtractorOperatorProcessor swig_types[40]
#define SWIGTYPE_p_MonoUpsampleProcessor swig_types[41]
#define SWIGTYPE_p_OperatorProcessor swig_types[42]
#define SWIGTYPE_p_OscillatorProcessor swig_types[43]
#define SWIGTYPE_p_Parameter2Processor swig_types[44]
#define SWIGTYPE_p_Port swig_types[45]
#define SWIGTYPE_p_PortMap swig_types[46]
#define SWIGTYPE_p_Ports swig_types[47]
#define SWIGTYPE_p_Random swig_types[48]
#define SWIGTYPE_p_SignalSinkProcessor swig_types[49]
#define SWIGTYPE_p_SignalSourceProcessor swig_types[50]
#define SWIGTYPE_p_SndFileReaderDouble swig_types[51]
#define SWIGTYPE_p_SndFileReaderFloat swig_types[52]
#define SWIGTYPE_p_SndFileReaderInt swig_types[53]
#define SWIGTYPE_p_SndFileReaderShort swig_types[54]
#define SWIGTYPE_p_SndFileWriterDouble swig_types[55]
#define SWIGTYPE_p_SndFileWriterFloat swig_types[56]
#define SWIGTYPE_p_SndFileWriterInt swig_types[57]
#define SWIGTYPE_p_SndFileWriterShort swig_types[58]
#define SWIGTYPE_p_SoundProcessor swig_types[59]
#define SWIGTYPE_p_SpectrumProcessor swig_types[60]
#define SWIGTYPE_p_StereoAmplifierProcessor swig_types[61]
#define SWIGTYPE_p_StereoCascadeProcessor swig_types[62]
#define SWIGTYPE_p_StereoFXProcessor swig_types[63]
#define SWIGTYPE_p_StereoFilterProcessor swig_types[64]
#define SWIGTYPE_p_StereoFunctionProcessor swig_types[65]
#define SWIGTYPE_p_StereoGeneratorProcessor swig_types[66]
#define SWIGTYPE_p_StereoOscillatorProcessor swig_types[67]
#define SWIGTYPE_p_StereoProcessor swig_types[68]
#define SWIGTYPE_p_StereoSplitterProcessor swig_types[69]
#define SWIGTYPE_p_base swig_types[70]
#define SWIGTYPE_p_double swig_types[71]
#define SWIGTYPE_p_fftw_complex swig_types[72]
#define SWIGTYPE_p_fftw_plan swig_types[73]
#define SWIGTYPE_p_fftwf_complex swig_types[74]
#define SWIGTYPE_p_fftwf_plan swig_types[75]
#define SWIGTYPE_p_float swig_types[76]
#define SWIGTYPE_p_int swig_types[77]
#define SWIGTYPE_p_long swig_types[78]
#define SWIGTYPE_p_long_long swig_types[79]
#define SWIGTYPE_p_p_AmplifierProcessor swig_types[80]
#define SWIGTYPE_p_p_FilterProcessor swig_types[81]
#define SWIGTYPE_p_p_FunctionProcessor swig_types[82]
#define SWIGTYPE_p_p_double swig_types[83]
#define SWIGTYPE_p_p_p_double swig_types[84]
#define SWIGTYPE_p_short swig_types[85]
#define SWIGTYPE_p_signed_char swig_types[86]
#define SWIGTYPE_p_std__complexT_double_t swig_types[87]
#define SWIGTYPE_p_std__complexT_float_t swig_types[88]
#define SWIGTYPE_p_std__listT_MonoProcessor_p_t swig_types[89]
#define SWIGTYPE_p_std__listT_SoundProcessor_p_t swig_types[90]
#define SWIGTYPE_p_std__listT_StereoProcessor_p_t swig_types[91]
#define SWIGTYPE_p_std__listT_std__shared_ptrT_Port_t_t swig_types[92]
#define SWIGTYPE_p_std__mapT_std__string_MonoProcessor_p_t swig_types[93]
#define SWIGTYPE_p_std__mapT_std__string_Port_p_t swig_types[94]
#define SWIGTYPE_p_std__mapT_std__string_SoundProcessor_p_t swig_types[95]
#define SWIGTYPE_p_std__mapT_std__string_StereoProcessor_p_t swig_types[96]
#define SWIGTYPE_p_std__numeric_limitsT_double_t swig_types[97]
#define SWIGTYPE_p_std__numeric_limitsT_float_t swig_types[98]
#define SWIGTYPE_p_std__numeric_limitsT_int_t swig_types[99]
#define SWIGTYPE_p_std__numeric_limitsT_long_long_t swig_types[100]
#define SWIGTYPE_p_std__numeric_limitsT_long_t swig_types[101]
#define SWIGTYPE_p_std__numeric_limitsT_short_t swig_types[102]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t swig_types[103]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t swig_types[104]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t swig_types[105]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t swig_types[106]
#define SWIGTYPE_p_std__string swig_types[107]
#define SWIGTYPE_p_std__vectorT_MonoProcessor_p_std__allocatorT_MonoProcessor_p_t_t swig_types[108]
#define SWIGTYPE_p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t swig_types[109]
#define SWIGTYPE_p_std__vectorT_SoundProcessor_p_std__allocatorT_SoundProcessor_p_t_t swig_types[110]
#define SWIGTYPE_p_std__vectorT_StereoProcessor_p_std__allocatorT_StereoProcessor_p_t_t swig_types[111]
#define SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t swig_types[112]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[113]
#define SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t swig_types[114]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[115]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[116]
#define SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t swig_types[117]
#define SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t swig_types[118]
#define SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t swig_types[119]
#define SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t swig_types[120]
#define SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_std__allocatorT_std__complexT_DspFloatType_t_t_t swig_types[121]
#define SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t swig_types[122]
#define SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t swig_types[123]
#define SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t swig_types[124]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[125]
#define SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t swig_types[126]
#define SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t swig_types[127]
#define SWIGTYPE_p_std__vector_iteratorT_double_Allocator__aligned_allocatorT_double_64_t_t swig_types[128]
#define SWIGTYPE_p_std__vector_iteratorT_float_Allocator__aligned_allocatorT_float_64_t_t swig_types[129]
#define SWIGTYPE_p_std__vector_iteratorT_int_std__allocatorT_int_t_t swig_types[130]
#define SWIGTYPE_p_std__vector_iteratorT_long_std__allocatorT_long_t_t swig_types[131]
#define SWIGTYPE_p_std__vector_iteratorT_short_std__allocatorT_short_t_t swig_types[132]
#define SWIGTYPE_p_std__vector_iteratorT_signed_char_std__allocatorT_signed_char_t_t swig_types[133]
#define SWIGTYPE_p_std__vector_iteratorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t swig_types[134]
#define SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t swig_types[135]
#define SWIGTYPE_p_std__vector_iteratorT_unsigned_char_std__allocatorT_unsigned_char_t_t swig_types[136]
#define SWIGTYPE_p_std__vector_iteratorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[137]
#define SWIGTYPE_p_std__vector_iteratorT_unsigned_long_std__allocatorT_unsigned_long_t_t swig_types[138]
#define SWIGTYPE_p_std__vector_iteratorT_unsigned_short_std__allocatorT_unsigned_short_t_t swig_types[139]
#define SWIGTYPE_p_unsigned_char swig_types[140]
#define SWIGTYPE_p_unsigned_int swig_types[141]
#define SWIGTYPE_p_unsigned_long swig_types[142]
#define SWIGTYPE_p_unsigned_long_long swig_types[143]
#define SWIGTYPE_p_unsigned_short swig_types[144]
static swig_type_info *swig_types[146];
static swig_module_info swig_module = {swig_types, 145, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "stdsamples"
#define SWIG_init      luaopen_stdsamples
#define SWIG_init_user luaopen_stdsamples_user

#define SWIG_LUACODE   luaopen_stdsamples_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#define DSPFLOATDOUBLE
#include "SoundObject.hpp"    
#include "audiodsp_std_samples.hpp"
#include "audiodsp_vtk.hpp"
#include "audiodsp_sndfile.hpp"
#include "audiodsp_fft.hpp"
#include "audiodsp_fftw.hpp"
#include "audiodsp_fftw_convolution.hpp"
#include "audiodsp_samples_functions.hpp"
#include "audiodsp_window.hpp"

using namespace AudioDSP;


#include <stdint.h>		// Use the C99 official header


#include <complex>
#include <valarray>
#include <fenv.h>


#include <complex>


#include <limits>


  /*
    typedef float f32;
    typedef double f64;
    typedef signed char i8;
    typedef unsigned char u8;
    typedef signed short i16;
    typedef unsigned short u16;
    typedef signed int i32;
    typedef unsigned int u32;
    typedef signed long ilong;
    typedef unsigned long ulong;
    typedef signed long long i64;
    typedef unsigned long long u64;
  */
    
    namespace Ops
    {
    
      template<typename T> T abs(const T& x) { return std::abs(x); }
      template<typename T> T fabs(const T& x) { return std::fabs(x); }
      template<typename T> T acos(const T& x) { return std::acos(x); }
      template<typename T> T acosh(const T& x) { return std::acosh(x); }
      template<typename T> T asinh(const T& x) { return std::asinh(x); }
      template<typename T> T asin(const T& x) { return std::asinh(x); }
      template<typename T> T atan(const T& x) { return std::atan(x); }
      template<typename T> T atan2(const T& x,const T& y) { return std::atan2(x,y); }
      template<typename T> T atanh(const T& x) { return std::atanh(x); }
      template<typename T> T cbrt(const T& x) { return std::cbrt(x); }
      template<typename T> T ceil(const T& x) { return std::ceil(x); }    
      template<typename T> T copysign(const T& x, const T& y) { return std::copysign(x,y); }
      template<typename T> T cos(const T& x) { return std::cos(x); }
      template<typename T> T cosh(const T& x) { return std::cosh(x); }
      template<typename T> T erf(const T& x) { return std::erf(x); }
      template<typename T> T erfc(const T& x) { return std::erfc(x); }
      template<typename T> T exp(const T& x) { return std::exp(x); }
      template<typename T> T exp2(const T& x) { return std::exp2(x); }
      template<typename T> T expm1(const T& x) { return std::expm1(x); }
      template<typename T> T fdim(const T & x, const T & y) { return std::fdim(x,y); }
      template<typename T> T floor(const T & x) { return std::floor(x); }
      template<typename T> T fma(const T & x, const T & y, const T& z) { return std::fma(x,y,z); }
      template<typename T> T fmax(const T & x, const T & y) { return std::fmax(x,y); }
      template<typename T> T fmin(const T & x, const T & y) { return std::fmax(x,y); }
      template<typename T> T fmod(const T & x, const T & y) { return std::fmod(x,y); }
      template<typename T> int fpclassify(const T & x) { return std::fpclassify(x); }
      template<typename T> T hypot(const T & x, const T & y) { return std::hypot(x,y); }
      template<typename T> int ilogb(const T & x) { return std::ilogb(x); }
      template<typename T> bool isfinite(const T & x) { return std::isfinite(x); }
      template<typename T> bool isgreater(const T & x, const T & y) { return std::isgreater(x,y); }
      template<typename T> bool isgreaterequal(const T & x, const T & y) { return std::isgreaterequal(x,y); }
      template<typename T> bool isinf(const T & x) { return std::isinf(x); }
      template<typename T> bool isless(const T & x, const T & y) { return std::isless(x,y); }
      template<typename T> bool islessequal(const T & x, const T & y) { return std::islessequal(x,y); }
      template<typename T> bool islessgreater(const T & x, const T & y) { return std::islessgreater(x,y); }
      template<typename T> bool isnan(const T & x) { return std::isnan(x); }
      template<typename T> bool isnormal(const T & x) { return std::isnormal(x); }
      template<typename T> bool isunordered(const T & x, const T& y) { return std::isunordered(x,y); }
      template<typename T> T ldexp(const T & x, int exp) { return std::ldexp(x,exp); }
      template<typename T> T lgamma(const T & x) { return std::lgamma(x); }
      template<typename T> T llrint(const T & x) { return std::llrint(x); }
      template<typename T> T llround(const T & x) { return std::llround(x); }
      template<typename T> T log(const T & x) { return std::log(x); }
      template<typename T> T log10(const T & x) { return std::log10(x); }
      template<typename T> T log1p(const T & x) { return std::log1p(x); }
      template<typename T> T log2(const T & x) { return std::log2(x); }
      template<typename T> T logb(const T & x) { return std::logb(x); }
      template<typename T> T lrint(const T & x) { return std::lrint(x); }
      template<typename T> T lround(const T & x) { return std::lround(x); }
      template<typename T> T nan(const char *tagp) { return std::nan(tagp);}
      template<typename T> T nanf(const char *tagp) { return std::nanf(tagp);}
      template<typename T> T nanl(const char *tagp) { return std::nanl(tagp);}
      template<typename T> T nearbyint(const T &x) { return std::nearbyint(x); }
      template<typename T> T nextafter(const T & x, const T & y) { return std::nextafter(x,y); }
      template<typename T> T nexttoward(const T & x, const T & y) { return std::nexttoward(x,y); }
      template<typename T> T pow(const T & b, const T & e) { return std::pow(b,e); }
      template<typename T> T remainder(const T & n, const T & d) { return std::remainder(n,d); }
      template<typename T> T rint(const T& x) { return std::rint(x); }
      template<typename T> T round(const T& x) { return std::round(x); }
      template<typename T> T scalbln(const T& x, long int n) { return std::scalbln(x,n);}
      template<typename T> T scalbn(const T& x, int n) { return std::scalbln(x,n);}
      template<typename T> bool signbit(const T & x) { return signbit(x); }
      template<typename T> T sin(const T& x) { return std::sin(x); }
      template<typename T> T sinh(const T& x) { return std::sinh(x); }    
      template<typename T> T sqrt(const T& x) { return std::sqrt(x); }
      template<typename T> T square(const T& x) { return x*x; }
      template<typename T> T cube(const T& x) { return x*x*x; }
      template<typename T> T tan(const T& x) { return std::tan(x); }
      template<typename T> T tanh(const T& x) { return std::tanh(x); }        
      template<typename T> T tgamma(const T& x) { return std::tgamma(x); }    
      template<typename T> T trunc(const T& x) { return std::trunc(x); }
      double Huge() { return HUGE_VAL; }
      float Hugef() { return HUGE_VALF; }
      double Infinity() { return INFINITY; }
      double NaN() { return NAN; }
    }    


#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T, class Alloc = std::allocator<T>>
    struct vector_iterator
    {
        typename std::vector<T,Alloc>::iterator iter;
        std::vector<T,Alloc> v;

        vector_iterator(const std::vector<T,Alloc> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T,Alloc> & vec, const typename std::vector<T,Alloc>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T,Alloc>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T,Alloc>& operator = (const vector_iterator<T,Alloc>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}

SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <string.h>

SWIGINTERN std::complex< double > std_complex_Sl_DspFloatType_Sg____add____SWIG(std::complex< DspFloatType > *self,std::complex< double > const &b){ return *self + b; }
SWIGINTERN std::complex< double > std_complex_Sl_DspFloatType_Sg____sub____SWIG(std::complex< DspFloatType > *self,std::complex< double > const &b){ return *self - b; }
SWIGINTERN std::complex< double > std_complex_Sl_DspFloatType_Sg____div____SWIG(std::complex< DspFloatType > *self,std::complex< double > const &b){ return *self / b; }
SWIGINTERN std::complex< double > std_complex_Sl_DspFloatType_Sg____mul____SWIG(std::complex< DspFloatType > *self,std::complex< double > const &b){ return *self * b; }
SWIGINTERN std::complex< double > std_complex_Sl_DspFloatType_Sg____pow____SWIG_0(std::complex< DspFloatType > *self,std::complex< double > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< double > std_complex_Sl_DspFloatType_Sg____pow____SWIG_1(std::complex< DspFloatType > *self,double const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_DspFloatType_Sg____eq____SWIG(std::complex< DspFloatType > *self,std::complex< double > const &b){ return *self == b; }
SWIGINTERN float std_vector_Sl_float_Sc_Allocator_aligned_allocator_Sl_float_Sc_64_Sg__Sg____getitem____SWIG(std::vector< float,Allocator::aligned_allocator< float,64 > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_float_Sc_Allocator_aligned_allocator_Sl_float_Sc_64_Sg__Sg____setitem____SWIG(std::vector< float,Allocator::aligned_allocator< float,64 > > *self,size_t i,float val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< float,Allocator::aligned_allocator< float,64 > > std_vector_Sl_float_Sc_Allocator_aligned_allocator_Sl_float_Sc_64_Sg__Sg__ibegin__SWIG(std::vector< float,Allocator::aligned_allocator< float,64 > > *self){
                std::vector_iterator<float,Allocator::aligned_allocator< float,64 >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< float,Allocator::aligned_allocator< float,64 > > std_vector_Sl_float_Sc_Allocator_aligned_allocator_Sl_float_Sc_64_Sg__Sg__iend__SWIG(std::vector< float,Allocator::aligned_allocator< float,64 > > *self){
                std::vector_iterator<float,Allocator::aligned_allocator< float,64 >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_float_Sc_Allocator_aligned_allocator_Sl_float_Sc_64_Sg__Sg__erase__SWIG_0(std::vector< float,Allocator::aligned_allocator< float,64 > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_float_Sc_Allocator_aligned_allocator_Sl_float_Sc_64_Sg__Sg__erase__SWIG_1(std::vector< float,Allocator::aligned_allocator< float,64 > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN double std_vector_Sl_double_Sc_Allocator_aligned_allocator_Sl_double_Sc_64_Sg__Sg____getitem____SWIG(std::vector< double,Allocator::aligned_allocator< double,64 > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_double_Sc_Allocator_aligned_allocator_Sl_double_Sc_64_Sg__Sg____setitem____SWIG(std::vector< double,Allocator::aligned_allocator< double,64 > > *self,size_t i,double val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< double,Allocator::aligned_allocator< double,64 > > std_vector_Sl_double_Sc_Allocator_aligned_allocator_Sl_double_Sc_64_Sg__Sg__ibegin__SWIG(std::vector< double,Allocator::aligned_allocator< double,64 > > *self){
                std::vector_iterator<double,Allocator::aligned_allocator< double,64 >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< double,Allocator::aligned_allocator< double,64 > > std_vector_Sl_double_Sc_Allocator_aligned_allocator_Sl_double_Sc_64_Sg__Sg__iend__SWIG(std::vector< double,Allocator::aligned_allocator< double,64 > > *self){
                std::vector_iterator<double,Allocator::aligned_allocator< double,64 >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_double_Sc_Allocator_aligned_allocator_Sl_double_Sc_64_Sg__Sg__erase__SWIG_0(std::vector< double,Allocator::aligned_allocator< double,64 > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_double_Sc_Allocator_aligned_allocator_Sl_double_Sc_64_Sg__Sg__erase__SWIG_1(std::vector< double,Allocator::aligned_allocator< double,64 > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::complex< float > std_vector_Sl_std_complex_Sl_float_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_float_Sg__Sc_64_Sg__Sg____getitem____SWIG(std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_float_Sg__Sc_64_Sg__Sg____setitem____SWIG(std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *self,size_t i,std::complex< float > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > std_vector_Sl_std_complex_Sl_float_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_float_Sg__Sc_64_Sg__Sg__ibegin__SWIG(std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *self){
                std::vector_iterator<std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > std_vector_Sl_std_complex_Sl_float_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_float_Sg__Sc_64_Sg__Sg__iend__SWIG(std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *self){
                std::vector_iterator<std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_float_Sg__Sc_64_Sg__Sg__erase__SWIG_0(std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_float_Sg__Sc_64_Sg__Sg__erase__SWIG_1(std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::complex< double > std_vector_Sl_std_complex_Sl_double_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_double_Sg__Sc_64_Sg__Sg____getitem____SWIG(std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_double_Sg__Sc_64_Sg__Sg____setitem____SWIG(std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *self,size_t i,std::complex< double > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > std_vector_Sl_std_complex_Sl_double_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_double_Sg__Sc_64_Sg__Sg__ibegin__SWIG(std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *self){
                std::vector_iterator<std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > std_vector_Sl_std_complex_Sl_double_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_double_Sg__Sc_64_Sg__Sg__iend__SWIG(std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *self){
                std::vector_iterator<std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_double_Sg__Sc_64_Sg__Sg__erase__SWIG_0(std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_double_Sg__Sc_64_Sg__Sg__erase__SWIG_1(std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN signed char std_vector_Sl_signed_SS_char_Sg____getitem____SWIG(std::vector< signed char > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_signed_SS_char_Sg____setitem____SWIG(std::vector< signed char > *self,size_t i,signed char val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< signed char,std::allocator< signed char > > std_vector_Sl_signed_SS_char_Sg__ibegin__SWIG(std::vector< signed char > *self){
                std::vector_iterator<signed char,std::allocator< signed char >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< signed char,std::allocator< signed char > > std_vector_Sl_signed_SS_char_Sg__iend__SWIG(std::vector< signed char > *self){
                std::vector_iterator<signed char,std::allocator< signed char >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_signed_SS_char_Sg__erase__SWIG_0(std::vector< signed char > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_signed_SS_char_Sg__erase__SWIG_1(std::vector< signed char > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN unsigned char std_vector_Sl_unsigned_SS_char_Sg____getitem____SWIG(std::vector< unsigned char > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg____setitem____SWIG(std::vector< unsigned char > *self,size_t i,unsigned char val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< unsigned char,std::allocator< unsigned char > > std_vector_Sl_unsigned_SS_char_Sg__ibegin__SWIG(std::vector< unsigned char > *self){
                std::vector_iterator<unsigned char,std::allocator< unsigned char >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< unsigned char,std::allocator< unsigned char > > std_vector_Sl_unsigned_SS_char_Sg__iend__SWIG(std::vector< unsigned char > *self){
                std::vector_iterator<unsigned char,std::allocator< unsigned char >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__erase__SWIG_0(std::vector< unsigned char > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__erase__SWIG_1(std::vector< unsigned char > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN short std_vector_Sl_short_Sg____getitem____SWIG(std::vector< short > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_short_Sg____setitem____SWIG(std::vector< short > *self,size_t i,short val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< short,std::allocator< short > > std_vector_Sl_short_Sg__ibegin__SWIG(std::vector< short > *self){
                std::vector_iterator<short,std::allocator< short >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< short,std::allocator< short > > std_vector_Sl_short_Sg__iend__SWIG(std::vector< short > *self){
                std::vector_iterator<short,std::allocator< short >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_short_Sg__erase__SWIG_0(std::vector< short > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_short_Sg__erase__SWIG_1(std::vector< short > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN unsigned short std_vector_Sl_unsigned_SS_short_Sg____getitem____SWIG(std::vector< unsigned short > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_unsigned_SS_short_Sg____setitem____SWIG(std::vector< unsigned short > *self,size_t i,unsigned short val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< unsigned short,std::allocator< unsigned short > > std_vector_Sl_unsigned_SS_short_Sg__ibegin__SWIG(std::vector< unsigned short > *self){
                std::vector_iterator<unsigned short,std::allocator< unsigned short >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< unsigned short,std::allocator< unsigned short > > std_vector_Sl_unsigned_SS_short_Sg__iend__SWIG(std::vector< unsigned short > *self){
                std::vector_iterator<unsigned short,std::allocator< unsigned short >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_short_Sg__erase__SWIG_0(std::vector< unsigned short > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_unsigned_SS_short_Sg__erase__SWIG_1(std::vector< unsigned short > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN int std_vector_Sl_int_Sg____getitem____SWIG(std::vector< int > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG(std::vector< int > *self,size_t i,int val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< int,std::allocator< int > > std_vector_Sl_int_Sg__ibegin__SWIG(std::vector< int > *self){
                std::vector_iterator<int,std::allocator< int >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< int,std::allocator< int > > std_vector_Sl_int_Sg__iend__SWIG(std::vector< int > *self){
                std::vector_iterator<int,std::allocator< int >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_int_Sg__erase__SWIG_0(std::vector< int > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_int_Sg__erase__SWIG_1(std::vector< int > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN unsigned int std_vector_Sl_unsigned_SS_int_Sg____getitem____SWIG(std::vector< unsigned int > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg____setitem____SWIG(std::vector< unsigned int > *self,size_t i,unsigned int val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< unsigned int,std::allocator< unsigned int > > std_vector_Sl_unsigned_SS_int_Sg__ibegin__SWIG(std::vector< unsigned int > *self){
                std::vector_iterator<unsigned int,std::allocator< unsigned int >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< unsigned int,std::allocator< unsigned int > > std_vector_Sl_unsigned_SS_int_Sg__iend__SWIG(std::vector< unsigned int > *self){
                std::vector_iterator<unsigned int,std::allocator< unsigned int >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__erase__SWIG_0(std::vector< unsigned int > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__erase__SWIG_1(std::vector< unsigned int > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN long std_vector_Sl_long_Sg____getitem____SWIG(std::vector< long > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_long_Sg____setitem____SWIG(std::vector< long > *self,size_t i,long val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< long,std::allocator< long > > std_vector_Sl_long_Sg__ibegin__SWIG(std::vector< long > *self){
                std::vector_iterator<long,std::allocator< long >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< long,std::allocator< long > > std_vector_Sl_long_Sg__iend__SWIG(std::vector< long > *self){
                std::vector_iterator<long,std::allocator< long >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_long_Sg__erase__SWIG_0(std::vector< long > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_long_Sg__erase__SWIG_1(std::vector< long > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN unsigned long std_vector_Sl_unsigned_SS_long_Sg____getitem____SWIG(std::vector< unsigned long > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg____setitem____SWIG(std::vector< unsigned long > *self,size_t i,unsigned long val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< unsigned long,std::allocator< unsigned long > > std_vector_Sl_unsigned_SS_long_Sg__ibegin__SWIG(std::vector< unsigned long > *self){
                std::vector_iterator<unsigned long,std::allocator< unsigned long >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< unsigned long,std::allocator< unsigned long > > std_vector_Sl_unsigned_SS_long_Sg__iend__SWIG(std::vector< unsigned long > *self){
                std::vector_iterator<unsigned long,std::allocator< unsigned long >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg__erase__SWIG_0(std::vector< unsigned long > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg__erase__SWIG_1(std::vector< unsigned long > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN void AudioDSP_sample_vector_Sl_DspFloatType_Sg__erase_SWIG_0_0(AudioDSP::sample_vector< DspFloatType > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void AudioDSP_sample_vector_Sl_DspFloatType_Sg__erase_SWIG_0_1(AudioDSP::sample_vector< DspFloatType > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN double AudioDSP_sample_vector_Sl_DspFloatType_Sg____getitem____SWIG(AudioDSP::sample_vector< DspFloatType > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void AudioDSP_sample_vector_Sl_DspFloatType_Sg____setitem__SWIG(AudioDSP::sample_vector< DspFloatType > *self,size_t i,double const v){ (*self)[i-1] = v; }
SWIGINTERN AudioDSP::sample_vector< double > AudioDSP_sample_vector_Sl_DspFloatType_Sg____add____SWIG_0(AudioDSP::sample_vector< DspFloatType > *self,AudioDSP::sample_vector< double > const &v){
                assert(self->size() == v.size());
                sample_vector<double> r(v.size());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = (*self)[i] + v[i];
                return r;
            }
SWIGINTERN AudioDSP::sample_vector< double > AudioDSP_sample_vector_Sl_DspFloatType_Sg____sub____SWIG_0(AudioDSP::sample_vector< DspFloatType > *self,AudioDSP::sample_vector< double > const &v){
                assert(self->size() == v.size());
                sample_vector<double> r(v.size());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = (*self)[i] - v[i];
                return r;
            }
SWIGINTERN AudioDSP::sample_vector< double > AudioDSP_sample_vector_Sl_DspFloatType_Sg____mul____SWIG_0(AudioDSP::sample_vector< DspFloatType > *self,AudioDSP::sample_vector< double > const &v){
                assert(self->size() == v.size());
                sample_vector<double> r(v.size());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = (*self)[i] * v[i];
                return r;
            }
SWIGINTERN AudioDSP::sample_vector< double > AudioDSP_sample_vector_Sl_DspFloatType_Sg____div____SWIG_0(AudioDSP::sample_vector< DspFloatType > *self,AudioDSP::sample_vector< double > const &v){
                assert(self->size() == v.size());
                sample_vector<double> r(v.size());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = (*self)[i] / v[i];
                return r;
            }
SWIGINTERN AudioDSP::sample_vector< double > AudioDSP_sample_vector_Sl_DspFloatType_Sg____pow____SWIG_0(AudioDSP::sample_vector< DspFloatType > *self,AudioDSP::sample_vector< double > const &v){
                assert(self->size() == v.size());
                sample_vector<double> r(v.size());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = std::pow((*self)[i],v[i]);
                return r;
            }
SWIGINTERN AudioDSP::sample_vector< double > AudioDSP_sample_vector_Sl_DspFloatType_Sg____add____SWIG_1(AudioDSP::sample_vector< DspFloatType > *self,double const x){
                assert(self->size() == self->size());
                sample_vector<double> r(self->size());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = (*self)[i] + x;
                return r;
            }
SWIGINTERN AudioDSP::sample_vector< double > AudioDSP_sample_vector_Sl_DspFloatType_Sg____sub____SWIG_1(AudioDSP::sample_vector< DspFloatType > *self,double const x){
                assert(self->size() == self->size());
                sample_vector<double> r(self->size());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = (*self)[i] - x;
                return r;
            }
SWIGINTERN AudioDSP::sample_vector< double > AudioDSP_sample_vector_Sl_DspFloatType_Sg____mul____SWIG_1(AudioDSP::sample_vector< DspFloatType > *self,double const x){
                assert(self->size() == self->size());
                sample_vector<double> r(self->size());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = (*self)[i] * x;
                return r;
            }
SWIGINTERN AudioDSP::sample_vector< double > AudioDSP_sample_vector_Sl_DspFloatType_Sg____div____SWIG_1(AudioDSP::sample_vector< DspFloatType > *self,double const x){
                assert(self->size() == self->size());
                sample_vector<double> r(self->size());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = (*self)[i] / x;
                return r;
            }
SWIGINTERN AudioDSP::sample_vector< double > AudioDSP_sample_vector_Sl_DspFloatType_Sg____pow____SWIG_1(AudioDSP::sample_vector< DspFloatType > *self,double const x){
                assert(self->size() == self->size());
                sample_vector<double> r(self->size());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = std::pow((*self)[i],x);
                return r;
            }
SWIGINTERN AudioDSP::sample_vector< double > AudioDSP_sample_vector_Sl_DspFloatType_Sg____neg____SWIG(AudioDSP::sample_vector< DspFloatType > *self){
                assert(self->size() == self->size());
                sample_vector<double> r(self->size());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = -(*self)[i];
                return r;
            }
SWIGINTERN void AudioDSP_complex_vector_Sl_DspFloatType_Sg__erase_SWIG_0_0(AudioDSP::complex_vector< DspFloatType > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void AudioDSP_complex_vector_Sl_DspFloatType_Sg__erase_SWIG_0_1(AudioDSP::complex_vector< DspFloatType > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::complex< double > AudioDSP_complex_vector_Sl_DspFloatType_Sg____getitem____SWIG(AudioDSP::complex_vector< DspFloatType > *self,size_t i){ return (*self)[i]; }
SWIGINTERN void AudioDSP_complex_vector_Sl_DspFloatType_Sg____setitem____SWIG(AudioDSP::complex_vector< DspFloatType > *self,size_t i,std::complex< double > const &v){ (*self)[i] = v; }
SWIGINTERN std::complex< double > *AudioDSP_complex_vector_Sl_DspFloatType_Sg__data__SWIG(AudioDSP::complex_vector< DspFloatType > *self){ return self->data(); }
SWIGINTERN AudioDSP::complex_vector< double > AudioDSP_complex_vector_Sl_DspFloatType_Sg____add____SWIG_0(AudioDSP::complex_vector< DspFloatType > *self,AudioDSP::complex_vector< double > const &v){
                assert(self->size() == v.size());
                complex_vector<double> r(v.size());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = (*self)[i] + v[i];
                return r;
            }
SWIGINTERN AudioDSP::complex_vector< double > AudioDSP_complex_vector_Sl_DspFloatType_Sg____sub____SWIG_0(AudioDSP::complex_vector< DspFloatType > *self,AudioDSP::complex_vector< double > const &v){
                assert(self->size() == v.size());
                complex_vector<double> r(v.size());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = (*self)[i] - v[i];
                return r;
            }
SWIGINTERN AudioDSP::complex_vector< double > AudioDSP_complex_vector_Sl_DspFloatType_Sg____mul____SWIG_0(AudioDSP::complex_vector< DspFloatType > *self,AudioDSP::complex_vector< double > const &v){
                assert(self->size() == v.size());
                complex_vector<double> r(v.size());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = (*self)[i] * v[i];
                return r;
            }
SWIGINTERN AudioDSP::complex_vector< double > AudioDSP_complex_vector_Sl_DspFloatType_Sg____div____SWIG_0(AudioDSP::complex_vector< DspFloatType > *self,AudioDSP::complex_vector< double > const &v){
                assert(self->size() == v.size());
                complex_vector<double> r(v.size());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = (*self)[i] / v[i];
                return r;
            }
SWIGINTERN AudioDSP::complex_vector< double > AudioDSP_complex_vector_Sl_DspFloatType_Sg____pow____SWIG_0(AudioDSP::complex_vector< DspFloatType > *self,AudioDSP::complex_vector< double > const &v){
                assert(self->size() == v.size());
                complex_vector<double> r(v.size());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = std::pow((*self)[i],v[i]);
                return r;
            }
SWIGINTERN AudioDSP::complex_vector< double > AudioDSP_complex_vector_Sl_DspFloatType_Sg____add____SWIG_1(AudioDSP::complex_vector< DspFloatType > *self,double const x){
                assert(self->size() == self->size());
                complex_vector<double> r(self->size());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = (*self)[i] + x;
                return r;
            }
SWIGINTERN AudioDSP::complex_vector< double > AudioDSP_complex_vector_Sl_DspFloatType_Sg____sub____SWIG_1(AudioDSP::complex_vector< DspFloatType > *self,double const x){
                assert(self->size() == self->size());
                complex_vector<double> r(self->size());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = (*self)[i] - x;
                return r;
            }
SWIGINTERN AudioDSP::complex_vector< double > AudioDSP_complex_vector_Sl_DspFloatType_Sg____mul____SWIG_1(AudioDSP::complex_vector< DspFloatType > *self,double const x){
                assert(self->size() == self->size());
                complex_vector<double> r(self->size());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = (*self)[i] * x;
                return r;
            }
SWIGINTERN AudioDSP::complex_vector< double > AudioDSP_complex_vector_Sl_DspFloatType_Sg____div____SWIG_1(AudioDSP::complex_vector< DspFloatType > *self,double const x){
                assert(self->size() == self->size());
                complex_vector<double> r(self->size());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = (*self)[i] / x;
                return r;
            }
SWIGINTERN AudioDSP::complex_vector< double > AudioDSP_complex_vector_Sl_DspFloatType_Sg____pow____SWIG_1(AudioDSP::complex_vector< DspFloatType > *self,double const x){
                assert(self->size() == self->size());
                complex_vector<double> r(self->size());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = std::pow((*self)[i],x);
                return r;
            }
SWIGINTERN AudioDSP::complex_vector< double > AudioDSP_complex_vector_Sl_DspFloatType_Sg____neg____SWIG(AudioDSP::complex_vector< DspFloatType > *self){
                assert(self->size() == self->size());
                complex_vector<double> r(self->size());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = -(*self)[i];
                return r;
            }
SWIGINTERN void AudioDSP_sample_matrix_Sl_DspFloatType_Sg__erase_SWIG_0_0(AudioDSP::sample_matrix< DspFloatType > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void AudioDSP_sample_matrix_Sl_DspFloatType_Sg__erase_SWIG_0_1(AudioDSP::sample_matrix< DspFloatType > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN AudioDSP::sample_matrix_view< double > AudioDSP_sample_matrix_Sl_DspFloatType_Sg____getitem____SWIG(AudioDSP::sample_matrix< DspFloatType > *self,size_t i){
                sample_matrix_view<double> view(self,i*self->N);
                return view;
            }
SWIGINTERN AudioDSP::sample_matrix< double > AudioDSP_sample_matrix_Sl_DspFloatType_Sg____add____SWIG_0(AudioDSP::sample_matrix< DspFloatType > *self,AudioDSP::sample_matrix< double > const &v){
                assert(self->size() == v.size());
                sample_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = (*self)[i] + v[i];
                return r;
            }
SWIGINTERN AudioDSP::sample_matrix< double > AudioDSP_sample_matrix_Sl_DspFloatType_Sg____sub____SWIG_0(AudioDSP::sample_matrix< DspFloatType > *self,AudioDSP::sample_matrix< double > const &v){
                assert(self->size() == v.size());
                sample_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = (*self)[i] - v[i];
                return r;
            }
SWIGINTERN AudioDSP::sample_matrix< double > AudioDSP_sample_matrix_Sl_DspFloatType_Sg____mul____SWIG_0(AudioDSP::sample_matrix< DspFloatType > *self,AudioDSP::sample_matrix< double > const &v){
                assert(self->cols() == v.rows());
                sample_matrix<double> r(self->rows(),v.cols());
                
                for(size_t i = 0; i < self->rows(); i++)
                {                    
                    for(size_t j = 0; j < v.cols(); j++)
                    {
                        double sum = 0;
                        for(size_t k = 0; k < self->cols(); k++)
                        {
                            sum += (*self)(i,k) * v(i,j);
                        }
                        r(i,j) = sum;
                    }
                }
                return r;
            }
SWIGINTERN AudioDSP::sample_matrix< double > AudioDSP_sample_matrix_Sl_DspFloatType_Sg____div____SWIG_0(AudioDSP::sample_matrix< DspFloatType > *self,AudioDSP::sample_matrix< double > const &v){
                assert(self->size() == v.size());
                sample_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = (*self)[i] / v[i];
                return r;
            }
SWIGINTERN AudioDSP::sample_matrix< double > AudioDSP_sample_matrix_Sl_DspFloatType_Sg____pow____SWIG_0(AudioDSP::sample_matrix< DspFloatType > *self,AudioDSP::sample_matrix< double > const &v){
                assert(self->size() == v.size());
                sample_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = std::pow((*self)[i],v[i]);
                return r;
            }
SWIGINTERN AudioDSP::sample_matrix< double > AudioDSP_sample_matrix_Sl_DspFloatType_Sg____add____SWIG_1(AudioDSP::sample_matrix< DspFloatType > *self,double const &x){
                assert(self->size() == self->size());
                sample_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = (*self)[i] + x;
                return r;
            }
SWIGINTERN AudioDSP::sample_matrix< double > AudioDSP_sample_matrix_Sl_DspFloatType_Sg____sub____SWIG_1(AudioDSP::sample_matrix< DspFloatType > *self,double const &x){
                assert(self->size() == self->size());
                sample_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = (*self)[i] - x;
                return r;
            }
SWIGINTERN AudioDSP::sample_matrix< double > AudioDSP_sample_matrix_Sl_DspFloatType_Sg____mul____SWIG_1(AudioDSP::sample_matrix< DspFloatType > *self,double const &x){
                assert(self->size() == self->size());
                sample_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = (*self)[i] * x;
                return r;
            }
SWIGINTERN AudioDSP::sample_matrix< double > AudioDSP_sample_matrix_Sl_DspFloatType_Sg____div____SWIG_1(AudioDSP::sample_matrix< DspFloatType > *self,double const &x){
                assert(self->size() == self->size());
                sample_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = (*self)[i] / x;
                return r;
            }
SWIGINTERN AudioDSP::sample_matrix< double > AudioDSP_sample_matrix_Sl_DspFloatType_Sg____pow____SWIG_1(AudioDSP::sample_matrix< DspFloatType > *self,double const &x){
                assert(self->size() == self->size());
                sample_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = std::pow((*self)[i],x);
                return r;
            }
SWIGINTERN AudioDSP::sample_matrix< double > AudioDSP_sample_matrix_Sl_DspFloatType_Sg____neg____SWIG(AudioDSP::sample_matrix< DspFloatType > *self){
                assert(self->size() == self->size());
                sample_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = -(*self)[i];
                return r;
            }
SWIGINTERN void AudioDSP_complex_matrix_Sl_DspFloatType_Sg__erase_SWIG_0_0(AudioDSP::complex_matrix< DspFloatType > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void AudioDSP_complex_matrix_Sl_DspFloatType_Sg__erase_SWIG_0_1(AudioDSP::complex_matrix< DspFloatType > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN AudioDSP::complex_matrix< double > AudioDSP_complex_matrix_Sl_DspFloatType_Sg____add____SWIG_0(AudioDSP::complex_matrix< DspFloatType > *self,AudioDSP::complex_matrix< double > const &v){
                assert(self->size() == v.size());
                complex_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = (*self)[i] + v[i];
                return r;
            }
SWIGINTERN AudioDSP::complex_matrix< double > AudioDSP_complex_matrix_Sl_DspFloatType_Sg____sub____SWIG_0(AudioDSP::complex_matrix< DspFloatType > *self,AudioDSP::complex_matrix< double > const &v){
                assert(self->size() == v.size());
                complex_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = (*self)[i] - v[i];
                return r;
            }
SWIGINTERN AudioDSP::complex_matrix< double > AudioDSP_complex_matrix_Sl_DspFloatType_Sg____mul____SWIG_0(AudioDSP::complex_matrix< DspFloatType > *self,AudioDSP::complex_matrix< double > const &v){
                assert(self->size() == v.size());
                complex_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < self->rows(); i++)
                {                    
                    for(size_t j = 0; j < v.cols(); j++)
                    {
                        std::complex<double> sum(0,0);
                        for(size_t k = 0; k < self->cols(); k++)
                        {
                            sum += (*self)(i,k) * v(i,j);
                        }
                        r(i,j) = sum;
                    }
                }
                return r;
            }
SWIGINTERN AudioDSP::complex_matrix< double > AudioDSP_complex_matrix_Sl_DspFloatType_Sg____div____SWIG_0(AudioDSP::complex_matrix< DspFloatType > *self,AudioDSP::complex_matrix< double > const &v){
                assert(self->size() == v.size());
                complex_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = (*self)[i] / v[i];
                return r;
            }
SWIGINTERN AudioDSP::complex_matrix< double > AudioDSP_complex_matrix_Sl_DspFloatType_Sg____pow____SWIG_0(AudioDSP::complex_matrix< DspFloatType > *self,AudioDSP::complex_matrix< double > const &v){
                assert(self->size() == v.size());
                complex_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < v.size(); i++) r[i] = std::pow((*self)[i],v[i]);
                return r;
            }
SWIGINTERN AudioDSP::complex_matrix< double > AudioDSP_complex_matrix_Sl_DspFloatType_Sg____add____SWIG_1(AudioDSP::complex_matrix< DspFloatType > *self,std::complex< double > const &x){
                assert(self->size() == self->size());
                complex_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = (*self)[i] + x;
                return r;
            }
SWIGINTERN AudioDSP::complex_matrix< double > AudioDSP_complex_matrix_Sl_DspFloatType_Sg____sub____SWIG_1(AudioDSP::complex_matrix< DspFloatType > *self,std::complex< double > const &x){
                assert(self->size() == self->size());
                complex_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = (*self)[i] - x;
                return r;
            }
SWIGINTERN AudioDSP::complex_matrix< double > AudioDSP_complex_matrix_Sl_DspFloatType_Sg____mul____SWIG_1(AudioDSP::complex_matrix< DspFloatType > *self,std::complex< double > const &x){
                assert(self->size() == self->size());
                complex_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = (*self)[i] * x;
                return r;
            }
SWIGINTERN AudioDSP::complex_matrix< double > AudioDSP_complex_matrix_Sl_DspFloatType_Sg____div____SWIG_1(AudioDSP::complex_matrix< DspFloatType > *self,std::complex< double > const &x){
                assert(self->size() == self->size());
                complex_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = (*self)[i] / x;
                return r;
            }
SWIGINTERN AudioDSP::complex_matrix< double > AudioDSP_complex_matrix_Sl_DspFloatType_Sg____pow____SWIG_1(AudioDSP::complex_matrix< DspFloatType > *self,std::complex< double > const &x){
                assert(self->size() == self->size());
                complex_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = std::pow((*self)[i],x);
                return r;
            }
SWIGINTERN AudioDSP::complex_matrix< double > AudioDSP_complex_matrix_Sl_DspFloatType_Sg____neg____SWIG(AudioDSP::complex_matrix< DspFloatType > *self){
                assert(self->size() == self->size());
                complex_matrix<double> r(self->rows(),self->cols());
                
                for(size_t i = 0; i < self->size(); i++) r[i] = -(*self)[i];
                return r;
            }
SWIGINTERN AudioDSP::sample_vector< double > AudioDSP_Window_Sl_DspFloatType_Sg____mul____SWIG(AudioDSP::Window< DspFloatType > *self,AudioDSP::sample_vector< double > const &v){
                assert(self->size() == v.size());
                sample_vector<double> r(self->size());
                
                for(size_t i = 0; i < self->size(); i++)
                    r[i] = (*self)[i] * v[i];
                return r;
            }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_float_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::max",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::epsilon",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::round_error",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::infinity",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::quiet_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::signaling_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::denorm_min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< float >::numeric_limits",0,0)
  result = (std::numeric_limits< float > *)new std::numeric_limits< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_numeric_limits(void *obj) {
std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_numeric_limits_methods[]= {
    { "min", _wrap_float_numeric_limits_min},
    { "max", _wrap_float_numeric_limits_max},
    { "epsilon", _wrap_float_numeric_limits_epsilon},
    { "round_error", _wrap_float_numeric_limits_round_error},
    { "infinity", _wrap_float_numeric_limits_infinity},
    { "quiet_NaN", _wrap_float_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_float_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_float_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_float_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_float_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_numeric_limits_Sf_SwigStatic = {
    "float_numeric_limits",
    swig_float_numeric_limits_Sf_SwigStatic_methods,
    swig_float_numeric_limits_Sf_SwigStatic_attributes,
    swig_float_numeric_limits_Sf_SwigStatic_constants,
    swig_float_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_numeric_limits_bases[] = {0};
static const char *swig_float_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_float_numeric_limits = { "float_numeric_limits", "float_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_float_t,_proxy__wrap_new_float_numeric_limits, swig_delete_float_numeric_limits, swig_float_numeric_limits_methods, swig_float_numeric_limits_attributes, &swig_float_numeric_limits_Sf_SwigStatic, swig_float_numeric_limits_meta, swig_float_numeric_limits_bases, swig_float_numeric_limits_base_names };

static int _wrap_double_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::max",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::epsilon",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::round_error",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::infinity",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::quiet_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::signaling_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::denorm_min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< double >::numeric_limits",0,0)
  result = (std::numeric_limits< double > *)new std::numeric_limits< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_numeric_limits(void *obj) {
std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_numeric_limits_methods[]= {
    { "min", _wrap_double_numeric_limits_min},
    { "max", _wrap_double_numeric_limits_max},
    { "epsilon", _wrap_double_numeric_limits_epsilon},
    { "round_error", _wrap_double_numeric_limits_round_error},
    { "infinity", _wrap_double_numeric_limits_infinity},
    { "quiet_NaN", _wrap_double_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_double_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_double_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_double_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_double_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_numeric_limits_Sf_SwigStatic = {
    "double_numeric_limits",
    swig_double_numeric_limits_Sf_SwigStatic_methods,
    swig_double_numeric_limits_Sf_SwigStatic_attributes,
    swig_double_numeric_limits_Sf_SwigStatic_constants,
    swig_double_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_numeric_limits_bases[] = {0};
static const char *swig_double_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_double_numeric_limits = { "double_numeric_limits", "double_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_double_t,_proxy__wrap_new_double_numeric_limits, swig_delete_double_numeric_limits, swig_double_numeric_limits_methods, swig_double_numeric_limits_attributes, &swig_double_numeric_limits_Sf_SwigStatic, swig_double_numeric_limits_meta, swig_double_numeric_limits_bases, swig_double_numeric_limits_base_names };

static int _wrap_int_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::max",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::epsilon",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::round_error",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::infinity",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::quiet_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::signaling_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::denorm_min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< int >::numeric_limits",0,0)
  result = (std::numeric_limits< int > *)new std::numeric_limits< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int_numeric_limits(void *obj) {
std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int_numeric_limits_methods[]= {
    { "min", _wrap_int_numeric_limits_min},
    { "max", _wrap_int_numeric_limits_max},
    { "epsilon", _wrap_int_numeric_limits_epsilon},
    { "round_error", _wrap_int_numeric_limits_round_error},
    { "infinity", _wrap_int_numeric_limits_infinity},
    { "quiet_NaN", _wrap_int_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_int_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_int_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_int_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_int_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int_numeric_limits_Sf_SwigStatic = {
    "int_numeric_limits",
    swig_int_numeric_limits_Sf_SwigStatic_methods,
    swig_int_numeric_limits_Sf_SwigStatic_attributes,
    swig_int_numeric_limits_Sf_SwigStatic_constants,
    swig_int_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int_numeric_limits_bases[] = {0};
static const char *swig_int_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_int_numeric_limits = { "int_numeric_limits", "int_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_int_t,_proxy__wrap_new_int_numeric_limits, swig_delete_int_numeric_limits, swig_int_numeric_limits_methods, swig_int_numeric_limits_attributes, &swig_int_numeric_limits_Sf_SwigStatic, swig_int_numeric_limits_meta, swig_int_numeric_limits_bases, swig_int_numeric_limits_base_names };

static int _wrap_uint_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::max",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::epsilon",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::round_error",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::infinity",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::quiet_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::signaling_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::denorm_min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned int > *)new std::numeric_limits< unsigned int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint_numeric_limits(void *obj) {
std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_methods[]= {
    { "min", _wrap_uint_numeric_limits_min},
    { "max", _wrap_uint_numeric_limits_max},
    { "epsilon", _wrap_uint_numeric_limits_epsilon},
    { "round_error", _wrap_uint_numeric_limits_round_error},
    { "infinity", _wrap_uint_numeric_limits_infinity},
    { "quiet_NaN", _wrap_uint_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_uint_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_uint_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_uint_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uint_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint_numeric_limits_Sf_SwigStatic = {
    "uint_numeric_limits",
    swig_uint_numeric_limits_Sf_SwigStatic_methods,
    swig_uint_numeric_limits_Sf_SwigStatic_attributes,
    swig_uint_numeric_limits_Sf_SwigStatic_constants,
    swig_uint_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint_numeric_limits_bases[] = {0};
static const char *swig_uint_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_uint_numeric_limits = { "uint_numeric_limits", "uint_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,_proxy__wrap_new_uint_numeric_limits, swig_delete_uint_numeric_limits, swig_uint_numeric_limits_methods, swig_uint_numeric_limits_attributes, &swig_uint_numeric_limits_Sf_SwigStatic, swig_uint_numeric_limits_meta, swig_uint_numeric_limits_bases, swig_uint_numeric_limits_base_names };

static int _wrap_short_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::max",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::epsilon",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::round_error",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::infinity",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::quiet_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::signaling_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::denorm_min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< short >::numeric_limits",0,0)
  result = (std::numeric_limits< short > *)new std::numeric_limits< short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_short_numeric_limits(void *obj) {
std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_short_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_short_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_short_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_short_numeric_limits_methods[]= {
    { "min", _wrap_short_numeric_limits_min},
    { "max", _wrap_short_numeric_limits_max},
    { "epsilon", _wrap_short_numeric_limits_epsilon},
    { "round_error", _wrap_short_numeric_limits_round_error},
    { "infinity", _wrap_short_numeric_limits_infinity},
    { "quiet_NaN", _wrap_short_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_short_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_short_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_short_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_short_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_short_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_short_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_short_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_short_numeric_limits_Sf_SwigStatic = {
    "short_numeric_limits",
    swig_short_numeric_limits_Sf_SwigStatic_methods,
    swig_short_numeric_limits_Sf_SwigStatic_attributes,
    swig_short_numeric_limits_Sf_SwigStatic_constants,
    swig_short_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_short_numeric_limits_bases[] = {0};
static const char *swig_short_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_short_numeric_limits = { "short_numeric_limits", "short_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_short_t,_proxy__wrap_new_short_numeric_limits, swig_delete_short_numeric_limits, swig_short_numeric_limits_methods, swig_short_numeric_limits_attributes, &swig_short_numeric_limits_Sf_SwigStatic, swig_short_numeric_limits_meta, swig_short_numeric_limits_bases, swig_short_numeric_limits_base_names };

static int _wrap_ushort_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::max",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::epsilon",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::round_error",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::infinity",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::quiet_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::signaling_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::denorm_min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned short > *)new std::numeric_limits< unsigned short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ushort_numeric_limits(void *obj) {
std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ushort_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ushort_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ushort_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_methods[]= {
    { "min", _wrap_ushort_numeric_limits_min},
    { "max", _wrap_ushort_numeric_limits_max},
    { "epsilon", _wrap_ushort_numeric_limits_epsilon},
    { "round_error", _wrap_ushort_numeric_limits_round_error},
    { "infinity", _wrap_ushort_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ushort_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ushort_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ushort_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ushort_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ushort_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ushort_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ushort_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ushort_numeric_limits_Sf_SwigStatic = {
    "ushort_numeric_limits",
    swig_ushort_numeric_limits_Sf_SwigStatic_methods,
    swig_ushort_numeric_limits_Sf_SwigStatic_attributes,
    swig_ushort_numeric_limits_Sf_SwigStatic_constants,
    swig_ushort_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ushort_numeric_limits_bases[] = {0};
static const char *swig_ushort_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ushort_numeric_limits = { "ushort_numeric_limits", "ushort_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,_proxy__wrap_new_ushort_numeric_limits, swig_delete_ushort_numeric_limits, swig_ushort_numeric_limits_methods, swig_ushort_numeric_limits_attributes, &swig_ushort_numeric_limits_Sf_SwigStatic, swig_ushort_numeric_limits_meta, swig_ushort_numeric_limits_bases, swig_ushort_numeric_limits_base_names };

static int _wrap_long_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::max",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::epsilon",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::round_error",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::infinity",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::quiet_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::signaling_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::denorm_min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long >::numeric_limits",0,0)
  result = (std::numeric_limits< long > *)new std::numeric_limits< long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_long_numeric_limits(void *obj) {
std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_long_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_long_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_long_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_long_numeric_limits_methods[]= {
    { "min", _wrap_long_numeric_limits_min},
    { "max", _wrap_long_numeric_limits_max},
    { "epsilon", _wrap_long_numeric_limits_epsilon},
    { "round_error", _wrap_long_numeric_limits_round_error},
    { "infinity", _wrap_long_numeric_limits_infinity},
    { "quiet_NaN", _wrap_long_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_long_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_long_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_long_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_long_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_long_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_long_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_long_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_long_numeric_limits_Sf_SwigStatic = {
    "long_numeric_limits",
    swig_long_numeric_limits_Sf_SwigStatic_methods,
    swig_long_numeric_limits_Sf_SwigStatic_attributes,
    swig_long_numeric_limits_Sf_SwigStatic_constants,
    swig_long_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_long_numeric_limits_bases[] = {0};
static const char *swig_long_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_long_numeric_limits = { "long_numeric_limits", "long_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_t,_proxy__wrap_new_long_numeric_limits, swig_delete_long_numeric_limits, swig_long_numeric_limits_methods, swig_long_numeric_limits_attributes, &swig_long_numeric_limits_Sf_SwigStatic, swig_long_numeric_limits_meta, swig_long_numeric_limits_bases, swig_long_numeric_limits_base_names };

static int _wrap_ulong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::max",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::epsilon",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::round_error",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::infinity",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::quiet_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::signaling_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::denorm_min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long > *)new std::numeric_limits< unsigned long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ulong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ulong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ulong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ulong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_methods[]= {
    { "min", _wrap_ulong_numeric_limits_min},
    { "max", _wrap_ulong_numeric_limits_max},
    { "epsilon", _wrap_ulong_numeric_limits_epsilon},
    { "round_error", _wrap_ulong_numeric_limits_round_error},
    { "infinity", _wrap_ulong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ulong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ulong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ulong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ulong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ulong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ulong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ulong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ulong_numeric_limits_Sf_SwigStatic = {
    "ulong_numeric_limits",
    swig_ulong_numeric_limits_Sf_SwigStatic_methods,
    swig_ulong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ulong_numeric_limits_Sf_SwigStatic_constants,
    swig_ulong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ulong_numeric_limits_bases[] = {0};
static const char *swig_ulong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ulong_numeric_limits = { "ulong_numeric_limits", "ulong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,_proxy__wrap_new_ulong_numeric_limits, swig_delete_ulong_numeric_limits, swig_ulong_numeric_limits_methods, swig_ulong_numeric_limits_attributes, &swig_ulong_numeric_limits_Sf_SwigStatic, swig_ulong_numeric_limits_meta, swig_ulong_numeric_limits_bases, swig_ulong_numeric_limits_base_names };

static int _wrap_llong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::max",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::epsilon",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::round_error",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::infinity",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::quiet_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::signaling_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::denorm_min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long long >::numeric_limits",0,0)
  result = (std::numeric_limits< long long > *)new std::numeric_limits< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_llong_numeric_limits(void *obj) {
std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_llong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_llong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_llong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_methods[]= {
    { "min", _wrap_llong_numeric_limits_min},
    { "max", _wrap_llong_numeric_limits_max},
    { "epsilon", _wrap_llong_numeric_limits_epsilon},
    { "round_error", _wrap_llong_numeric_limits_round_error},
    { "infinity", _wrap_llong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_llong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_llong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_llong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_llong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_llong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_llong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_llong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_llong_numeric_limits_Sf_SwigStatic = {
    "llong_numeric_limits",
    swig_llong_numeric_limits_Sf_SwigStatic_methods,
    swig_llong_numeric_limits_Sf_SwigStatic_attributes,
    swig_llong_numeric_limits_Sf_SwigStatic_constants,
    swig_llong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_llong_numeric_limits_bases[] = {0};
static const char *swig_llong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_llong_numeric_limits = { "llong_numeric_limits", "llong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_long_t,_proxy__wrap_new_llong_numeric_limits, swig_delete_llong_numeric_limits, swig_llong_numeric_limits_methods, swig_llong_numeric_limits_attributes, &swig_llong_numeric_limits_Sf_SwigStatic, swig_llong_numeric_limits_meta, swig_llong_numeric_limits_bases, swig_llong_numeric_limits_base_names };

static int _wrap_ullong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::max",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::epsilon",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::round_error",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::infinity",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::quiet_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::signaling_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::denorm_min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long long > *)new std::numeric_limits< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ullong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ullong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ullong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ullong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_methods[]= {
    { "min", _wrap_ullong_numeric_limits_min},
    { "max", _wrap_ullong_numeric_limits_max},
    { "epsilon", _wrap_ullong_numeric_limits_epsilon},
    { "round_error", _wrap_ullong_numeric_limits_round_error},
    { "infinity", _wrap_ullong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ullong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ullong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ullong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ullong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ullong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ullong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ullong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ullong_numeric_limits_Sf_SwigStatic = {
    "ullong_numeric_limits",
    swig_ullong_numeric_limits_Sf_SwigStatic_methods,
    swig_ullong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ullong_numeric_limits_Sf_SwigStatic_constants,
    swig_ullong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ullong_numeric_limits_bases[] = {0};
static const char *swig_ullong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ullong_numeric_limits = { "ullong_numeric_limits", "ullong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,_proxy__wrap_new_ullong_numeric_limits, swig_delete_ullong_numeric_limits, swig_ullong_numeric_limits_methods, swig_ullong_numeric_limits_attributes, &swig_ullong_numeric_limits_Sf_SwigStatic, swig_ullong_numeric_limits_meta, swig_ullong_numeric_limits_bases, swig_ullong_numeric_limits_base_names };

static int _wrap_Huge(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Ops::Huge",0,0)
  result = (double)Ops::Huge();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Hugef(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("Ops::Hugef",0,0)
  result = (float)Ops::Hugef();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Infinity(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Ops::Infinity",0,0)
  result = (double)Ops::Infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NaN(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Ops::NaN",0,0)
  result = (double)Ops::NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Random(lua_State* L) {
  int SWIG_arg = 0;
  Random *result = 0 ;
  
  SWIG_check_num_args("Random::Random",0,0)
  result = (Random *)new Random();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Random,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_seed(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("Random::seed",0,0)
  Random::seed();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_frand(lua_State* L) {
  int SWIG_arg = 0;
  Random *arg1 = (Random *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Random::frand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Random::frand",1,"Random *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Random,0))){
    SWIG_fail_ptr("Random_frand",1,SWIGTYPE_p_Random);
  }
  
  result = (DspFloatType)(arg1)->frand();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_rand(lua_State* L) {
  int SWIG_arg = 0;
  Random *arg1 = (Random *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Random::rand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Random::rand",1,"Random *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Random,0))){
    SWIG_fail_ptr("Random_rand",1,SWIGTYPE_p_Random);
  }
  
  result = (DspFloatType)(arg1)->rand();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_randint(lua_State* L) {
  int SWIG_arg = 0;
  Random *arg1 = (Random *) 0 ;
  int arg2 ;
  int arg3 ;
  uint64_t result;
  
  SWIG_check_num_args("Random::randint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Random::randint",1,"Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Random::randint",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Random::randint",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Random,0))){
    SWIG_fail_ptr("Random_randint",1,SWIGTYPE_p_Random);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (uint64_t)(arg1)->randint(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_flip(lua_State* L) {
  int SWIG_arg = 0;
  Random *arg1 = (Random *) 0 ;
  DspFloatType arg2 ;
  bool result;
  
  SWIG_check_num_args("Random::flip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Random::flip",1,"Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Random::flip",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Random,0))){
    SWIG_fail_ptr("Random_flip",1,SWIGTYPE_p_Random);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (bool)(arg1)->flip(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_random(lua_State* L) {
  int SWIG_arg = 0;
  Random *arg1 = (Random *) 0 ;
  int arg2 ;
  uint64_t result;
  
  SWIG_check_num_args("Random::random",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Random::random",1,"Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Random::random",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Random,0))){
    SWIG_fail_ptr("Random_random",1,SWIGTYPE_p_Random);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (uint64_t)(arg1)->random(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Random(void *obj) {
Random *arg1 = (Random *) obj;
delete arg1;
}
static int _proxy__wrap_new_Random(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Random);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Random_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Random_methods[]= {
    { "frand", _wrap_Random_frand},
    { "rand", _wrap_Random_rand},
    { "randint", _wrap_Random_randint},
    { "flip", _wrap_Random_flip},
    { "random", _wrap_Random_random},
    {0,0}
};
static swig_lua_method swig_Random_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Random_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Random_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Random_Sf_SwigStatic_methods[]= {
    { "seed", _wrap_Random_seed},
    {0,0}
};
static swig_lua_class* swig_Random_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Random_Sf_SwigStatic = {
    "Random",
    swig_Random_Sf_SwigStatic_methods,
    swig_Random_Sf_SwigStatic_attributes,
    swig_Random_Sf_SwigStatic_constants,
    swig_Random_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Random_bases[] = {0};
static const char *swig_Random_base_names[] = {0};
static swig_lua_class _wrap_class_Random = { "Random", "Random", &SWIGTYPE_p_Random,_proxy__wrap_new_Random, swig_delete_Random, swig_Random_methods, swig_Random_attributes, &swig_Random_Sf_SwigStatic, swig_Random_meta, swig_Random_bases, swig_Random_base_names };

static int _wrap_SoundProcessor_preGain_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("SoundProcessor::preGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::preGain",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::preGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_preGain_set",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->preGain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_preGain_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("SoundProcessor::preGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::preGain",1,"SoundProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_preGain_get",1,SWIGTYPE_p_SoundProcessor);
  }
  
  result = (DspFloatType) ((arg1)->preGain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_postGain_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("SoundProcessor::postGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::postGain",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::postGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_postGain_set",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->postGain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_postGain_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("SoundProcessor::postGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::postGain",1,"SoundProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_postGain_get",1,SWIGTYPE_p_SoundProcessor);
  }
  
  result = (DspFloatType) ((arg1)->postGain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("SoundProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::getType",1,"SoundProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_getType",1,SWIGTYPE_p_SoundProcessor);
  }
  
  result = (ObjectType)((SoundProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_setPort(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("SoundProcessor::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::setPort",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundProcessor::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_setPort",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_setPort2(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  
  SWIG_check_num_args("SoundProcessor::setPort2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::setPort2",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::setPort2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundProcessor::setPort2",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundProcessor::setPort2",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_setPort2",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  (arg1)->setPort2(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_setPortV(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  std::vector< DspFloatType,std::allocator< DspFloatType > > *arg3 = 0 ;
  
  SWIG_check_num_args("SoundProcessor::setPortV",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::setPortV",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::setPortV",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundProcessor::setPortV",3,"std::vector< DspFloatType,std::allocator< DspFloatType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_setPortV",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("SoundProcessor_setPortV",3,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  (arg1)->setPortV(arg2,(std::vector< DspFloatType,std::allocator< DspFloatType > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_getPort(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("SoundProcessor::getPort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::getPort",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::getPort",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_getPort",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->getPort(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_getPort2(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("SoundProcessor::getPort2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::getPort2",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::getPort2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundProcessor::getPort2",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_getPort2",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->getPort2(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_getPortV(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  std::vector< DspFloatType,std::allocator< DspFloatType > > *arg3 = 0 ;
  
  SWIG_check_num_args("SoundProcessor::getPortV",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::getPortV",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::getPortV",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundProcessor::getPortV",3,"std::vector< DspFloatType,std::allocator< DspFloatType > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_getPortV",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("SoundProcessor_getPortV",3,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  (arg1)->getPortV(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_printPortMap(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  
  SWIG_check_num_args("SoundProcessor::printPortMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::printPortMap",1,"SoundProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_printPortMap",1,SWIGTYPE_p_SoundProcessor);
  }
  
  (arg1)->printPortMap();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_randomize(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  
  SWIG_check_num_args("SoundProcessor::randomize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::randomize",1,"SoundProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_randomize",1,SWIGTYPE_p_SoundProcessor);
  }
  
  (arg1)->randomize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_loadPreset(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SoundProcessor::loadPreset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::loadPreset",1,"SoundProcessor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SoundProcessor::loadPreset",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_loadPreset",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->loadPreset((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_savePreset(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SoundProcessor::savePreset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::savePreset",1,"SoundProcessor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SoundProcessor::savePreset",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_savePreset",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->savePreset((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoundProcessor(void *obj) {
SoundProcessor *arg1 = (SoundProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_SoundProcessor_attributes[] = {
    { "preGain", _wrap_SoundProcessor_preGain_get, _wrap_SoundProcessor_preGain_set },
    { "postGain", _wrap_SoundProcessor_postGain_get, _wrap_SoundProcessor_postGain_set },
    {0,0,0}
};
static swig_lua_method swig_SoundProcessor_methods[]= {
    { "getType", _wrap_SoundProcessor_getType},
    { "setPort", _wrap_SoundProcessor_setPort},
    { "setPort2", _wrap_SoundProcessor_setPort2},
    { "setPortV", _wrap_SoundProcessor_setPortV},
    { "getPort", _wrap_SoundProcessor_getPort},
    { "getPort2", _wrap_SoundProcessor_getPort2},
    { "getPortV", _wrap_SoundProcessor_getPortV},
    { "printPortMap", _wrap_SoundProcessor_printPortMap},
    { "randomize", _wrap_SoundProcessor_randomize},
    { "loadPreset", _wrap_SoundProcessor_loadPreset},
    { "savePreset", _wrap_SoundProcessor_savePreset},
    {0,0}
};
static swig_lua_method swig_SoundProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SoundProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SoundProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SoundProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SoundProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SoundProcessor_Sf_SwigStatic = {
    "SoundProcessor",
    swig_SoundProcessor_Sf_SwigStatic_methods,
    swig_SoundProcessor_Sf_SwigStatic_attributes,
    swig_SoundProcessor_Sf_SwigStatic_constants,
    swig_SoundProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SoundProcessor_bases[] = {0};
static const char *swig_SoundProcessor_base_names[] = {0};
static swig_lua_class _wrap_class_SoundProcessor = { "SoundProcessor", "SoundProcessor", &SWIGTYPE_p_SoundProcessor,0, swig_delete_SoundProcessor, swig_SoundProcessor_methods, swig_SoundProcessor_attributes, &swig_SoundProcessor_Sf_SwigStatic, swig_SoundProcessor_meta, swig_SoundProcessor_bases, swig_SoundProcessor_base_names };

static int _wrap_Port_port_set(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Port::port",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::port",1,"Port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Port::port",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_port_set",1,SWIGTYPE_p_Port);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->port = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_port_get(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  int result;
  
  SWIG_check_num_args("Port::port",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::port",1,"Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_port_get",1,SWIGTYPE_p_Port);
  }
  
  result = (int) ((arg1)->port);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_value_set(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Port::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::value",1,"Port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Port::value",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_value_set",1,SWIGTYPE_p_Port);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->value = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_value_get(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Port::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::value",1,"Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_value_get",1,SWIGTYPE_p_Port);
  }
  
  result = (DspFloatType) ((arg1)->value);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_p_set(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  SoundProcessor *arg2 = (SoundProcessor *) 0 ;
  
  SWIG_check_num_args("Port::p",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::p",1,"Port *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Port::p",2,"SoundProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_p_set",1,SWIGTYPE_p_Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundProcessor,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Port_p_set",2,SWIGTYPE_p_SoundProcessor);
  }
  
  if (arg1) (arg1)->p = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_p_get(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  SoundProcessor *result = 0 ;
  
  SWIG_check_num_args("Port::p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::p",1,"Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_p_get",1,SWIGTYPE_p_Port);
  }
  
  result = (SoundProcessor *) ((arg1)->p);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Port(lua_State* L) {
  int SWIG_arg = 0;
  Port *result = 0 ;
  
  SWIG_check_num_args("Port::Port",0,0)
  result = (Port *)new Port();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Port,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Port(void *obj) {
Port *arg1 = (Port *) obj;
delete arg1;
}
static int _proxy__wrap_new_Port(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Port);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Port_attributes[] = {
    { "port", _wrap_Port_port_get, _wrap_Port_port_set },
    { "value", _wrap_Port_value_get, _wrap_Port_value_set },
    { "p", _wrap_Port_p_get, _wrap_Port_p_set },
    {0,0,0}
};
static swig_lua_method swig_Port_methods[]= {
    {0,0}
};
static swig_lua_method swig_Port_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Port_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Port_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Port_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Port_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Port_Sf_SwigStatic = {
    "Port",
    swig_Port_Sf_SwigStatic_methods,
    swig_Port_Sf_SwigStatic_attributes,
    swig_Port_Sf_SwigStatic_constants,
    swig_Port_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Port_bases[] = {0};
static const char *swig_Port_base_names[] = {0};
static swig_lua_class _wrap_class_Port = { "Port", "Port", &SWIGTYPE_p_Port,_proxy__wrap_new_Port, swig_delete_Port, swig_Port_methods, swig_Port_attributes, &swig_Port_Sf_SwigStatic, swig_Port_meta, swig_Port_bases, swig_Port_base_names };

static int _wrap_Ports_ports_set(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  std::list< std::shared_ptr< Port > > *arg2 = (std::list< std::shared_ptr< Port > > *) 0 ;
  
  SWIG_check_num_args("Ports::ports",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::ports",1,"Ports *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ports::ports",2,"std::list< std::shared_ptr< Port > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_ports_set",1,SWIGTYPE_p_Ports);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_std__shared_ptrT_Port_t_t,0))){
    SWIG_fail_ptr("Ports_ports_set",2,SWIGTYPE_p_std__listT_std__shared_ptrT_Port_t_t);
  }
  
  if (arg1) (arg1)->ports = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ports_ports_get(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  std::list< std::shared_ptr< Port > > *result = 0 ;
  
  SWIG_check_num_args("Ports::ports",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::ports",1,"Ports *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_ports_get",1,SWIGTYPE_p_Ports);
  }
  
  result = (std::list< std::shared_ptr< Port > > *)& ((arg1)->ports);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_std__shared_ptrT_Port_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ports_portmap_set(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  Ports::PortMap *arg2 = (Ports::PortMap *) 0 ;
  
  SWIG_check_num_args("Ports::portmap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::portmap",1,"Ports *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ports::portmap",2,"Ports::PortMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_portmap_set",1,SWIGTYPE_p_Ports);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mapT_std__string_Port_p_t,0))){
    SWIG_fail_ptr("Ports_portmap_set",2,SWIGTYPE_p_std__mapT_std__string_Port_p_t);
  }
  
  if (arg1) (arg1)->portmap = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ports_portmap_get(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  Ports::PortMap *result = 0 ;
  
  SWIG_check_num_args("Ports::portmap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::portmap",1,"Ports *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_portmap_get",1,SWIGTYPE_p_Ports);
  }
  
  result = (Ports::PortMap *)& ((arg1)->portmap);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_Port_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ports(lua_State* L) {
  int SWIG_arg = 0;
  Ports *result = 0 ;
  
  SWIG_check_num_args("Ports::Ports",0,0)
  result = (Ports *)new Ports();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ports,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ports_addPort(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  std::string *arg2 = 0 ;
  Port *arg3 = (Port *) 0 ;
  
  SWIG_check_num_args("Ports::addPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::addPort",1,"Ports *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ports::addPort",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Ports::addPort",3,"Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_addPort",1,SWIGTYPE_p_Ports);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Ports_addPort",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Ports_addPort",3,SWIGTYPE_p_Port);
  }
  
  (arg1)->addPort((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ports_Run(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  
  SWIG_check_num_args("Ports::Run",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::Run",1,"Ports *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_Run",1,SWIGTYPE_p_Ports);
  }
  
  (arg1)->Run();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Ports(void *obj) {
Ports *arg1 = (Ports *) obj;
delete arg1;
}
static int _proxy__wrap_new_Ports(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Ports);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Ports_attributes[] = {
    { "ports", _wrap_Ports_ports_get, _wrap_Ports_ports_set },
    { "portmap", _wrap_Ports_portmap_get, _wrap_Ports_portmap_set },
    {0,0,0}
};
static swig_lua_method swig_Ports_methods[]= {
    { "addPort", _wrap_Ports_addPort},
    { "Run", _wrap_Ports_Run},
    {0,0}
};
static swig_lua_method swig_Ports_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Ports_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Ports_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Ports_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Ports_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Ports_Sf_SwigStatic = {
    "Ports",
    swig_Ports_Sf_SwigStatic_methods,
    swig_Ports_Sf_SwigStatic_attributes,
    swig_Ports_Sf_SwigStatic_constants,
    swig_Ports_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Ports_bases[] = {0};
static const char *swig_Ports_base_names[] = {0};
static swig_lua_class _wrap_class_Ports = { "Ports", "Ports", &SWIGTYPE_p_Ports,_proxy__wrap_new_Ports, swig_delete_Ports, swig_Ports_methods, swig_Ports_attributes, &swig_Ports_Sf_SwigStatic, swig_Ports_meta, swig_Ports_bases, swig_Ports_base_names };

static int _wrap_MonoProcessor_InplaceProcess(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoProcessor::InplaceProcess",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::InplaceProcess",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::InplaceProcess",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoProcessor::InplaceProcess",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_InplaceProcess",1,SWIGTYPE_p_MonoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoProcessor_InplaceProcess",3,SWIGTYPE_p_double);
  }
  
  (arg1)->InplaceProcess(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::Tick",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MonoProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("MonoProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("MonoProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_Tick",1,SWIGTYPE_p_MonoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::Tick",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MonoProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("MonoProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_Tick",1,SWIGTYPE_p_MonoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::Tick",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MonoProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_Tick",1,SWIGTYPE_p_MonoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::Tick",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_Tick",1,SWIGTYPE_p_MonoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoProcessor::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::Tick",1,"MonoProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_Tick",1,SWIGTYPE_p_MonoProcessor);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MonoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_MonoProcessor_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MonoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MonoProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MonoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MonoProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MonoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MonoProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MonoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MonoProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MonoProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MonoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    MonoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    MonoProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    MonoProcessor::Tick(DspFloatType)\n"
    "    MonoProcessor::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_MonoProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::ProcessBlock",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_ProcessBlock",1,SWIGTYPE_p_MonoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoProcessor_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoProcessor_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoProcessor(void *obj) {
MonoProcessor *arg1 = (MonoProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_MonoProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoProcessor_methods[]= {
    { "InplaceProcess", _wrap_MonoProcessor_InplaceProcess},
    { "Tick", _wrap_MonoProcessor_Tick},
    { "ProcessBlock", _wrap_MonoProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoProcessor_Sf_SwigStatic = {
    "MonoProcessor",
    swig_MonoProcessor_Sf_SwigStatic_methods,
    swig_MonoProcessor_Sf_SwigStatic_attributes,
    swig_MonoProcessor_Sf_SwigStatic_constants,
    swig_MonoProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoProcessor_bases[] = {0,0};
static const char *swig_MonoProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MonoProcessor = { "MonoProcessor", "MonoProcessor", &SWIGTYPE_p_MonoProcessor,0, swig_delete_MonoProcessor, swig_MonoProcessor_methods, swig_MonoProcessor_attributes, &swig_MonoProcessor_Sf_SwigStatic, swig_MonoProcessor_meta, swig_MonoProcessor_bases, swig_MonoProcessor_base_names };

static int _wrap_MonoCascadeProcessor_procs_set(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeProcessor *arg1 = (MonoCascadeProcessor *) 0 ;
  std::list< MonoProcessor * > *arg2 = (std::list< MonoProcessor * > *) 0 ;
  
  SWIG_check_num_args("MonoCascadeProcessor::procs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoCascadeProcessor::procs",1,"MonoCascadeProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MonoCascadeProcessor::procs",2,"std::list< MonoProcessor * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoCascadeProcessor,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_procs_set",1,SWIGTYPE_p_MonoCascadeProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_MonoProcessor_p_t,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_procs_set",2,SWIGTYPE_p_std__listT_MonoProcessor_p_t);
  }
  
  if (arg1) (arg1)->procs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoCascadeProcessor_procs_get(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeProcessor *arg1 = (MonoCascadeProcessor *) 0 ;
  std::list< MonoProcessor * > *result = 0 ;
  
  SWIG_check_num_args("MonoCascadeProcessor::procs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoCascadeProcessor::procs",1,"MonoCascadeProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoCascadeProcessor,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_procs_get",1,SWIGTYPE_p_MonoCascadeProcessor);
  }
  
  result = (std::list< MonoProcessor * > *)& ((arg1)->procs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_MonoProcessor_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoCascadeProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoCascadeProcessor::MonoCascadeProcessor",0,0)
  result = (MonoCascadeProcessor *)new MonoCascadeProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoCascadeProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoCascadeProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeProcessor *arg1 = (MonoCascadeProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoCascadeProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoCascadeProcessor::getType",1,"MonoCascadeProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoCascadeProcessor,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_getType",1,SWIGTYPE_p_MonoCascadeProcessor);
  }
  
  result = (ObjectType)((MonoCascadeProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoCascadeProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeProcessor *arg1 = (MonoCascadeProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoCascadeProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoCascadeProcessor::ProcessBlock",1,"MonoCascadeProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoCascadeProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoCascadeProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoCascadeProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoCascadeProcessor,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_ProcessBlock",1,SWIGTYPE_p_MonoCascadeProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoCascadeProcessor(void *obj) {
MonoCascadeProcessor *arg1 = (MonoCascadeProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoCascadeProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoCascadeProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoCascadeProcessor_attributes[] = {
    { "procs", _wrap_MonoCascadeProcessor_procs_get, _wrap_MonoCascadeProcessor_procs_set },
    {0,0,0}
};
static swig_lua_method swig_MonoCascadeProcessor_methods[]= {
    { "getType", _wrap_MonoCascadeProcessor_getType},
    { "ProcessBlock", _wrap_MonoCascadeProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoCascadeProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoCascadeProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoCascadeProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoCascadeProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoCascadeProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoCascadeProcessor_Sf_SwigStatic = {
    "MonoCascadeProcessor",
    swig_MonoCascadeProcessor_Sf_SwigStatic_methods,
    swig_MonoCascadeProcessor_Sf_SwigStatic_attributes,
    swig_MonoCascadeProcessor_Sf_SwigStatic_constants,
    swig_MonoCascadeProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoCascadeProcessor_bases[] = {0,0};
static const char *swig_MonoCascadeProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_MonoCascadeProcessor = { "MonoCascadeProcessor", "MonoCascadeProcessor", &SWIGTYPE_p_MonoCascadeProcessor,_proxy__wrap_new_MonoCascadeProcessor, swig_delete_MonoCascadeProcessor, swig_MonoCascadeProcessor_methods, swig_MonoCascadeProcessor_attributes, &swig_MonoCascadeProcessor_Sf_SwigStatic, swig_MonoCascadeProcessor_meta, swig_MonoCascadeProcessor_bases, swig_MonoCascadeProcessor_base_names };

static int _wrap_StereoProcessor_pan_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("StereoProcessor::pan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::pan",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::pan",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_pan_set",1,SWIGTYPE_p_StereoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->pan = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_pan_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoProcessor::pan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::pan",1,"StereoProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_pan_get",1,SWIGTYPE_p_StereoProcessor);
  }
  
  result = (DspFloatType) ((arg1)->pan);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::ProcessBlock",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_ProcessBlock",1,SWIGTYPE_p_StereoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoProcessor_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoProcessor_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::Tick",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",1,SWIGTYPE_p_StereoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::Tick",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",1,SWIGTYPE_p_StereoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::Tick",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",1,SWIGTYPE_p_StereoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::Tick",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",1,SWIGTYPE_p_StereoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoProcessor_InplaceProcess(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoProcessor::InplaceProcess",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::InplaceProcess",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::InplaceProcess",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoProcessor::InplaceProcess",3,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_InplaceProcess",1,SWIGTYPE_p_StereoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoProcessor_InplaceProcess",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->InplaceProcess(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Run(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoProcessor::Run",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::Run",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::Run",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoProcessor::Run",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoProcessor::Run",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_Run",1,SWIGTYPE_p_StereoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoProcessor_Run",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoProcessor_Run",4,SWIGTYPE_p_p_double);
  }
  
  (arg1)->Run(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoProcessor(void *obj) {
StereoProcessor *arg1 = (StereoProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_StereoProcessor_attributes[] = {
    { "pan", _wrap_StereoProcessor_pan_get, _wrap_StereoProcessor_pan_set },
    {0,0,0}
};
static swig_lua_method swig_StereoProcessor_methods[]= {
    { "ProcessBlock", _wrap_StereoProcessor_ProcessBlock},
    { "Tick", _wrap_StereoProcessor_Tick},
    { "InplaceProcess", _wrap_StereoProcessor_InplaceProcess},
    { "Run", _wrap_StereoProcessor_Run},
    {0,0}
};
static swig_lua_method swig_StereoProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoProcessor_Sf_SwigStatic = {
    "StereoProcessor",
    swig_StereoProcessor_Sf_SwigStatic_methods,
    swig_StereoProcessor_Sf_SwigStatic_attributes,
    swig_StereoProcessor_Sf_SwigStatic_constants,
    swig_StereoProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoProcessor_bases[] = {0,0};
static const char *swig_StereoProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_StereoProcessor = { "StereoProcessor", "StereoProcessor", &SWIGTYPE_p_StereoProcessor,0, swig_delete_StereoProcessor, swig_StereoProcessor_methods, swig_StereoProcessor_attributes, &swig_StereoProcessor_Sf_SwigStatic, swig_StereoProcessor_meta, swig_StereoProcessor_bases, swig_StereoProcessor_base_names };

static int _wrap_StereoCascadeProcessor_procs_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoCascadeProcessor *arg1 = (StereoCascadeProcessor *) 0 ;
  std::list< StereoProcessor * > *arg2 = (std::list< StereoProcessor * > *) 0 ;
  
  SWIG_check_num_args("StereoCascadeProcessor::procs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoCascadeProcessor::procs",1,"StereoCascadeProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoCascadeProcessor::procs",2,"std::list< StereoProcessor * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoCascadeProcessor,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_procs_set",1,SWIGTYPE_p_StereoCascadeProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_StereoProcessor_p_t,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_procs_set",2,SWIGTYPE_p_std__listT_StereoProcessor_p_t);
  }
  
  if (arg1) (arg1)->procs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoCascadeProcessor_procs_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoCascadeProcessor *arg1 = (StereoCascadeProcessor *) 0 ;
  std::list< StereoProcessor * > *result = 0 ;
  
  SWIG_check_num_args("StereoCascadeProcessor::procs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoCascadeProcessor::procs",1,"StereoCascadeProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoCascadeProcessor,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_procs_get",1,SWIGTYPE_p_StereoCascadeProcessor);
  }
  
  result = (std::list< StereoProcessor * > *)& ((arg1)->procs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_StereoProcessor_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoCascadeProcessor(lua_State* L) {
  int SWIG_arg = 0;
  StereoCascadeProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoCascadeProcessor::StereoCascadeProcessor",0,0)
  result = (StereoCascadeProcessor *)new StereoCascadeProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoCascadeProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoCascadeProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoCascadeProcessor *arg1 = (StereoCascadeProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoCascadeProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoCascadeProcessor::getType",1,"StereoCascadeProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoCascadeProcessor,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_getType",1,SWIGTYPE_p_StereoCascadeProcessor);
  }
  
  result = (ObjectType)((StereoCascadeProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoCascadeProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoCascadeProcessor *arg1 = (StereoCascadeProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoCascadeProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoCascadeProcessor::ProcessBlock",1,"StereoCascadeProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoCascadeProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoCascadeProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoCascadeProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoCascadeProcessor,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_ProcessBlock",1,SWIGTYPE_p_StereoCascadeProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoCascadeProcessor(void *obj) {
StereoCascadeProcessor *arg1 = (StereoCascadeProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoCascadeProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoCascadeProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoCascadeProcessor_attributes[] = {
    { "procs", _wrap_StereoCascadeProcessor_procs_get, _wrap_StereoCascadeProcessor_procs_set },
    {0,0,0}
};
static swig_lua_method swig_StereoCascadeProcessor_methods[]= {
    { "getType", _wrap_StereoCascadeProcessor_getType},
    { "ProcessBlock", _wrap_StereoCascadeProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_StereoCascadeProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoCascadeProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoCascadeProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoCascadeProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoCascadeProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoCascadeProcessor_Sf_SwigStatic = {
    "StereoCascadeProcessor",
    swig_StereoCascadeProcessor_Sf_SwigStatic_methods,
    swig_StereoCascadeProcessor_Sf_SwigStatic_attributes,
    swig_StereoCascadeProcessor_Sf_SwigStatic_constants,
    swig_StereoCascadeProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoCascadeProcessor_bases[] = {0,0};
static const char *swig_StereoCascadeProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoCascadeProcessor = { "StereoCascadeProcessor", "StereoCascadeProcessor", &SWIGTYPE_p_StereoCascadeProcessor,_proxy__wrap_new_StereoCascadeProcessor, swig_delete_StereoCascadeProcessor, swig_StereoCascadeProcessor_methods, swig_StereoCascadeProcessor_attributes, &swig_StereoCascadeProcessor_Sf_SwigStatic, swig_StereoCascadeProcessor_meta, swig_StereoCascadeProcessor_bases, swig_StereoCascadeProcessor_base_names };

static int _wrap_MonoFXProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoFXProcessor *arg1 = (MonoFXProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoFXProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoFXProcessor::getType",1,"MonoFXProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoFXProcessor,0))){
    SWIG_fail_ptr("MonoFXProcessor_getType",1,SWIGTYPE_p_MonoFXProcessor);
  }
  
  result = (ObjectType)((MonoFXProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoFXProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoFXProcessor *arg1 = (MonoFXProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoFXProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoFXProcessor::ProcessBlock",1,"MonoFXProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoFXProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoFXProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoFXProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoFXProcessor,0))){
    SWIG_fail_ptr("MonoFXProcessor_ProcessBlock",1,SWIGTYPE_p_MonoFXProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoFXProcessor_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoFXProcessor_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoFXProcessor(void *obj) {
MonoFXProcessor *arg1 = (MonoFXProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_MonoFXProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoFXProcessor_methods[]= {
    { "getType", _wrap_MonoFXProcessor_getType},
    { "ProcessBlock", _wrap_MonoFXProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoFXProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoFXProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoFXProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoFXProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoFXProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoFXProcessor_Sf_SwigStatic = {
    "MonoFXProcessor",
    swig_MonoFXProcessor_Sf_SwigStatic_methods,
    swig_MonoFXProcessor_Sf_SwigStatic_attributes,
    swig_MonoFXProcessor_Sf_SwigStatic_constants,
    swig_MonoFXProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoFXProcessor_bases[] = {0,0};
static const char *swig_MonoFXProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_MonoFXProcessor = { "MonoFXProcessor", "MonoFXProcessor", &SWIGTYPE_p_MonoFXProcessor,0, swig_delete_MonoFXProcessor, swig_MonoFXProcessor_methods, swig_MonoFXProcessor_attributes, &swig_MonoFXProcessor_Sf_SwigStatic, swig_MonoFXProcessor_meta, swig_MonoFXProcessor_bases, swig_MonoFXProcessor_base_names };

static int _wrap_StereoFXProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoFXProcessor *arg1 = (StereoFXProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoFXProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFXProcessor::getType",1,"StereoFXProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFXProcessor,0))){
    SWIG_fail_ptr("StereoFXProcessor_getType",1,SWIGTYPE_p_StereoFXProcessor);
  }
  
  result = (ObjectType)((StereoFXProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFXProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoFXProcessor *arg1 = (StereoFXProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoFXProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFXProcessor::ProcessBlock",1,"StereoFXProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFXProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoFXProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoFXProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFXProcessor,0))){
    SWIG_fail_ptr("StereoFXProcessor_ProcessBlock",1,SWIGTYPE_p_StereoFXProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoFXProcessor_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoFXProcessor_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoFXProcessor(void *obj) {
StereoFXProcessor *arg1 = (StereoFXProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_StereoFXProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoFXProcessor_methods[]= {
    { "getType", _wrap_StereoFXProcessor_getType},
    { "ProcessBlock", _wrap_StereoFXProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_StereoFXProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoFXProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoFXProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoFXProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoFXProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoFXProcessor_Sf_SwigStatic = {
    "StereoFXProcessor",
    swig_StereoFXProcessor_Sf_SwigStatic_methods,
    swig_StereoFXProcessor_Sf_SwigStatic_attributes,
    swig_StereoFXProcessor_Sf_SwigStatic_constants,
    swig_StereoFXProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoFXProcessor_bases[] = {0,0};
static const char *swig_StereoFXProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoFXProcessor = { "StereoFXProcessor", "StereoFXProcessor", &SWIGTYPE_p_StereoFXProcessor,0, swig_delete_StereoFXProcessor, swig_StereoFXProcessor_methods, swig_StereoFXProcessor_attributes, &swig_StereoFXProcessor_Sf_SwigStatic, swig_StereoFXProcessor_meta, swig_StereoFXProcessor_bases, swig_StereoFXProcessor_base_names };

static int _wrap_GeneratorProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("GeneratorProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::getType",1,"GeneratorProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_getType",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  result = (ObjectType)((GeneratorProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("GeneratorProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Tick",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("GeneratorProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("GeneratorProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Tick",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("GeneratorProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Tick",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("GeneratorProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Tick",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("GeneratorProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Tick",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GeneratorProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Tick",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("GeneratorProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Tick",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Tick",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("GeneratorProcessor::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Tick",1,"GeneratorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Tick",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GeneratorProcessor_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeneratorProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GeneratorProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_GeneratorProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_GeneratorProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    GeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    GeneratorProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    GeneratorProcessor::Tick(DspFloatType)\n"
    "    GeneratorProcessor::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorProcessor_Generate(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("GeneratorProcessor::Generate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Generate",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::Generate",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("GeneratorProcessor::Generate",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Generate",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("GeneratorProcessor_Generate",3,SWIGTYPE_p_double);
  }
  
  (arg1)->Generate(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("GeneratorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::ProcessBlock",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("GeneratorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("GeneratorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_ProcessBlock",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("GeneratorProcessor_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("GeneratorProcessor_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GeneratorProcessor(void *obj) {
GeneratorProcessor *arg1 = (GeneratorProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_GeneratorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GeneratorProcessor_methods[]= {
    { "getType", _wrap_GeneratorProcessor_getType},
    { "Tick", _wrap_GeneratorProcessor_Tick},
    { "Generate", _wrap_GeneratorProcessor_Generate},
    { "ProcessBlock", _wrap_GeneratorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_GeneratorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GeneratorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GeneratorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GeneratorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GeneratorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GeneratorProcessor_Sf_SwigStatic = {
    "GeneratorProcessor",
    swig_GeneratorProcessor_Sf_SwigStatic_methods,
    swig_GeneratorProcessor_Sf_SwigStatic_attributes,
    swig_GeneratorProcessor_Sf_SwigStatic_constants,
    swig_GeneratorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GeneratorProcessor_bases[] = {0,0};
static const char *swig_GeneratorProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_GeneratorProcessor = { "GeneratorProcessor", "GeneratorProcessor", &SWIGTYPE_p_GeneratorProcessor,0, swig_delete_GeneratorProcessor, swig_GeneratorProcessor_methods, swig_GeneratorProcessor_attributes, &swig_GeneratorProcessor_Sf_SwigStatic, swig_GeneratorProcessor_meta, swig_GeneratorProcessor_bases, swig_GeneratorProcessor_base_names };

static int _wrap_new_MixerProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MixerProcessor *result = 0 ;
  
  SWIG_check_num_args("MixerProcessor::MixerProcessor",0,0)
  result = (MixerProcessor *)new MixerProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MixerProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MixerProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MixerProcessor *arg1 = (MixerProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MixerProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MixerProcessor::getType",1,"MixerProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MixerProcessor,0))){
    SWIG_fail_ptr("MixerProcessor_getType",1,SWIGTYPE_p_MixerProcessor);
  }
  
  result = (ObjectType)((MixerProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MixerProcessor_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  MixerProcessor *arg1 = (MixerProcessor *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MixerProcessor::ProcessBlock",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MixerProcessor::ProcessBlock",1,"MixerProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MixerProcessor::ProcessBlock",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MixerProcessor::ProcessBlock",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MixerProcessor::ProcessBlock",4,"DspFloatType **");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("MixerProcessor::ProcessBlock",5,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MixerProcessor,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",1,SWIGTYPE_p_MixerProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",5,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MixerProcessor_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  MixerProcessor *arg1 = (MixerProcessor *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  DspFloatType **arg5 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("MixerProcessor::ProcessBlock",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MixerProcessor::ProcessBlock",1,"MixerProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MixerProcessor::ProcessBlock",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MixerProcessor::ProcessBlock",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MixerProcessor::ProcessBlock",4,"DspFloatType **");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("MixerProcessor::ProcessBlock",5,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MixerProcessor,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",1,SWIGTYPE_p_MixerProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",5,SWIGTYPE_p_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MixerProcessor_ProcessBlock(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MixerProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_MixerProcessor_ProcessBlock__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MixerProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_p_double, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_MixerProcessor_ProcessBlock__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MixerProcessor_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MixerProcessor::ProcessBlock(size_t,size_t,DspFloatType **,DspFloatType *)\n"
    "    MixerProcessor::ProcessBlock(size_t,size_t,DspFloatType **,DspFloatType **)\n");
  lua_error(L);return 0;
}


static void swig_delete_MixerProcessor(void *obj) {
MixerProcessor *arg1 = (MixerProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MixerProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MixerProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MixerProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MixerProcessor_methods[]= {
    { "getType", _wrap_MixerProcessor_getType},
    { "ProcessBlock", _wrap_MixerProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MixerProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MixerProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MixerProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MixerProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MixerProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MixerProcessor_Sf_SwigStatic = {
    "MixerProcessor",
    swig_MixerProcessor_Sf_SwigStatic_methods,
    swig_MixerProcessor_Sf_SwigStatic_attributes,
    swig_MixerProcessor_Sf_SwigStatic_constants,
    swig_MixerProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MixerProcessor_bases[] = {0,0};
static const char *swig_MixerProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MixerProcessor = { "MixerProcessor", "MixerProcessor", &SWIGTYPE_p_MixerProcessor,_proxy__wrap_new_MixerProcessor, swig_delete_MixerProcessor, swig_MixerProcessor_methods, swig_MixerProcessor_attributes, &swig_MixerProcessor_Sf_SwigStatic, swig_MixerProcessor_meta, swig_MixerProcessor_bases, swig_MixerProcessor_base_names };

static int _wrap_FunctionProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("FunctionProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::getType",1,"FunctionProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_getType",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  result = (ObjectType)((FunctionProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("FunctionProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::Tick",1,"FunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FunctionProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FunctionProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_Tick",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("FunctionProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::Tick",1,"FunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FunctionProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_Tick",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("FunctionProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::Tick",1,"FunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FunctionProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_Tick",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("FunctionProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::Tick",1,"FunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FunctionProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_Tick",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FunctionProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FunctionProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FunctionProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FunctionProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FunctionProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    FunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    FunctionProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    FunctionProcessor::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_FunctionProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("FunctionProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::ProcessBlock",1,"FunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FunctionProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FunctionProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("FunctionProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_ProcessBlock",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FunctionProcessor_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FunctionProcessor_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FunctionProcessor(void *obj) {
FunctionProcessor *arg1 = (FunctionProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_FunctionProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FunctionProcessor_methods[]= {
    { "getType", _wrap_FunctionProcessor_getType},
    { "Tick", _wrap_FunctionProcessor_Tick},
    { "ProcessBlock", _wrap_FunctionProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_FunctionProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FunctionProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FunctionProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FunctionProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FunctionProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FunctionProcessor_Sf_SwigStatic = {
    "FunctionProcessor",
    swig_FunctionProcessor_Sf_SwigStatic_methods,
    swig_FunctionProcessor_Sf_SwigStatic_attributes,
    swig_FunctionProcessor_Sf_SwigStatic_constants,
    swig_FunctionProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FunctionProcessor_bases[] = {0,0};
static const char *swig_FunctionProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_FunctionProcessor = { "FunctionProcessor", "FunctionProcessor", &SWIGTYPE_p_FunctionProcessor,0, swig_delete_FunctionProcessor, swig_FunctionProcessor_methods, swig_FunctionProcessor_attributes, &swig_FunctionProcessor_Sf_SwigStatic, swig_FunctionProcessor_meta, swig_FunctionProcessor_bases, swig_FunctionProcessor_base_names };

static int _wrap_Parameter2Processor_getType(lua_State* L) {
  int SWIG_arg = 0;
  Parameter2Processor *arg1 = (Parameter2Processor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("Parameter2Processor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Parameter2Processor::getType",1,"Parameter2Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Parameter2Processor,0))){
    SWIG_fail_ptr("Parameter2Processor_getType",1,SWIGTYPE_p_Parameter2Processor);
  }
  
  result = (ObjectType)((Parameter2Processor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parameter2Processor_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Parameter2Processor *arg1 = (Parameter2Processor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Parameter2Processor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Parameter2Processor::Tick",1,"Parameter2Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Parameter2Processor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Parameter2Processor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Parameter2Processor,0))){
    SWIG_fail_ptr("Parameter2Processor_Tick",1,SWIGTYPE_p_Parameter2Processor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parameter2Processor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  Parameter2Processor *arg1 = (Parameter2Processor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Parameter2Processor::ProcessBlock",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Parameter2Processor::ProcessBlock",1,"Parameter2Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Parameter2Processor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Parameter2Processor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Parameter2Processor::ProcessBlock",4,"DspFloatType *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Parameter2Processor::ProcessBlock",5,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Parameter2Processor,0))){
    SWIG_fail_ptr("Parameter2Processor_ProcessBlock",1,SWIGTYPE_p_Parameter2Processor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Parameter2Processor_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Parameter2Processor_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Parameter2Processor_ProcessBlock",5,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Parameter2Processor(void *obj) {
Parameter2Processor *arg1 = (Parameter2Processor *) obj;
delete arg1;
}
static swig_lua_attribute swig_Parameter2Processor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Parameter2Processor_methods[]= {
    { "getType", _wrap_Parameter2Processor_getType},
    { "Tick", _wrap_Parameter2Processor_Tick},
    { "ProcessBlock", _wrap_Parameter2Processor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_Parameter2Processor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Parameter2Processor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Parameter2Processor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Parameter2Processor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Parameter2Processor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Parameter2Processor_Sf_SwigStatic = {
    "Parameter2Processor",
    swig_Parameter2Processor_Sf_SwigStatic_methods,
    swig_Parameter2Processor_Sf_SwigStatic_attributes,
    swig_Parameter2Processor_Sf_SwigStatic_constants,
    swig_Parameter2Processor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Parameter2Processor_bases[] = {0,0};
static const char *swig_Parameter2Processor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_Parameter2Processor = { "Parameter2Processor", "Parameter2Processor", &SWIGTYPE_p_Parameter2Processor,0, swig_delete_Parameter2Processor, swig_Parameter2Processor_methods, swig_Parameter2Processor_attributes, &swig_Parameter2Processor_Sf_SwigStatic, swig_Parameter2Processor_meta, swig_Parameter2Processor_bases, swig_Parameter2Processor_base_names };

static int _wrap_StereoSplitterProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoSplitterProcessor *arg1 = (StereoSplitterProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoSplitterProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoSplitterProcessor::getType",1,"StereoSplitterProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoSplitterProcessor,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_getType",1,SWIGTYPE_p_StereoSplitterProcessor);
  }
  
  result = (ObjectType)((StereoSplitterProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoSplitterProcessor_Tick(lua_State* L) {
  int SWIG_arg = 0;
  StereoSplitterProcessor *arg1 = (StereoSplitterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType *arg3 = 0 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoSplitterProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoSplitterProcessor::Tick",1,"StereoSplitterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoSplitterProcessor::Tick",2,"DspFloatType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("StereoSplitterProcessor::Tick",3,"DspFloatType &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoSplitterProcessor::Tick",4,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoSplitterProcessor,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_Tick",1,SWIGTYPE_p_StereoSplitterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_Tick",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,*arg3,*arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoSplitterProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoSplitterProcessor *arg1 = (StereoSplitterProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("StereoSplitterProcessor::ProcessBlock",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoSplitterProcessor::ProcessBlock",1,"StereoSplitterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoSplitterProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoSplitterProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoSplitterProcessor::ProcessBlock",4,"DspFloatType *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("StereoSplitterProcessor::ProcessBlock",5,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoSplitterProcessor,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_ProcessBlock",1,SWIGTYPE_p_StereoSplitterProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_ProcessBlock",5,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoSplitterProcessor(void *obj) {
StereoSplitterProcessor *arg1 = (StereoSplitterProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_StereoSplitterProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoSplitterProcessor_methods[]= {
    { "getType", _wrap_StereoSplitterProcessor_getType},
    { "Tick", _wrap_StereoSplitterProcessor_Tick},
    { "ProcessBlock", _wrap_StereoSplitterProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_StereoSplitterProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoSplitterProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoSplitterProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoSplitterProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoSplitterProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoSplitterProcessor_Sf_SwigStatic = {
    "StereoSplitterProcessor",
    swig_StereoSplitterProcessor_Sf_SwigStatic_methods,
    swig_StereoSplitterProcessor_Sf_SwigStatic_attributes,
    swig_StereoSplitterProcessor_Sf_SwigStatic_constants,
    swig_StereoSplitterProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoSplitterProcessor_bases[] = {0,0};
static const char *swig_StereoSplitterProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_StereoSplitterProcessor = { "StereoSplitterProcessor", "StereoSplitterProcessor", &SWIGTYPE_p_StereoSplitterProcessor,0, swig_delete_StereoSplitterProcessor, swig_StereoSplitterProcessor_methods, swig_StereoSplitterProcessor_attributes, &swig_StereoSplitterProcessor_Sf_SwigStatic, swig_StereoSplitterProcessor_meta, swig_StereoSplitterProcessor_bases, swig_StereoSplitterProcessor_base_names };

static int _wrap_OscillatorProcessor_slaves_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  std::vector< OscillatorProcessor *,std::allocator< OscillatorProcessor * > > *arg2 = (std::vector< OscillatorProcessor *,std::allocator< OscillatorProcessor * > > *) 0 ;
  
  SWIG_check_num_args("OscillatorProcessor::slaves",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::slaves",1,"OscillatorProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OscillatorProcessor::slaves",2,"std::vector< OscillatorProcessor *,std::allocator< OscillatorProcessor * > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_slaves_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t,0))){
    SWIG_fail_ptr("OscillatorProcessor_slaves_set",2,SWIGTYPE_p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t);
  }
  
  if (arg1) (arg1)->slaves = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_slaves_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  std::vector< OscillatorProcessor *,std::allocator< OscillatorProcessor * > > *result = 0 ;
  
  SWIG_check_num_args("OscillatorProcessor::slaves",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::slaves",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_slaves_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (std::vector< OscillatorProcessor *,std::allocator< OscillatorProcessor * > > *)& ((arg1)->slaves);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_waveform_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_waveform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_waveform",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_waveform",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_waveform_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_waveform = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_waveform_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  int result;
  
  SWIG_check_num_args("OscillatorProcessor::m_waveform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_waveform",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_waveform_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (int) ((arg1)->m_waveform);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_morph_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_morph",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_morph",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_morph",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_morph_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_morph = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_morph_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_morph",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_morph",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_morph_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_morph);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_freq",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_freq",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_freq_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_freq",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_freq_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_phase_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_phase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_phase",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_phase",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_phase_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_phase = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_phase_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_phase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_phase",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_phase_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_phase);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_index_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_index",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_index",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_index_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_index = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_index_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_index",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_index_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_index);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_gain_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_gain",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_gain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_gain_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_gain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_gain_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_gain",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_gain_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_gain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_fm_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_fm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_fm",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_fm",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_fm_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_fm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_fm_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_fm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_fm",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_fm_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_fm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_pm_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_pm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_pm",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_pm",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_pm_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_pm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_pm_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_pm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_pm",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_pm_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_pm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_fenv_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_fenv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_fenv",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_fenv",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_fenv_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_fenv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_fenv_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_fenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_fenv",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_fenv_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_fenv);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_penv_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_penv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_penv",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_penv",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_penv_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_penv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_penv_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_penv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_penv",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_penv_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_penv);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_drift_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_drift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_drift",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_drift",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_drift_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_drift = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_drift_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_drift",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_drift",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_drift_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_drift);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_mod_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_mod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_mod",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_mod",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_mod_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_mod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_mod_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_mod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_mod",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_mod_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_mod);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_cmod_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_cmod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_cmod",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_cmod",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_cmod_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_cmod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_cmod_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_cmod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_cmod",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_cmod_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_cmod);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_env_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_env",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_env",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_env",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_env_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_env = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_env_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_env",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_env",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_env_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_env);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_lfo_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_lfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_lfo",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_lfo",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_lfo_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_lfo = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_lfo_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_lfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_lfo",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_lfo_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_lfo);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_pwm_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_pwm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_pwm",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_pwm",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_pwm_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_pwm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_pwm_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_pwm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_pwm",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_pwm_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_pwm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("OscillatorProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::getType",1,"OscillatorProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_getType",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (ObjectType)((OscillatorProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::Tick",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OscillatorProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("OscillatorProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_Tick",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::Tick",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OscillatorProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_Tick",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::Tick",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OscillatorProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_Tick",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::Tick",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_Tick",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::Tick",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_Tick",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OscillatorProcessor_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OscillatorProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_OscillatorProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_OscillatorProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_OscillatorProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OscillatorProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    OscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    OscillatorProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    OscillatorProcessor::Tick(DspFloatType)\n"
    "    OscillatorProcessor::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_OscillatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("OscillatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::ProcessBlock",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("OscillatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("OscillatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_ProcessBlock",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("OscillatorProcessor_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("OscillatorProcessor_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OscillatorProcessor(void *obj) {
OscillatorProcessor *arg1 = (OscillatorProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_OscillatorProcessor_attributes[] = {
    { "slaves", _wrap_OscillatorProcessor_slaves_get, _wrap_OscillatorProcessor_slaves_set },
    { "m_waveform", _wrap_OscillatorProcessor_m_waveform_get, _wrap_OscillatorProcessor_m_waveform_set },
    { "m_morph", _wrap_OscillatorProcessor_m_morph_get, _wrap_OscillatorProcessor_m_morph_set },
    { "m_freq", _wrap_OscillatorProcessor_m_freq_get, _wrap_OscillatorProcessor_m_freq_set },
    { "m_phase", _wrap_OscillatorProcessor_m_phase_get, _wrap_OscillatorProcessor_m_phase_set },
    { "m_index", _wrap_OscillatorProcessor_m_index_get, _wrap_OscillatorProcessor_m_index_set },
    { "m_gain", _wrap_OscillatorProcessor_m_gain_get, _wrap_OscillatorProcessor_m_gain_set },
    { "m_fm", _wrap_OscillatorProcessor_m_fm_get, _wrap_OscillatorProcessor_m_fm_set },
    { "m_pm", _wrap_OscillatorProcessor_m_pm_get, _wrap_OscillatorProcessor_m_pm_set },
    { "m_fenv", _wrap_OscillatorProcessor_m_fenv_get, _wrap_OscillatorProcessor_m_fenv_set },
    { "m_penv", _wrap_OscillatorProcessor_m_penv_get, _wrap_OscillatorProcessor_m_penv_set },
    { "m_drift", _wrap_OscillatorProcessor_m_drift_get, _wrap_OscillatorProcessor_m_drift_set },
    { "m_mod", _wrap_OscillatorProcessor_m_mod_get, _wrap_OscillatorProcessor_m_mod_set },
    { "m_cmod", _wrap_OscillatorProcessor_m_cmod_get, _wrap_OscillatorProcessor_m_cmod_set },
    { "m_env", _wrap_OscillatorProcessor_m_env_get, _wrap_OscillatorProcessor_m_env_set },
    { "m_lfo", _wrap_OscillatorProcessor_m_lfo_get, _wrap_OscillatorProcessor_m_lfo_set },
    { "m_pwm", _wrap_OscillatorProcessor_m_pwm_get, _wrap_OscillatorProcessor_m_pwm_set },
    {0,0,0}
};
static swig_lua_method swig_OscillatorProcessor_methods[]= {
    { "getType", _wrap_OscillatorProcessor_getType},
    { "Tick", _wrap_OscillatorProcessor_Tick},
    { "ProcessBlock", _wrap_OscillatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_OscillatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OscillatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OscillatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OscillatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OscillatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OscillatorProcessor_Sf_SwigStatic = {
    "OscillatorProcessor",
    swig_OscillatorProcessor_Sf_SwigStatic_methods,
    swig_OscillatorProcessor_Sf_SwigStatic_attributes,
    swig_OscillatorProcessor_Sf_SwigStatic_constants,
    swig_OscillatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OscillatorProcessor_bases[] = {0,0};
static const char *swig_OscillatorProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_OscillatorProcessor = { "OscillatorProcessor", "OscillatorProcessor", &SWIGTYPE_p_OscillatorProcessor,0, swig_delete_OscillatorProcessor, swig_OscillatorProcessor_methods, swig_OscillatorProcessor_attributes, &swig_OscillatorProcessor_Sf_SwigStatic, swig_OscillatorProcessor_meta, swig_OscillatorProcessor_bases, swig_OscillatorProcessor_base_names };

static int _wrap_FilterProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("FilterProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::getType",1,"FilterProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_getType",1,SWIGTYPE_p_FilterProcessor);
  }
  
  result = (ObjectType)((FilterProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Tick",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FilterProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FilterProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Tick",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Tick",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FilterProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Tick",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Tick",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Tick",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Tick",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Tick",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FilterProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FilterProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FilterProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FilterProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FilterProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_FilterProcessor_Run__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Run",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Run",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Run",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Run",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FilterProcessor::Run",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FilterProcessor::Run",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Run",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Run(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Run__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Run",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Run",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Run",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Run",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FilterProcessor::Run",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Run",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Run(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Run__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Run",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Run",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Run",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Run",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Run",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Run(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Run__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Run",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Run",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Run",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Run",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Run(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Run(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FilterProcessor_Run__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FilterProcessor_Run__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FilterProcessor_Run__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FilterProcessor_Run__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FilterProcessor_Run'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FilterProcessor::Run(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Run(DspFloatType,DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Run(DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Run(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_FilterProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("FilterProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::ProcessBlock",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FilterProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("FilterProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_ProcessBlock",1,SWIGTYPE_p_FilterProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterProcessor_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterProcessor_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FilterProcessor(void *obj) {
FilterProcessor *arg1 = (FilterProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_FilterProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FilterProcessor_methods[]= {
    { "getType", _wrap_FilterProcessor_getType},
    { "Tick", _wrap_FilterProcessor_Tick},
    { "Run", _wrap_FilterProcessor_Run},
    { "ProcessBlock", _wrap_FilterProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_FilterProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FilterProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FilterProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FilterProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FilterProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FilterProcessor_Sf_SwigStatic = {
    "FilterProcessor",
    swig_FilterProcessor_Sf_SwigStatic_methods,
    swig_FilterProcessor_Sf_SwigStatic_attributes,
    swig_FilterProcessor_Sf_SwigStatic_constants,
    swig_FilterProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FilterProcessor_bases[] = {0,0};
static const char *swig_FilterProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_FilterProcessor = { "FilterProcessor", "FilterProcessor", &SWIGTYPE_p_FilterProcessor,0, swig_delete_FilterProcessor, swig_FilterProcessor_methods, swig_FilterProcessor_attributes, &swig_FilterProcessor_Sf_SwigStatic, swig_FilterProcessor_meta, swig_FilterProcessor_bases, swig_FilterProcessor_base_names };

static int _wrap_AmplifierProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("AmplifierProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::Tick",1,"AmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AmplifierProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("AmplifierProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_Tick",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmplifierProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("AmplifierProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::Tick",1,"AmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AmplifierProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_Tick",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmplifierProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("AmplifierProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::Tick",1,"AmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AmplifierProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_Tick",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmplifierProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("AmplifierProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::Tick",1,"AmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AmplifierProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_Tick",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmplifierProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AmplifierProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AmplifierProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AmplifierProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AmplifierProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AmplifierProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    AmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    AmplifierProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    AmplifierProcessor::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_AmplifierProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("AmplifierProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::getType",1,"AmplifierProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_getType",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  result = (ObjectType)((AmplifierProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmplifierProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("AmplifierProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::ProcessBlock",1,"AmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AmplifierProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AmplifierProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("AmplifierProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_ProcessBlock",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("AmplifierProcessor_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("AmplifierProcessor_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AmplifierProcessor(void *obj) {
AmplifierProcessor *arg1 = (AmplifierProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_AmplifierProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AmplifierProcessor_methods[]= {
    { "Tick", _wrap_AmplifierProcessor_Tick},
    { "getType", _wrap_AmplifierProcessor_getType},
    { "ProcessBlock", _wrap_AmplifierProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_AmplifierProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AmplifierProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AmplifierProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AmplifierProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AmplifierProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AmplifierProcessor_Sf_SwigStatic = {
    "AmplifierProcessor",
    swig_AmplifierProcessor_Sf_SwigStatic_methods,
    swig_AmplifierProcessor_Sf_SwigStatic_attributes,
    swig_AmplifierProcessor_Sf_SwigStatic_constants,
    swig_AmplifierProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AmplifierProcessor_bases[] = {0,0};
static const char *swig_AmplifierProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_AmplifierProcessor = { "AmplifierProcessor", "AmplifierProcessor", &SWIGTYPE_p_AmplifierProcessor,0, swig_delete_AmplifierProcessor, swig_AmplifierProcessor_methods, swig_AmplifierProcessor_attributes, &swig_AmplifierProcessor_Sf_SwigStatic, swig_AmplifierProcessor_meta, swig_AmplifierProcessor_bases, swig_AmplifierProcessor_base_names };

static int _wrap_StereoOscillatorProcessor_osc_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  OscillatorProcessor *arg2 = (OscillatorProcessor *) 0 ;
  
  SWIG_check_num_args("StereoOscillatorProcessor::osc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::osc",1,"StereoOscillatorProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::osc",2,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_osc_set",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OscillatorProcessor,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("StereoOscillatorProcessor_osc_set",2,SWIGTYPE_p_OscillatorProcessor);
  }
  
  if (arg1) (arg1)->osc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_osc_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  OscillatorProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoOscillatorProcessor::osc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::osc",1,"StereoOscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_osc_get",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  result = (OscillatorProcessor *) ((arg1)->osc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OscillatorProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoOscillatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  StereoOscillatorProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoOscillatorProcessor::StereoOscillatorProcessor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::StereoOscillatorProcessor",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("new_StereoOscillatorProcessor",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (StereoOscillatorProcessor *)new StereoOscillatorProcessor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoOscillatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoOscillatorProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::getType",1,"StereoOscillatorProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_getType",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  result = (ObjectType)((StereoOscillatorProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_setPan(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("StereoOscillatorProcessor::setPan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::setPan",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::setPan",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_setPan",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setPan(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoOscillatorProcessor::ProcessBlock",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::ProcessBlock",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoOscillatorProcessor::ProcessBlock",3,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_ProcessBlock",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoOscillatorProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoOscillatorProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoOscillatorProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoOscillatorProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoOscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoOscillatorProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoOscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoOscillatorProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoOscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoOscillatorProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoOscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoOscillatorProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoOscillatorProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoOscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoOscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoOscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoOscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static void swig_delete_StereoOscillatorProcessor(void *obj) {
StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoOscillatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoOscillatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoOscillatorProcessor_attributes[] = {
    { "osc", _wrap_StereoOscillatorProcessor_osc_get, _wrap_StereoOscillatorProcessor_osc_set },
    {0,0,0}
};
static swig_lua_method swig_StereoOscillatorProcessor_methods[]= {
    { "getType", _wrap_StereoOscillatorProcessor_getType},
    { "setPan", _wrap_StereoOscillatorProcessor_setPan},
    { "ProcessBlock", _wrap_StereoOscillatorProcessor_ProcessBlock},
    { "Tick", _wrap_StereoOscillatorProcessor_Tick},
    {0,0}
};
static swig_lua_method swig_StereoOscillatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoOscillatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoOscillatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoOscillatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoOscillatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoOscillatorProcessor_Sf_SwigStatic = {
    "StereoOscillatorProcessor",
    swig_StereoOscillatorProcessor_Sf_SwigStatic_methods,
    swig_StereoOscillatorProcessor_Sf_SwigStatic_attributes,
    swig_StereoOscillatorProcessor_Sf_SwigStatic_constants,
    swig_StereoOscillatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoOscillatorProcessor_bases[] = {0,0};
static const char *swig_StereoOscillatorProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoOscillatorProcessor = { "StereoOscillatorProcessor", "StereoOscillatorProcessor", &SWIGTYPE_p_StereoOscillatorProcessor,_proxy__wrap_new_StereoOscillatorProcessor, swig_delete_StereoOscillatorProcessor, swig_StereoOscillatorProcessor_methods, swig_StereoOscillatorProcessor_attributes, &swig_StereoOscillatorProcessor_Sf_SwigStatic, swig_StereoOscillatorProcessor_meta, swig_StereoOscillatorProcessor_bases, swig_StereoOscillatorProcessor_base_names };

static int _wrap_StereoGeneratorProcessor_osc_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  GeneratorProcessor *arg2 = (GeneratorProcessor *) 0 ;
  
  SWIG_check_num_args("StereoGeneratorProcessor::osc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::osc",1,"StereoGeneratorProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::osc",2,"GeneratorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_osc_set",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeneratorProcessor,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("StereoGeneratorProcessor_osc_set",2,SWIGTYPE_p_GeneratorProcessor);
  }
  
  if (arg1) (arg1)->osc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_osc_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  GeneratorProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoGeneratorProcessor::osc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::osc",1,"StereoGeneratorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_osc_get",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  result = (GeneratorProcessor *) ((arg1)->osc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GeneratorProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoGeneratorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  StereoGeneratorProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoGeneratorProcessor::StereoGeneratorProcessor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::StereoGeneratorProcessor",1,"GeneratorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("new_StereoGeneratorProcessor",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  result = (StereoGeneratorProcessor *)new StereoGeneratorProcessor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoGeneratorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoGeneratorProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::getType",1,"StereoGeneratorProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_getType",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  result = (ObjectType)((StereoGeneratorProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_setPan(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("StereoGeneratorProcessor::setPan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::setPan",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::setPan",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_setPan",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setPan(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoGeneratorProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoGeneratorProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoGeneratorProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoGeneratorProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoGeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoGeneratorProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoGeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoGeneratorProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoGeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoGeneratorProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoGeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoGeneratorProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoGeneratorProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoGeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoGeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoGeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoGeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoGeneratorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoGeneratorProcessor::ProcessBlock",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::ProcessBlock",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoGeneratorProcessor::ProcessBlock",3,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_ProcessBlock",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoGeneratorProcessor(void *obj) {
StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoGeneratorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoGeneratorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoGeneratorProcessor_attributes[] = {
    { "osc", _wrap_StereoGeneratorProcessor_osc_get, _wrap_StereoGeneratorProcessor_osc_set },
    {0,0,0}
};
static swig_lua_method swig_StereoGeneratorProcessor_methods[]= {
    { "getType", _wrap_StereoGeneratorProcessor_getType},
    { "setPan", _wrap_StereoGeneratorProcessor_setPan},
    { "Tick", _wrap_StereoGeneratorProcessor_Tick},
    { "ProcessBlock", _wrap_StereoGeneratorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_StereoGeneratorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoGeneratorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoGeneratorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoGeneratorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoGeneratorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoGeneratorProcessor_Sf_SwigStatic = {
    "StereoGeneratorProcessor",
    swig_StereoGeneratorProcessor_Sf_SwigStatic_methods,
    swig_StereoGeneratorProcessor_Sf_SwigStatic_attributes,
    swig_StereoGeneratorProcessor_Sf_SwigStatic_constants,
    swig_StereoGeneratorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoGeneratorProcessor_bases[] = {0,0};
static const char *swig_StereoGeneratorProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoGeneratorProcessor = { "StereoGeneratorProcessor", "StereoGeneratorProcessor", &SWIGTYPE_p_StereoGeneratorProcessor,_proxy__wrap_new_StereoGeneratorProcessor, swig_delete_StereoGeneratorProcessor, swig_StereoGeneratorProcessor_methods, swig_StereoGeneratorProcessor_attributes, &swig_StereoGeneratorProcessor_Sf_SwigStatic, swig_StereoGeneratorProcessor_meta, swig_StereoGeneratorProcessor_bases, swig_StereoGeneratorProcessor_base_names };

static int _wrap_StereoFunctionProcessor_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  FunctionProcessor **arg2 ;
  
  SWIG_check_num_args("StereoFunctionProcessor::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::filter",1,"StereoFunctionProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoFunctionProcessor::filter",2,"FunctionProcessor *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_filter_set",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_FunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_filter_set",2,SWIGTYPE_p_p_FunctionProcessor);
  }
  
  {
    size_t ii;
    FunctionProcessor * *b = (FunctionProcessor * *) arg1->filter;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((FunctionProcessor * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  FunctionProcessor **result = 0 ;
  
  SWIG_check_num_args("StereoFunctionProcessor::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::filter",1,"StereoFunctionProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_filter_get",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  result = (FunctionProcessor **)(FunctionProcessor **) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_FunctionProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoFunctionProcessor(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  FunctionProcessor *arg2 = (FunctionProcessor *) 0 ;
  StereoFunctionProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoFunctionProcessor::StereoFunctionProcessor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::StereoFunctionProcessor",1,"FunctionProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoFunctionProcessor::StereoFunctionProcessor",2,"FunctionProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("new_StereoFunctionProcessor",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("new_StereoFunctionProcessor",2,SWIGTYPE_p_FunctionProcessor);
  }
  
  result = (StereoFunctionProcessor *)new StereoFunctionProcessor(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoFunctionProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoFunctionProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::getType",1,"StereoFunctionProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_getType",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  result = (ObjectType)((StereoFunctionProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoFunctionProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::ProcessBlock",1,"StereoFunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFunctionProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoFunctionProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoFunctionProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_ProcessBlock",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFunctionProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::Tick",1,"StereoFunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFunctionProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFunctionProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFunctionProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoFunctionProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoFunctionProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFunctionProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::Tick",1,"StereoFunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFunctionProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFunctionProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFunctionProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoFunctionProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFunctionProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::Tick",1,"StereoFunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFunctionProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFunctionProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFunctionProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFunctionProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::Tick",1,"StereoFunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFunctionProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFunctionProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoFunctionProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoFunctionProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoFunctionProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoFunctionProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoFunctionProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoFunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoFunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoFunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoFunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static void swig_delete_StereoFunctionProcessor(void *obj) {
StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoFunctionProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoFunctionProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoFunctionProcessor_attributes[] = {
    { "filter", _wrap_StereoFunctionProcessor_filter_get, _wrap_StereoFunctionProcessor_filter_set },
    {0,0,0}
};
static swig_lua_method swig_StereoFunctionProcessor_methods[]= {
    { "getType", _wrap_StereoFunctionProcessor_getType},
    { "ProcessBlock", _wrap_StereoFunctionProcessor_ProcessBlock},
    { "Tick", _wrap_StereoFunctionProcessor_Tick},
    {0,0}
};
static swig_lua_method swig_StereoFunctionProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoFunctionProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoFunctionProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoFunctionProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoFunctionProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoFunctionProcessor_Sf_SwigStatic = {
    "StereoFunctionProcessor",
    swig_StereoFunctionProcessor_Sf_SwigStatic_methods,
    swig_StereoFunctionProcessor_Sf_SwigStatic_attributes,
    swig_StereoFunctionProcessor_Sf_SwigStatic_constants,
    swig_StereoFunctionProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoFunctionProcessor_bases[] = {0,0};
static const char *swig_StereoFunctionProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoFunctionProcessor = { "StereoFunctionProcessor", "StereoFunctionProcessor", &SWIGTYPE_p_StereoFunctionProcessor,_proxy__wrap_new_StereoFunctionProcessor, swig_delete_StereoFunctionProcessor, swig_StereoFunctionProcessor_methods, swig_StereoFunctionProcessor_attributes, &swig_StereoFunctionProcessor_Sf_SwigStatic, swig_StereoFunctionProcessor_meta, swig_StereoFunctionProcessor_bases, swig_StereoFunctionProcessor_base_names };

static int _wrap_StereoFilterProcessor_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  FilterProcessor **arg2 ;
  
  SWIG_check_num_args("StereoFilterProcessor::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::filter",1,"StereoFilterProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoFilterProcessor::filter",2,"FilterProcessor *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_filter_set",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_FilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_filter_set",2,SWIGTYPE_p_p_FilterProcessor);
  }
  
  {
    size_t ii;
    FilterProcessor * *b = (FilterProcessor * *) arg1->filter;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((FilterProcessor * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  FilterProcessor **result = 0 ;
  
  SWIG_check_num_args("StereoFilterProcessor::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::filter",1,"StereoFilterProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_filter_get",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  result = (FilterProcessor **)(FilterProcessor **) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_FilterProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoFilterProcessor(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  FilterProcessor *arg2 = (FilterProcessor *) 0 ;
  StereoFilterProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoFilterProcessor::StereoFilterProcessor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::StereoFilterProcessor",1,"FilterProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoFilterProcessor::StereoFilterProcessor",2,"FilterProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("new_StereoFilterProcessor",1,SWIGTYPE_p_FilterProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("new_StereoFilterProcessor",2,SWIGTYPE_p_FilterProcessor);
  }
  
  result = (StereoFilterProcessor *)new StereoFilterProcessor(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoFilterProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoFilterProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::getType",1,"StereoFilterProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_getType",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  result = (ObjectType)((StereoFilterProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoFilterProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::ProcessBlock",1,"StereoFilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFilterProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoFilterProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoFilterProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_ProcessBlock",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoFilterProcessor_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoFilterProcessor_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFilterProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::Tick",1,"StereoFilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFilterProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFilterProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFilterProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoFilterProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoFilterProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFilterProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::Tick",1,"StereoFilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFilterProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFilterProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFilterProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoFilterProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFilterProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::Tick",1,"StereoFilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFilterProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFilterProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFilterProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFilterProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::Tick",1,"StereoFilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFilterProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFilterProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoFilterProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoFilterProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoFilterProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoFilterProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoFilterProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoFilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoFilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoFilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoFilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static void swig_delete_StereoFilterProcessor(void *obj) {
StereoFilterProcessor *arg1 = (StereoFilterProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoFilterProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoFilterProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoFilterProcessor_attributes[] = {
    { "filter", _wrap_StereoFilterProcessor_filter_get, _wrap_StereoFilterProcessor_filter_set },
    {0,0,0}
};
static swig_lua_method swig_StereoFilterProcessor_methods[]= {
    { "getType", _wrap_StereoFilterProcessor_getType},
    { "ProcessBlock", _wrap_StereoFilterProcessor_ProcessBlock},
    { "Tick", _wrap_StereoFilterProcessor_Tick},
    {0,0}
};
static swig_lua_method swig_StereoFilterProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoFilterProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoFilterProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoFilterProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoFilterProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoFilterProcessor_Sf_SwigStatic = {
    "StereoFilterProcessor",
    swig_StereoFilterProcessor_Sf_SwigStatic_methods,
    swig_StereoFilterProcessor_Sf_SwigStatic_attributes,
    swig_StereoFilterProcessor_Sf_SwigStatic_constants,
    swig_StereoFilterProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoFilterProcessor_bases[] = {0,0};
static const char *swig_StereoFilterProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoFilterProcessor = { "StereoFilterProcessor", "StereoFilterProcessor", &SWIGTYPE_p_StereoFilterProcessor,_proxy__wrap_new_StereoFilterProcessor, swig_delete_StereoFilterProcessor, swig_StereoFilterProcessor_methods, swig_StereoFilterProcessor_attributes, &swig_StereoFilterProcessor_Sf_SwigStatic, swig_StereoFilterProcessor_meta, swig_StereoFilterProcessor_bases, swig_StereoFilterProcessor_base_names };

static int _wrap_StereoAmplifierProcessor_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  AmplifierProcessor **arg2 ;
  
  SWIG_check_num_args("StereoAmplifierProcessor::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::amp",1,"StereoAmplifierProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::amp",2,"AmplifierProcessor *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_amp_set",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_amp_set",2,SWIGTYPE_p_p_AmplifierProcessor);
  }
  
  {
    size_t ii;
    AmplifierProcessor * *b = (AmplifierProcessor * *) arg1->amp;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((AmplifierProcessor * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  AmplifierProcessor **result = 0 ;
  
  SWIG_check_num_args("StereoAmplifierProcessor::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::amp",1,"StereoAmplifierProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_amp_get",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  result = (AmplifierProcessor **)(AmplifierProcessor **) ((arg1)->amp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_AmplifierProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoAmplifierProcessor(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  AmplifierProcessor *arg2 = (AmplifierProcessor *) 0 ;
  StereoAmplifierProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoAmplifierProcessor::StereoAmplifierProcessor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::StereoAmplifierProcessor",1,"AmplifierProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::StereoAmplifierProcessor",2,"AmplifierProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("new_StereoAmplifierProcessor",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("new_StereoAmplifierProcessor",2,SWIGTYPE_p_AmplifierProcessor);
  }
  
  result = (StereoAmplifierProcessor *)new StereoAmplifierProcessor(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoAmplifierProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoAmplifierProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::getType",1,"StereoAmplifierProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_getType",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  result = (ObjectType)((StereoAmplifierProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoAmplifierProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::ProcessBlock",1,"StereoAmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoAmplifierProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoAmplifierProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_ProcessBlock",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_ProcessBlock",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_ProcessBlock",4,SWIGTYPE_p_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoAmplifierProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",1,"StereoAmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoAmplifierProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",1,"StereoAmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoAmplifierProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",1,"StereoAmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoAmplifierProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",1,"StereoAmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",5,SWIGTYPE_p_double);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoAmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoAmplifierProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoAmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoAmplifierProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoAmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoAmplifierProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoAmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoAmplifierProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoAmplifierProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoAmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoAmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoAmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoAmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static void swig_delete_StereoAmplifierProcessor(void *obj) {
StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoAmplifierProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoAmplifierProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoAmplifierProcessor_attributes[] = {
    { "amp", _wrap_StereoAmplifierProcessor_amp_get, _wrap_StereoAmplifierProcessor_amp_set },
    {0,0,0}
};
static swig_lua_method swig_StereoAmplifierProcessor_methods[]= {
    { "getType", _wrap_StereoAmplifierProcessor_getType},
    { "ProcessBlock", _wrap_StereoAmplifierProcessor_ProcessBlock},
    { "Tick", _wrap_StereoAmplifierProcessor_Tick},
    {0,0}
};
static swig_lua_method swig_StereoAmplifierProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoAmplifierProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoAmplifierProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoAmplifierProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoAmplifierProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoAmplifierProcessor_Sf_SwigStatic = {
    "StereoAmplifierProcessor",
    swig_StereoAmplifierProcessor_Sf_SwigStatic_methods,
    swig_StereoAmplifierProcessor_Sf_SwigStatic_attributes,
    swig_StereoAmplifierProcessor_Sf_SwigStatic_constants,
    swig_StereoAmplifierProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoAmplifierProcessor_bases[] = {0,0};
static const char *swig_StereoAmplifierProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoAmplifierProcessor = { "StereoAmplifierProcessor", "StereoAmplifierProcessor", &SWIGTYPE_p_StereoAmplifierProcessor,_proxy__wrap_new_StereoAmplifierProcessor, swig_delete_StereoAmplifierProcessor, swig_StereoAmplifierProcessor_methods, swig_StereoAmplifierProcessor_attributes, &swig_StereoAmplifierProcessor_Sf_SwigStatic, swig_StereoAmplifierProcessor_meta, swig_StereoAmplifierProcessor_bases, swig_StereoAmplifierProcessor_base_names };

static int _wrap_SpectrumProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  SpectrumProcessor *arg1 = (SpectrumProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("SpectrumProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SpectrumProcessor::getType",1,"SpectrumProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpectrumProcessor,0))){
    SWIG_fail_ptr("SpectrumProcessor_getType",1,SWIGTYPE_p_SpectrumProcessor);
  }
  
  result = (ObjectType)((SpectrumProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SpectrumProcessor(lua_State* L) {
  int SWIG_arg = 0;
  SpectrumProcessor *result = 0 ;
  
  SWIG_check_num_args("SpectrumProcessor::SpectrumProcessor",0,0)
  result = (SpectrumProcessor *)new SpectrumProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SpectrumProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SpectrumProcessor(void *obj) {
SpectrumProcessor *arg1 = (SpectrumProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_SpectrumProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SpectrumProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SpectrumProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SpectrumProcessor_methods[]= {
    { "getType", _wrap_SpectrumProcessor_getType},
    {0,0}
};
static swig_lua_method swig_SpectrumProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SpectrumProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SpectrumProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SpectrumProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SpectrumProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SpectrumProcessor_Sf_SwigStatic = {
    "SpectrumProcessor",
    swig_SpectrumProcessor_Sf_SwigStatic_methods,
    swig_SpectrumProcessor_Sf_SwigStatic_attributes,
    swig_SpectrumProcessor_Sf_SwigStatic_constants,
    swig_SpectrumProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SpectrumProcessor_bases[] = {0,0};
static const char *swig_SpectrumProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_SpectrumProcessor = { "SpectrumProcessor", "SpectrumProcessor", &SWIGTYPE_p_SpectrumProcessor,_proxy__wrap_new_SpectrumProcessor, swig_delete_SpectrumProcessor, swig_SpectrumProcessor_methods, swig_SpectrumProcessor_attributes, &swig_SpectrumProcessor_Sf_SwigStatic, swig_SpectrumProcessor_meta, swig_SpectrumProcessor_bases, swig_SpectrumProcessor_base_names };

static void swig_delete_SignalSourceProcessor(void *obj) {
SignalSourceProcessor *arg1 = (SignalSourceProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalSourceProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalSourceProcessor_methods[]= {
    {0,0}
};
static swig_lua_method swig_SignalSourceProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalSourceProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalSourceProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalSourceProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalSourceProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalSourceProcessor_Sf_SwigStatic = {
    "SignalSourceProcessor",
    swig_SignalSourceProcessor_Sf_SwigStatic_methods,
    swig_SignalSourceProcessor_Sf_SwigStatic_attributes,
    swig_SignalSourceProcessor_Sf_SwigStatic_constants,
    swig_SignalSourceProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalSourceProcessor_bases[] = {0,0};
static const char *swig_SignalSourceProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_SignalSourceProcessor = { "SignalSourceProcessor", "SignalSourceProcessor", &SWIGTYPE_p_SignalSourceProcessor,0, swig_delete_SignalSourceProcessor, swig_SignalSourceProcessor_methods, swig_SignalSourceProcessor_attributes, &swig_SignalSourceProcessor_Sf_SwigStatic, swig_SignalSourceProcessor_meta, swig_SignalSourceProcessor_bases, swig_SignalSourceProcessor_base_names };

static void swig_delete_SignalSinkProcessor(void *obj) {
SignalSinkProcessor *arg1 = (SignalSinkProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalSinkProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalSinkProcessor_methods[]= {
    {0,0}
};
static swig_lua_method swig_SignalSinkProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalSinkProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalSinkProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalSinkProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalSinkProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalSinkProcessor_Sf_SwigStatic = {
    "SignalSinkProcessor",
    swig_SignalSinkProcessor_Sf_SwigStatic_methods,
    swig_SignalSinkProcessor_Sf_SwigStatic_attributes,
    swig_SignalSinkProcessor_Sf_SwigStatic_constants,
    swig_SignalSinkProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalSinkProcessor_bases[] = {0,0};
static const char *swig_SignalSinkProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_SignalSinkProcessor = { "SignalSinkProcessor", "SignalSinkProcessor", &SWIGTYPE_p_SignalSinkProcessor,0, swig_delete_SignalSinkProcessor, swig_SignalSinkProcessor_methods, swig_SignalSinkProcessor_attributes, &swig_SignalSinkProcessor_Sf_SwigStatic, swig_SignalSinkProcessor_meta, swig_SignalSinkProcessor_bases, swig_SignalSinkProcessor_base_names };

static int _wrap_MonoOversampleProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoOversampleProcessor *arg1 = (MonoOversampleProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoOversampleProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoOversampleProcessor::getType",1,"MonoOversampleProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoOversampleProcessor,0))){
    SWIG_fail_ptr("MonoOversampleProcessor_getType",1,SWIGTYPE_p_MonoOversampleProcessor);
  }
  
  result = (ObjectType)((MonoOversampleProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoOversampleProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoOversampleProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoOversampleProcessor::MonoOversampleProcessor",0,0)
  result = (MonoOversampleProcessor *)new MonoOversampleProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoOversampleProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoOversampleProcessor(void *obj) {
MonoOversampleProcessor *arg1 = (MonoOversampleProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoOversampleProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoOversampleProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoOversampleProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoOversampleProcessor_methods[]= {
    { "getType", _wrap_MonoOversampleProcessor_getType},
    {0,0}
};
static swig_lua_method swig_MonoOversampleProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoOversampleProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoOversampleProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoOversampleProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoOversampleProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoOversampleProcessor_Sf_SwigStatic = {
    "MonoOversampleProcessor",
    swig_MonoOversampleProcessor_Sf_SwigStatic_methods,
    swig_MonoOversampleProcessor_Sf_SwigStatic_attributes,
    swig_MonoOversampleProcessor_Sf_SwigStatic_constants,
    swig_MonoOversampleProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoOversampleProcessor_bases[] = {0,0};
static const char *swig_MonoOversampleProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MonoOversampleProcessor = { "MonoOversampleProcessor", "MonoOversampleProcessor", &SWIGTYPE_p_MonoOversampleProcessor,_proxy__wrap_new_MonoOversampleProcessor, swig_delete_MonoOversampleProcessor, swig_MonoOversampleProcessor_methods, swig_MonoOversampleProcessor_attributes, &swig_MonoOversampleProcessor_Sf_SwigStatic, swig_MonoOversampleProcessor_meta, swig_MonoOversampleProcessor_bases, swig_MonoOversampleProcessor_base_names };

static int _wrap_MonoUpsampleProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoUpsampleProcessor *arg1 = (MonoUpsampleProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoUpsampleProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoUpsampleProcessor::getType",1,"MonoUpsampleProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoUpsampleProcessor,0))){
    SWIG_fail_ptr("MonoUpsampleProcessor_getType",1,SWIGTYPE_p_MonoUpsampleProcessor);
  }
  
  result = (ObjectType)((MonoUpsampleProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoUpsampleProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoUpsampleProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoUpsampleProcessor::MonoUpsampleProcessor",0,0)
  result = (MonoUpsampleProcessor *)new MonoUpsampleProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoUpsampleProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoUpsampleProcessor(void *obj) {
MonoUpsampleProcessor *arg1 = (MonoUpsampleProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoUpsampleProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoUpsampleProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoUpsampleProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoUpsampleProcessor_methods[]= {
    { "getType", _wrap_MonoUpsampleProcessor_getType},
    {0,0}
};
static swig_lua_method swig_MonoUpsampleProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoUpsampleProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoUpsampleProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoUpsampleProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoUpsampleProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoUpsampleProcessor_Sf_SwigStatic = {
    "MonoUpsampleProcessor",
    swig_MonoUpsampleProcessor_Sf_SwigStatic_methods,
    swig_MonoUpsampleProcessor_Sf_SwigStatic_attributes,
    swig_MonoUpsampleProcessor_Sf_SwigStatic_constants,
    swig_MonoUpsampleProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoUpsampleProcessor_bases[] = {0,0};
static const char *swig_MonoUpsampleProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MonoUpsampleProcessor = { "MonoUpsampleProcessor", "MonoUpsampleProcessor", &SWIGTYPE_p_MonoUpsampleProcessor,_proxy__wrap_new_MonoUpsampleProcessor, swig_delete_MonoUpsampleProcessor, swig_MonoUpsampleProcessor_methods, swig_MonoUpsampleProcessor_attributes, &swig_MonoUpsampleProcessor_Sf_SwigStatic, swig_MonoUpsampleProcessor_meta, swig_MonoUpsampleProcessor_bases, swig_MonoUpsampleProcessor_base_names };

static int _wrap_MonoDownsampleProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoDownsampleProcessor *arg1 = (MonoDownsampleProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoDownsampleProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoDownsampleProcessor::getType",1,"MonoDownsampleProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoDownsampleProcessor,0))){
    SWIG_fail_ptr("MonoDownsampleProcessor_getType",1,SWIGTYPE_p_MonoDownsampleProcessor);
  }
  
  result = (ObjectType)((MonoDownsampleProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoDownsampleProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoDownsampleProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoDownsampleProcessor::MonoDownsampleProcessor",0,0)
  result = (MonoDownsampleProcessor *)new MonoDownsampleProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoDownsampleProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoDownsampleProcessor(void *obj) {
MonoDownsampleProcessor *arg1 = (MonoDownsampleProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoDownsampleProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoDownsampleProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoDownsampleProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoDownsampleProcessor_methods[]= {
    { "getType", _wrap_MonoDownsampleProcessor_getType},
    {0,0}
};
static swig_lua_method swig_MonoDownsampleProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoDownsampleProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoDownsampleProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoDownsampleProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoDownsampleProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoDownsampleProcessor_Sf_SwigStatic = {
    "MonoDownsampleProcessor",
    swig_MonoDownsampleProcessor_Sf_SwigStatic_methods,
    swig_MonoDownsampleProcessor_Sf_SwigStatic_attributes,
    swig_MonoDownsampleProcessor_Sf_SwigStatic_constants,
    swig_MonoDownsampleProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoDownsampleProcessor_bases[] = {0,0};
static const char *swig_MonoDownsampleProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MonoDownsampleProcessor = { "MonoDownsampleProcessor", "MonoDownsampleProcessor", &SWIGTYPE_p_MonoDownsampleProcessor,_proxy__wrap_new_MonoDownsampleProcessor, swig_delete_MonoDownsampleProcessor, swig_MonoDownsampleProcessor_methods, swig_MonoDownsampleProcessor_attributes, &swig_MonoDownsampleProcessor_Sf_SwigStatic, swig_MonoDownsampleProcessor_meta, swig_MonoDownsampleProcessor_bases, swig_MonoDownsampleProcessor_base_names };

static void swig_delete_OperatorProcessor(void *obj) {
OperatorProcessor *arg1 = (OperatorProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_OperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OperatorProcessor_methods[]= {
    {0,0}
};
static swig_lua_method swig_OperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OperatorProcessor_Sf_SwigStatic = {
    "OperatorProcessor",
    swig_OperatorProcessor_Sf_SwigStatic_methods,
    swig_OperatorProcessor_Sf_SwigStatic_attributes,
    swig_OperatorProcessor_Sf_SwigStatic_constants,
    swig_OperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OperatorProcessor_bases[] = {0,0};
static const char *swig_OperatorProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_OperatorProcessor = { "OperatorProcessor", "OperatorProcessor", &SWIGTYPE_p_OperatorProcessor,0, swig_delete_OperatorProcessor, swig_OperatorProcessor_methods, swig_OperatorProcessor_attributes, &swig_OperatorProcessor_Sf_SwigStatic, swig_OperatorProcessor_meta, swig_OperatorProcessor_bases, swig_OperatorProcessor_base_names };

static int _wrap_MonoOperatorProcessor_list_set(lua_State* L) {
  int SWIG_arg = 0;
  MonoOperatorProcessor *arg1 = (MonoOperatorProcessor *) 0 ;
  MonoProcessorList *arg2 = (MonoProcessorList *) 0 ;
  
  SWIG_check_num_args("MonoOperatorProcessor::list",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoOperatorProcessor::list",1,"MonoOperatorProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MonoOperatorProcessor::list",2,"MonoProcessorList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoOperatorProcessor,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_list_set",1,SWIGTYPE_p_MonoOperatorProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_MonoProcessor_p_t,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_list_set",2,SWIGTYPE_p_std__listT_MonoProcessor_p_t);
  }
  
  if (arg1) (arg1)->list = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoOperatorProcessor_list_get(lua_State* L) {
  int SWIG_arg = 0;
  MonoOperatorProcessor *arg1 = (MonoOperatorProcessor *) 0 ;
  MonoProcessorList *result = 0 ;
  
  SWIG_check_num_args("MonoOperatorProcessor::list",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoOperatorProcessor::list",1,"MonoOperatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoOperatorProcessor,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_list_get",1,SWIGTYPE_p_MonoOperatorProcessor);
  }
  
  result = (MonoProcessorList *)& ((arg1)->list);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_MonoProcessor_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoOperatorProcessor::MonoOperatorProcessor",0,0)
  result = (MonoOperatorProcessor *)new MonoOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoOperatorProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoOperatorProcessor *arg1 = (MonoOperatorProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoOperatorProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoOperatorProcessor::getType",1,"MonoOperatorProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoOperatorProcessor,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_getType",1,SWIGTYPE_p_MonoOperatorProcessor);
  }
  
  result = (ObjectType)((MonoOperatorProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoOperatorProcessor_GetSamples(lua_State* L) {
  int SWIG_arg = 0;
  MonoOperatorProcessor *arg1 = (MonoOperatorProcessor *) 0 ;
  MonoProcessor *arg2 = (MonoProcessor *) 0 ;
  size_t arg3 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoOperatorProcessor::GetSamples",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoOperatorProcessor::GetSamples",1,"MonoOperatorProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MonoOperatorProcessor::GetSamples",2,"MonoProcessor *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MonoOperatorProcessor::GetSamples",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoOperatorProcessor::GetSamples",4,"DspFloatType *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("MonoOperatorProcessor::GetSamples",5,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoOperatorProcessor,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_GetSamples",1,SWIGTYPE_p_MonoOperatorProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_GetSamples",2,SWIGTYPE_p_MonoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_GetSamples",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_GetSamples",5,SWIGTYPE_p_double);
  }
  
  (arg1)->GetSamples(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoOperatorProcessor(void *obj) {
MonoOperatorProcessor *arg1 = (MonoOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoOperatorProcessor_attributes[] = {
    { "list", _wrap_MonoOperatorProcessor_list_get, _wrap_MonoOperatorProcessor_list_set },
    {0,0,0}
};
static swig_lua_method swig_MonoOperatorProcessor_methods[]= {
    { "getType", _wrap_MonoOperatorProcessor_getType},
    { "GetSamples", _wrap_MonoOperatorProcessor_GetSamples},
    {0,0}
};
static swig_lua_method swig_MonoOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoOperatorProcessor_Sf_SwigStatic = {
    "MonoOperatorProcessor",
    swig_MonoOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoOperatorProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MonoOperatorProcessor = { "MonoOperatorProcessor", "MonoOperatorProcessor", &SWIGTYPE_p_MonoOperatorProcessor,_proxy__wrap_new_MonoOperatorProcessor, swig_delete_MonoOperatorProcessor, swig_MonoOperatorProcessor_methods, swig_MonoOperatorProcessor_attributes, &swig_MonoOperatorProcessor_Sf_SwigStatic, swig_MonoOperatorProcessor_meta, swig_MonoOperatorProcessor_bases, swig_MonoOperatorProcessor_base_names };

static int _wrap_new_MonoCascadeOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoCascadeOperatorProcessor::MonoCascadeOperatorProcessor",0,0)
  result = (MonoCascadeOperatorProcessor *)new MonoCascadeOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoCascadeOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoCascadeOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeOperatorProcessor *arg1 = (MonoCascadeOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoCascadeOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoCascadeOperatorProcessor::ProcessBlock",1,"MonoCascadeOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoCascadeOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoCascadeOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoCascadeOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoCascadeOperatorProcessor,0))){
    SWIG_fail_ptr("MonoCascadeOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoCascadeOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoCascadeOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoCascadeOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoCascadeOperatorProcessor(void *obj) {
MonoCascadeOperatorProcessor *arg1 = (MonoCascadeOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoCascadeOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoCascadeOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoCascadeOperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoCascadeOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoCascadeOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoCascadeOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoCascadeOperatorProcessor_Sf_SwigStatic = {
    "MonoCascadeOperatorProcessor",
    swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoCascadeOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoCascadeOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoCascadeOperatorProcessor = { "MonoCascadeOperatorProcessor", "MonoCascadeOperatorProcessor", &SWIGTYPE_p_MonoCascadeOperatorProcessor,_proxy__wrap_new_MonoCascadeOperatorProcessor, swig_delete_MonoCascadeOperatorProcessor, swig_MonoCascadeOperatorProcessor_methods, swig_MonoCascadeOperatorProcessor_attributes, &swig_MonoCascadeOperatorProcessor_Sf_SwigStatic, swig_MonoCascadeOperatorProcessor_meta, swig_MonoCascadeOperatorProcessor_bases, swig_MonoCascadeOperatorProcessor_base_names };

static int _wrap_new_MonoMultiplierOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoMultiplierOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoMultiplierOperatorProcessor::MonoMultiplierOperatorProcessor",0,0)
  result = (MonoMultiplierOperatorProcessor *)new MonoMultiplierOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoMultiplierOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoMultiplierOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoMultiplierOperatorProcessor *arg1 = (MonoMultiplierOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoMultiplierOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoMultiplierOperatorProcessor::ProcessBlock",1,"MonoMultiplierOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoMultiplierOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoMultiplierOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoMultiplierOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoMultiplierOperatorProcessor,0))){
    SWIG_fail_ptr("MonoMultiplierOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoMultiplierOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoMultiplierOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoMultiplierOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoMultiplierOperatorProcessor(void *obj) {
MonoMultiplierOperatorProcessor *arg1 = (MonoMultiplierOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoMultiplierOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoMultiplierOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoMultiplierOperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoMultiplierOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoMultiplierOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoMultiplierOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic = {
    "MonoMultiplierOperatorProcessor",
    swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoMultiplierOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoMultiplierOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoMultiplierOperatorProcessor = { "MonoMultiplierOperatorProcessor", "MonoMultiplierOperatorProcessor", &SWIGTYPE_p_MonoMultiplierOperatorProcessor,_proxy__wrap_new_MonoMultiplierOperatorProcessor, swig_delete_MonoMultiplierOperatorProcessor, swig_MonoMultiplierOperatorProcessor_methods, swig_MonoMultiplierOperatorProcessor_attributes, &swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic, swig_MonoMultiplierOperatorProcessor_meta, swig_MonoMultiplierOperatorProcessor_bases, swig_MonoMultiplierOperatorProcessor_base_names };

static int _wrap_new_MonoAdderOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoAdderOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoAdderOperatorProcessor::MonoAdderOperatorProcessor",0,0)
  result = (MonoAdderOperatorProcessor *)new MonoAdderOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoAdderOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoAdderOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoAdderOperatorProcessor *arg1 = (MonoAdderOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoAdderOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoAdderOperatorProcessor::ProcessBlock",1,"MonoAdderOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoAdderOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoAdderOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoAdderOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoAdderOperatorProcessor,0))){
    SWIG_fail_ptr("MonoAdderOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoAdderOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoAdderOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoAdderOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoAdderOperatorProcessor(void *obj) {
MonoAdderOperatorProcessor *arg1 = (MonoAdderOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoAdderOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoAdderOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoAdderOperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoAdderOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoAdderOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoAdderOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoAdderOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoAdderOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoAdderOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoAdderOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoAdderOperatorProcessor_Sf_SwigStatic = {
    "MonoAdderOperatorProcessor",
    swig_MonoAdderOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoAdderOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoAdderOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoAdderOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoAdderOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoAdderOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoAdderOperatorProcessor = { "MonoAdderOperatorProcessor", "MonoAdderOperatorProcessor", &SWIGTYPE_p_MonoAdderOperatorProcessor,_proxy__wrap_new_MonoAdderOperatorProcessor, swig_delete_MonoAdderOperatorProcessor, swig_MonoAdderOperatorProcessor_methods, swig_MonoAdderOperatorProcessor_attributes, &swig_MonoAdderOperatorProcessor_Sf_SwigStatic, swig_MonoAdderOperatorProcessor_meta, swig_MonoAdderOperatorProcessor_bases, swig_MonoAdderOperatorProcessor_base_names };

static int _wrap_new_MonoSubtractorOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoSubtractorOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoSubtractorOperatorProcessor::MonoSubtractorOperatorProcessor",0,0)
  result = (MonoSubtractorOperatorProcessor *)new MonoSubtractorOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoSubtractorOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSubtractorOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoSubtractorOperatorProcessor *arg1 = (MonoSubtractorOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoSubtractorOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoSubtractorOperatorProcessor::ProcessBlock",1,"MonoSubtractorOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoSubtractorOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoSubtractorOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoSubtractorOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoSubtractorOperatorProcessor,0))){
    SWIG_fail_ptr("MonoSubtractorOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoSubtractorOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoSubtractorOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoSubtractorOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoSubtractorOperatorProcessor(void *obj) {
MonoSubtractorOperatorProcessor *arg1 = (MonoSubtractorOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoSubtractorOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoSubtractorOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoSubtractorOperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoSubtractorOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoSubtractorOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoSubtractorOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic = {
    "MonoSubtractorOperatorProcessor",
    swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoSubtractorOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoSubtractorOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoSubtractorOperatorProcessor = { "MonoSubtractorOperatorProcessor", "MonoSubtractorOperatorProcessor", &SWIGTYPE_p_MonoSubtractorOperatorProcessor,_proxy__wrap_new_MonoSubtractorOperatorProcessor, swig_delete_MonoSubtractorOperatorProcessor, swig_MonoSubtractorOperatorProcessor_methods, swig_MonoSubtractorOperatorProcessor_attributes, &swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic, swig_MonoSubtractorOperatorProcessor_meta, swig_MonoSubtractorOperatorProcessor_bases, swig_MonoSubtractorOperatorProcessor_base_names };

static int _wrap_new_MonoModulatorOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoModulatorOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoModulatorOperatorProcessor::MonoModulatorOperatorProcessor",0,0)
  result = (MonoModulatorOperatorProcessor *)new MonoModulatorOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoModulatorOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoModulatorOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoModulatorOperatorProcessor *arg1 = (MonoModulatorOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoModulatorOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoModulatorOperatorProcessor::ProcessBlock",1,"MonoModulatorOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoModulatorOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoModulatorOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoModulatorOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoModulatorOperatorProcessor,0))){
    SWIG_fail_ptr("MonoModulatorOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoModulatorOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoModulatorOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoModulatorOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoModulatorOperatorProcessor(void *obj) {
MonoModulatorOperatorProcessor *arg1 = (MonoModulatorOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoModulatorOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoModulatorOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoModulatorOperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoModulatorOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoModulatorOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoModulatorOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoModulatorOperatorProcessor_Sf_SwigStatic = {
    "MonoModulatorOperatorProcessor",
    swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoModulatorOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoModulatorOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoModulatorOperatorProcessor = { "MonoModulatorOperatorProcessor", "MonoModulatorOperatorProcessor", &SWIGTYPE_p_MonoModulatorOperatorProcessor,_proxy__wrap_new_MonoModulatorOperatorProcessor, swig_delete_MonoModulatorOperatorProcessor, swig_MonoModulatorOperatorProcessor_methods, swig_MonoModulatorOperatorProcessor_attributes, &swig_MonoModulatorOperatorProcessor_Sf_SwigStatic, swig_MonoModulatorOperatorProcessor_meta, swig_MonoModulatorOperatorProcessor_bases, swig_MonoModulatorOperatorProcessor_base_names };

static int _wrap_MonoBlendOperatorProcessor_blend_set(lua_State* L) {
  int SWIG_arg = 0;
  MonoBlendOperatorProcessor *arg1 = (MonoBlendOperatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("MonoBlendOperatorProcessor::blend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoBlendOperatorProcessor::blend",1,"MonoBlendOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoBlendOperatorProcessor::blend",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoBlendOperatorProcessor,0))){
    SWIG_fail_ptr("MonoBlendOperatorProcessor_blend_set",1,SWIGTYPE_p_MonoBlendOperatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->blend = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoBlendOperatorProcessor_blend_get(lua_State* L) {
  int SWIG_arg = 0;
  MonoBlendOperatorProcessor *arg1 = (MonoBlendOperatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoBlendOperatorProcessor::blend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoBlendOperatorProcessor::blend",1,"MonoBlendOperatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoBlendOperatorProcessor,0))){
    SWIG_fail_ptr("MonoBlendOperatorProcessor_blend_get",1,SWIGTYPE_p_MonoBlendOperatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->blend);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoBlendOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoBlendOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoBlendOperatorProcessor::MonoBlendOperatorProcessor",0,0)
  result = (MonoBlendOperatorProcessor *)new MonoBlendOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoBlendOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoBlendOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoBlendOperatorProcessor *arg1 = (MonoBlendOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoBlendOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoBlendOperatorProcessor::ProcessBlock",1,"MonoBlendOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoBlendOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoBlendOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoBlendOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoBlendOperatorProcessor,0))){
    SWIG_fail_ptr("MonoBlendOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoBlendOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoBlendOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoBlendOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoBlendOperatorProcessor(void *obj) {
MonoBlendOperatorProcessor *arg1 = (MonoBlendOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoBlendOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoBlendOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoBlendOperatorProcessor_attributes[] = {
    { "blend", _wrap_MonoBlendOperatorProcessor_blend_get, _wrap_MonoBlendOperatorProcessor_blend_set },
    {0,0,0}
};
static swig_lua_method swig_MonoBlendOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoBlendOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoBlendOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoBlendOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoBlendOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoBlendOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoBlendOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoBlendOperatorProcessor_Sf_SwigStatic = {
    "MonoBlendOperatorProcessor",
    swig_MonoBlendOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoBlendOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoBlendOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoBlendOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoBlendOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoBlendOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoBlendOperatorProcessor = { "MonoBlendOperatorProcessor", "MonoBlendOperatorProcessor", &SWIGTYPE_p_MonoBlendOperatorProcessor,_proxy__wrap_new_MonoBlendOperatorProcessor, swig_delete_MonoBlendOperatorProcessor, swig_MonoBlendOperatorProcessor_methods, swig_MonoBlendOperatorProcessor_attributes, &swig_MonoBlendOperatorProcessor_Sf_SwigStatic, swig_MonoBlendOperatorProcessor_meta, swig_MonoBlendOperatorProcessor_bases, swig_MonoBlendOperatorProcessor_base_names };

static int _wrap_new_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  std::complex< DspFloatType > *result = 0 ;
  
  SWIG_check_num_args("std::complex< DspFloatType >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< DspFloatType >::complex",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< DspFloatType >::complex",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< DspFloatType > *)new std::complex< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  std::complex< DspFloatType > *result = 0 ;
  
  SWIG_check_num_args("std::complex< DspFloatType >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< DspFloatType >::complex",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< DspFloatType > *)new std::complex< DspFloatType >((double const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< DspFloatType > *result = 0 ;
  
  SWIG_check_num_args("std::complex< DspFloatType >::complex",0,0)
  result = (std::complex< DspFloatType > *)new std::complex< DspFloatType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< DspFloatType > *result = 0 ;
  
  SWIG_check_num_args("std::complex< DspFloatType >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< DspFloatType >::complex",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_complex",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::complex< DspFloatType > *)new std::complex< DspFloatType >((std::complex< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< DspFloatType >::complex(double const &,double const &)\n"
    "    std::complex< DspFloatType >::complex(double const &)\n"
    "    std::complex< DspFloatType >::complex()\n"
    "    std::complex< DspFloatType >::complex(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< DspFloatType > *arg1 = (std::complex< DspFloatType > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< DspFloatType >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< DspFloatType >::real",1,"std::complex< DspFloatType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< DspFloatType > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< DspFloatType > *arg1 = (std::complex< DspFloatType > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< DspFloatType >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< DspFloatType >::imag",1,"std::complex< DspFloatType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< DspFloatType > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< DspFloatType > *arg1 = (std::complex< DspFloatType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< DspFloatType >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< DspFloatType >::real",1,"std::complex< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< DspFloatType >::real",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< DspFloatType >::real() const\n"
    "    std::complex< DspFloatType >::real(double)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< DspFloatType > *arg1 = (std::complex< DspFloatType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< DspFloatType >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< DspFloatType >::imag",1,"std::complex< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< DspFloatType >::imag",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< DspFloatType >::imag() const\n"
    "    std::complex< DspFloatType >::imag(double)\n");
  lua_error(L);return 0;
}


static int _wrap_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< DspFloatType > *arg1 = (std::complex< DspFloatType > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< DspFloatType >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< DspFloatType >::__add__",1,"std::complex< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< DspFloatType >::__add__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex___add",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_DspFloatType_Sg____add____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< DspFloatType > *arg1 = (std::complex< DspFloatType > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< DspFloatType >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< DspFloatType >::__sub__",1,"std::complex< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< DspFloatType >::__sub__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex___sub",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_DspFloatType_Sg____sub____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< DspFloatType > *arg1 = (std::complex< DspFloatType > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< DspFloatType >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< DspFloatType >::__div__",1,"std::complex< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< DspFloatType >::__div__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex___div",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_DspFloatType_Sg____div____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< DspFloatType > *arg1 = (std::complex< DspFloatType > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< DspFloatType >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< DspFloatType >::__mul__",1,"std::complex< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< DspFloatType >::__mul__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex___mul",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_DspFloatType_Sg____mul____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< DspFloatType > *arg1 = (std::complex< DspFloatType > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< DspFloatType >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< DspFloatType >::__pow__",1,"std::complex< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< DspFloatType >::__pow__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex___pow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_DspFloatType_Sg____pow____SWIG_0(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< DspFloatType > *arg1 = (std::complex< DspFloatType > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< DspFloatType >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< DspFloatType >::__pow__",1,"std::complex< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< DspFloatType >::__pow__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_DspFloatType_Sg____pow____SWIG_1(arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< DspFloatType >::__pow__(std::complex< double > const &)\n"
    "    std::complex< DspFloatType >::__pow__(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< DspFloatType > *arg1 = (std::complex< DspFloatType > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< DspFloatType >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< DspFloatType >::__eq__",1,"std::complex< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< DspFloatType >::__eq__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex___eq",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex___eq",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (bool)std_complex_Sl_DspFloatType_Sg____eq____SWIG(arg1,(std::complex< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_complex(void *obj) {
std::complex< DspFloatType > *arg1 = (std::complex< DspFloatType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_complex_methods[]= {
    { "real", _wrap_complex_real},
    { "imag", _wrap_complex_imag},
    { "__add", _wrap_complex___add},
    { "__sub", _wrap_complex___sub},
    { "__div", _wrap_complex___div},
    { "__mul", _wrap_complex___mul},
    { "__pow", _wrap_complex___pow},
    { "__eq", _wrap_complex___eq},
    {0,0}
};
static swig_lua_method swig_complex_meta[] = {
    { "__add", _wrap_complex___add},
    { "__sub", _wrap_complex___sub},
    { "__div", _wrap_complex___div},
    { "__mul", _wrap_complex___mul},
    { "__pow", _wrap_complex___pow},
    { "__eq", _wrap_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex_Sf_SwigStatic = {
    "complex",
    swig_complex_Sf_SwigStatic_methods,
    swig_complex_Sf_SwigStatic_attributes,
    swig_complex_Sf_SwigStatic_constants,
    swig_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex_bases[] = {0};
static const char *swig_complex_base_names[] = {0};
static swig_lua_class _wrap_class_complex = { "complex", "complex", &SWIGTYPE_p_std__complexT_double_t,_proxy__wrap_new_complex, swig_delete_complex, swig_complex_methods, swig_complex_attributes, &swig_complex_Sf_SwigStatic, swig_complex_meta, swig_complex_bases, swig_complex_base_names };

static int _wrap_new_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::vector",0,0)
  result = (std::vector< float,Allocator::aligned_allocator< float,64 > > *)new std::vector< float,Allocator::aligned_allocator< float,64 > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::vector",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< float,Allocator::aligned_allocator< float,64 > > *)new std::vector< float,Allocator::aligned_allocator< float,64 > >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< float,Allocator::aligned_allocator< float,64 > > *)new std::vector< float,Allocator::aligned_allocator< float,64 > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = 0 ;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::vector",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("new_float_vector",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  result = (std::vector< float,Allocator::aligned_allocator< float,64 > > *)new std::vector< float,Allocator::aligned_allocator< float,64 > >((std::vector< float,Allocator::aligned_allocator< float,64 > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float,Allocator::aligned_allocator< float,64 > >::vector()\n"
    "    std::vector< float,Allocator::aligned_allocator< float,64 > >::vector(size_t,float const &)\n"
    "    std::vector< float,Allocator::aligned_allocator< float,64 > >::vector(size_t)\n"
    "    std::vector< float,Allocator::aligned_allocator< float,64 > >::vector(std::vector< float,Allocator::aligned_allocator< float,64 > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::__getitem__",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector___getitem",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_vector_Sl_float_Sc_Allocator_aligned_allocator_Sl_float_Sc_64_Sg__Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::__setitem__",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::__setitem__",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector___setitem",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  std_vector_Sl_float_Sc_Allocator_aligned_allocator_Sl_float_Sc_64_Sg__Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float,Allocator::aligned_allocator< float,64 > > > result;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::ibegin",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_ibegin",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  result = std_vector_Sl_float_Sc_Allocator_aligned_allocator_Sl_float_Sc_64_Sg__Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< float,Allocator::aligned_allocator< float,64 > > * resultptr = new std::vector_iterator< float,Allocator::aligned_allocator< float,64 > >((const std::vector_iterator< float,Allocator::aligned_allocator< float,64 > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_Allocator__aligned_allocatorT_float_64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float,Allocator::aligned_allocator< float,64 > > > result;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::iend",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_iend",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  result = std_vector_Sl_float_Sc_Allocator_aligned_allocator_Sl_float_Sc_64_Sg__Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< float,Allocator::aligned_allocator< float,64 > > * resultptr = new std::vector_iterator< float,Allocator::aligned_allocator< float,64 > >((const std::vector_iterator< float,Allocator::aligned_allocator< float,64 > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_Allocator__aligned_allocatorT_float_64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::erase",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_float_Sc_Allocator_aligned_allocator_Sl_float_Sc_64_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::erase",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_float_Sc_Allocator_aligned_allocator_Sl_float_Sc_64_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float,Allocator::aligned_allocator< float,64 > >::erase(size_t)\n"
    "    std::vector< float,Allocator::aligned_allocator< float,64 > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::front",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_front",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  result = (float *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::back",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_back",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  result = (float *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::push_back",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::push_back",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_push_back",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::pop_back",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::at",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_at",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::assign",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::assign",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_assign",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::data",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_data",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::size",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_size",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::empty",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_empty",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  result = (bool)((std::vector< float,Allocator::aligned_allocator< float,64 > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::resize",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_resize",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::clear",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_clear",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::swap",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::swap",2,"std::vector< float,Allocator::aligned_allocator< float,64 > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_swap",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_swap",2,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::shrink_to_fit",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::reserve",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_reserve",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::max_size",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_max_size",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float,Allocator::aligned_allocator< float,64 > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float,Allocator::aligned_allocator< float,64 > >::capacity",1,"std::vector< float,Allocator::aligned_allocator< float,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,0))){
    SWIG_fail_ptr("float_vector_capacity",1,SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_vector(void *obj) {
std::vector< float,Allocator::aligned_allocator< float,64 > > *arg1 = (std::vector< float,Allocator::aligned_allocator< float,64 > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_vector_methods[]= {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    { "ibegin", _wrap_float_vector_ibegin},
    { "iend", _wrap_float_vector_iend},
    { "erase", _wrap_float_vector_erase},
    { "front", _wrap_float_vector_front},
    { "back", _wrap_float_vector_back},
    { "push_back", _wrap_float_vector_push_back},
    { "pop_back", _wrap_float_vector_pop_back},
    { "at", _wrap_float_vector_at},
    { "assign", _wrap_float_vector_assign},
    { "data", _wrap_float_vector_data},
    { "size", _wrap_float_vector_size},
    { "empty", _wrap_float_vector_empty},
    { "resize", _wrap_float_vector_resize},
    { "clear", _wrap_float_vector_clear},
    { "swap", _wrap_float_vector_swap},
    { "shrink_to_fit", _wrap_float_vector_shrink_to_fit},
    { "reserve", _wrap_float_vector_reserve},
    { "max_size", _wrap_float_vector_max_size},
    { "capacity", _wrap_float_vector_capacity},
    {0,0}
};
static swig_lua_method swig_float_vector_meta[] = {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_vector_Sf_SwigStatic = {
    "float_vector",
    swig_float_vector_Sf_SwigStatic_methods,
    swig_float_vector_Sf_SwigStatic_attributes,
    swig_float_vector_Sf_SwigStatic_constants,
    swig_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_vector_bases[] = {0};
static const char *swig_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_float_vector = { "float_vector", "float_vector", &SWIGTYPE_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,_proxy__wrap_new_float_vector, swig_delete_float_vector, swig_float_vector_methods, swig_float_vector_attributes, &swig_float_vector_Sf_SwigStatic, swig_float_vector_meta, swig_float_vector_bases, swig_float_vector_base_names };

static int _wrap_new_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::vector",0,0)
  result = (std::vector< double,Allocator::aligned_allocator< double,64 > > *)new std::vector< double,Allocator::aligned_allocator< double,64 > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::vector",2,"double const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< double,Allocator::aligned_allocator< double,64 > > *)new std::vector< double,Allocator::aligned_allocator< double,64 > >(arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< double,Allocator::aligned_allocator< double,64 > > *)new std::vector< double,Allocator::aligned_allocator< double,64 > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = 0 ;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::vector",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("new_double_vector",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  result = (std::vector< double,Allocator::aligned_allocator< double,64 > > *)new std::vector< double,Allocator::aligned_allocator< double,64 > >((std::vector< double,Allocator::aligned_allocator< double,64 > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double,Allocator::aligned_allocator< double,64 > >::vector()\n"
    "    std::vector< double,Allocator::aligned_allocator< double,64 > >::vector(size_t,double const &)\n"
    "    std::vector< double,Allocator::aligned_allocator< double,64 > >::vector(size_t)\n"
    "    std::vector< double,Allocator::aligned_allocator< double,64 > >::vector(std::vector< double,Allocator::aligned_allocator< double,64 > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::__getitem__",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector___getitem",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)std_vector_Sl_double_Sc_Allocator_aligned_allocator_Sl_double_Sc_64_Sg__Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::__setitem__",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::__setitem__",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector___setitem",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  std_vector_Sl_double_Sc_Allocator_aligned_allocator_Sl_double_Sc_64_Sg__Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double,Allocator::aligned_allocator< double,64 > > > result;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::ibegin",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_ibegin",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  result = std_vector_Sl_double_Sc_Allocator_aligned_allocator_Sl_double_Sc_64_Sg__Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< double,Allocator::aligned_allocator< double,64 > > * resultptr = new std::vector_iterator< double,Allocator::aligned_allocator< double,64 > >((const std::vector_iterator< double,Allocator::aligned_allocator< double,64 > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_Allocator__aligned_allocatorT_double_64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double,Allocator::aligned_allocator< double,64 > > > result;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::iend",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_iend",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  result = std_vector_Sl_double_Sc_Allocator_aligned_allocator_Sl_double_Sc_64_Sg__Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< double,Allocator::aligned_allocator< double,64 > > * resultptr = new std::vector_iterator< double,Allocator::aligned_allocator< double,64 > >((const std::vector_iterator< double,Allocator::aligned_allocator< double,64 > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_Allocator__aligned_allocatorT_double_64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::erase",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_double_Sc_Allocator_aligned_allocator_Sl_double_Sc_64_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::erase",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_double_Sc_Allocator_aligned_allocator_Sl_double_Sc_64_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_double_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double,Allocator::aligned_allocator< double,64 > >::erase(size_t)\n"
    "    std::vector< double,Allocator::aligned_allocator< double,64 > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::front",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_front",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::back",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_back",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::push_back",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::push_back",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_push_back",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::pop_back",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::at",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_at",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::assign",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::assign",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_assign",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::data",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_data",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::size",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_size",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::empty",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_empty",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  result = (bool)((std::vector< double,Allocator::aligned_allocator< double,64 > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::resize",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_resize",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::clear",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_clear",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::swap",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::swap",2,"std::vector< double,Allocator::aligned_allocator< double,64 > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_swap",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_swap",2,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::shrink_to_fit",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::reserve",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_reserve",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::max_size",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_max_size",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double,Allocator::aligned_allocator< double,64 > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double,Allocator::aligned_allocator< double,64 > >::capacity",1,"std::vector< double,Allocator::aligned_allocator< double,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("double_vector_capacity",1,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_vector(void *obj) {
std::vector< double,Allocator::aligned_allocator< double,64 > > *arg1 = (std::vector< double,Allocator::aligned_allocator< double,64 > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_vector_methods[]= {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    { "ibegin", _wrap_double_vector_ibegin},
    { "iend", _wrap_double_vector_iend},
    { "erase", _wrap_double_vector_erase},
    { "front", _wrap_double_vector_front},
    { "back", _wrap_double_vector_back},
    { "push_back", _wrap_double_vector_push_back},
    { "pop_back", _wrap_double_vector_pop_back},
    { "at", _wrap_double_vector_at},
    { "assign", _wrap_double_vector_assign},
    { "data", _wrap_double_vector_data},
    { "size", _wrap_double_vector_size},
    { "empty", _wrap_double_vector_empty},
    { "resize", _wrap_double_vector_resize},
    { "clear", _wrap_double_vector_clear},
    { "swap", _wrap_double_vector_swap},
    { "shrink_to_fit", _wrap_double_vector_shrink_to_fit},
    { "reserve", _wrap_double_vector_reserve},
    { "max_size", _wrap_double_vector_max_size},
    { "capacity", _wrap_double_vector_capacity},
    {0,0}
};
static swig_lua_method swig_double_vector_meta[] = {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_vector_Sf_SwigStatic = {
    "double_vector",
    swig_double_vector_Sf_SwigStatic_methods,
    swig_double_vector_Sf_SwigStatic_attributes,
    swig_double_vector_Sf_SwigStatic_constants,
    swig_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_vector_bases[] = {0};
static const char *swig_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_double_vector = { "double_vector", "double_vector", &SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,_proxy__wrap_new_double_vector, swig_delete_double_vector, swig_double_vector_methods, swig_double_vector_attributes, &swig_double_vector_Sf_SwigStatic, swig_double_vector_meta, swig_double_vector_bases, swig_double_vector_base_names };

static int _wrap_new_complex_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::vector",0,0)
  result = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *)new std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::complex< float > *arg2 = 0 ;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::vector",2,"std::complex< float > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_complex_float_vector",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *)new std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >(arg1,(std::complex< float > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *)new std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = 0 ;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::vector",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("new_complex_float_vector",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  result = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *)new std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >((std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_complex_float_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_complex_float_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_complex_float_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_complex_float_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::vector()\n"
    "    std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::vector(size_t,std::complex< float > const &)\n"
    "    std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::vector(size_t)\n"
    "    std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::vector(std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::__getitem__",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector___getitem",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_float_Sg__Sc_64_Sg__Sg____getitem____SWIG(arg1,arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::complex< float > > arg3 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::__setitem__",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::__setitem__",3,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector___setitem",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_float_vector___setitem",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_complex_Sl_float_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_float_Sg__Sc_64_Sg__Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::ibegin",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_ibegin",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_float_Sg__Sc_64_Sg__Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > * resultptr = new std::vector_iterator< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >((const std::vector_iterator< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::iend",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_iend",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_float_Sg__Sc_64_Sg__Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > * resultptr = new std::vector_iterator< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >((const std::vector_iterator< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::erase",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_complex_Sl_float_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_float_Sg__Sc_64_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::erase",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_complex_Sl_float_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_float_Sg__Sc_64_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_float_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_float_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_float_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::erase(size_t)\n"
    "    std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::front",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_front",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  result = (std::complex< float > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::back",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  result = (std::complex< float > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::push_back",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::push_back",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_push_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_float_vector_push_back",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->push_back((std::complex< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::pop_back",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::at",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_at",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< float > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::assign",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::assign",3,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_assign",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_float_vector_assign",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->assign(arg2,(std::complex< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::data",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_data",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  result = (std::complex< float > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::size",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_size",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::empty",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_empty",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  result = (bool)((std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::resize",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_resize",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::clear",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_clear",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::swap",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::swap",2,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_swap",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_swap",2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::shrink_to_fit",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::reserve",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_reserve",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::max_size",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_max_size",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > >::capacity",1,"std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_capacity",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_complex_float_vector(void *obj) {
std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *arg1 = (std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_complex_float_vector_methods[]= {
    { "__getitem", _wrap_complex_float_vector___getitem},
    { "__setitem", _wrap_complex_float_vector___setitem},
    { "ibegin", _wrap_complex_float_vector_ibegin},
    { "iend", _wrap_complex_float_vector_iend},
    { "erase", _wrap_complex_float_vector_erase},
    { "front", _wrap_complex_float_vector_front},
    { "back", _wrap_complex_float_vector_back},
    { "push_back", _wrap_complex_float_vector_push_back},
    { "pop_back", _wrap_complex_float_vector_pop_back},
    { "at", _wrap_complex_float_vector_at},
    { "assign", _wrap_complex_float_vector_assign},
    { "data", _wrap_complex_float_vector_data},
    { "size", _wrap_complex_float_vector_size},
    { "empty", _wrap_complex_float_vector_empty},
    { "resize", _wrap_complex_float_vector_resize},
    { "clear", _wrap_complex_float_vector_clear},
    { "swap", _wrap_complex_float_vector_swap},
    { "shrink_to_fit", _wrap_complex_float_vector_shrink_to_fit},
    { "reserve", _wrap_complex_float_vector_reserve},
    { "max_size", _wrap_complex_float_vector_max_size},
    { "capacity", _wrap_complex_float_vector_capacity},
    {0,0}
};
static swig_lua_method swig_complex_float_vector_meta[] = {
    { "__getitem", _wrap_complex_float_vector___getitem},
    { "__setitem", _wrap_complex_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_complex_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex_float_vector_Sf_SwigStatic = {
    "complex_float_vector",
    swig_complex_float_vector_Sf_SwigStatic_methods,
    swig_complex_float_vector_Sf_SwigStatic_attributes,
    swig_complex_float_vector_Sf_SwigStatic_constants,
    swig_complex_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex_float_vector_bases[] = {0};
static const char *swig_complex_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_complex_float_vector = { "complex_float_vector", "complex_float_vector", &SWIGTYPE_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,_proxy__wrap_new_complex_float_vector, swig_delete_complex_float_vector, swig_complex_float_vector_methods, swig_complex_float_vector_attributes, &swig_complex_float_vector_Sf_SwigStatic, swig_complex_float_vector_meta, swig_complex_float_vector_bases, swig_complex_float_vector_base_names };

static int _wrap_new_complex_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::vector",0,0)
  result = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *)new std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::complex< double > *arg2 = 0 ;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::vector",2,"std::complex< double > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_complex_double_vector",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *)new std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >(arg1,(std::complex< double > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *)new std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > *arg1 = 0 ;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::vector",1,"std::vector< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("new_complex_double_vector",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  result = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *)new std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >((std::vector< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_complex_double_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_complex_double_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_complex_double_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_complex_double_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::vector()\n"
    "    std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::vector(size_t,std::complex< double > const &)\n"
    "    std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::vector(size_t)\n"
    "    std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::vector(std::vector< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  size_t arg2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::__getitem__",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector___getitem",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_double_Sg__Sc_64_Sg__Sg____getitem____SWIG(arg1,arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  size_t arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::__setitem__",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::__setitem__",3,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector___setitem",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_double_vector___setitem",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_complex_Sl_double_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_double_Sg__Sc_64_Sg__Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< double >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::ibegin",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_ibegin",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_double_Sg__Sc_64_Sg__Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > * resultptr = new std::vector_iterator< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > >((const std::vector_iterator< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< double >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::iend",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_iend",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_double_Sg__Sc_64_Sg__Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > * resultptr = new std::vector_iterator< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > >((const std::vector_iterator< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::erase",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_complex_Sl_double_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_double_Sg__Sc_64_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::erase",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_complex_Sl_double_Sg__Sc_Allocator_aligned_allocator_Sl_std_complex_Sl_double_Sg__Sc_64_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_double_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_double_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_double_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::erase(size_t)\n"
    "    std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::front",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_front",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  result = (std::complex< double > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::back",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_back",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  result = (std::complex< double > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::push_back",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::push_back",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_push_back",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_double_vector_push_back",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->push_back((std::complex< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::pop_back",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::at",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_at",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< double > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::assign",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::assign",3,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_assign",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_double_vector_assign",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->assign(arg2,(std::complex< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::data",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_data",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  result = (std::complex< double > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::size",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_size",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::empty",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_empty",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  result = (bool)((std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::resize",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_resize",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::clear",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_clear",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  std::vector< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::swap",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::swap",2,"std::vector< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_swap",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_swap",2,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::shrink_to_fit",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::reserve",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_reserve",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::max_size",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_max_size",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > >::capacity",1,"std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_capacity",1,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_complex_double_vector(void *obj) {
std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *arg1 = (std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_complex_double_vector_methods[]= {
    { "__getitem", _wrap_complex_double_vector___getitem},
    { "__setitem", _wrap_complex_double_vector___setitem},
    { "ibegin", _wrap_complex_double_vector_ibegin},
    { "iend", _wrap_complex_double_vector_iend},
    { "erase", _wrap_complex_double_vector_erase},
    { "front", _wrap_complex_double_vector_front},
    { "back", _wrap_complex_double_vector_back},
    { "push_back", _wrap_complex_double_vector_push_back},
    { "pop_back", _wrap_complex_double_vector_pop_back},
    { "at", _wrap_complex_double_vector_at},
    { "assign", _wrap_complex_double_vector_assign},
    { "data", _wrap_complex_double_vector_data},
    { "size", _wrap_complex_double_vector_size},
    { "empty", _wrap_complex_double_vector_empty},
    { "resize", _wrap_complex_double_vector_resize},
    { "clear", _wrap_complex_double_vector_clear},
    { "swap", _wrap_complex_double_vector_swap},
    { "shrink_to_fit", _wrap_complex_double_vector_shrink_to_fit},
    { "reserve", _wrap_complex_double_vector_reserve},
    { "max_size", _wrap_complex_double_vector_max_size},
    { "capacity", _wrap_complex_double_vector_capacity},
    {0,0}
};
static swig_lua_method swig_complex_double_vector_meta[] = {
    { "__getitem", _wrap_complex_double_vector___getitem},
    { "__setitem", _wrap_complex_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_complex_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex_double_vector_Sf_SwigStatic = {
    "complex_double_vector",
    swig_complex_double_vector_Sf_SwigStatic_methods,
    swig_complex_double_vector_Sf_SwigStatic_attributes,
    swig_complex_double_vector_Sf_SwigStatic_constants,
    swig_complex_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex_double_vector_bases[] = {0};
static const char *swig_complex_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_complex_double_vector = { "complex_double_vector", "complex_double_vector", &SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,_proxy__wrap_new_complex_double_vector, swig_delete_complex_double_vector, swig_complex_double_vector_methods, swig_complex_double_vector_attributes, &swig_complex_double_vector_Sf_SwigStatic, swig_complex_double_vector_meta, swig_complex_double_vector_bases, swig_complex_double_vector_base_names };

static int _wrap_new_int8_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::vector",0,0)
  result = (std::vector< signed char > *)new std::vector< signed char >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int8_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  std::vector< signed char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< signed char >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< signed char >::vector",2,"signed char const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< signed char > *)new std::vector< signed char >(arg1,(signed char const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int8_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< signed char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< signed char >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< signed char > *)new std::vector< signed char >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int8_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char,std::allocator< signed char > > *arg1 = 0 ;
  std::vector< signed char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< signed char >::vector",1,"std::vector< signed char,std::allocator< signed char > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("new_int8_vector",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  result = (std::vector< signed char > *)new std::vector< signed char >((std::vector< signed char,std::allocator< signed char > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int8_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int8_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int8_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int8_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_int8_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int8_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< signed char >::vector()\n"
    "    std::vector< signed char >::vector(size_t,signed char const &)\n"
    "    std::vector< signed char >::vector(size_t)\n"
    "    std::vector< signed char >::vector(std::vector< signed char,std::allocator< signed char > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_int8_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  size_t arg2 ;
  signed char result;
  
  SWIG_check_num_args("std::vector< signed char >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::__getitem__",1,"std::vector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< signed char >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector___getitem",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char)std_vector_Sl_signed_SS_char_Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  size_t arg2 ;
  signed char arg3 ;
  
  SWIG_check_num_args("std::vector< signed char >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::__setitem__",1,"std::vector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< signed char >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< signed char >::__setitem__",3,"signed char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector___setitem",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (signed char)lua_tonumber(L, 3);
  std_vector_Sl_signed_SS_char_Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  SwigValueWrapper< std::vector_iterator< signed char,std::allocator< signed char > > > result;
  
  SWIG_check_num_args("std::vector< signed char >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::ibegin",1,"std::vector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_ibegin",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  result = std_vector_Sl_signed_SS_char_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< signed char,std::allocator< signed char > > * resultptr = new std::vector_iterator< signed char,std::allocator< signed char > >((const std::vector_iterator< signed char,std::allocator< signed char > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_signed_char_std__allocatorT_signed_char_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  SwigValueWrapper< std::vector_iterator< signed char,std::allocator< signed char > > > result;
  
  SWIG_check_num_args("std::vector< signed char >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::iend",1,"std::vector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_iend",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  result = std_vector_Sl_signed_SS_char_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< signed char,std::allocator< signed char > > * resultptr = new std::vector_iterator< signed char,std::allocator< signed char > >((const std::vector_iterator< signed char,std::allocator< signed char > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_signed_char_std__allocatorT_signed_char_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< signed char >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::erase",1,"std::vector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< signed char >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_erase",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_signed_SS_char_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< signed char >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::erase",1,"std::vector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< signed char >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< signed char >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_erase",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_signed_SS_char_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_int8_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_int8_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'int8_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< signed char >::erase(size_t)\n"
    "    std::vector< signed char >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_int8_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::front",1,"std::vector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_front",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  result = (signed char *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::back",1,"std::vector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_back",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  result = (signed char *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("std::vector< signed char >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::push_back",1,"std::vector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< signed char >::push_back",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_push_back",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::pop_back",1,"std::vector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_pop_back",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  size_t arg2 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::at",1,"std::vector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< signed char >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_at",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  size_t arg2 ;
  signed char *arg3 = 0 ;
  signed char temp3 ;
  
  SWIG_check_num_args("std::vector< signed char >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::assign",1,"std::vector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< signed char >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< signed char >::assign",3,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_assign",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(signed char)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(signed char const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::data",1,"std::vector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_data",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  result = (signed char *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< signed char >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::size",1,"std::vector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_size",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< signed char >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::empty",1,"std::vector< signed char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_empty",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  result = (bool)((std::vector< signed char > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< signed char >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::resize",1,"std::vector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< signed char >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_resize",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::clear",1,"std::vector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_clear",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  std::vector< signed char,std::allocator< signed char > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::swap",1,"std::vector< signed char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< signed char >::swap",2,"std::vector< signed char,std::allocator< signed char > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_swap",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_swap",2,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::shrink_to_fit",1,"std::vector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< signed char >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::reserve",1,"std::vector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< signed char >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_reserve",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< signed char >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::max_size",1,"std::vector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_max_size",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< signed char >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::capacity",1,"std::vector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,0))){
    SWIG_fail_ptr("int8_vector_capacity",1,SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int8_vector(void *obj) {
std::vector< signed char > *arg1 = (std::vector< signed char > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int8_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int8_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int8_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int8_vector_methods[]= {
    { "__getitem", _wrap_int8_vector___getitem},
    { "__setitem", _wrap_int8_vector___setitem},
    { "ibegin", _wrap_int8_vector_ibegin},
    { "iend", _wrap_int8_vector_iend},
    { "erase", _wrap_int8_vector_erase},
    { "front", _wrap_int8_vector_front},
    { "back", _wrap_int8_vector_back},
    { "push_back", _wrap_int8_vector_push_back},
    { "pop_back", _wrap_int8_vector_pop_back},
    { "at", _wrap_int8_vector_at},
    { "assign", _wrap_int8_vector_assign},
    { "data", _wrap_int8_vector_data},
    { "size", _wrap_int8_vector_size},
    { "empty", _wrap_int8_vector_empty},
    { "resize", _wrap_int8_vector_resize},
    { "clear", _wrap_int8_vector_clear},
    { "swap", _wrap_int8_vector_swap},
    { "shrink_to_fit", _wrap_int8_vector_shrink_to_fit},
    { "reserve", _wrap_int8_vector_reserve},
    { "max_size", _wrap_int8_vector_max_size},
    { "capacity", _wrap_int8_vector_capacity},
    {0,0}
};
static swig_lua_method swig_int8_vector_meta[] = {
    { "__getitem", _wrap_int8_vector___getitem},
    { "__setitem", _wrap_int8_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int8_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int8_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int8_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int8_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int8_vector_Sf_SwigStatic = {
    "int8_vector",
    swig_int8_vector_Sf_SwigStatic_methods,
    swig_int8_vector_Sf_SwigStatic_attributes,
    swig_int8_vector_Sf_SwigStatic_constants,
    swig_int8_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int8_vector_bases[] = {0};
static const char *swig_int8_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int8_vector = { "int8_vector", "int8_vector", &SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,_proxy__wrap_new_int8_vector, swig_delete_int8_vector, swig_int8_vector_methods, swig_int8_vector_attributes, &swig_int8_vector_Sf_SwigStatic, swig_int8_vector_meta, swig_int8_vector_bases, swig_int8_vector_base_names };

static int _wrap_new_uint8_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::vector",0,0)
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint8_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned char >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned char >::vector",2,"unsigned char const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >(arg1,(unsigned char const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint8_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned char >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint8_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char,std::allocator< unsigned char > > *arg1 = 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< unsigned char >::vector",1,"std::vector< unsigned char,std::allocator< unsigned char > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("new_uint8_vector",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >((std::vector< unsigned char,std::allocator< unsigned char > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint8_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uint8_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint8_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uint8_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_uint8_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uint8_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned char >::vector()\n"
    "    std::vector< unsigned char >::vector(size_t,unsigned char const &)\n"
    "    std::vector< unsigned char >::vector(size_t)\n"
    "    std::vector< unsigned char >::vector(std::vector< unsigned char,std::allocator< unsigned char > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_uint8_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  size_t arg2 ;
  unsigned char result;
  
  SWIG_check_num_args("std::vector< unsigned char >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::__getitem__",1,"std::vector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned char >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char)std_vector_Sl_unsigned_SS_char_Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  size_t arg2 ;
  unsigned char arg3 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::__setitem__",1,"std::vector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned char >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned char >::__setitem__",3,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned char)lua_tonumber(L, 3);
  std_vector_Sl_unsigned_SS_char_Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  SwigValueWrapper< std::vector_iterator< unsigned char,std::allocator< unsigned char > > > result;
  
  SWIG_check_num_args("std::vector< unsigned char >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::ibegin",1,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_ibegin",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  result = std_vector_Sl_unsigned_SS_char_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< unsigned char,std::allocator< unsigned char > > * resultptr = new std::vector_iterator< unsigned char,std::allocator< unsigned char > >((const std::vector_iterator< unsigned char,std::allocator< unsigned char > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_unsigned_char_std__allocatorT_unsigned_char_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  SwigValueWrapper< std::vector_iterator< unsigned char,std::allocator< unsigned char > > > result;
  
  SWIG_check_num_args("std::vector< unsigned char >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::iend",1,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_iend",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  result = std_vector_Sl_unsigned_SS_char_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< unsigned char,std::allocator< unsigned char > > * resultptr = new std::vector_iterator< unsigned char,std::allocator< unsigned char > >((const std::vector_iterator< unsigned char,std::allocator< unsigned char > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_unsigned_char_std__allocatorT_unsigned_char_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::erase",1,"std::vector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned char >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_erase",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_unsigned_SS_char_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::erase",1,"std::vector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned char >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned char >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_erase",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_unsigned_SS_char_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_uint8_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_uint8_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'uint8_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned char >::erase(size_t)\n"
    "    std::vector< unsigned char >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_uint8_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::front",1,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_front",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  result = (unsigned char *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::back",1,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  result = (unsigned char *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::push_back",1,"std::vector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned char >::push_back",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::pop_back",1,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  size_t arg2 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::at",1,"std::vector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned char >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_at",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  size_t arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::assign",1,"std::vector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned char >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned char >::assign",3,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_assign",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  temp3=(unsigned char)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(unsigned char const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::data",1,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_data",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  result = (unsigned char *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< unsigned char >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::size",1,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_size",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< unsigned char >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::empty",1,"std::vector< unsigned char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_empty",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  result = (bool)((std::vector< unsigned char > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::resize",1,"std::vector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned char >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_resize",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::clear",1,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_clear",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char,std::allocator< unsigned char > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::swap",1,"std::vector< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< unsigned char >::swap",2,"std::vector< unsigned char,std::allocator< unsigned char > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_swap",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_swap",2,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::shrink_to_fit",1,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::reserve",1,"std::vector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned char >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_reserve",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< unsigned char >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::max_size",1,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< unsigned char >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::capacity",1,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("uint8_vector_capacity",1,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint8_vector(void *obj) {
std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint8_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint8_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint8_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint8_vector_methods[]= {
    { "__getitem", _wrap_uint8_vector___getitem},
    { "__setitem", _wrap_uint8_vector___setitem},
    { "ibegin", _wrap_uint8_vector_ibegin},
    { "iend", _wrap_uint8_vector_iend},
    { "erase", _wrap_uint8_vector_erase},
    { "front", _wrap_uint8_vector_front},
    { "back", _wrap_uint8_vector_back},
    { "push_back", _wrap_uint8_vector_push_back},
    { "pop_back", _wrap_uint8_vector_pop_back},
    { "at", _wrap_uint8_vector_at},
    { "assign", _wrap_uint8_vector_assign},
    { "data", _wrap_uint8_vector_data},
    { "size", _wrap_uint8_vector_size},
    { "empty", _wrap_uint8_vector_empty},
    { "resize", _wrap_uint8_vector_resize},
    { "clear", _wrap_uint8_vector_clear},
    { "swap", _wrap_uint8_vector_swap},
    { "shrink_to_fit", _wrap_uint8_vector_shrink_to_fit},
    { "reserve", _wrap_uint8_vector_reserve},
    { "max_size", _wrap_uint8_vector_max_size},
    { "capacity", _wrap_uint8_vector_capacity},
    {0,0}
};
static swig_lua_method swig_uint8_vector_meta[] = {
    { "__getitem", _wrap_uint8_vector___getitem},
    { "__setitem", _wrap_uint8_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_uint8_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint8_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint8_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint8_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint8_vector_Sf_SwigStatic = {
    "uint8_vector",
    swig_uint8_vector_Sf_SwigStatic_methods,
    swig_uint8_vector_Sf_SwigStatic_attributes,
    swig_uint8_vector_Sf_SwigStatic_constants,
    swig_uint8_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint8_vector_bases[] = {0};
static const char *swig_uint8_vector_base_names[] = {0};
static swig_lua_class _wrap_class_uint8_vector = { "uint8_vector", "uint8_vector", &SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,_proxy__wrap_new_uint8_vector, swig_delete_uint8_vector, swig_uint8_vector_methods, swig_uint8_vector_attributes, &swig_uint8_vector_Sf_SwigStatic, swig_uint8_vector_meta, swig_uint8_vector_bases, swig_uint8_vector_base_names };

static int _wrap_new_int16_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::vector",0,0)
  result = (std::vector< short > *)new std::vector< short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int16_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  short *arg2 = 0 ;
  short temp2 ;
  std::vector< short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< short >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::vector",2,"short const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< short > *)new std::vector< short >(arg1,(short const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int16_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< short >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< short > *)new std::vector< short >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int16_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short,std::allocator< short > > *arg1 = 0 ;
  std::vector< short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< short >::vector",1,"std::vector< short,std::allocator< short > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("new_int16_vector",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  result = (std::vector< short > *)new std::vector< short >((std::vector< short,std::allocator< short > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int16_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int16_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int16_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int16_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_int16_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int16_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< short >::vector()\n"
    "    std::vector< short >::vector(size_t,short const &)\n"
    "    std::vector< short >::vector(size_t)\n"
    "    std::vector< short >::vector(std::vector< short,std::allocator< short > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_int16_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t arg2 ;
  short result;
  
  SWIG_check_num_args("std::vector< short >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::__getitem__",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector___getitem",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short)std_vector_Sl_short_Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t arg2 ;
  short arg3 ;
  
  SWIG_check_num_args("std::vector< short >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::__setitem__",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< short >::__setitem__",3,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector___setitem",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (short)lua_tonumber(L, 3);
  std_vector_Sl_short_Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  SwigValueWrapper< std::vector_iterator< short,std::allocator< short > > > result;
  
  SWIG_check_num_args("std::vector< short >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::ibegin",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_ibegin",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  result = std_vector_Sl_short_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< short,std::allocator< short > > * resultptr = new std::vector_iterator< short,std::allocator< short > >((const std::vector_iterator< short,std::allocator< short > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_short_std__allocatorT_short_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  SwigValueWrapper< std::vector_iterator< short,std::allocator< short > > > result;
  
  SWIG_check_num_args("std::vector< short >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::iend",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_iend",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  result = std_vector_Sl_short_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< short,std::allocator< short > > * resultptr = new std::vector_iterator< short,std::allocator< short > >((const std::vector_iterator< short,std::allocator< short > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_short_std__allocatorT_short_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< short >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::erase",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_erase",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_short_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< short >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::erase",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< short >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_erase",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_short_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_int16_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_int16_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'int16_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< short >::erase(size_t)\n"
    "    std::vector< short >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_int16_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::front",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_front",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  result = (short *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::back",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_back",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  result = (short *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("std::vector< short >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::push_back",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::push_back",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_push_back",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  
  SWIG_check_num_args("std::vector< short >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::pop_back",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_pop_back",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t arg2 ;
  short *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::at",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_at",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t arg2 ;
  short *arg3 = 0 ;
  short temp3 ;
  
  SWIG_check_num_args("std::vector< short >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::assign",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< short >::assign",3,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_assign",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(short)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(short const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::data",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_data",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  result = (short *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< short >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::size",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_size",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< short >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::empty",1,"std::vector< short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_empty",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  result = (bool)((std::vector< short > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< short >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::resize",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_resize",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  
  SWIG_check_num_args("std::vector< short >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::clear",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_clear",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  std::vector< short,std::allocator< short > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< short >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::swap",1,"std::vector< short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< short >::swap",2,"std::vector< short,std::allocator< short > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_swap",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_swap",2,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  
  SWIG_check_num_args("std::vector< short >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::shrink_to_fit",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< short >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::reserve",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_reserve",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< short >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::max_size",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_max_size",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< short >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::capacity",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("int16_vector_capacity",1,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int16_vector(void *obj) {
std::vector< short > *arg1 = (std::vector< short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int16_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int16_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int16_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int16_vector_methods[]= {
    { "__getitem", _wrap_int16_vector___getitem},
    { "__setitem", _wrap_int16_vector___setitem},
    { "ibegin", _wrap_int16_vector_ibegin},
    { "iend", _wrap_int16_vector_iend},
    { "erase", _wrap_int16_vector_erase},
    { "front", _wrap_int16_vector_front},
    { "back", _wrap_int16_vector_back},
    { "push_back", _wrap_int16_vector_push_back},
    { "pop_back", _wrap_int16_vector_pop_back},
    { "at", _wrap_int16_vector_at},
    { "assign", _wrap_int16_vector_assign},
    { "data", _wrap_int16_vector_data},
    { "size", _wrap_int16_vector_size},
    { "empty", _wrap_int16_vector_empty},
    { "resize", _wrap_int16_vector_resize},
    { "clear", _wrap_int16_vector_clear},
    { "swap", _wrap_int16_vector_swap},
    { "shrink_to_fit", _wrap_int16_vector_shrink_to_fit},
    { "reserve", _wrap_int16_vector_reserve},
    { "max_size", _wrap_int16_vector_max_size},
    { "capacity", _wrap_int16_vector_capacity},
    {0,0}
};
static swig_lua_method swig_int16_vector_meta[] = {
    { "__getitem", _wrap_int16_vector___getitem},
    { "__setitem", _wrap_int16_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int16_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int16_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int16_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int16_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int16_vector_Sf_SwigStatic = {
    "int16_vector",
    swig_int16_vector_Sf_SwigStatic_methods,
    swig_int16_vector_Sf_SwigStatic_attributes,
    swig_int16_vector_Sf_SwigStatic_constants,
    swig_int16_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int16_vector_bases[] = {0};
static const char *swig_int16_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int16_vector = { "int16_vector", "int16_vector", &SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,_proxy__wrap_new_int16_vector, swig_delete_int16_vector, swig_int16_vector_methods, swig_int16_vector_attributes, &swig_int16_vector_Sf_SwigStatic, swig_int16_vector_meta, swig_int16_vector_bases, swig_int16_vector_base_names };

static int _wrap_new_uint16_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::vector",0,0)
  result = (std::vector< unsigned short > *)new std::vector< unsigned short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint16_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  std::vector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned short >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned short >::vector",2,"unsigned short const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< unsigned short > *)new std::vector< unsigned short >(arg1,(unsigned short const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint16_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned short >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< unsigned short > *)new std::vector< unsigned short >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint16_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short,std::allocator< unsigned short > > *arg1 = 0 ;
  std::vector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< unsigned short >::vector",1,"std::vector< unsigned short,std::allocator< unsigned short > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("new_uint16_vector",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  result = (std::vector< unsigned short > *)new std::vector< unsigned short >((std::vector< unsigned short,std::allocator< unsigned short > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint16_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uint16_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint16_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uint16_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_uint16_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uint16_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned short >::vector()\n"
    "    std::vector< unsigned short >::vector(size_t,unsigned short const &)\n"
    "    std::vector< unsigned short >::vector(size_t)\n"
    "    std::vector< unsigned short >::vector(std::vector< unsigned short,std::allocator< unsigned short > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_uint16_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  size_t arg2 ;
  unsigned short result;
  
  SWIG_check_num_args("std::vector< unsigned short >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::__getitem__",1,"std::vector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned short >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short)std_vector_Sl_unsigned_SS_short_Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  size_t arg2 ;
  unsigned short arg3 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::__setitem__",1,"std::vector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned short >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned short >::__setitem__",3,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned short)lua_tonumber(L, 3);
  std_vector_Sl_unsigned_SS_short_Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  SwigValueWrapper< std::vector_iterator< unsigned short,std::allocator< unsigned short > > > result;
  
  SWIG_check_num_args("std::vector< unsigned short >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::ibegin",1,"std::vector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_ibegin",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  result = std_vector_Sl_unsigned_SS_short_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< unsigned short,std::allocator< unsigned short > > * resultptr = new std::vector_iterator< unsigned short,std::allocator< unsigned short > >((const std::vector_iterator< unsigned short,std::allocator< unsigned short > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_unsigned_short_std__allocatorT_unsigned_short_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  SwigValueWrapper< std::vector_iterator< unsigned short,std::allocator< unsigned short > > > result;
  
  SWIG_check_num_args("std::vector< unsigned short >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::iend",1,"std::vector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_iend",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  result = std_vector_Sl_unsigned_SS_short_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< unsigned short,std::allocator< unsigned short > > * resultptr = new std::vector_iterator< unsigned short,std::allocator< unsigned short > >((const std::vector_iterator< unsigned short,std::allocator< unsigned short > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_unsigned_short_std__allocatorT_unsigned_short_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::erase",1,"std::vector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned short >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_erase",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_unsigned_SS_short_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::erase",1,"std::vector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned short >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned short >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_erase",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_unsigned_SS_short_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_uint16_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_uint16_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'uint16_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned short >::erase(size_t)\n"
    "    std::vector< unsigned short >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_uint16_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::front",1,"std::vector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_front",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  result = (unsigned short *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::back",1,"std::vector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_back",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  result = (unsigned short *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::push_back",1,"std::vector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned short >::push_back",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::pop_back",1,"std::vector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  size_t arg2 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::at",1,"std::vector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned short >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_at",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  size_t arg2 ;
  unsigned short *arg3 = 0 ;
  unsigned short temp3 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::assign",1,"std::vector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned short >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned short >::assign",3,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_assign",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  temp3=(unsigned short)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(unsigned short const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::data",1,"std::vector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_data",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  result = (unsigned short *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< unsigned short >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::size",1,"std::vector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_size",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< unsigned short >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::empty",1,"std::vector< unsigned short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_empty",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  result = (bool)((std::vector< unsigned short > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::resize",1,"std::vector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned short >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_resize",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::clear",1,"std::vector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_clear",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  std::vector< unsigned short,std::allocator< unsigned short > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::swap",1,"std::vector< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< unsigned short >::swap",2,"std::vector< unsigned short,std::allocator< unsigned short > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_swap",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_swap",2,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::shrink_to_fit",1,"std::vector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::reserve",1,"std::vector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned short >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_reserve",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< unsigned short >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::max_size",1,"std::vector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< unsigned short >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::capacity",1,"std::vector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("uint16_vector_capacity",1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint16_vector(void *obj) {
std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint16_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint16_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint16_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint16_vector_methods[]= {
    { "__getitem", _wrap_uint16_vector___getitem},
    { "__setitem", _wrap_uint16_vector___setitem},
    { "ibegin", _wrap_uint16_vector_ibegin},
    { "iend", _wrap_uint16_vector_iend},
    { "erase", _wrap_uint16_vector_erase},
    { "front", _wrap_uint16_vector_front},
    { "back", _wrap_uint16_vector_back},
    { "push_back", _wrap_uint16_vector_push_back},
    { "pop_back", _wrap_uint16_vector_pop_back},
    { "at", _wrap_uint16_vector_at},
    { "assign", _wrap_uint16_vector_assign},
    { "data", _wrap_uint16_vector_data},
    { "size", _wrap_uint16_vector_size},
    { "empty", _wrap_uint16_vector_empty},
    { "resize", _wrap_uint16_vector_resize},
    { "clear", _wrap_uint16_vector_clear},
    { "swap", _wrap_uint16_vector_swap},
    { "shrink_to_fit", _wrap_uint16_vector_shrink_to_fit},
    { "reserve", _wrap_uint16_vector_reserve},
    { "max_size", _wrap_uint16_vector_max_size},
    { "capacity", _wrap_uint16_vector_capacity},
    {0,0}
};
static swig_lua_method swig_uint16_vector_meta[] = {
    { "__getitem", _wrap_uint16_vector___getitem},
    { "__setitem", _wrap_uint16_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_uint16_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint16_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint16_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint16_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint16_vector_Sf_SwigStatic = {
    "uint16_vector",
    swig_uint16_vector_Sf_SwigStatic_methods,
    swig_uint16_vector_Sf_SwigStatic_attributes,
    swig_uint16_vector_Sf_SwigStatic_constants,
    swig_uint16_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint16_vector_bases[] = {0};
static const char *swig_uint16_vector_base_names[] = {0};
static swig_lua_class _wrap_class_uint16_vector = { "uint16_vector", "uint16_vector", &SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,_proxy__wrap_new_uint16_vector, swig_delete_uint16_vector, swig_uint16_vector_methods, swig_uint16_vector_attributes, &swig_uint16_vector_Sf_SwigStatic, swig_uint16_vector_meta, swig_uint16_vector_bases, swig_uint16_vector_base_names };

static int _wrap_new_int32_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",0,0)
  result = (std::vector< int > *)new std::vector< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int32_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::vector",2,"int const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(int const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int32_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int32_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"std::vector< int,std::allocator< int > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("new_int32_vector",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  result = (std::vector< int > *)new std::vector< int >((std::vector< int,std::allocator< int > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int32_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int32_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int32_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int32_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_int32_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int32_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(size_t,int const &)\n"
    "    std::vector< int >::vector(size_t)\n"
    "    std::vector< int >::vector(std::vector< int,std::allocator< int > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_int32_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  int result;
  
  SWIG_check_num_args("std::vector< int >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::__getitem__",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector___getitem",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int)std_vector_Sl_int_Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("std::vector< int >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::__setitem__",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< int >::__setitem__",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector___setitem",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  std_vector_Sl_int_Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  SwigValueWrapper< std::vector_iterator< int,std::allocator< int > > > result;
  
  SWIG_check_num_args("std::vector< int >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::ibegin",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_ibegin",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  result = std_vector_Sl_int_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< int,std::allocator< int > > * resultptr = new std::vector_iterator< int,std::allocator< int > >((const std::vector_iterator< int,std::allocator< int > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_int_std__allocatorT_int_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  SwigValueWrapper< std::vector_iterator< int,std::allocator< int > > > result;
  
  SWIG_check_num_args("std::vector< int >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::iend",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_iend",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  result = std_vector_Sl_int_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< int,std::allocator< int > > * resultptr = new std::vector_iterator< int,std::allocator< int > >((const std::vector_iterator< int,std::allocator< int > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_int_std__allocatorT_int_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< int >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::erase",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_erase",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_int_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< int >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::erase",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< int >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_erase",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_int_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_int32_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_int32_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'int32_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::erase(size_t)\n"
    "    std::vector< int >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_int32_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::front",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_front",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  result = (int *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::back",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_back",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  result = (int *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("std::vector< int >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::push_back",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::push_back",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_push_back",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIG_check_num_args("std::vector< int >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::pop_back",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_pop_back",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  int *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::at",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_at",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  SWIG_check_num_args("std::vector< int >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::assign",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< int >::assign",3,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_assign",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::data",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_data",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  result = (int *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< int >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::size",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_size",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< int >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::empty",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_empty",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  result = (bool)((std::vector< int > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< int >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::resize",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_resize",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIG_check_num_args("std::vector< int >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::clear",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_clear",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< int >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::swap",1,"std::vector< int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< int >::swap",2,"std::vector< int,std::allocator< int > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_swap",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_swap",2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIG_check_num_args("std::vector< int >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::shrink_to_fit",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< int >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::reserve",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_reserve",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< int >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::max_size",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_max_size",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< int >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::capacity",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("int32_vector_capacity",1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int32_vector(void *obj) {
std::vector< int > *arg1 = (std::vector< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int32_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int32_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int32_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int32_vector_methods[]= {
    { "__getitem", _wrap_int32_vector___getitem},
    { "__setitem", _wrap_int32_vector___setitem},
    { "ibegin", _wrap_int32_vector_ibegin},
    { "iend", _wrap_int32_vector_iend},
    { "erase", _wrap_int32_vector_erase},
    { "front", _wrap_int32_vector_front},
    { "back", _wrap_int32_vector_back},
    { "push_back", _wrap_int32_vector_push_back},
    { "pop_back", _wrap_int32_vector_pop_back},
    { "at", _wrap_int32_vector_at},
    { "assign", _wrap_int32_vector_assign},
    { "data", _wrap_int32_vector_data},
    { "size", _wrap_int32_vector_size},
    { "empty", _wrap_int32_vector_empty},
    { "resize", _wrap_int32_vector_resize},
    { "clear", _wrap_int32_vector_clear},
    { "swap", _wrap_int32_vector_swap},
    { "shrink_to_fit", _wrap_int32_vector_shrink_to_fit},
    { "reserve", _wrap_int32_vector_reserve},
    { "max_size", _wrap_int32_vector_max_size},
    { "capacity", _wrap_int32_vector_capacity},
    {0,0}
};
static swig_lua_method swig_int32_vector_meta[] = {
    { "__getitem", _wrap_int32_vector___getitem},
    { "__setitem", _wrap_int32_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int32_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int32_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int32_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int32_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int32_vector_Sf_SwigStatic = {
    "int32_vector",
    swig_int32_vector_Sf_SwigStatic_methods,
    swig_int32_vector_Sf_SwigStatic_attributes,
    swig_int32_vector_Sf_SwigStatic_constants,
    swig_int32_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int32_vector_bases[] = {0};
static const char *swig_int32_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int32_vector = { "int32_vector", "int32_vector", &SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,_proxy__wrap_new_int32_vector, swig_delete_int32_vector, swig_int32_vector_methods, swig_int32_vector_attributes, &swig_int32_vector_Sf_SwigStatic, swig_int32_vector_meta, swig_int32_vector_bases, swig_int32_vector_base_names };

static int _wrap_new_uint32_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::vector",0,0)
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint32_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::vector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned int >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::vector",2,"unsigned int const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1,(unsigned int const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint32_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned int >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint32_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg1 = 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< unsigned int >::vector",1,"std::vector< unsigned int,std::allocator< unsigned int > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("new_uint32_vector",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >((std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint32_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uint32_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint32_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uint32_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_uint32_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uint32_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned int >::vector()\n"
    "    std::vector< unsigned int >::vector(size_t,unsigned int const &)\n"
    "    std::vector< unsigned int >::vector(size_t)\n"
    "    std::vector< unsigned int >::vector(std::vector< unsigned int,std::allocator< unsigned int > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_uint32_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  size_t arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< unsigned int >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::__getitem__",1,"std::vector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int)std_vector_Sl_unsigned_SS_int_Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::__setitem__",1,"std::vector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned int >::__setitem__",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  std_vector_Sl_unsigned_SS_int_Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  SwigValueWrapper< std::vector_iterator< unsigned int,std::allocator< unsigned int > > > result;
  
  SWIG_check_num_args("std::vector< unsigned int >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::ibegin",1,"std::vector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_ibegin",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  result = std_vector_Sl_unsigned_SS_int_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< unsigned int,std::allocator< unsigned int > > * resultptr = new std::vector_iterator< unsigned int,std::allocator< unsigned int > >((const std::vector_iterator< unsigned int,std::allocator< unsigned int > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_unsigned_int_std__allocatorT_unsigned_int_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  SwigValueWrapper< std::vector_iterator< unsigned int,std::allocator< unsigned int > > > result;
  
  SWIG_check_num_args("std::vector< unsigned int >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::iend",1,"std::vector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_iend",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  result = std_vector_Sl_unsigned_SS_int_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< unsigned int,std::allocator< unsigned int > > * resultptr = new std::vector_iterator< unsigned int,std::allocator< unsigned int > >((const std::vector_iterator< unsigned int,std::allocator< unsigned int > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_unsigned_int_std__allocatorT_unsigned_int_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::erase",1,"std::vector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_erase",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_unsigned_SS_int_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::erase",1,"std::vector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned int >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_erase",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_unsigned_SS_int_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_uint32_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_uint32_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'uint32_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned int >::erase(size_t)\n"
    "    std::vector< unsigned int >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_uint32_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::front",1,"std::vector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_front",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  result = (unsigned int *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::back",1,"std::vector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  result = (unsigned int *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::push_back",1,"std::vector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::push_back",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::pop_back",1,"std::vector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  size_t arg2 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::at",1,"std::vector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_at",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  size_t arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::assign",1,"std::vector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned int >::assign",3,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_assign",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  temp3=(unsigned int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(unsigned int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::data",1,"std::vector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_data",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  result = (unsigned int *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< unsigned int >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::size",1,"std::vector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_size",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< unsigned int >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::empty",1,"std::vector< unsigned int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_empty",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  result = (bool)((std::vector< unsigned int > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::resize",1,"std::vector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_resize",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::clear",1,"std::vector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_clear",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::swap",1,"std::vector< unsigned int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< unsigned int >::swap",2,"std::vector< unsigned int,std::allocator< unsigned int > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_swap",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_swap",2,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::shrink_to_fit",1,"std::vector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::reserve",1,"std::vector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_reserve",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< unsigned int >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::max_size",1,"std::vector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< unsigned int >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::capacity",1,"std::vector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("uint32_vector_capacity",1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint32_vector(void *obj) {
std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint32_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint32_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint32_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint32_vector_methods[]= {
    { "__getitem", _wrap_uint32_vector___getitem},
    { "__setitem", _wrap_uint32_vector___setitem},
    { "ibegin", _wrap_uint32_vector_ibegin},
    { "iend", _wrap_uint32_vector_iend},
    { "erase", _wrap_uint32_vector_erase},
    { "front", _wrap_uint32_vector_front},
    { "back", _wrap_uint32_vector_back},
    { "push_back", _wrap_uint32_vector_push_back},
    { "pop_back", _wrap_uint32_vector_pop_back},
    { "at", _wrap_uint32_vector_at},
    { "assign", _wrap_uint32_vector_assign},
    { "data", _wrap_uint32_vector_data},
    { "size", _wrap_uint32_vector_size},
    { "empty", _wrap_uint32_vector_empty},
    { "resize", _wrap_uint32_vector_resize},
    { "clear", _wrap_uint32_vector_clear},
    { "swap", _wrap_uint32_vector_swap},
    { "shrink_to_fit", _wrap_uint32_vector_shrink_to_fit},
    { "reserve", _wrap_uint32_vector_reserve},
    { "max_size", _wrap_uint32_vector_max_size},
    { "capacity", _wrap_uint32_vector_capacity},
    {0,0}
};
static swig_lua_method swig_uint32_vector_meta[] = {
    { "__getitem", _wrap_uint32_vector___getitem},
    { "__setitem", _wrap_uint32_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_uint32_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint32_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint32_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint32_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint32_vector_Sf_SwigStatic = {
    "uint32_vector",
    swig_uint32_vector_Sf_SwigStatic_methods,
    swig_uint32_vector_Sf_SwigStatic_attributes,
    swig_uint32_vector_Sf_SwigStatic_constants,
    swig_uint32_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint32_vector_bases[] = {0};
static const char *swig_uint32_vector_base_names[] = {0};
static swig_lua_class _wrap_class_uint32_vector = { "uint32_vector", "uint32_vector", &SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,_proxy__wrap_new_uint32_vector, swig_delete_uint32_vector, swig_uint32_vector_methods, swig_uint32_vector_attributes, &swig_uint32_vector_Sf_SwigStatic, swig_uint32_vector_meta, swig_uint32_vector_bases, swig_uint32_vector_base_names };

static int _wrap_new_int64_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::vector",0,0)
  result = (std::vector< long > *)new std::vector< long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int64_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  long *arg2 = 0 ;
  long temp2 ;
  std::vector< long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< long >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::vector",2,"long const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< long > *)new std::vector< long >(arg1,(long const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int64_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< long >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< long > *)new std::vector< long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int64_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long,std::allocator< long > > *arg1 = 0 ;
  std::vector< long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< long >::vector",1,"std::vector< long,std::allocator< long > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("new_int64_vector",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  result = (std::vector< long > *)new std::vector< long >((std::vector< long,std::allocator< long > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int64_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int64_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int64_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int64_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_int64_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int64_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long >::vector()\n"
    "    std::vector< long >::vector(size_t,long const &)\n"
    "    std::vector< long >::vector(size_t)\n"
    "    std::vector< long >::vector(std::vector< long,std::allocator< long > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_int64_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  long result;
  
  SWIG_check_num_args("std::vector< long >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::__getitem__",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector___getitem",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long)std_vector_Sl_long_Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  long arg3 ;
  
  SWIG_check_num_args("std::vector< long >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::__setitem__",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< long >::__setitem__",3,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector___setitem",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (long)lua_tonumber(L, 3);
  std_vector_Sl_long_Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  SwigValueWrapper< std::vector_iterator< long,std::allocator< long > > > result;
  
  SWIG_check_num_args("std::vector< long >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::ibegin",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_ibegin",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  result = std_vector_Sl_long_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< long,std::allocator< long > > * resultptr = new std::vector_iterator< long,std::allocator< long > >((const std::vector_iterator< long,std::allocator< long > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_long_std__allocatorT_long_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  SwigValueWrapper< std::vector_iterator< long,std::allocator< long > > > result;
  
  SWIG_check_num_args("std::vector< long >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::iend",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_iend",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  result = std_vector_Sl_long_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< long,std::allocator< long > > * resultptr = new std::vector_iterator< long,std::allocator< long > >((const std::vector_iterator< long,std::allocator< long > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_long_std__allocatorT_long_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< long >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::erase",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_erase",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_long_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< long >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::erase",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< long >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_erase",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_long_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_int64_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_int64_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'int64_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long >::erase(size_t)\n"
    "    std::vector< long >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_int64_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  long *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::front",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_front",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  result = (long *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  long *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::back",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_back",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  result = (long *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  
  SWIG_check_num_args("std::vector< long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::push_back",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::push_back",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_push_back",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  SWIG_check_num_args("std::vector< long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::pop_back",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_pop_back",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  long *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::at",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_at",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  long *arg3 = 0 ;
  long temp3 ;
  
  SWIG_check_num_args("std::vector< long >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::assign",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< long >::assign",3,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_assign",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  long *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::data",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_data",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  result = (long *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::size",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_size",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::empty",1,"std::vector< long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_empty",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  result = (bool)((std::vector< long > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::resize",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_resize",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  SWIG_check_num_args("std::vector< long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::clear",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_clear",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long,std::allocator< long > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< long >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::swap",1,"std::vector< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< long >::swap",2,"std::vector< long,std::allocator< long > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_swap",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_swap",2,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  SWIG_check_num_args("std::vector< long >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::shrink_to_fit",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< long >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::reserve",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_reserve",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< long >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::max_size",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_max_size",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< long >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::capacity",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,0))){
    SWIG_fail_ptr("int64_vector_capacity",1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int64_vector(void *obj) {
std::vector< long > *arg1 = (std::vector< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int64_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int64_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int64_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int64_vector_methods[]= {
    { "__getitem", _wrap_int64_vector___getitem},
    { "__setitem", _wrap_int64_vector___setitem},
    { "ibegin", _wrap_int64_vector_ibegin},
    { "iend", _wrap_int64_vector_iend},
    { "erase", _wrap_int64_vector_erase},
    { "front", _wrap_int64_vector_front},
    { "back", _wrap_int64_vector_back},
    { "push_back", _wrap_int64_vector_push_back},
    { "pop_back", _wrap_int64_vector_pop_back},
    { "at", _wrap_int64_vector_at},
    { "assign", _wrap_int64_vector_assign},
    { "data", _wrap_int64_vector_data},
    { "size", _wrap_int64_vector_size},
    { "empty", _wrap_int64_vector_empty},
    { "resize", _wrap_int64_vector_resize},
    { "clear", _wrap_int64_vector_clear},
    { "swap", _wrap_int64_vector_swap},
    { "shrink_to_fit", _wrap_int64_vector_shrink_to_fit},
    { "reserve", _wrap_int64_vector_reserve},
    { "max_size", _wrap_int64_vector_max_size},
    { "capacity", _wrap_int64_vector_capacity},
    {0,0}
};
static swig_lua_method swig_int64_vector_meta[] = {
    { "__getitem", _wrap_int64_vector___getitem},
    { "__setitem", _wrap_int64_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int64_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int64_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int64_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int64_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int64_vector_Sf_SwigStatic = {
    "int64_vector",
    swig_int64_vector_Sf_SwigStatic_methods,
    swig_int64_vector_Sf_SwigStatic_attributes,
    swig_int64_vector_Sf_SwigStatic_constants,
    swig_int64_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int64_vector_bases[] = {0};
static const char *swig_int64_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int64_vector = { "int64_vector", "int64_vector", &SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,_proxy__wrap_new_int64_vector, swig_delete_int64_vector, swig_int64_vector_methods, swig_int64_vector_attributes, &swig_int64_vector_Sf_SwigStatic, swig_int64_vector_meta, swig_int64_vector_bases, swig_int64_vector_base_names };

static int _wrap_new_uint64_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::vector",0,0)
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint64_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  std::vector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned long >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned long >::vector",2,"unsigned long const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >(arg1,(unsigned long const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint64_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned long >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint64_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long,std::allocator< unsigned long > > *arg1 = 0 ;
  std::vector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< unsigned long >::vector",1,"std::vector< unsigned long,std::allocator< unsigned long > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("new_uint64_vector",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >((std::vector< unsigned long,std::allocator< unsigned long > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint64_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uint64_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint64_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uint64_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_uint64_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uint64_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned long >::vector()\n"
    "    std::vector< unsigned long >::vector(size_t,unsigned long const &)\n"
    "    std::vector< unsigned long >::vector(size_t)\n"
    "    std::vector< unsigned long >::vector(std::vector< unsigned long,std::allocator< unsigned long > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_uint64_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  size_t arg2 ;
  unsigned long result;
  
  SWIG_check_num_args("std::vector< unsigned long >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::__getitem__",1,"std::vector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned long >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long)std_vector_Sl_unsigned_SS_long_Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  size_t arg2 ;
  unsigned long arg3 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::__setitem__",1,"std::vector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned long >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned long >::__setitem__",3,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned long)lua_tonumber(L, 3);
  std_vector_Sl_unsigned_SS_long_Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  SwigValueWrapper< std::vector_iterator< unsigned long,std::allocator< unsigned long > > > result;
  
  SWIG_check_num_args("std::vector< unsigned long >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::ibegin",1,"std::vector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_ibegin",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  result = std_vector_Sl_unsigned_SS_long_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< unsigned long,std::allocator< unsigned long > > * resultptr = new std::vector_iterator< unsigned long,std::allocator< unsigned long > >((const std::vector_iterator< unsigned long,std::allocator< unsigned long > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_unsigned_long_std__allocatorT_unsigned_long_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  SwigValueWrapper< std::vector_iterator< unsigned long,std::allocator< unsigned long > > > result;
  
  SWIG_check_num_args("std::vector< unsigned long >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::iend",1,"std::vector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_iend",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  result = std_vector_Sl_unsigned_SS_long_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< unsigned long,std::allocator< unsigned long > > * resultptr = new std::vector_iterator< unsigned long,std::allocator< unsigned long > >((const std::vector_iterator< unsigned long,std::allocator< unsigned long > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_unsigned_long_std__allocatorT_unsigned_long_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::erase",1,"std::vector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned long >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_erase",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_unsigned_SS_long_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::erase",1,"std::vector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned long >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned long >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_erase",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_unsigned_SS_long_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_uint64_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_uint64_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'uint64_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned long >::erase(size_t)\n"
    "    std::vector< unsigned long >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_uint64_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  unsigned long *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::front",1,"std::vector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_front",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  result = (unsigned long *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  unsigned long *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::back",1,"std::vector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_back",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  result = (unsigned long *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::push_back",1,"std::vector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned long >::push_back",2,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::pop_back",1,"std::vector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  size_t arg2 ;
  unsigned long *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::at",1,"std::vector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned long >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_at",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  size_t arg2 ;
  unsigned long *arg3 = 0 ;
  unsigned long temp3 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::assign",1,"std::vector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned long >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned long >::assign",3,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_assign",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  temp3=(unsigned long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(unsigned long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  unsigned long *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::data",1,"std::vector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_data",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  result = (unsigned long *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< unsigned long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::size",1,"std::vector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_size",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< unsigned long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::empty",1,"std::vector< unsigned long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_empty",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  result = (bool)((std::vector< unsigned long > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::resize",1,"std::vector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_resize",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::clear",1,"std::vector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_clear",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long,std::allocator< unsigned long > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::swap",1,"std::vector< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< unsigned long >::swap",2,"std::vector< unsigned long,std::allocator< unsigned long > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_swap",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_swap",2,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::shrink_to_fit",1,"std::vector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::reserve",1,"std::vector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned long >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_reserve",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< unsigned long >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::max_size",1,"std::vector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< unsigned long >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::capacity",1,"std::vector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("uint64_vector_capacity",1,SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint64_vector(void *obj) {
std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint64_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint64_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint64_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint64_vector_methods[]= {
    { "__getitem", _wrap_uint64_vector___getitem},
    { "__setitem", _wrap_uint64_vector___setitem},
    { "ibegin", _wrap_uint64_vector_ibegin},
    { "iend", _wrap_uint64_vector_iend},
    { "erase", _wrap_uint64_vector_erase},
    { "front", _wrap_uint64_vector_front},
    { "back", _wrap_uint64_vector_back},
    { "push_back", _wrap_uint64_vector_push_back},
    { "pop_back", _wrap_uint64_vector_pop_back},
    { "at", _wrap_uint64_vector_at},
    { "assign", _wrap_uint64_vector_assign},
    { "data", _wrap_uint64_vector_data},
    { "size", _wrap_uint64_vector_size},
    { "empty", _wrap_uint64_vector_empty},
    { "resize", _wrap_uint64_vector_resize},
    { "clear", _wrap_uint64_vector_clear},
    { "swap", _wrap_uint64_vector_swap},
    { "shrink_to_fit", _wrap_uint64_vector_shrink_to_fit},
    { "reserve", _wrap_uint64_vector_reserve},
    { "max_size", _wrap_uint64_vector_max_size},
    { "capacity", _wrap_uint64_vector_capacity},
    {0,0}
};
static swig_lua_method swig_uint64_vector_meta[] = {
    { "__getitem", _wrap_uint64_vector___getitem},
    { "__setitem", _wrap_uint64_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_uint64_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint64_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint64_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint64_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint64_vector_Sf_SwigStatic = {
    "uint64_vector",
    swig_uint64_vector_Sf_SwigStatic_methods,
    swig_uint64_vector_Sf_SwigStatic_attributes,
    swig_uint64_vector_Sf_SwigStatic_constants,
    swig_uint64_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint64_vector_bases[] = {0};
static const char *swig_uint64_vector_base_names[] = {0};
static swig_lua_class _wrap_class_uint64_vector = { "uint64_vector", "uint64_vector", &SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,_proxy__wrap_new_uint64_vector, swig_delete_uint64_vector, swig_uint64_vector_methods, swig_uint64_vector_attributes, &swig_uint64_vector_Sf_SwigStatic, swig_uint64_vector_meta, swig_uint64_vector_bases, swig_uint64_vector_base_names };

static int _wrap_wav_data_frames_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::wav_data *arg1 = (AudioDSP::wav_data *) 0 ;
  int64_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::wav_data::frames",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::wav_data::frames",1,"AudioDSP::wav_data *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::wav_data::frames",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__wav_data,0))){
    SWIG_fail_ptr("wav_data_frames_set",1,SWIGTYPE_p_AudioDSP__wav_data);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->frames = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wav_data_frames_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::wav_data *arg1 = (AudioDSP::wav_data *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("AudioDSP::wav_data::frames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::wav_data::frames",1,"AudioDSP::wav_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__wav_data,0))){
    SWIG_fail_ptr("wav_data_frames_get",1,SWIGTYPE_p_AudioDSP__wav_data);
  }
  
  result = (int64_t) ((arg1)->frames);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wav_data_size_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::wav_data *arg1 = (AudioDSP::wav_data *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::wav_data::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::wav_data::size",1,"AudioDSP::wav_data *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::wav_data::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__wav_data,0))){
    SWIG_fail_ptr("wav_data_size_set",1,SWIGTYPE_p_AudioDSP__wav_data);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wav_data_size_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::wav_data *arg1 = (AudioDSP::wav_data *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::wav_data::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::wav_data::size",1,"AudioDSP::wav_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__wav_data,0))){
    SWIG_fail_ptr("wav_data_size_get",1,SWIGTYPE_p_AudioDSP__wav_data);
  }
  
  result =  ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wav_data_samplerate_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::wav_data *arg1 = (AudioDSP::wav_data *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AudioDSP::wav_data::samplerate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::wav_data::samplerate",1,"AudioDSP::wav_data *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::wav_data::samplerate",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__wav_data,0))){
    SWIG_fail_ptr("wav_data_samplerate_set",1,SWIGTYPE_p_AudioDSP__wav_data);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->samplerate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wav_data_samplerate_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::wav_data *arg1 = (AudioDSP::wav_data *) 0 ;
  int result;
  
  SWIG_check_num_args("AudioDSP::wav_data::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::wav_data::samplerate",1,"AudioDSP::wav_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__wav_data,0))){
    SWIG_fail_ptr("wav_data_samplerate_get",1,SWIGTYPE_p_AudioDSP__wav_data);
  }
  
  result = (int) ((arg1)->samplerate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wav_data_channels_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::wav_data *arg1 = (AudioDSP::wav_data *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AudioDSP::wav_data::channels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::wav_data::channels",1,"AudioDSP::wav_data *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::wav_data::channels",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__wav_data,0))){
    SWIG_fail_ptr("wav_data_channels_set",1,SWIGTYPE_p_AudioDSP__wav_data);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->channels = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wav_data_channels_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::wav_data *arg1 = (AudioDSP::wav_data *) 0 ;
  int result;
  
  SWIG_check_num_args("AudioDSP::wav_data::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::wav_data::channels",1,"AudioDSP::wav_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__wav_data,0))){
    SWIG_fail_ptr("wav_data_channels_get",1,SWIGTYPE_p_AudioDSP__wav_data);
  }
  
  result = (int) ((arg1)->channels);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wav_data_format_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::wav_data *arg1 = (AudioDSP::wav_data *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AudioDSP::wav_data::format",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::wav_data::format",1,"AudioDSP::wav_data *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::wav_data::format",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__wav_data,0))){
    SWIG_fail_ptr("wav_data_format_set",1,SWIGTYPE_p_AudioDSP__wav_data);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->format = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wav_data_format_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::wav_data *arg1 = (AudioDSP::wav_data *) 0 ;
  int result;
  
  SWIG_check_num_args("AudioDSP::wav_data::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::wav_data::format",1,"AudioDSP::wav_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__wav_data,0))){
    SWIG_fail_ptr("wav_data_format_get",1,SWIGTYPE_p_AudioDSP__wav_data);
  }
  
  result = (int) ((arg1)->format);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wav_data_sections_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::wav_data *arg1 = (AudioDSP::wav_data *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("AudioDSP::wav_data::sections",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::wav_data::sections",1,"AudioDSP::wav_data *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::wav_data::sections",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__wav_data,0))){
    SWIG_fail_ptr("wav_data_sections_set",1,SWIGTYPE_p_AudioDSP__wav_data);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sections = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wav_data_sections_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::wav_data *arg1 = (AudioDSP::wav_data *) 0 ;
  int result;
  
  SWIG_check_num_args("AudioDSP::wav_data::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::wav_data::sections",1,"AudioDSP::wav_data *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__wav_data,0))){
    SWIG_fail_ptr("wav_data_sections_get",1,SWIGTYPE_p_AudioDSP__wav_data);
  }
  
  result = (int) ((arg1)->sections);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_wav_data(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::wav_data *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::wav_data::wav_data",0,0)
  result = (AudioDSP::wav_data *)new AudioDSP::wav_data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__wav_data,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_wav_data(void *obj) {
AudioDSP::wav_data *arg1 = (AudioDSP::wav_data *) obj;
delete arg1;
}
static int _proxy__wrap_new_wav_data(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_wav_data);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_wav_data_attributes[] = {
    { "frames", _wrap_wav_data_frames_get, _wrap_wav_data_frames_set },
    { "size", _wrap_wav_data_size_get, _wrap_wav_data_size_set },
    { "samplerate", _wrap_wav_data_samplerate_get, _wrap_wav_data_samplerate_set },
    { "channels", _wrap_wav_data_channels_get, _wrap_wav_data_channels_set },
    { "format", _wrap_wav_data_format_get, _wrap_wav_data_format_set },
    { "sections", _wrap_wav_data_sections_get, _wrap_wav_data_sections_set },
    {0,0,0}
};
static swig_lua_method swig_wav_data_methods[]= {
    {0,0}
};
static swig_lua_method swig_wav_data_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_wav_data_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_wav_data_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_wav_data_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_wav_data_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_wav_data_Sf_SwigStatic = {
    "wav_data",
    swig_wav_data_Sf_SwigStatic_methods,
    swig_wav_data_Sf_SwigStatic_attributes,
    swig_wav_data_Sf_SwigStatic_constants,
    swig_wav_data_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_wav_data_bases[] = {0};
static const char *swig_wav_data_base_names[] = {0};
static swig_lua_class _wrap_class_wav_data = { "wav_data", "wav_data", &SWIGTYPE_p_AudioDSP__wav_data,_proxy__wrap_new_wav_data, swig_delete_wav_data, swig_wav_data_methods, swig_wav_data_attributes, &swig_wav_data_Sf_SwigStatic, swig_wav_data_meta, swig_wav_data_bases, swig_wav_data_base_names };

static int _wrap_new_SndFileReaderFloat(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SndFileReaderFloat *result = 0 ;
  
  SWIG_check_num_args("SndFileReaderFloat::SndFileReaderFloat",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SndFileReaderFloat::SndFileReaderFloat",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (SndFileReaderFloat *)new SndFileReaderFloat((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SndFileReaderFloat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_size(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderFloat::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::size",1,"SndFileReaderFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_size",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  result = (int64_t)((SndFileReaderFloat const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_seek_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderFloat::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::seek",1,"SndFileReaderFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderFloat::seek",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileReaderFloat::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_seek",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->seek(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_seek_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderFloat::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::seek",1,"SndFileReaderFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderFloat::seek",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_seek",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->seek(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SndFileReaderFloat_seek_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SndFileReaderFloat_seek_SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderFloat_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderFloat::seek(int64_t,int)\n"
    "    SndFileReaderFloat::seek(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileReaderFloat_get_string(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SndFileReaderFloat::get_string",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::get_string",1,"SndFileReaderFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderFloat::get_string",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_get_string",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->get_string(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_command(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderFloat::command",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::command",1,"SndFileReaderFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderFloat::command",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderFloat::command",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileReaderFloat::command",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_command",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SndFileReaderFloat_command");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->command(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_frames(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderFloat::frames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::frames",1,"SndFileReaderFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_frames",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  result = (int64_t)((SndFileReaderFloat const *)arg1)->frames();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_samplerate(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderFloat::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::samplerate",1,"SndFileReaderFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_samplerate",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  result = (int)((SndFileReaderFloat const *)arg1)->samplerate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_channels(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderFloat::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::channels",1,"SndFileReaderFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_channels",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  result = (int)((SndFileReaderFloat const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_format(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderFloat::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::format",1,"SndFileReaderFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_format",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  result = (int)((SndFileReaderFloat const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_sections(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderFloat::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::sections",1,"SndFileReaderFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_sections",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  result = (int)((SndFileReaderFloat const *)arg1)->sections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_seekable(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderFloat::seekable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::seekable",1,"SndFileReaderFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_seekable",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  result = (int)((SndFileReaderFloat const *)arg1)->seekable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  size_t arg2 ;
  std::vector< float,std::allocator< float > > *arg3 = 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderFloat::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::read",1,"SndFileReaderFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderFloat::read",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SndFileReaderFloat::read",3,"std::vector< float,std::allocator< float > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_read",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("SndFileReaderFloat_read",3,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (int64_t)(arg1)->read(arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderFloat::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::read",1,"SndFileReaderFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderFloat::read",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderFloat::read",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_read",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SndFileReaderFloat_read",3,SWIGTYPE_p_float);
  }
  
  result = (int64_t)(arg1)->read(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_read(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderFloat_read__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderFloat_read__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderFloat_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderFloat::read(size_t,std::vector< float,std::allocator< float > > &)\n"
    "    SndFileReaderFloat::read(size_t,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileReaderFloat_read_frames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  size_t arg2 ;
  std::vector< float,std::allocator< float > > *arg3 = 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderFloat::read_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::read_frames",1,"SndFileReaderFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderFloat::read_frames",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SndFileReaderFloat::read_frames",3,"std::vector< float,std::allocator< float > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_read_frames",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("SndFileReaderFloat_read_frames",3,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (int64_t)(arg1)->read_frames(arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_read_frames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderFloat *arg1 = (SndFileReaderFloat *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderFloat::read_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderFloat::read_frames",1,"SndFileReaderFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderFloat::read_frames",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderFloat::read_frames",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderFloat,0))){
    SWIG_fail_ptr("SndFileReaderFloat_read_frames",1,SWIGTYPE_p_SndFileReaderFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SndFileReaderFloat_read_frames",3,SWIGTYPE_p_float);
  }
  
  result = (int64_t)(arg1)->read_frames(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderFloat_read_frames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderFloat_read_frames__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderFloat_read_frames__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderFloat_read_frames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderFloat::read_frames(size_t,std::vector< float,std::allocator< float > > &)\n"
    "    SndFileReaderFloat::read_frames(size_t,float *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SndFileReaderFloat(void *obj) {
SndFileReaderFloat *arg1 = (SndFileReaderFloat *) obj;
delete arg1;
}
static int _proxy__wrap_new_SndFileReaderFloat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SndFileReaderFloat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SndFileReaderFloat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SndFileReaderFloat_methods[]= {
    { "size", _wrap_SndFileReaderFloat_size},
    { "seek", _wrap_SndFileReaderFloat_seek},
    { "get_string", _wrap_SndFileReaderFloat_get_string},
    { "command", _wrap_SndFileReaderFloat_command},
    { "frames", _wrap_SndFileReaderFloat_frames},
    { "samplerate", _wrap_SndFileReaderFloat_samplerate},
    { "channels", _wrap_SndFileReaderFloat_channels},
    { "format", _wrap_SndFileReaderFloat_format},
    { "sections", _wrap_SndFileReaderFloat_sections},
    { "seekable", _wrap_SndFileReaderFloat_seekable},
    { "read", _wrap_SndFileReaderFloat_read},
    { "read_frames", _wrap_SndFileReaderFloat_read_frames},
    {0,0}
};
static swig_lua_method swig_SndFileReaderFloat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SndFileReaderFloat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SndFileReaderFloat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SndFileReaderFloat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SndFileReaderFloat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SndFileReaderFloat_Sf_SwigStatic = {
    "SndFileReaderFloat",
    swig_SndFileReaderFloat_Sf_SwigStatic_methods,
    swig_SndFileReaderFloat_Sf_SwigStatic_attributes,
    swig_SndFileReaderFloat_Sf_SwigStatic_constants,
    swig_SndFileReaderFloat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SndFileReaderFloat_bases[] = {0};
static const char *swig_SndFileReaderFloat_base_names[] = {0};
static swig_lua_class _wrap_class_SndFileReaderFloat = { "SndFileReaderFloat", "SndFileReaderFloat", &SWIGTYPE_p_SndFileReaderFloat,_proxy__wrap_new_SndFileReaderFloat, swig_delete_SndFileReaderFloat, swig_SndFileReaderFloat_methods, swig_SndFileReaderFloat_attributes, &swig_SndFileReaderFloat_Sf_SwigStatic, swig_SndFileReaderFloat_meta, swig_SndFileReaderFloat_bases, swig_SndFileReaderFloat_base_names };

static int _wrap_new_SndFileReaderDouble(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SndFileReaderDouble *result = 0 ;
  
  SWIG_check_num_args("SndFileReaderDouble::SndFileReaderDouble",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SndFileReaderDouble::SndFileReaderDouble",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (SndFileReaderDouble *)new SndFileReaderDouble((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SndFileReaderDouble,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_size(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderDouble::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::size",1,"SndFileReaderDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_size",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  result = (int64_t)((SndFileReaderDouble const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_seek_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderDouble::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::seek",1,"SndFileReaderDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderDouble::seek",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileReaderDouble::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_seek",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->seek(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_seek_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderDouble::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::seek",1,"SndFileReaderDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderDouble::seek",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_seek",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->seek(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SndFileReaderDouble_seek_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SndFileReaderDouble_seek_SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderDouble_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderDouble::seek(int64_t,int)\n"
    "    SndFileReaderDouble::seek(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileReaderDouble_get_string(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SndFileReaderDouble::get_string",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::get_string",1,"SndFileReaderDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderDouble::get_string",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_get_string",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->get_string(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_command(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderDouble::command",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::command",1,"SndFileReaderDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderDouble::command",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderDouble::command",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileReaderDouble::command",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_command",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SndFileReaderDouble_command");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->command(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_frames(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderDouble::frames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::frames",1,"SndFileReaderDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_frames",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  result = (int64_t)((SndFileReaderDouble const *)arg1)->frames();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_samplerate(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderDouble::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::samplerate",1,"SndFileReaderDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_samplerate",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  result = (int)((SndFileReaderDouble const *)arg1)->samplerate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_channels(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderDouble::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::channels",1,"SndFileReaderDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_channels",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  result = (int)((SndFileReaderDouble const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_format(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderDouble::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::format",1,"SndFileReaderDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_format",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  result = (int)((SndFileReaderDouble const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_sections(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderDouble::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::sections",1,"SndFileReaderDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_sections",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  result = (int)((SndFileReaderDouble const *)arg1)->sections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_seekable(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderDouble::seekable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::seekable",1,"SndFileReaderDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_seekable",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  result = (int)((SndFileReaderDouble const *)arg1)->seekable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  size_t arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderDouble::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::read",1,"SndFileReaderDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderDouble::read",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SndFileReaderDouble::read",3,"std::vector< double,std::allocator< double > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_read",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("SndFileReaderDouble_read",3,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (int64_t)(arg1)->read(arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderDouble::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::read",1,"SndFileReaderDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderDouble::read",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderDouble::read",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_read",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SndFileReaderDouble_read",3,SWIGTYPE_p_double);
  }
  
  result = (int64_t)(arg1)->read(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_read(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderDouble_read__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderDouble_read__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderDouble_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderDouble::read(size_t,std::vector< double,std::allocator< double > > &)\n"
    "    SndFileReaderDouble::read(size_t,double *)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileReaderDouble_read_frames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  size_t arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderDouble::read_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::read_frames",1,"SndFileReaderDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderDouble::read_frames",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SndFileReaderDouble::read_frames",3,"std::vector< double,std::allocator< double > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_read_frames",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("SndFileReaderDouble_read_frames",3,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (int64_t)(arg1)->read_frames(arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_read_frames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderDouble *arg1 = (SndFileReaderDouble *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderDouble::read_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderDouble::read_frames",1,"SndFileReaderDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderDouble::read_frames",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderDouble::read_frames",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderDouble,0))){
    SWIG_fail_ptr("SndFileReaderDouble_read_frames",1,SWIGTYPE_p_SndFileReaderDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SndFileReaderDouble_read_frames",3,SWIGTYPE_p_double);
  }
  
  result = (int64_t)(arg1)->read_frames(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderDouble_read_frames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderDouble_read_frames__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderDouble_read_frames__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderDouble_read_frames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderDouble::read_frames(size_t,std::vector< double,std::allocator< double > > &)\n"
    "    SndFileReaderDouble::read_frames(size_t,double *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SndFileReaderDouble(void *obj) {
SndFileReaderDouble *arg1 = (SndFileReaderDouble *) obj;
delete arg1;
}
static int _proxy__wrap_new_SndFileReaderDouble(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SndFileReaderDouble);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SndFileReaderDouble_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SndFileReaderDouble_methods[]= {
    { "size", _wrap_SndFileReaderDouble_size},
    { "seek", _wrap_SndFileReaderDouble_seek},
    { "get_string", _wrap_SndFileReaderDouble_get_string},
    { "command", _wrap_SndFileReaderDouble_command},
    { "frames", _wrap_SndFileReaderDouble_frames},
    { "samplerate", _wrap_SndFileReaderDouble_samplerate},
    { "channels", _wrap_SndFileReaderDouble_channels},
    { "format", _wrap_SndFileReaderDouble_format},
    { "sections", _wrap_SndFileReaderDouble_sections},
    { "seekable", _wrap_SndFileReaderDouble_seekable},
    { "read", _wrap_SndFileReaderDouble_read},
    { "read_frames", _wrap_SndFileReaderDouble_read_frames},
    {0,0}
};
static swig_lua_method swig_SndFileReaderDouble_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SndFileReaderDouble_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SndFileReaderDouble_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SndFileReaderDouble_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SndFileReaderDouble_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SndFileReaderDouble_Sf_SwigStatic = {
    "SndFileReaderDouble",
    swig_SndFileReaderDouble_Sf_SwigStatic_methods,
    swig_SndFileReaderDouble_Sf_SwigStatic_attributes,
    swig_SndFileReaderDouble_Sf_SwigStatic_constants,
    swig_SndFileReaderDouble_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SndFileReaderDouble_bases[] = {0};
static const char *swig_SndFileReaderDouble_base_names[] = {0};
static swig_lua_class _wrap_class_SndFileReaderDouble = { "SndFileReaderDouble", "SndFileReaderDouble", &SWIGTYPE_p_SndFileReaderDouble,_proxy__wrap_new_SndFileReaderDouble, swig_delete_SndFileReaderDouble, swig_SndFileReaderDouble_methods, swig_SndFileReaderDouble_attributes, &swig_SndFileReaderDouble_Sf_SwigStatic, swig_SndFileReaderDouble_meta, swig_SndFileReaderDouble_bases, swig_SndFileReaderDouble_base_names };

static int _wrap_new_SndFileReaderInt(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SndFileReaderInt *result = 0 ;
  
  SWIG_check_num_args("SndFileReaderInt::SndFileReaderInt",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SndFileReaderInt::SndFileReaderInt",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (SndFileReaderInt *)new SndFileReaderInt((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SndFileReaderInt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_size(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderInt::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::size",1,"SndFileReaderInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_size",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  result = (int64_t)((SndFileReaderInt const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_seek_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderInt::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::seek",1,"SndFileReaderInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderInt::seek",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileReaderInt::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_seek",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->seek(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_seek_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderInt::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::seek",1,"SndFileReaderInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderInt::seek",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_seek",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->seek(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SndFileReaderInt_seek_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SndFileReaderInt_seek_SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderInt_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderInt::seek(int64_t,int)\n"
    "    SndFileReaderInt::seek(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileReaderInt_get_string(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SndFileReaderInt::get_string",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::get_string",1,"SndFileReaderInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderInt::get_string",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_get_string",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->get_string(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_command(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderInt::command",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::command",1,"SndFileReaderInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderInt::command",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderInt::command",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileReaderInt::command",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_command",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SndFileReaderInt_command");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->command(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_frames(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderInt::frames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::frames",1,"SndFileReaderInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_frames",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  result = (int64_t)((SndFileReaderInt const *)arg1)->frames();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_samplerate(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderInt::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::samplerate",1,"SndFileReaderInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_samplerate",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  result = (int)((SndFileReaderInt const *)arg1)->samplerate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_channels(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderInt::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::channels",1,"SndFileReaderInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_channels",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  result = (int)((SndFileReaderInt const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_format(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderInt::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::format",1,"SndFileReaderInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_format",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  result = (int)((SndFileReaderInt const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_sections(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderInt::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::sections",1,"SndFileReaderInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_sections",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  result = (int)((SndFileReaderInt const *)arg1)->sections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_seekable(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderInt::seekable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::seekable",1,"SndFileReaderInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_seekable",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  result = (int)((SndFileReaderInt const *)arg1)->seekable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  size_t arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderInt::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::read",1,"SndFileReaderInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderInt::read",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SndFileReaderInt::read",3,"std::vector< int,std::allocator< int > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_read",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("SndFileReaderInt_read",3,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  result = (int64_t)(arg1)->read(arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  size_t arg2 ;
  int *arg3 = (int *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderInt::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::read",1,"SndFileReaderInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderInt::read",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderInt::read",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_read",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SndFileReaderInt_read",3,SWIGTYPE_p_int);
  }
  
  result = (int64_t)(arg1)->read(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_read(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderInt_read__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderInt_read__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderInt_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderInt::read(size_t,std::vector< int,std::allocator< int > > &)\n"
    "    SndFileReaderInt::read(size_t,int *)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileReaderInt_read_frames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  size_t arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderInt::read_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::read_frames",1,"SndFileReaderInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderInt::read_frames",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SndFileReaderInt::read_frames",3,"std::vector< int,std::allocator< int > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_read_frames",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("SndFileReaderInt_read_frames",3,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  result = (int64_t)(arg1)->read_frames(arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_read_frames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderInt *arg1 = (SndFileReaderInt *) 0 ;
  size_t arg2 ;
  int *arg3 = (int *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderInt::read_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderInt::read_frames",1,"SndFileReaderInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderInt::read_frames",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderInt::read_frames",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderInt,0))){
    SWIG_fail_ptr("SndFileReaderInt_read_frames",1,SWIGTYPE_p_SndFileReaderInt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SndFileReaderInt_read_frames",3,SWIGTYPE_p_int);
  }
  
  result = (int64_t)(arg1)->read_frames(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderInt_read_frames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderInt_read_frames__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderInt_read_frames__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderInt_read_frames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderInt::read_frames(size_t,std::vector< int,std::allocator< int > > &)\n"
    "    SndFileReaderInt::read_frames(size_t,int *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SndFileReaderInt(void *obj) {
SndFileReaderInt *arg1 = (SndFileReaderInt *) obj;
delete arg1;
}
static int _proxy__wrap_new_SndFileReaderInt(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SndFileReaderInt);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SndFileReaderInt_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SndFileReaderInt_methods[]= {
    { "size", _wrap_SndFileReaderInt_size},
    { "seek", _wrap_SndFileReaderInt_seek},
    { "get_string", _wrap_SndFileReaderInt_get_string},
    { "command", _wrap_SndFileReaderInt_command},
    { "frames", _wrap_SndFileReaderInt_frames},
    { "samplerate", _wrap_SndFileReaderInt_samplerate},
    { "channels", _wrap_SndFileReaderInt_channels},
    { "format", _wrap_SndFileReaderInt_format},
    { "sections", _wrap_SndFileReaderInt_sections},
    { "seekable", _wrap_SndFileReaderInt_seekable},
    { "read", _wrap_SndFileReaderInt_read},
    { "read_frames", _wrap_SndFileReaderInt_read_frames},
    {0,0}
};
static swig_lua_method swig_SndFileReaderInt_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SndFileReaderInt_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SndFileReaderInt_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SndFileReaderInt_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SndFileReaderInt_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SndFileReaderInt_Sf_SwigStatic = {
    "SndFileReaderInt",
    swig_SndFileReaderInt_Sf_SwigStatic_methods,
    swig_SndFileReaderInt_Sf_SwigStatic_attributes,
    swig_SndFileReaderInt_Sf_SwigStatic_constants,
    swig_SndFileReaderInt_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SndFileReaderInt_bases[] = {0};
static const char *swig_SndFileReaderInt_base_names[] = {0};
static swig_lua_class _wrap_class_SndFileReaderInt = { "SndFileReaderInt", "SndFileReaderInt", &SWIGTYPE_p_SndFileReaderInt,_proxy__wrap_new_SndFileReaderInt, swig_delete_SndFileReaderInt, swig_SndFileReaderInt_methods, swig_SndFileReaderInt_attributes, &swig_SndFileReaderInt_Sf_SwigStatic, swig_SndFileReaderInt_meta, swig_SndFileReaderInt_bases, swig_SndFileReaderInt_base_names };

static int _wrap_new_SndFileReaderShort(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SndFileReaderShort *result = 0 ;
  
  SWIG_check_num_args("SndFileReaderShort::SndFileReaderShort",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SndFileReaderShort::SndFileReaderShort",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (SndFileReaderShort *)new SndFileReaderShort((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SndFileReaderShort,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_size(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderShort::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::size",1,"SndFileReaderShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_size",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  result = (int64_t)((SndFileReaderShort const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_seek_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderShort::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::seek",1,"SndFileReaderShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderShort::seek",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileReaderShort::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_seek",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->seek(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_seek_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderShort::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::seek",1,"SndFileReaderShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderShort::seek",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_seek",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->seek(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SndFileReaderShort_seek_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SndFileReaderShort_seek_SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderShort_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderShort::seek(int64_t,int)\n"
    "    SndFileReaderShort::seek(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileReaderShort_get_string(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SndFileReaderShort::get_string",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::get_string",1,"SndFileReaderShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderShort::get_string",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_get_string",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->get_string(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_command(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderShort::command",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::command",1,"SndFileReaderShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderShort::command",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderShort::command",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileReaderShort::command",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_command",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SndFileReaderShort_command");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->command(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_frames(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderShort::frames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::frames",1,"SndFileReaderShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_frames",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  result = (int64_t)((SndFileReaderShort const *)arg1)->frames();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_samplerate(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderShort::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::samplerate",1,"SndFileReaderShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_samplerate",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  result = (int)((SndFileReaderShort const *)arg1)->samplerate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_channels(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderShort::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::channels",1,"SndFileReaderShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_channels",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  result = (int)((SndFileReaderShort const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_format(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderShort::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::format",1,"SndFileReaderShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_format",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  result = (int)((SndFileReaderShort const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_sections(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderShort::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::sections",1,"SndFileReaderShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_sections",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  result = (int)((SndFileReaderShort const *)arg1)->sections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_seekable(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileReaderShort::seekable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::seekable",1,"SndFileReaderShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_seekable",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  result = (int)((SndFileReaderShort const *)arg1)->seekable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  size_t arg2 ;
  std::vector< short,std::allocator< short > > *arg3 = 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderShort::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::read",1,"SndFileReaderShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderShort::read",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SndFileReaderShort::read",3,"std::vector< short,std::allocator< short > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_read",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("SndFileReaderShort_read",3,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  result = (int64_t)(arg1)->read(arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  size_t arg2 ;
  short *arg3 = (short *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderShort::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::read",1,"SndFileReaderShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderShort::read",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderShort::read",3,"short *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_read",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("SndFileReaderShort_read",3,SWIGTYPE_p_short);
  }
  
  result = (int64_t)(arg1)->read(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_read(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderShort_read__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_short, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderShort_read__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderShort_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderShort::read(size_t,std::vector< short,std::allocator< short > > &)\n"
    "    SndFileReaderShort::read(size_t,short *)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileReaderShort_read_frames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  size_t arg2 ;
  std::vector< short,std::allocator< short > > *arg3 = 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderShort::read_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::read_frames",1,"SndFileReaderShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderShort::read_frames",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SndFileReaderShort::read_frames",3,"std::vector< short,std::allocator< short > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_read_frames",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("SndFileReaderShort_read_frames",3,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  result = (int64_t)(arg1)->read_frames(arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_read_frames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileReaderShort *arg1 = (SndFileReaderShort *) 0 ;
  size_t arg2 ;
  short *arg3 = (short *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileReaderShort::read_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileReaderShort::read_frames",1,"SndFileReaderShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileReaderShort::read_frames",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileReaderShort::read_frames",3,"short *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileReaderShort,0))){
    SWIG_fail_ptr("SndFileReaderShort_read_frames",1,SWIGTYPE_p_SndFileReaderShort);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("SndFileReaderShort_read_frames",3,SWIGTYPE_p_short);
  }
  
  result = (int64_t)(arg1)->read_frames(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileReaderShort_read_frames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderShort_read_frames__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileReaderShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_short, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileReaderShort_read_frames__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileReaderShort_read_frames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileReaderShort::read_frames(size_t,std::vector< short,std::allocator< short > > &)\n"
    "    SndFileReaderShort::read_frames(size_t,short *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SndFileReaderShort(void *obj) {
SndFileReaderShort *arg1 = (SndFileReaderShort *) obj;
delete arg1;
}
static int _proxy__wrap_new_SndFileReaderShort(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SndFileReaderShort);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SndFileReaderShort_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SndFileReaderShort_methods[]= {
    { "size", _wrap_SndFileReaderShort_size},
    { "seek", _wrap_SndFileReaderShort_seek},
    { "get_string", _wrap_SndFileReaderShort_get_string},
    { "command", _wrap_SndFileReaderShort_command},
    { "frames", _wrap_SndFileReaderShort_frames},
    { "samplerate", _wrap_SndFileReaderShort_samplerate},
    { "channels", _wrap_SndFileReaderShort_channels},
    { "format", _wrap_SndFileReaderShort_format},
    { "sections", _wrap_SndFileReaderShort_sections},
    { "seekable", _wrap_SndFileReaderShort_seekable},
    { "read", _wrap_SndFileReaderShort_read},
    { "read_frames", _wrap_SndFileReaderShort_read_frames},
    {0,0}
};
static swig_lua_method swig_SndFileReaderShort_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SndFileReaderShort_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SndFileReaderShort_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SndFileReaderShort_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SndFileReaderShort_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SndFileReaderShort_Sf_SwigStatic = {
    "SndFileReaderShort",
    swig_SndFileReaderShort_Sf_SwigStatic_methods,
    swig_SndFileReaderShort_Sf_SwigStatic_attributes,
    swig_SndFileReaderShort_Sf_SwigStatic_constants,
    swig_SndFileReaderShort_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SndFileReaderShort_bases[] = {0};
static const char *swig_SndFileReaderShort_base_names[] = {0};
static swig_lua_class _wrap_class_SndFileReaderShort = { "SndFileReaderShort", "SndFileReaderShort", &SWIGTYPE_p_SndFileReaderShort,_proxy__wrap_new_SndFileReaderShort, swig_delete_SndFileReaderShort, swig_SndFileReaderShort_methods, swig_SndFileReaderShort_attributes, &swig_SndFileReaderShort_Sf_SwigStatic, swig_SndFileReaderShort_meta, swig_SndFileReaderShort_bases, swig_SndFileReaderShort_base_names };

static int _wrap_new_SndFileWriterFloat(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SndFileWriterFloat *result = 0 ;
  
  SWIG_check_num_args("SndFileWriterFloat::SndFileWriterFloat",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SndFileWriterFloat::SndFileWriterFloat",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterFloat::SndFileWriterFloat",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileWriterFloat::SndFileWriterFloat",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileWriterFloat::SndFileWriterFloat",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (SndFileWriterFloat *)new SndFileWriterFloat((char const *)arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SndFileWriterFloat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_seek_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileWriterFloat::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::seek",1,"SndFileWriterFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterFloat::seek",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileWriterFloat::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_seek",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->seek(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_seek_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileWriterFloat::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::seek",1,"SndFileWriterFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterFloat::seek",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_seek",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->seek(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SndFileWriterFloat_seek_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SndFileWriterFloat_seek_SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterFloat_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterFloat::seek(int64_t,int)\n"
    "    SndFileWriterFloat::seek(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileWriterFloat_sync(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  
  SWIG_check_num_args("SndFileWriterFloat::sync",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::sync",1,"SndFileWriterFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_sync",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  (arg1)->sync();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_set_string(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterFloat::set_string",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::set_string",1,"SndFileWriterFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterFloat::set_string",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SndFileWriterFloat::set_string",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_set_string",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->set_string(arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_command(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterFloat::command",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::command",1,"SndFileWriterFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterFloat::command",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterFloat::command",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileWriterFloat::command",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_command",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SndFileWriterFloat_command");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->command(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_samplerate(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterFloat::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::samplerate",1,"SndFileWriterFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_samplerate",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  result = (int)((SndFileWriterFloat const *)arg1)->samplerate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_channels(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterFloat::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::channels",1,"SndFileWriterFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_channels",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  result = (int)((SndFileWriterFloat const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_format(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterFloat::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::format",1,"SndFileWriterFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_format",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  result = (int)((SndFileWriterFloat const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_sections(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterFloat::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::sections",1,"SndFileWriterFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_sections",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  result = (int)((SndFileWriterFloat const *)arg1)->sections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_seekable(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterFloat::seekable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::seekable",1,"SndFileWriterFloat const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_seekable",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  result = (int)((SndFileWriterFloat const *)arg1)->seekable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("SndFileWriterFloat::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::write",1,"SndFileWriterFloat *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SndFileWriterFloat::write",2,"std::vector< float,std::allocator< float > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_write",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("SndFileWriterFloat_write",2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  (arg1)->write(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("SndFileWriterFloat::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::write",1,"SndFileWriterFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterFloat::write",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterFloat::write",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_write",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SndFileWriterFloat_write",3,SWIGTYPE_p_float);
  }
  
  (arg1)->write(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_write(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SndFileWriterFloat_write__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileWriterFloat_write__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterFloat_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterFloat::write(std::vector< float,std::allocator< float > > &)\n"
    "    SndFileWriterFloat::write(size_t,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileWriterFloat_write_frames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("SndFileWriterFloat::write_frames",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::write_frames",1,"SndFileWriterFloat *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SndFileWriterFloat::write_frames",2,"std::vector< float,std::allocator< float > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_write_frames",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("SndFileWriterFloat_write_frames",2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  (arg1)->write_frames(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_write_frames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterFloat *arg1 = (SndFileWriterFloat *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("SndFileWriterFloat::write_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterFloat::write_frames",1,"SndFileWriterFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterFloat::write_frames",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterFloat::write_frames",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterFloat,0))){
    SWIG_fail_ptr("SndFileWriterFloat_write_frames",1,SWIGTYPE_p_SndFileWriterFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SndFileWriterFloat_write_frames",3,SWIGTYPE_p_float);
  }
  
  (arg1)->write_frames(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterFloat_write_frames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SndFileWriterFloat_write_frames__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterFloat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileWriterFloat_write_frames__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterFloat_write_frames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterFloat::write_frames(std::vector< float,std::allocator< float > > &)\n"
    "    SndFileWriterFloat::write_frames(size_t,float *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SndFileWriterFloat(void *obj) {
SndFileWriterFloat *arg1 = (SndFileWriterFloat *) obj;
delete arg1;
}
static int _proxy__wrap_new_SndFileWriterFloat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SndFileWriterFloat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SndFileWriterFloat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SndFileWriterFloat_methods[]= {
    { "seek", _wrap_SndFileWriterFloat_seek},
    { "sync", _wrap_SndFileWriterFloat_sync},
    { "set_string", _wrap_SndFileWriterFloat_set_string},
    { "command", _wrap_SndFileWriterFloat_command},
    { "samplerate", _wrap_SndFileWriterFloat_samplerate},
    { "channels", _wrap_SndFileWriterFloat_channels},
    { "format", _wrap_SndFileWriterFloat_format},
    { "sections", _wrap_SndFileWriterFloat_sections},
    { "seekable", _wrap_SndFileWriterFloat_seekable},
    { "write", _wrap_SndFileWriterFloat_write},
    { "write_frames", _wrap_SndFileWriterFloat_write_frames},
    {0,0}
};
static swig_lua_method swig_SndFileWriterFloat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SndFileWriterFloat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SndFileWriterFloat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SndFileWriterFloat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SndFileWriterFloat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SndFileWriterFloat_Sf_SwigStatic = {
    "SndFileWriterFloat",
    swig_SndFileWriterFloat_Sf_SwigStatic_methods,
    swig_SndFileWriterFloat_Sf_SwigStatic_attributes,
    swig_SndFileWriterFloat_Sf_SwigStatic_constants,
    swig_SndFileWriterFloat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SndFileWriterFloat_bases[] = {0};
static const char *swig_SndFileWriterFloat_base_names[] = {0};
static swig_lua_class _wrap_class_SndFileWriterFloat = { "SndFileWriterFloat", "SndFileWriterFloat", &SWIGTYPE_p_SndFileWriterFloat,_proxy__wrap_new_SndFileWriterFloat, swig_delete_SndFileWriterFloat, swig_SndFileWriterFloat_methods, swig_SndFileWriterFloat_attributes, &swig_SndFileWriterFloat_Sf_SwigStatic, swig_SndFileWriterFloat_meta, swig_SndFileWriterFloat_bases, swig_SndFileWriterFloat_base_names };

static int _wrap_new_SndFileWriterDouble(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SndFileWriterDouble *result = 0 ;
  
  SWIG_check_num_args("SndFileWriterDouble::SndFileWriterDouble",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SndFileWriterDouble::SndFileWriterDouble",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterDouble::SndFileWriterDouble",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileWriterDouble::SndFileWriterDouble",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileWriterDouble::SndFileWriterDouble",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (SndFileWriterDouble *)new SndFileWriterDouble((char const *)arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SndFileWriterDouble,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_seek_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileWriterDouble::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::seek",1,"SndFileWriterDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterDouble::seek",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileWriterDouble::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_seek",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->seek(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_seek_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileWriterDouble::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::seek",1,"SndFileWriterDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterDouble::seek",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_seek",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->seek(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SndFileWriterDouble_seek_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SndFileWriterDouble_seek_SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterDouble_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterDouble::seek(int64_t,int)\n"
    "    SndFileWriterDouble::seek(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileWriterDouble_sync(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  
  SWIG_check_num_args("SndFileWriterDouble::sync",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::sync",1,"SndFileWriterDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_sync",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  (arg1)->sync();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_set_string(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterDouble::set_string",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::set_string",1,"SndFileWriterDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterDouble::set_string",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SndFileWriterDouble::set_string",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_set_string",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->set_string(arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_command(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterDouble::command",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::command",1,"SndFileWriterDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterDouble::command",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterDouble::command",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileWriterDouble::command",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_command",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SndFileWriterDouble_command");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->command(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_samplerate(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterDouble::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::samplerate",1,"SndFileWriterDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_samplerate",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  result = (int)((SndFileWriterDouble const *)arg1)->samplerate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_channels(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterDouble::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::channels",1,"SndFileWriterDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_channels",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  result = (int)((SndFileWriterDouble const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_format(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterDouble::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::format",1,"SndFileWriterDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_format",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  result = (int)((SndFileWriterDouble const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_sections(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterDouble::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::sections",1,"SndFileWriterDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_sections",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  result = (int)((SndFileWriterDouble const *)arg1)->sections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_seekable(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterDouble::seekable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::seekable",1,"SndFileWriterDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_seekable",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  result = (int)((SndFileWriterDouble const *)arg1)->seekable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("SndFileWriterDouble::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::write",1,"SndFileWriterDouble *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SndFileWriterDouble::write",2,"std::vector< double,std::allocator< double > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_write",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("SndFileWriterDouble_write",2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  (arg1)->write(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("SndFileWriterDouble::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::write",1,"SndFileWriterDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterDouble::write",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterDouble::write",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_write",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SndFileWriterDouble_write",3,SWIGTYPE_p_double);
  }
  
  (arg1)->write(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_write(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SndFileWriterDouble_write__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileWriterDouble_write__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterDouble_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterDouble::write(std::vector< double,std::allocator< double > > &)\n"
    "    SndFileWriterDouble::write(size_t,double *)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileWriterDouble_write_frames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("SndFileWriterDouble::write_frames",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::write_frames",1,"SndFileWriterDouble *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SndFileWriterDouble::write_frames",2,"std::vector< double,std::allocator< double > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_write_frames",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("SndFileWriterDouble_write_frames",2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  (arg1)->write_frames(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_write_frames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterDouble *arg1 = (SndFileWriterDouble *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("SndFileWriterDouble::write_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterDouble::write_frames",1,"SndFileWriterDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterDouble::write_frames",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterDouble::write_frames",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterDouble,0))){
    SWIG_fail_ptr("SndFileWriterDouble_write_frames",1,SWIGTYPE_p_SndFileWriterDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SndFileWriterDouble_write_frames",3,SWIGTYPE_p_double);
  }
  
  (arg1)->write_frames(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterDouble_write_frames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SndFileWriterDouble_write_frames__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileWriterDouble_write_frames__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterDouble_write_frames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterDouble::write_frames(std::vector< double,std::allocator< double > > &)\n"
    "    SndFileWriterDouble::write_frames(size_t,double *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SndFileWriterDouble(void *obj) {
SndFileWriterDouble *arg1 = (SndFileWriterDouble *) obj;
delete arg1;
}
static int _proxy__wrap_new_SndFileWriterDouble(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SndFileWriterDouble);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SndFileWriterDouble_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SndFileWriterDouble_methods[]= {
    { "seek", _wrap_SndFileWriterDouble_seek},
    { "sync", _wrap_SndFileWriterDouble_sync},
    { "set_string", _wrap_SndFileWriterDouble_set_string},
    { "command", _wrap_SndFileWriterDouble_command},
    { "samplerate", _wrap_SndFileWriterDouble_samplerate},
    { "channels", _wrap_SndFileWriterDouble_channels},
    { "format", _wrap_SndFileWriterDouble_format},
    { "sections", _wrap_SndFileWriterDouble_sections},
    { "seekable", _wrap_SndFileWriterDouble_seekable},
    { "write", _wrap_SndFileWriterDouble_write},
    { "write_frames", _wrap_SndFileWriterDouble_write_frames},
    {0,0}
};
static swig_lua_method swig_SndFileWriterDouble_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SndFileWriterDouble_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SndFileWriterDouble_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SndFileWriterDouble_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SndFileWriterDouble_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SndFileWriterDouble_Sf_SwigStatic = {
    "SndFileWriterDouble",
    swig_SndFileWriterDouble_Sf_SwigStatic_methods,
    swig_SndFileWriterDouble_Sf_SwigStatic_attributes,
    swig_SndFileWriterDouble_Sf_SwigStatic_constants,
    swig_SndFileWriterDouble_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SndFileWriterDouble_bases[] = {0};
static const char *swig_SndFileWriterDouble_base_names[] = {0};
static swig_lua_class _wrap_class_SndFileWriterDouble = { "SndFileWriterDouble", "SndFileWriterDouble", &SWIGTYPE_p_SndFileWriterDouble,_proxy__wrap_new_SndFileWriterDouble, swig_delete_SndFileWriterDouble, swig_SndFileWriterDouble_methods, swig_SndFileWriterDouble_attributes, &swig_SndFileWriterDouble_Sf_SwigStatic, swig_SndFileWriterDouble_meta, swig_SndFileWriterDouble_bases, swig_SndFileWriterDouble_base_names };

static int _wrap_new_SndFileWriterShort(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SndFileWriterShort *result = 0 ;
  
  SWIG_check_num_args("SndFileWriterShort::SndFileWriterShort",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SndFileWriterShort::SndFileWriterShort",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterShort::SndFileWriterShort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileWriterShort::SndFileWriterShort",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileWriterShort::SndFileWriterShort",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (SndFileWriterShort *)new SndFileWriterShort((char const *)arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SndFileWriterShort,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_seek_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileWriterShort::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::seek",1,"SndFileWriterShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterShort::seek",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileWriterShort::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_seek",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->seek(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_seek_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileWriterShort::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::seek",1,"SndFileWriterShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterShort::seek",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_seek",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->seek(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SndFileWriterShort_seek_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SndFileWriterShort_seek_SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterShort_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterShort::seek(int64_t,int)\n"
    "    SndFileWriterShort::seek(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileWriterShort_sync(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  
  SWIG_check_num_args("SndFileWriterShort::sync",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::sync",1,"SndFileWriterShort *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_sync",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  (arg1)->sync();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_set_string(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterShort::set_string",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::set_string",1,"SndFileWriterShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterShort::set_string",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SndFileWriterShort::set_string",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_set_string",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->set_string(arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_command(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterShort::command",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::command",1,"SndFileWriterShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterShort::command",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterShort::command",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileWriterShort::command",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_command",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SndFileWriterShort_command");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->command(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_samplerate(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterShort::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::samplerate",1,"SndFileWriterShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_samplerate",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  result = (int)((SndFileWriterShort const *)arg1)->samplerate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_channels(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterShort::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::channels",1,"SndFileWriterShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_channels",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  result = (int)((SndFileWriterShort const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_format(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterShort::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::format",1,"SndFileWriterShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_format",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  result = (int)((SndFileWriterShort const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_sections(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterShort::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::sections",1,"SndFileWriterShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_sections",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  result = (int)((SndFileWriterShort const *)arg1)->sections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_seekable(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterShort::seekable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::seekable",1,"SndFileWriterShort const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_seekable",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  result = (int)((SndFileWriterShort const *)arg1)->seekable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  std::vector< short,std::allocator< short > > *arg2 = 0 ;
  
  SWIG_check_num_args("SndFileWriterShort::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::write",1,"SndFileWriterShort *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SndFileWriterShort::write",2,"std::vector< short,std::allocator< short > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_write",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("SndFileWriterShort_write",2,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  (arg1)->write(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  size_t arg2 ;
  short *arg3 = (short *) 0 ;
  
  SWIG_check_num_args("SndFileWriterShort::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::write",1,"SndFileWriterShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterShort::write",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterShort::write",3,"short *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_write",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("SndFileWriterShort_write",3,SWIGTYPE_p_short);
  }
  
  (arg1)->write(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_write(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SndFileWriterShort_write__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_short, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileWriterShort_write__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterShort_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterShort::write(std::vector< short,std::allocator< short > > &)\n"
    "    SndFileWriterShort::write(size_t,short *)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileWriterShort_write_frames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  std::vector< short,std::allocator< short > > *arg2 = 0 ;
  
  SWIG_check_num_args("SndFileWriterShort::write_frames",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::write_frames",1,"SndFileWriterShort *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SndFileWriterShort::write_frames",2,"std::vector< short,std::allocator< short > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_write_frames",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t,0))){
    SWIG_fail_ptr("SndFileWriterShort_write_frames",2,SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t);
  }
  
  (arg1)->write_frames(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_write_frames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterShort *arg1 = (SndFileWriterShort *) 0 ;
  size_t arg2 ;
  short *arg3 = (short *) 0 ;
  
  SWIG_check_num_args("SndFileWriterShort::write_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterShort::write_frames",1,"SndFileWriterShort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterShort::write_frames",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterShort::write_frames",3,"short *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterShort,0))){
    SWIG_fail_ptr("SndFileWriterShort_write_frames",1,SWIGTYPE_p_SndFileWriterShort);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("SndFileWriterShort_write_frames",3,SWIGTYPE_p_short);
  }
  
  (arg1)->write_frames(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterShort_write_frames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_std__allocatorT_short_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SndFileWriterShort_write_frames__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterShort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_short, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileWriterShort_write_frames__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterShort_write_frames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterShort::write_frames(std::vector< short,std::allocator< short > > &)\n"
    "    SndFileWriterShort::write_frames(size_t,short *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SndFileWriterShort(void *obj) {
SndFileWriterShort *arg1 = (SndFileWriterShort *) obj;
delete arg1;
}
static int _proxy__wrap_new_SndFileWriterShort(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SndFileWriterShort);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SndFileWriterShort_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SndFileWriterShort_methods[]= {
    { "seek", _wrap_SndFileWriterShort_seek},
    { "sync", _wrap_SndFileWriterShort_sync},
    { "set_string", _wrap_SndFileWriterShort_set_string},
    { "command", _wrap_SndFileWriterShort_command},
    { "samplerate", _wrap_SndFileWriterShort_samplerate},
    { "channels", _wrap_SndFileWriterShort_channels},
    { "format", _wrap_SndFileWriterShort_format},
    { "sections", _wrap_SndFileWriterShort_sections},
    { "seekable", _wrap_SndFileWriterShort_seekable},
    { "write", _wrap_SndFileWriterShort_write},
    { "write_frames", _wrap_SndFileWriterShort_write_frames},
    {0,0}
};
static swig_lua_method swig_SndFileWriterShort_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SndFileWriterShort_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SndFileWriterShort_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SndFileWriterShort_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SndFileWriterShort_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SndFileWriterShort_Sf_SwigStatic = {
    "SndFileWriterShort",
    swig_SndFileWriterShort_Sf_SwigStatic_methods,
    swig_SndFileWriterShort_Sf_SwigStatic_attributes,
    swig_SndFileWriterShort_Sf_SwigStatic_constants,
    swig_SndFileWriterShort_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SndFileWriterShort_bases[] = {0};
static const char *swig_SndFileWriterShort_base_names[] = {0};
static swig_lua_class _wrap_class_SndFileWriterShort = { "SndFileWriterShort", "SndFileWriterShort", &SWIGTYPE_p_SndFileWriterShort,_proxy__wrap_new_SndFileWriterShort, swig_delete_SndFileWriterShort, swig_SndFileWriterShort_methods, swig_SndFileWriterShort_attributes, &swig_SndFileWriterShort_Sf_SwigStatic, swig_SndFileWriterShort_meta, swig_SndFileWriterShort_bases, swig_SndFileWriterShort_base_names };

static int _wrap_new_SndFileWriterInt(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SndFileWriterInt *result = 0 ;
  
  SWIG_check_num_args("SndFileWriterInt::SndFileWriterInt",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SndFileWriterInt::SndFileWriterInt",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterInt::SndFileWriterInt",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileWriterInt::SndFileWriterInt",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileWriterInt::SndFileWriterInt",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (SndFileWriterInt *)new SndFileWriterInt((char const *)arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SndFileWriterInt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_seek_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileWriterInt::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::seek",1,"SndFileWriterInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterInt::seek",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SndFileWriterInt::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_seek",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->seek(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_seek_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("SndFileWriterInt::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::seek",1,"SndFileWriterInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterInt::seek",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_seek",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->seek(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SndFileWriterInt_seek_SWIG_0_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SndFileWriterInt_seek_SWIG_0_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterInt_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterInt::seek(int64_t,int)\n"
    "    SndFileWriterInt::seek(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileWriterInt_sync(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  
  SWIG_check_num_args("SndFileWriterInt::sync",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::sync",1,"SndFileWriterInt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_sync",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  (arg1)->sync();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_set_string(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterInt::set_string",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::set_string",1,"SndFileWriterInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterInt::set_string",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SndFileWriterInt::set_string",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_set_string",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->set_string(arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_command(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterInt::command",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::command",1,"SndFileWriterInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterInt::command",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterInt::command",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SndFileWriterInt::command",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_command",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"SndFileWriterInt_command");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->command(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_samplerate(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterInt::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::samplerate",1,"SndFileWriterInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_samplerate",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  result = (int)((SndFileWriterInt const *)arg1)->samplerate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_channels(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterInt::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::channels",1,"SndFileWriterInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_channels",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  result = (int)((SndFileWriterInt const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_format(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterInt::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::format",1,"SndFileWriterInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_format",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  result = (int)((SndFileWriterInt const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_sections(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterInt::sections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::sections",1,"SndFileWriterInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_sections",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  result = (int)((SndFileWriterInt const *)arg1)->sections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_seekable(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  int result;
  
  SWIG_check_num_args("SndFileWriterInt::seekable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::seekable",1,"SndFileWriterInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_seekable",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  result = (int)((SndFileWriterInt const *)arg1)->seekable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  
  SWIG_check_num_args("SndFileWriterInt::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::write",1,"SndFileWriterInt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SndFileWriterInt::write",2,"std::vector< int,std::allocator< int > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_write",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("SndFileWriterInt_write",2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  (arg1)->write(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  size_t arg2 ;
  int *arg3 = (int *) 0 ;
  
  SWIG_check_num_args("SndFileWriterInt::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::write",1,"SndFileWriterInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterInt::write",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterInt::write",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_write",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SndFileWriterInt_write",3,SWIGTYPE_p_int);
  }
  
  (arg1)->write(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_write(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SndFileWriterInt_write__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileWriterInt_write__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterInt_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterInt::write(std::vector< int,std::allocator< int > > &)\n"
    "    SndFileWriterInt::write(size_t,int *)\n");
  lua_error(L);return 0;
}


static int _wrap_SndFileWriterInt_write_frames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  
  SWIG_check_num_args("SndFileWriterInt::write_frames",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::write_frames",1,"SndFileWriterInt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SndFileWriterInt::write_frames",2,"std::vector< int,std::allocator< int > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_write_frames",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,0))){
    SWIG_fail_ptr("SndFileWriterInt_write_frames",2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t);
  }
  
  (arg1)->write_frames(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_write_frames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SndFileWriterInt *arg1 = (SndFileWriterInt *) 0 ;
  size_t arg2 ;
  int *arg3 = (int *) 0 ;
  
  SWIG_check_num_args("SndFileWriterInt::write_frames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SndFileWriterInt::write_frames",1,"SndFileWriterInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SndFileWriterInt::write_frames",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SndFileWriterInt::write_frames",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SndFileWriterInt,0))){
    SWIG_fail_ptr("SndFileWriterInt_write_frames",1,SWIGTYPE_p_SndFileWriterInt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SndFileWriterInt_write_frames",3,SWIGTYPE_p_int);
  }
  
  (arg1)->write_frames(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SndFileWriterInt_write_frames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SndFileWriterInt_write_frames__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SndFileWriterInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SndFileWriterInt_write_frames__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SndFileWriterInt_write_frames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SndFileWriterInt::write_frames(std::vector< int,std::allocator< int > > &)\n"
    "    SndFileWriterInt::write_frames(size_t,int *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SndFileWriterInt(void *obj) {
SndFileWriterInt *arg1 = (SndFileWriterInt *) obj;
delete arg1;
}
static int _proxy__wrap_new_SndFileWriterInt(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SndFileWriterInt);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SndFileWriterInt_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SndFileWriterInt_methods[]= {
    { "seek", _wrap_SndFileWriterInt_seek},
    { "sync", _wrap_SndFileWriterInt_sync},
    { "set_string", _wrap_SndFileWriterInt_set_string},
    { "command", _wrap_SndFileWriterInt_command},
    { "samplerate", _wrap_SndFileWriterInt_samplerate},
    { "channels", _wrap_SndFileWriterInt_channels},
    { "format", _wrap_SndFileWriterInt_format},
    { "sections", _wrap_SndFileWriterInt_sections},
    { "seekable", _wrap_SndFileWriterInt_seekable},
    { "write", _wrap_SndFileWriterInt_write},
    { "write_frames", _wrap_SndFileWriterInt_write_frames},
    {0,0}
};
static swig_lua_method swig_SndFileWriterInt_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SndFileWriterInt_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SndFileWriterInt_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SndFileWriterInt_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SndFileWriterInt_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SndFileWriterInt_Sf_SwigStatic = {
    "SndFileWriterInt",
    swig_SndFileWriterInt_Sf_SwigStatic_methods,
    swig_SndFileWriterInt_Sf_SwigStatic_attributes,
    swig_SndFileWriterInt_Sf_SwigStatic_constants,
    swig_SndFileWriterInt_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SndFileWriterInt_bases[] = {0};
static const char *swig_SndFileWriterInt_base_names[] = {0};
static swig_lua_class _wrap_class_SndFileWriterInt = { "SndFileWriterInt", "SndFileWriterInt", &SWIGTYPE_p_SndFileWriterInt,_proxy__wrap_new_SndFileWriterInt, swig_delete_SndFileWriterInt, swig_SndFileWriterInt_methods, swig_SndFileWriterInt_attributes, &swig_SndFileWriterInt_Sf_SwigStatic, swig_SndFileWriterInt_meta, swig_SndFileWriterInt_bases, swig_SndFileWriterInt_base_names };

static int _wrap_FFTPlan_set_input(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlan *arg1 = (AudioDSP::FFTPlan *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlan::set_input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlan::set_input",1,"AudioDSP::FFTPlan *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlan::set_input",2,"DspFloatType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlan,0))){
    SWIG_fail_ptr("FFTPlan_set_input",1,SWIGTYPE_p_AudioDSP__FFTPlan);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTPlan_set_input",2,SWIGTYPE_p_double);
  }
  
  (arg1)->set_input((DspFloatType const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlan_get_output(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlan *arg1 = (AudioDSP::FFTPlan *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlan::get_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlan::get_output",1,"AudioDSP::FFTPlan *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlan::get_output",2,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlan,0))){
    SWIG_fail_ptr("FFTPlan_get_output",1,SWIGTYPE_p_AudioDSP__FFTPlan);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTPlan_get_output",2,SWIGTYPE_p_double);
  }
  
  (arg1)->get_output(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlan_set_complex_input(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlan *arg1 = (AudioDSP::FFTPlan *) 0 ;
  std::complex< DspFloatType > *arg2 = (std::complex< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlan::set_complex_input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlan::set_complex_input",1,"AudioDSP::FFTPlan *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlan::set_complex_input",2,"std::complex< DspFloatType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlan,0))){
    SWIG_fail_ptr("FFTPlan_set_complex_input",1,SWIGTYPE_p_AudioDSP__FFTPlan);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("FFTPlan_set_complex_input",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->set_complex_input((std::complex< DspFloatType > const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlan_get_complex_output(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlan *arg1 = (AudioDSP::FFTPlan *) 0 ;
  std::complex< DspFloatType > *arg2 = (std::complex< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlan::get_complex_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlan::get_complex_output",1,"AudioDSP::FFTPlan *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlan::get_complex_output",2,"std::complex< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlan,0))){
    SWIG_fail_ptr("FFTPlan_get_complex_output",1,SWIGTYPE_p_AudioDSP__FFTPlan);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("FFTPlan_get_complex_output",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->get_complex_output(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlan_forward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlan *arg1 = (AudioDSP::FFTPlan *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlan::forward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlan::forward",1,"AudioDSP::FFTPlan *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlan,0))){
    SWIG_fail_ptr("FFTPlan_forward",1,SWIGTYPE_p_AudioDSP__FFTPlan);
  }
  
  (arg1)->forward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlan_backward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlan *arg1 = (AudioDSP::FFTPlan *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlan::backward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlan::backward",1,"AudioDSP::FFTPlan *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlan,0))){
    SWIG_fail_ptr("FFTPlan_backward",1,SWIGTYPE_p_AudioDSP__FFTPlan);
  }
  
  (arg1)->backward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTPlan(void *obj) {
AudioDSP::FFTPlan *arg1 = (AudioDSP::FFTPlan *) obj;
delete arg1;
}
static swig_lua_attribute swig_FFTPlan_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FFTPlan_methods[]= {
    { "set_input", _wrap_FFTPlan_set_input},
    { "get_output", _wrap_FFTPlan_get_output},
    { "set_complex_input", _wrap_FFTPlan_set_complex_input},
    { "get_complex_output", _wrap_FFTPlan_get_complex_output},
    { "forward", _wrap_FFTPlan_forward},
    { "backward", _wrap_FFTPlan_backward},
    {0,0}
};
static swig_lua_method swig_FFTPlan_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTPlan_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTPlan_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTPlan_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTPlan_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTPlan_Sf_SwigStatic = {
    "FFTPlan",
    swig_FFTPlan_Sf_SwigStatic_methods,
    swig_FFTPlan_Sf_SwigStatic_attributes,
    swig_FFTPlan_Sf_SwigStatic_constants,
    swig_FFTPlan_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTPlan_bases[] = {0};
static const char *swig_FFTPlan_base_names[] = {0};
static swig_lua_class _wrap_class_FFTPlan = { "FFTPlan", "FFTPlan", &SWIGTYPE_p_AudioDSP__FFTPlan,0, swig_delete_FFTPlan, swig_FFTPlan_methods, swig_FFTPlan_attributes, &swig_FFTPlan_Sf_SwigStatic, swig_FFTPlan_meta, swig_FFTPlan_bases, swig_FFTPlan_base_names };

static int _wrap_fft__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlan *arg1 = 0 ;
  std::complex< DspFloatType > *arg2 = (std::complex< DspFloatType > *) 0 ;
  std::complex< DspFloatType > *arg3 = (std::complex< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::fft",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft",1,"AudioDSP::FFTPlan &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft",2,"std::complex< DspFloatType > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft",3,"std::complex< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlan,0))){
    SWIG_fail_ptr("fft",1,SWIGTYPE_p_AudioDSP__FFTPlan);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("fft",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("fft",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  AudioDSP::fft(*arg1,(std::complex< double > const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlan *arg1 = 0 ;
  std::complex< DspFloatType > *arg2 = (std::complex< DspFloatType > *) 0 ;
  std::complex< DspFloatType > *arg3 = (std::complex< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::ifft",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft",1,"AudioDSP::FFTPlan &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft",2,"std::complex< DspFloatType > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft",3,"std::complex< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlan,0))){
    SWIG_fail_ptr("ifft",1,SWIGTYPE_p_AudioDSP__FFTPlan);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ifft",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ifft",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  AudioDSP::ifft(*arg1,(std::complex< double > const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlan *arg1 = 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  std::complex< DspFloatType > *arg3 = (std::complex< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::fft",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft",1,"AudioDSP::FFTPlan &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft",2,"DspFloatType const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft",3,"std::complex< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlan,0))){
    SWIG_fail_ptr("fft",1,SWIGTYPE_p_AudioDSP__FFTPlan);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("fft",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("fft",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  AudioDSP::fft(*arg1,(double const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlan *arg1 = 0 ;
  std::complex< DspFloatType > *arg2 = (std::complex< DspFloatType > *) 0 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("AudioDSP::ifft",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft",1,"AudioDSP::FFTPlan &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft",2,"std::complex< DspFloatType > *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlan,0))){
    SWIG_fail_ptr("ifft",1,SWIGTYPE_p_AudioDSP__FFTPlan);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ifft",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ifft",3,SWIGTYPE_p_double);
  }
  
  AudioDSP::ifft(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble_x_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  fftw_complex *arg2 = (fftw_complex *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::x",1,"AudioDSP::FFTPlanComplexDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::x",2,"fftw_complex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_x_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fftw_complex,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTPlanComplexDouble_x_set",2,SWIGTYPE_p_fftw_complex);
  }
  
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble_x_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  fftw_complex *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::x",1,"AudioDSP::FFTPlanComplexDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_x_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  result = (fftw_complex *) ((arg1)->x);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fftw_complex,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble_y_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  fftw_complex *arg2 = (fftw_complex *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::y",1,"AudioDSP::FFTPlanComplexDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::y",2,"fftw_complex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_y_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fftw_complex,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTPlanComplexDouble_y_set",2,SWIGTYPE_p_fftw_complex);
  }
  
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble_y_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  fftw_complex *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::y",1,"AudioDSP::FFTPlanComplexDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_y_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  result = (fftw_complex *) ((arg1)->y);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fftw_complex,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble_size_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::size",1,"AudioDSP::FFTPlanComplexDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_size_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble_size_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::size",1,"AudioDSP::FFTPlanComplexDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_size_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  result =  ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble_pf_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  fftw_plan arg2 ;
  fftw_plan *argp2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::pf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::pf",1,"AudioDSP::FFTPlanComplexDouble *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::pf",2,"fftw_plan");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_pf_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fftw_plan,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_pf_set",2,SWIGTYPE_p_fftw_plan);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble_pf_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  fftw_plan result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::pf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::pf",1,"AudioDSP::FFTPlanComplexDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_pf_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  result =  ((arg1)->pf);
  {
    fftw_plan * resultptr = new fftw_plan((const fftw_plan &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fftw_plan,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble_pb_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  fftw_plan arg2 ;
  fftw_plan *argp2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::pb",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::pb",1,"AudioDSP::FFTPlanComplexDouble *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::pb",2,"fftw_plan");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_pb_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fftw_plan,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_pb_set",2,SWIGTYPE_p_fftw_plan);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pb = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble_pb_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  fftw_plan result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::pb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::pb",1,"AudioDSP::FFTPlanComplexDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_pb_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  result =  ((arg1)->pb);
  {
    fftw_plan * resultptr = new fftw_plan((const fftw_plan &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fftw_plan,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanComplexDouble__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::FFTPlanComplexDouble",0,0)
  result = (AudioDSP::FFTPlanComplexDouble *)new AudioDSP::FFTPlanComplexDouble();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanComplexDouble__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  AudioDSP::FFTPlanComplexDouble *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::FFTPlanComplexDouble",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::FFTPlanComplexDouble",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (AudioDSP::FFTPlanComplexDouble *)new AudioDSP::FFTPlanComplexDouble(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanComplexDouble(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FFTPlanComplexDouble__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FFTPlanComplexDouble__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FFTPlanComplexDouble'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::FFTPlanComplexDouble::FFTPlanComplexDouble()\n"
    "    AudioDSP::FFTPlanComplexDouble::FFTPlanComplexDouble(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FFTPlanComplexDouble_deinit(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::deinit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::deinit",1,"AudioDSP::FFTPlanComplexDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_deinit",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  (arg1)->deinit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble_init(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::init",1,"AudioDSP::FFTPlanComplexDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::init",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_init",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble_set_complex_input(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::set_complex_input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::set_complex_input",1,"AudioDSP::FFTPlanComplexDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::set_complex_input",2,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_set_complex_input",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_set_complex_input",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->set_complex_input((std::complex< double > const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble_get_complex_output(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::get_complex_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::get_complex_output",1,"AudioDSP::FFTPlanComplexDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::get_complex_output",2,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_get_complex_output",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_get_complex_output",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->get_complex_output(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble_normalize(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::normalize",1,"AudioDSP::FFTPlanComplexDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_normalize",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble_forward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::forward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::forward",1,"AudioDSP::FFTPlanComplexDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_forward",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  (arg1)->forward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble_backward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble::backward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble::backward",1,"AudioDSP::FFTPlanComplexDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble_backward",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  (arg1)->backward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTPlanComplexDouble(void *obj) {
AudioDSP::FFTPlanComplexDouble *arg1 = (AudioDSP::FFTPlanComplexDouble *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTPlanComplexDouble(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTPlanComplexDouble);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTPlanComplexDouble_attributes[] = {
    { "x", _wrap_FFTPlanComplexDouble_x_get, _wrap_FFTPlanComplexDouble_x_set },
    { "y", _wrap_FFTPlanComplexDouble_y_get, _wrap_FFTPlanComplexDouble_y_set },
    { "size", _wrap_FFTPlanComplexDouble_size_get, _wrap_FFTPlanComplexDouble_size_set },
    { "pf", _wrap_FFTPlanComplexDouble_pf_get, _wrap_FFTPlanComplexDouble_pf_set },
    { "pb", _wrap_FFTPlanComplexDouble_pb_get, _wrap_FFTPlanComplexDouble_pb_set },
    {0,0,0}
};
static swig_lua_method swig_FFTPlanComplexDouble_methods[]= {
    { "deinit", _wrap_FFTPlanComplexDouble_deinit},
    { "init", _wrap_FFTPlanComplexDouble_init},
    { "set_complex_input", _wrap_FFTPlanComplexDouble_set_complex_input},
    { "get_complex_output", _wrap_FFTPlanComplexDouble_get_complex_output},
    { "normalize", _wrap_FFTPlanComplexDouble_normalize},
    { "forward", _wrap_FFTPlanComplexDouble_forward},
    { "backward", _wrap_FFTPlanComplexDouble_backward},
    {0,0}
};
static swig_lua_method swig_FFTPlanComplexDouble_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTPlanComplexDouble_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTPlanComplexDouble_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTPlanComplexDouble_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTPlanComplexDouble_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTPlanComplexDouble_Sf_SwigStatic = {
    "FFTPlanComplexDouble",
    swig_FFTPlanComplexDouble_Sf_SwigStatic_methods,
    swig_FFTPlanComplexDouble_Sf_SwigStatic_attributes,
    swig_FFTPlanComplexDouble_Sf_SwigStatic_constants,
    swig_FFTPlanComplexDouble_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTPlanComplexDouble_bases[] = {0};
static const char *swig_FFTPlanComplexDouble_base_names[] = {0};
static swig_lua_class _wrap_class_FFTPlanComplexDouble = { "FFTPlanComplexDouble", "FFTPlanComplexDouble", &SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,_proxy__wrap_new_FFTPlanComplexDouble, swig_delete_FFTPlanComplexDouble, swig_FFTPlanComplexDouble_methods, swig_FFTPlanComplexDouble_attributes, &swig_FFTPlanComplexDouble_Sf_SwigStatic, swig_FFTPlanComplexDouble_meta, swig_FFTPlanComplexDouble_bases, swig_FFTPlanComplexDouble_base_names };

static int _wrap_FFTPlanComplexDouble2D_x_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  fftw_complex *arg2 = (fftw_complex *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::x",1,"AudioDSP::FFTPlanComplexDouble2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::x",2,"fftw_complex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_x_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fftw_complex,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_x_set",2,SWIGTYPE_p_fftw_complex);
  }
  
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_x_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  fftw_complex *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::x",1,"AudioDSP::FFTPlanComplexDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_x_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  result = (fftw_complex *) ((arg1)->x);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fftw_complex,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_y_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  fftw_complex *arg2 = (fftw_complex *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::y",1,"AudioDSP::FFTPlanComplexDouble2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::y",2,"fftw_complex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_y_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fftw_complex,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_y_set",2,SWIGTYPE_p_fftw_complex);
  }
  
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_y_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  fftw_complex *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::y",1,"AudioDSP::FFTPlanComplexDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_y_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  result = (fftw_complex *) ((arg1)->y);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fftw_complex,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_size_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::size",1,"AudioDSP::FFTPlanComplexDouble2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_size_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_size_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::size",1,"AudioDSP::FFTPlanComplexDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_size_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  result =  ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_M_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::M",1,"AudioDSP::FFTPlanComplexDouble2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_M_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_M_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::M",1,"AudioDSP::FFTPlanComplexDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_M_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_N_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::N",1,"AudioDSP::FFTPlanComplexDouble2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_N_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_N_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::N",1,"AudioDSP::FFTPlanComplexDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_N_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_pf_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  fftw_plan arg2 ;
  fftw_plan *argp2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::pf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::pf",1,"AudioDSP::FFTPlanComplexDouble2D *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::pf",2,"fftw_plan");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_pf_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fftw_plan,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_pf_set",2,SWIGTYPE_p_fftw_plan);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_pf_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  fftw_plan result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::pf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::pf",1,"AudioDSP::FFTPlanComplexDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_pf_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  result =  ((arg1)->pf);
  {
    fftw_plan * resultptr = new fftw_plan((const fftw_plan &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fftw_plan,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_pb_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  fftw_plan arg2 ;
  fftw_plan *argp2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::pb",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::pb",1,"AudioDSP::FFTPlanComplexDouble2D *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::pb",2,"fftw_plan");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_pb_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fftw_plan,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_pb_set",2,SWIGTYPE_p_fftw_plan);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pb = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_pb_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  fftw_plan result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::pb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::pb",1,"AudioDSP::FFTPlanComplexDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_pb_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  result =  ((arg1)->pb);
  {
    fftw_plan * resultptr = new fftw_plan((const fftw_plan &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fftw_plan,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanComplexDouble2D__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::FFTPlanComplexDouble2D",0,0)
  result = (AudioDSP::FFTPlanComplexDouble2D *)new AudioDSP::FFTPlanComplexDouble2D();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanComplexDouble2D__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  AudioDSP::FFTPlanComplexDouble2D *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::FFTPlanComplexDouble2D",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::FFTPlanComplexDouble2D",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::FFTPlanComplexDouble2D",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (AudioDSP::FFTPlanComplexDouble2D *)new AudioDSP::FFTPlanComplexDouble2D(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanComplexDouble2D(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FFTPlanComplexDouble2D__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FFTPlanComplexDouble2D__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FFTPlanComplexDouble2D'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::FFTPlanComplexDouble2D::FFTPlanComplexDouble2D()\n"
    "    AudioDSP::FFTPlanComplexDouble2D::FFTPlanComplexDouble2D(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FFTPlanComplexDouble2D_deinit(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::deinit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::deinit",1,"AudioDSP::FFTPlanComplexDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_deinit",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  (arg1)->deinit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_init(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::init",1,"AudioDSP::FFTPlanComplexDouble2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::init",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::init",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_init",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->init(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_set_complex_input(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::set_complex_input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::set_complex_input",1,"AudioDSP::FFTPlanComplexDouble2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::set_complex_input",2,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_set_complex_input",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_set_complex_input",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->set_complex_input((std::complex< double > const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_get_complex_output(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::get_complex_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::get_complex_output",1,"AudioDSP::FFTPlanComplexDouble2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::get_complex_output",2,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_get_complex_output",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_get_complex_output",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->get_complex_output(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_normalize(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::normalize",1,"AudioDSP::FFTPlanComplexDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_normalize",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_forward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::forward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::forward",1,"AudioDSP::FFTPlanComplexDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_forward",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  (arg1)->forward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexDouble2D_backward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexDouble2D::backward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexDouble2D::backward",1,"AudioDSP::FFTPlanComplexDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("FFTPlanComplexDouble2D_backward",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  (arg1)->backward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTPlanComplexDouble2D(void *obj) {
AudioDSP::FFTPlanComplexDouble2D *arg1 = (AudioDSP::FFTPlanComplexDouble2D *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTPlanComplexDouble2D(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTPlanComplexDouble2D);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTPlanComplexDouble2D_attributes[] = {
    { "x", _wrap_FFTPlanComplexDouble2D_x_get, _wrap_FFTPlanComplexDouble2D_x_set },
    { "y", _wrap_FFTPlanComplexDouble2D_y_get, _wrap_FFTPlanComplexDouble2D_y_set },
    { "size", _wrap_FFTPlanComplexDouble2D_size_get, _wrap_FFTPlanComplexDouble2D_size_set },
    { "M", _wrap_FFTPlanComplexDouble2D_M_get, _wrap_FFTPlanComplexDouble2D_M_set },
    { "N", _wrap_FFTPlanComplexDouble2D_N_get, _wrap_FFTPlanComplexDouble2D_N_set },
    { "pf", _wrap_FFTPlanComplexDouble2D_pf_get, _wrap_FFTPlanComplexDouble2D_pf_set },
    { "pb", _wrap_FFTPlanComplexDouble2D_pb_get, _wrap_FFTPlanComplexDouble2D_pb_set },
    {0,0,0}
};
static swig_lua_method swig_FFTPlanComplexDouble2D_methods[]= {
    { "deinit", _wrap_FFTPlanComplexDouble2D_deinit},
    { "init", _wrap_FFTPlanComplexDouble2D_init},
    { "set_complex_input", _wrap_FFTPlanComplexDouble2D_set_complex_input},
    { "get_complex_output", _wrap_FFTPlanComplexDouble2D_get_complex_output},
    { "normalize", _wrap_FFTPlanComplexDouble2D_normalize},
    { "forward", _wrap_FFTPlanComplexDouble2D_forward},
    { "backward", _wrap_FFTPlanComplexDouble2D_backward},
    {0,0}
};
static swig_lua_method swig_FFTPlanComplexDouble2D_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTPlanComplexDouble2D_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTPlanComplexDouble2D_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTPlanComplexDouble2D_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTPlanComplexDouble2D_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTPlanComplexDouble2D_Sf_SwigStatic = {
    "FFTPlanComplexDouble2D",
    swig_FFTPlanComplexDouble2D_Sf_SwigStatic_methods,
    swig_FFTPlanComplexDouble2D_Sf_SwigStatic_attributes,
    swig_FFTPlanComplexDouble2D_Sf_SwigStatic_constants,
    swig_FFTPlanComplexDouble2D_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTPlanComplexDouble2D_bases[] = {0};
static const char *swig_FFTPlanComplexDouble2D_base_names[] = {0};
static swig_lua_class _wrap_class_FFTPlanComplexDouble2D = { "FFTPlanComplexDouble2D", "FFTPlanComplexDouble2D", &SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,_proxy__wrap_new_FFTPlanComplexDouble2D, swig_delete_FFTPlanComplexDouble2D, swig_FFTPlanComplexDouble2D_methods, swig_FFTPlanComplexDouble2D_attributes, &swig_FFTPlanComplexDouble2D_Sf_SwigStatic, swig_FFTPlanComplexDouble2D_meta, swig_FFTPlanComplexDouble2D_bases, swig_FFTPlanComplexDouble2D_base_names };

static int _wrap_FFTPlanComplexFloat_x_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  fftwf_complex *arg2 = (fftwf_complex *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::x",1,"AudioDSP::FFTPlanComplexFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::x",2,"fftwf_complex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_x_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fftwf_complex,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTPlanComplexFloat_x_set",2,SWIGTYPE_p_fftwf_complex);
  }
  
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat_x_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  fftwf_complex *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::x",1,"AudioDSP::FFTPlanComplexFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_x_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  result = (fftwf_complex *) ((arg1)->x);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fftwf_complex,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat_y_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  fftwf_complex *arg2 = (fftwf_complex *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::y",1,"AudioDSP::FFTPlanComplexFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::y",2,"fftwf_complex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_y_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fftwf_complex,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTPlanComplexFloat_y_set",2,SWIGTYPE_p_fftwf_complex);
  }
  
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat_y_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  fftwf_complex *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::y",1,"AudioDSP::FFTPlanComplexFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_y_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  result = (fftwf_complex *) ((arg1)->y);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fftwf_complex,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat_size_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::size",1,"AudioDSP::FFTPlanComplexFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_size_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat_size_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::size",1,"AudioDSP::FFTPlanComplexFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_size_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  result =  ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat_pf_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  fftwf_plan arg2 ;
  fftwf_plan *argp2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::pf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::pf",1,"AudioDSP::FFTPlanComplexFloat *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::pf",2,"fftwf_plan");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_pf_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fftwf_plan,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_pf_set",2,SWIGTYPE_p_fftwf_plan);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat_pf_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  fftwf_plan result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::pf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::pf",1,"AudioDSP::FFTPlanComplexFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_pf_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  result =  ((arg1)->pf);
  {
    fftwf_plan * resultptr = new fftwf_plan((const fftwf_plan &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fftwf_plan,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat_pb_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  fftwf_plan arg2 ;
  fftwf_plan *argp2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::pb",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::pb",1,"AudioDSP::FFTPlanComplexFloat *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::pb",2,"fftwf_plan");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_pb_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fftwf_plan,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_pb_set",2,SWIGTYPE_p_fftwf_plan);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pb = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat_pb_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  fftwf_plan result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::pb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::pb",1,"AudioDSP::FFTPlanComplexFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_pb_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  result =  ((arg1)->pb);
  {
    fftwf_plan * resultptr = new fftwf_plan((const fftwf_plan &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fftwf_plan,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanComplexFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::FFTPlanComplexFloat",0,0)
  result = (AudioDSP::FFTPlanComplexFloat *)new AudioDSP::FFTPlanComplexFloat();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanComplexFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  AudioDSP::FFTPlanComplexFloat *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::FFTPlanComplexFloat",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::FFTPlanComplexFloat",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (AudioDSP::FFTPlanComplexFloat *)new AudioDSP::FFTPlanComplexFloat(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanComplexFloat(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FFTPlanComplexFloat__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FFTPlanComplexFloat__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FFTPlanComplexFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::FFTPlanComplexFloat::FFTPlanComplexFloat()\n"
    "    AudioDSP::FFTPlanComplexFloat::FFTPlanComplexFloat(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FFTPlanComplexFloat_deinit(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::deinit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::deinit",1,"AudioDSP::FFTPlanComplexFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_deinit",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  (arg1)->deinit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat_init(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::init",1,"AudioDSP::FFTPlanComplexFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::init",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_init",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat_set_complex_input(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::set_complex_input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::set_complex_input",1,"AudioDSP::FFTPlanComplexFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::set_complex_input",2,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_set_complex_input",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_set_complex_input",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->set_complex_input((std::complex< float > const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat_get_complex_output(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::get_complex_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::get_complex_output",1,"AudioDSP::FFTPlanComplexFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::get_complex_output",2,"std::complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_get_complex_output",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_get_complex_output",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->get_complex_output(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat_normalize(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::normalize",1,"AudioDSP::FFTPlanComplexFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_normalize",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat_forward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::forward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::forward",1,"AudioDSP::FFTPlanComplexFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_forward",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  (arg1)->forward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat_backward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat::backward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat::backward",1,"AudioDSP::FFTPlanComplexFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat_backward",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  (arg1)->backward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTPlanComplexFloat(void *obj) {
AudioDSP::FFTPlanComplexFloat *arg1 = (AudioDSP::FFTPlanComplexFloat *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTPlanComplexFloat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTPlanComplexFloat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTPlanComplexFloat_attributes[] = {
    { "x", _wrap_FFTPlanComplexFloat_x_get, _wrap_FFTPlanComplexFloat_x_set },
    { "y", _wrap_FFTPlanComplexFloat_y_get, _wrap_FFTPlanComplexFloat_y_set },
    { "size", _wrap_FFTPlanComplexFloat_size_get, _wrap_FFTPlanComplexFloat_size_set },
    { "pf", _wrap_FFTPlanComplexFloat_pf_get, _wrap_FFTPlanComplexFloat_pf_set },
    { "pb", _wrap_FFTPlanComplexFloat_pb_get, _wrap_FFTPlanComplexFloat_pb_set },
    {0,0,0}
};
static swig_lua_method swig_FFTPlanComplexFloat_methods[]= {
    { "deinit", _wrap_FFTPlanComplexFloat_deinit},
    { "init", _wrap_FFTPlanComplexFloat_init},
    { "set_complex_input", _wrap_FFTPlanComplexFloat_set_complex_input},
    { "get_complex_output", _wrap_FFTPlanComplexFloat_get_complex_output},
    { "normalize", _wrap_FFTPlanComplexFloat_normalize},
    { "forward", _wrap_FFTPlanComplexFloat_forward},
    { "backward", _wrap_FFTPlanComplexFloat_backward},
    {0,0}
};
static swig_lua_method swig_FFTPlanComplexFloat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTPlanComplexFloat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTPlanComplexFloat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTPlanComplexFloat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTPlanComplexFloat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTPlanComplexFloat_Sf_SwigStatic = {
    "FFTPlanComplexFloat",
    swig_FFTPlanComplexFloat_Sf_SwigStatic_methods,
    swig_FFTPlanComplexFloat_Sf_SwigStatic_attributes,
    swig_FFTPlanComplexFloat_Sf_SwigStatic_constants,
    swig_FFTPlanComplexFloat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTPlanComplexFloat_bases[] = {0};
static const char *swig_FFTPlanComplexFloat_base_names[] = {0};
static swig_lua_class _wrap_class_FFTPlanComplexFloat = { "FFTPlanComplexFloat", "FFTPlanComplexFloat", &SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,_proxy__wrap_new_FFTPlanComplexFloat, swig_delete_FFTPlanComplexFloat, swig_FFTPlanComplexFloat_methods, swig_FFTPlanComplexFloat_attributes, &swig_FFTPlanComplexFloat_Sf_SwigStatic, swig_FFTPlanComplexFloat_meta, swig_FFTPlanComplexFloat_bases, swig_FFTPlanComplexFloat_base_names };

static int _wrap_FFTPlanComplexFloat2D_x_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  fftwf_complex *arg2 = (fftwf_complex *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::x",1,"AudioDSP::FFTPlanComplexFloat2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::x",2,"fftwf_complex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_x_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fftwf_complex,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_x_set",2,SWIGTYPE_p_fftwf_complex);
  }
  
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_x_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  fftwf_complex *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::x",1,"AudioDSP::FFTPlanComplexFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_x_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  result = (fftwf_complex *) ((arg1)->x);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fftwf_complex,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_y_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  fftwf_complex *arg2 = (fftwf_complex *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::y",1,"AudioDSP::FFTPlanComplexFloat2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::y",2,"fftwf_complex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_y_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fftwf_complex,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_y_set",2,SWIGTYPE_p_fftwf_complex);
  }
  
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_y_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  fftwf_complex *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::y",1,"AudioDSP::FFTPlanComplexFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_y_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  result = (fftwf_complex *) ((arg1)->y);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fftwf_complex,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_size_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::size",1,"AudioDSP::FFTPlanComplexFloat2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_size_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_size_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::size",1,"AudioDSP::FFTPlanComplexFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_size_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  result =  ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_M_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::M",1,"AudioDSP::FFTPlanComplexFloat2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_M_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_M_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::M",1,"AudioDSP::FFTPlanComplexFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_M_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_N_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::N",1,"AudioDSP::FFTPlanComplexFloat2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_N_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_N_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::N",1,"AudioDSP::FFTPlanComplexFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_N_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_pf_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  fftwf_plan arg2 ;
  fftwf_plan *argp2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::pf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::pf",1,"AudioDSP::FFTPlanComplexFloat2D *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::pf",2,"fftwf_plan");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_pf_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fftwf_plan,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_pf_set",2,SWIGTYPE_p_fftwf_plan);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_pf_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  fftwf_plan result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::pf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::pf",1,"AudioDSP::FFTPlanComplexFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_pf_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  result =  ((arg1)->pf);
  {
    fftwf_plan * resultptr = new fftwf_plan((const fftwf_plan &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fftwf_plan,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_pb_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  fftwf_plan arg2 ;
  fftwf_plan *argp2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::pb",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::pb",1,"AudioDSP::FFTPlanComplexFloat2D *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::pb",2,"fftwf_plan");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_pb_set",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fftwf_plan,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_pb_set",2,SWIGTYPE_p_fftwf_plan);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pb = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_pb_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  fftwf_plan result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::pb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::pb",1,"AudioDSP::FFTPlanComplexFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_pb_get",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  result =  ((arg1)->pb);
  {
    fftwf_plan * resultptr = new fftwf_plan((const fftwf_plan &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fftwf_plan,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanComplexFloat2D__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::FFTPlanComplexFloat2D",0,0)
  result = (AudioDSP::FFTPlanComplexFloat2D *)new AudioDSP::FFTPlanComplexFloat2D();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanComplexFloat2D__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  AudioDSP::FFTPlanComplexFloat2D *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::FFTPlanComplexFloat2D",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::FFTPlanComplexFloat2D",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::FFTPlanComplexFloat2D",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (AudioDSP::FFTPlanComplexFloat2D *)new AudioDSP::FFTPlanComplexFloat2D(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanComplexFloat2D(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FFTPlanComplexFloat2D__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FFTPlanComplexFloat2D__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FFTPlanComplexFloat2D'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::FFTPlanComplexFloat2D::FFTPlanComplexFloat2D()\n"
    "    AudioDSP::FFTPlanComplexFloat2D::FFTPlanComplexFloat2D(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FFTPlanComplexFloat2D_deinit(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::deinit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::deinit",1,"AudioDSP::FFTPlanComplexFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_deinit",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  (arg1)->deinit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_init(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::init",1,"AudioDSP::FFTPlanComplexFloat2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::init",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::init",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_init",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->init(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_set_complex_input(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::set_complex_input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::set_complex_input",1,"AudioDSP::FFTPlanComplexFloat2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::set_complex_input",2,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_set_complex_input",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_set_complex_input",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->set_complex_input((std::complex< float > const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_get_complex_output(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::get_complex_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::get_complex_output",1,"AudioDSP::FFTPlanComplexFloat2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::get_complex_output",2,"std::complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_get_complex_output",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_get_complex_output",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->get_complex_output(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_normalize(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::normalize",1,"AudioDSP::FFTPlanComplexFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_normalize",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_forward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::forward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::forward",1,"AudioDSP::FFTPlanComplexFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_forward",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  (arg1)->forward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanComplexFloat2D_backward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanComplexFloat2D::backward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanComplexFloat2D::backward",1,"AudioDSP::FFTPlanComplexFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("FFTPlanComplexFloat2D_backward",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  (arg1)->backward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTPlanComplexFloat2D(void *obj) {
AudioDSP::FFTPlanComplexFloat2D *arg1 = (AudioDSP::FFTPlanComplexFloat2D *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTPlanComplexFloat2D(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTPlanComplexFloat2D);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTPlanComplexFloat2D_attributes[] = {
    { "x", _wrap_FFTPlanComplexFloat2D_x_get, _wrap_FFTPlanComplexFloat2D_x_set },
    { "y", _wrap_FFTPlanComplexFloat2D_y_get, _wrap_FFTPlanComplexFloat2D_y_set },
    { "size", _wrap_FFTPlanComplexFloat2D_size_get, _wrap_FFTPlanComplexFloat2D_size_set },
    { "M", _wrap_FFTPlanComplexFloat2D_M_get, _wrap_FFTPlanComplexFloat2D_M_set },
    { "N", _wrap_FFTPlanComplexFloat2D_N_get, _wrap_FFTPlanComplexFloat2D_N_set },
    { "pf", _wrap_FFTPlanComplexFloat2D_pf_get, _wrap_FFTPlanComplexFloat2D_pf_set },
    { "pb", _wrap_FFTPlanComplexFloat2D_pb_get, _wrap_FFTPlanComplexFloat2D_pb_set },
    {0,0,0}
};
static swig_lua_method swig_FFTPlanComplexFloat2D_methods[]= {
    { "deinit", _wrap_FFTPlanComplexFloat2D_deinit},
    { "init", _wrap_FFTPlanComplexFloat2D_init},
    { "set_complex_input", _wrap_FFTPlanComplexFloat2D_set_complex_input},
    { "get_complex_output", _wrap_FFTPlanComplexFloat2D_get_complex_output},
    { "normalize", _wrap_FFTPlanComplexFloat2D_normalize},
    { "forward", _wrap_FFTPlanComplexFloat2D_forward},
    { "backward", _wrap_FFTPlanComplexFloat2D_backward},
    {0,0}
};
static swig_lua_method swig_FFTPlanComplexFloat2D_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTPlanComplexFloat2D_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTPlanComplexFloat2D_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTPlanComplexFloat2D_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTPlanComplexFloat2D_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTPlanComplexFloat2D_Sf_SwigStatic = {
    "FFTPlanComplexFloat2D",
    swig_FFTPlanComplexFloat2D_Sf_SwigStatic_methods,
    swig_FFTPlanComplexFloat2D_Sf_SwigStatic_attributes,
    swig_FFTPlanComplexFloat2D_Sf_SwigStatic_constants,
    swig_FFTPlanComplexFloat2D_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTPlanComplexFloat2D_bases[] = {0};
static const char *swig_FFTPlanComplexFloat2D_base_names[] = {0};
static swig_lua_class _wrap_class_FFTPlanComplexFloat2D = { "FFTPlanComplexFloat2D", "FFTPlanComplexFloat2D", &SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,_proxy__wrap_new_FFTPlanComplexFloat2D, swig_delete_FFTPlanComplexFloat2D, swig_FFTPlanComplexFloat2D_methods, swig_FFTPlanComplexFloat2D_attributes, &swig_FFTPlanComplexFloat2D_Sf_SwigStatic, swig_FFTPlanComplexFloat2D_meta, swig_FFTPlanComplexFloat2D_bases, swig_FFTPlanComplexFloat2D_base_names };

static int _wrap_FFTPlanRealDouble_x_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::x",1,"AudioDSP::FFTPlanRealDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::x",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_x_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTPlanRealDouble_x_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_x_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::x",1,"AudioDSP::FFTPlanRealDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_x_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  result = (double *) ((arg1)->x);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_y_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  fftw_complex *arg2 = (fftw_complex *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::y",1,"AudioDSP::FFTPlanRealDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::y",2,"fftw_complex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_y_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fftw_complex,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTPlanRealDouble_y_set",2,SWIGTYPE_p_fftw_complex);
  }
  
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_y_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  fftw_complex *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::y",1,"AudioDSP::FFTPlanRealDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_y_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  result = (fftw_complex *) ((arg1)->y);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fftw_complex,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_size_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::size",1,"AudioDSP::FFTPlanRealDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_size_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_size_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::size",1,"AudioDSP::FFTPlanRealDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_size_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  result =  ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_pf_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  fftw_plan arg2 ;
  fftw_plan *argp2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::pf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::pf",1,"AudioDSP::FFTPlanRealDouble *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::pf",2,"fftw_plan");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_pf_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fftw_plan,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_pf_set",2,SWIGTYPE_p_fftw_plan);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_pf_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  fftw_plan result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::pf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::pf",1,"AudioDSP::FFTPlanRealDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_pf_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  result =  ((arg1)->pf);
  {
    fftw_plan * resultptr = new fftw_plan((const fftw_plan &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fftw_plan,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_pb_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  fftw_plan arg2 ;
  fftw_plan *argp2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::pb",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::pb",1,"AudioDSP::FFTPlanRealDouble *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::pb",2,"fftw_plan");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_pb_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fftw_plan,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_pb_set",2,SWIGTYPE_p_fftw_plan);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pb = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_pb_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  fftw_plan result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::pb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::pb",1,"AudioDSP::FFTPlanRealDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_pb_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  result =  ((arg1)->pb);
  {
    fftw_plan * resultptr = new fftw_plan((const fftw_plan &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fftw_plan,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanRealDouble__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::FFTPlanRealDouble",0,0)
  result = (AudioDSP::FFTPlanRealDouble *)new AudioDSP::FFTPlanRealDouble();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanRealDouble__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  AudioDSP::FFTPlanRealDouble *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::FFTPlanRealDouble",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::FFTPlanRealDouble",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (AudioDSP::FFTPlanRealDouble *)new AudioDSP::FFTPlanRealDouble(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanRealDouble(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FFTPlanRealDouble__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FFTPlanRealDouble__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FFTPlanRealDouble'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::FFTPlanRealDouble::FFTPlanRealDouble()\n"
    "    AudioDSP::FFTPlanRealDouble::FFTPlanRealDouble(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FFTPlanRealDouble_deinit(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::deinit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::deinit",1,"AudioDSP::FFTPlanRealDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_deinit",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  (arg1)->deinit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_init(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::init",1,"AudioDSP::FFTPlanRealDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::init",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_init",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_set_input(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::set_input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::set_input",1,"AudioDSP::FFTPlanRealDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::set_input",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_set_input",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_set_input",2,SWIGTYPE_p_double);
  }
  
  (arg1)->set_input((double const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_set_complex_input(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::set_complex_input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::set_complex_input",1,"AudioDSP::FFTPlanRealDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::set_complex_input",2,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_set_complex_input",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_set_complex_input",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->set_complex_input((std::complex< double > const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_get_output(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::get_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::get_output",1,"AudioDSP::FFTPlanRealDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::get_output",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_get_output",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_get_output",2,SWIGTYPE_p_double);
  }
  
  (arg1)->get_output(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_get_complex_output(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::get_complex_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::get_complex_output",1,"AudioDSP::FFTPlanRealDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::get_complex_output",2,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_get_complex_output",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_get_complex_output",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->get_complex_output(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_normalize(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::normalize",1,"AudioDSP::FFTPlanRealDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_normalize",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_forward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::forward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::forward",1,"AudioDSP::FFTPlanRealDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_forward",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  (arg1)->forward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble_backward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble::backward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble::backward",1,"AudioDSP::FFTPlanRealDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTPlanRealDouble_backward",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  (arg1)->backward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTPlanRealDouble(void *obj) {
AudioDSP::FFTPlanRealDouble *arg1 = (AudioDSP::FFTPlanRealDouble *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTPlanRealDouble(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTPlanRealDouble);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTPlanRealDouble_attributes[] = {
    { "x", _wrap_FFTPlanRealDouble_x_get, _wrap_FFTPlanRealDouble_x_set },
    { "y", _wrap_FFTPlanRealDouble_y_get, _wrap_FFTPlanRealDouble_y_set },
    { "size", _wrap_FFTPlanRealDouble_size_get, _wrap_FFTPlanRealDouble_size_set },
    { "pf", _wrap_FFTPlanRealDouble_pf_get, _wrap_FFTPlanRealDouble_pf_set },
    { "pb", _wrap_FFTPlanRealDouble_pb_get, _wrap_FFTPlanRealDouble_pb_set },
    {0,0,0}
};
static swig_lua_method swig_FFTPlanRealDouble_methods[]= {
    { "deinit", _wrap_FFTPlanRealDouble_deinit},
    { "init", _wrap_FFTPlanRealDouble_init},
    { "set_input", _wrap_FFTPlanRealDouble_set_input},
    { "set_complex_input", _wrap_FFTPlanRealDouble_set_complex_input},
    { "get_output", _wrap_FFTPlanRealDouble_get_output},
    { "get_complex_output", _wrap_FFTPlanRealDouble_get_complex_output},
    { "normalize", _wrap_FFTPlanRealDouble_normalize},
    { "forward", _wrap_FFTPlanRealDouble_forward},
    { "backward", _wrap_FFTPlanRealDouble_backward},
    {0,0}
};
static swig_lua_method swig_FFTPlanRealDouble_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTPlanRealDouble_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTPlanRealDouble_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTPlanRealDouble_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTPlanRealDouble_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTPlanRealDouble_Sf_SwigStatic = {
    "FFTPlanRealDouble",
    swig_FFTPlanRealDouble_Sf_SwigStatic_methods,
    swig_FFTPlanRealDouble_Sf_SwigStatic_attributes,
    swig_FFTPlanRealDouble_Sf_SwigStatic_constants,
    swig_FFTPlanRealDouble_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTPlanRealDouble_bases[] = {0};
static const char *swig_FFTPlanRealDouble_base_names[] = {0};
static swig_lua_class _wrap_class_FFTPlanRealDouble = { "FFTPlanRealDouble", "FFTPlanRealDouble", &SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,_proxy__wrap_new_FFTPlanRealDouble, swig_delete_FFTPlanRealDouble, swig_FFTPlanRealDouble_methods, swig_FFTPlanRealDouble_attributes, &swig_FFTPlanRealDouble_Sf_SwigStatic, swig_FFTPlanRealDouble_meta, swig_FFTPlanRealDouble_bases, swig_FFTPlanRealDouble_base_names };

static int _wrap_FFTPlanRealDouble2D_x_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::x",1,"AudioDSP::FFTPlanRealDouble2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::x",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_x_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_x_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_x_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::x",1,"AudioDSP::FFTPlanRealDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_x_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  result = (double *) ((arg1)->x);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_y_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  fftw_complex *arg2 = (fftw_complex *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::y",1,"AudioDSP::FFTPlanRealDouble2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::y",2,"fftw_complex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_y_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fftw_complex,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_y_set",2,SWIGTYPE_p_fftw_complex);
  }
  
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_y_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  fftw_complex *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::y",1,"AudioDSP::FFTPlanRealDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_y_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  result = (fftw_complex *) ((arg1)->y);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fftw_complex,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_size_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::size",1,"AudioDSP::FFTPlanRealDouble2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_size_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_size_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::size",1,"AudioDSP::FFTPlanRealDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_size_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  result =  ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_M_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::M",1,"AudioDSP::FFTPlanRealDouble2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_M_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_M_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::M",1,"AudioDSP::FFTPlanRealDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_M_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_N_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::N",1,"AudioDSP::FFTPlanRealDouble2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_N_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_N_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::N",1,"AudioDSP::FFTPlanRealDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_N_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_pf_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  fftw_plan arg2 ;
  fftw_plan *argp2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::pf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::pf",1,"AudioDSP::FFTPlanRealDouble2D *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::pf",2,"fftw_plan");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_pf_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fftw_plan,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_pf_set",2,SWIGTYPE_p_fftw_plan);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_pf_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  fftw_plan result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::pf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::pf",1,"AudioDSP::FFTPlanRealDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_pf_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  result =  ((arg1)->pf);
  {
    fftw_plan * resultptr = new fftw_plan((const fftw_plan &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fftw_plan,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_pb_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  fftw_plan arg2 ;
  fftw_plan *argp2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::pb",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::pb",1,"AudioDSP::FFTPlanRealDouble2D *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::pb",2,"fftw_plan");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_pb_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fftw_plan,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_pb_set",2,SWIGTYPE_p_fftw_plan);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pb = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_pb_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  fftw_plan result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::pb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::pb",1,"AudioDSP::FFTPlanRealDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_pb_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  result =  ((arg1)->pb);
  {
    fftw_plan * resultptr = new fftw_plan((const fftw_plan &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fftw_plan,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanRealDouble2D__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::FFTPlanRealDouble2D",0,0)
  result = (AudioDSP::FFTPlanRealDouble2D *)new AudioDSP::FFTPlanRealDouble2D();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanRealDouble2D__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  AudioDSP::FFTPlanRealDouble2D *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::FFTPlanRealDouble2D",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::FFTPlanRealDouble2D",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::FFTPlanRealDouble2D",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (AudioDSP::FFTPlanRealDouble2D *)new AudioDSP::FFTPlanRealDouble2D(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanRealDouble2D(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FFTPlanRealDouble2D__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FFTPlanRealDouble2D__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FFTPlanRealDouble2D'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::FFTPlanRealDouble2D::FFTPlanRealDouble2D()\n"
    "    AudioDSP::FFTPlanRealDouble2D::FFTPlanRealDouble2D(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FFTPlanRealDouble2D_deinit(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::deinit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::deinit",1,"AudioDSP::FFTPlanRealDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_deinit",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  (arg1)->deinit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_init(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::init",1,"AudioDSP::FFTPlanRealDouble2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::init",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::init",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_init",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->init(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_set_input(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::set_input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::set_input",1,"AudioDSP::FFTPlanRealDouble2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::set_input",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_set_input",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_set_input",2,SWIGTYPE_p_double);
  }
  
  (arg1)->set_input((double const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_set_complex_input(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::set_complex_input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::set_complex_input",1,"AudioDSP::FFTPlanRealDouble2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::set_complex_input",2,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_set_complex_input",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_set_complex_input",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->set_complex_input((std::complex< double > const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_get_output(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::get_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::get_output",1,"AudioDSP::FFTPlanRealDouble2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::get_output",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_get_output",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_get_output",2,SWIGTYPE_p_double);
  }
  
  (arg1)->get_output(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_get_complex_output(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::get_complex_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::get_complex_output",1,"AudioDSP::FFTPlanRealDouble2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::get_complex_output",2,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_get_complex_output",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_get_complex_output",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->get_complex_output(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_normalize(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::normalize",1,"AudioDSP::FFTPlanRealDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_normalize",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_forward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::forward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::forward",1,"AudioDSP::FFTPlanRealDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_forward",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  (arg1)->forward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealDouble2D_backward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealDouble2D::backward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealDouble2D::backward",1,"AudioDSP::FFTPlanRealDouble2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("FFTPlanRealDouble2D_backward",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  (arg1)->backward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTPlanRealDouble2D(void *obj) {
AudioDSP::FFTPlanRealDouble2D *arg1 = (AudioDSP::FFTPlanRealDouble2D *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTPlanRealDouble2D(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTPlanRealDouble2D);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTPlanRealDouble2D_attributes[] = {
    { "x", _wrap_FFTPlanRealDouble2D_x_get, _wrap_FFTPlanRealDouble2D_x_set },
    { "y", _wrap_FFTPlanRealDouble2D_y_get, _wrap_FFTPlanRealDouble2D_y_set },
    { "size", _wrap_FFTPlanRealDouble2D_size_get, _wrap_FFTPlanRealDouble2D_size_set },
    { "M", _wrap_FFTPlanRealDouble2D_M_get, _wrap_FFTPlanRealDouble2D_M_set },
    { "N", _wrap_FFTPlanRealDouble2D_N_get, _wrap_FFTPlanRealDouble2D_N_set },
    { "pf", _wrap_FFTPlanRealDouble2D_pf_get, _wrap_FFTPlanRealDouble2D_pf_set },
    { "pb", _wrap_FFTPlanRealDouble2D_pb_get, _wrap_FFTPlanRealDouble2D_pb_set },
    {0,0,0}
};
static swig_lua_method swig_FFTPlanRealDouble2D_methods[]= {
    { "deinit", _wrap_FFTPlanRealDouble2D_deinit},
    { "init", _wrap_FFTPlanRealDouble2D_init},
    { "set_input", _wrap_FFTPlanRealDouble2D_set_input},
    { "set_complex_input", _wrap_FFTPlanRealDouble2D_set_complex_input},
    { "get_output", _wrap_FFTPlanRealDouble2D_get_output},
    { "get_complex_output", _wrap_FFTPlanRealDouble2D_get_complex_output},
    { "normalize", _wrap_FFTPlanRealDouble2D_normalize},
    { "forward", _wrap_FFTPlanRealDouble2D_forward},
    { "backward", _wrap_FFTPlanRealDouble2D_backward},
    {0,0}
};
static swig_lua_method swig_FFTPlanRealDouble2D_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTPlanRealDouble2D_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTPlanRealDouble2D_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTPlanRealDouble2D_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTPlanRealDouble2D_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTPlanRealDouble2D_Sf_SwigStatic = {
    "FFTPlanRealDouble2D",
    swig_FFTPlanRealDouble2D_Sf_SwigStatic_methods,
    swig_FFTPlanRealDouble2D_Sf_SwigStatic_attributes,
    swig_FFTPlanRealDouble2D_Sf_SwigStatic_constants,
    swig_FFTPlanRealDouble2D_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTPlanRealDouble2D_bases[] = {0};
static const char *swig_FFTPlanRealDouble2D_base_names[] = {0};
static swig_lua_class _wrap_class_FFTPlanRealDouble2D = { "FFTPlanRealDouble2D", "FFTPlanRealDouble2D", &SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,_proxy__wrap_new_FFTPlanRealDouble2D, swig_delete_FFTPlanRealDouble2D, swig_FFTPlanRealDouble2D_methods, swig_FFTPlanRealDouble2D_attributes, &swig_FFTPlanRealDouble2D_Sf_SwigStatic, swig_FFTPlanRealDouble2D_meta, swig_FFTPlanRealDouble2D_bases, swig_FFTPlanRealDouble2D_base_names };

static int _wrap_FFTPlanRealFloat_x_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::x",1,"AudioDSP::FFTPlanRealFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::x",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_x_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTPlanRealFloat_x_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_x_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::x",1,"AudioDSP::FFTPlanRealFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_x_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  result = (float *) ((arg1)->x);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_y_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  fftwf_complex *arg2 = (fftwf_complex *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::y",1,"AudioDSP::FFTPlanRealFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::y",2,"fftwf_complex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_y_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fftwf_complex,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTPlanRealFloat_y_set",2,SWIGTYPE_p_fftwf_complex);
  }
  
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_y_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  fftwf_complex *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::y",1,"AudioDSP::FFTPlanRealFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_y_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  result = (fftwf_complex *) ((arg1)->y);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fftwf_complex,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_size_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::size",1,"AudioDSP::FFTPlanRealFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_size_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_size_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::size",1,"AudioDSP::FFTPlanRealFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_size_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  result =  ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_pf_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  fftwf_plan arg2 ;
  fftwf_plan *argp2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::pf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::pf",1,"AudioDSP::FFTPlanRealFloat *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::pf",2,"fftwf_plan");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_pf_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fftwf_plan,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_pf_set",2,SWIGTYPE_p_fftwf_plan);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_pf_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  fftwf_plan result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::pf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::pf",1,"AudioDSP::FFTPlanRealFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_pf_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  result =  ((arg1)->pf);
  {
    fftwf_plan * resultptr = new fftwf_plan((const fftwf_plan &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fftwf_plan,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_pb_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  fftwf_plan arg2 ;
  fftwf_plan *argp2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::pb",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::pb",1,"AudioDSP::FFTPlanRealFloat *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::pb",2,"fftwf_plan");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_pb_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fftwf_plan,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_pb_set",2,SWIGTYPE_p_fftwf_plan);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pb = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_pb_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  fftwf_plan result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::pb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::pb",1,"AudioDSP::FFTPlanRealFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_pb_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  result =  ((arg1)->pb);
  {
    fftwf_plan * resultptr = new fftwf_plan((const fftwf_plan &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fftwf_plan,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanRealFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::FFTPlanRealFloat",0,0)
  result = (AudioDSP::FFTPlanRealFloat *)new AudioDSP::FFTPlanRealFloat();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanRealFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  AudioDSP::FFTPlanRealFloat *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::FFTPlanRealFloat",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::FFTPlanRealFloat",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (AudioDSP::FFTPlanRealFloat *)new AudioDSP::FFTPlanRealFloat(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanRealFloat(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FFTPlanRealFloat__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FFTPlanRealFloat__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FFTPlanRealFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::FFTPlanRealFloat::FFTPlanRealFloat()\n"
    "    AudioDSP::FFTPlanRealFloat::FFTPlanRealFloat(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FFTPlanRealFloat_deinit(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::deinit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::deinit",1,"AudioDSP::FFTPlanRealFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_deinit",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  (arg1)->deinit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_init(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::init",1,"AudioDSP::FFTPlanRealFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::init",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_init",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_set_input(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::set_input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::set_input",1,"AudioDSP::FFTPlanRealFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::set_input",2,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_set_input",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_set_input",2,SWIGTYPE_p_float);
  }
  
  (arg1)->set_input((float const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_set_complex_input(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::set_complex_input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::set_complex_input",1,"AudioDSP::FFTPlanRealFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::set_complex_input",2,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_set_complex_input",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_set_complex_input",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->set_complex_input((std::complex< float > const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_get_output(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::get_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::get_output",1,"AudioDSP::FFTPlanRealFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::get_output",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_get_output",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_get_output",2,SWIGTYPE_p_float);
  }
  
  (arg1)->get_output(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_get_complex_output(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::get_complex_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::get_complex_output",1,"AudioDSP::FFTPlanRealFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::get_complex_output",2,"std::complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_get_complex_output",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_get_complex_output",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->get_complex_output(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_normalize(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::normalize",1,"AudioDSP::FFTPlanRealFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_normalize",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_forward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::forward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::forward",1,"AudioDSP::FFTPlanRealFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_forward",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  (arg1)->forward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat_backward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat::backward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat::backward",1,"AudioDSP::FFTPlanRealFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTPlanRealFloat_backward",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  (arg1)->backward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTPlanRealFloat(void *obj) {
AudioDSP::FFTPlanRealFloat *arg1 = (AudioDSP::FFTPlanRealFloat *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTPlanRealFloat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTPlanRealFloat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTPlanRealFloat_attributes[] = {
    { "x", _wrap_FFTPlanRealFloat_x_get, _wrap_FFTPlanRealFloat_x_set },
    { "y", _wrap_FFTPlanRealFloat_y_get, _wrap_FFTPlanRealFloat_y_set },
    { "size", _wrap_FFTPlanRealFloat_size_get, _wrap_FFTPlanRealFloat_size_set },
    { "pf", _wrap_FFTPlanRealFloat_pf_get, _wrap_FFTPlanRealFloat_pf_set },
    { "pb", _wrap_FFTPlanRealFloat_pb_get, _wrap_FFTPlanRealFloat_pb_set },
    {0,0,0}
};
static swig_lua_method swig_FFTPlanRealFloat_methods[]= {
    { "deinit", _wrap_FFTPlanRealFloat_deinit},
    { "init", _wrap_FFTPlanRealFloat_init},
    { "set_input", _wrap_FFTPlanRealFloat_set_input},
    { "set_complex_input", _wrap_FFTPlanRealFloat_set_complex_input},
    { "get_output", _wrap_FFTPlanRealFloat_get_output},
    { "get_complex_output", _wrap_FFTPlanRealFloat_get_complex_output},
    { "normalize", _wrap_FFTPlanRealFloat_normalize},
    { "forward", _wrap_FFTPlanRealFloat_forward},
    { "backward", _wrap_FFTPlanRealFloat_backward},
    {0,0}
};
static swig_lua_method swig_FFTPlanRealFloat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTPlanRealFloat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTPlanRealFloat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTPlanRealFloat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTPlanRealFloat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTPlanRealFloat_Sf_SwigStatic = {
    "FFTPlanRealFloat",
    swig_FFTPlanRealFloat_Sf_SwigStatic_methods,
    swig_FFTPlanRealFloat_Sf_SwigStatic_attributes,
    swig_FFTPlanRealFloat_Sf_SwigStatic_constants,
    swig_FFTPlanRealFloat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTPlanRealFloat_bases[] = {0};
static const char *swig_FFTPlanRealFloat_base_names[] = {0};
static swig_lua_class _wrap_class_FFTPlanRealFloat = { "FFTPlanRealFloat", "FFTPlanRealFloat", &SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,_proxy__wrap_new_FFTPlanRealFloat, swig_delete_FFTPlanRealFloat, swig_FFTPlanRealFloat_methods, swig_FFTPlanRealFloat_attributes, &swig_FFTPlanRealFloat_Sf_SwigStatic, swig_FFTPlanRealFloat_meta, swig_FFTPlanRealFloat_bases, swig_FFTPlanRealFloat_base_names };

static int _wrap_FFTPlanRealFloat2D_x_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::x",1,"AudioDSP::FFTPlanRealFloat2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::x",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_x_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_x_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_x_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::x",1,"AudioDSP::FFTPlanRealFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_x_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  result = (float *) ((arg1)->x);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_y_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  fftwf_complex *arg2 = (fftwf_complex *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::y",1,"AudioDSP::FFTPlanRealFloat2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::y",2,"fftwf_complex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_y_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_fftwf_complex,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_y_set",2,SWIGTYPE_p_fftwf_complex);
  }
  
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_y_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  fftwf_complex *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::y",1,"AudioDSP::FFTPlanRealFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_y_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  result = (fftwf_complex *) ((arg1)->y);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_fftwf_complex,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_size_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::size",1,"AudioDSP::FFTPlanRealFloat2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_size_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_size_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::size",1,"AudioDSP::FFTPlanRealFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_size_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  result =  ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_M_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::M",1,"AudioDSP::FFTPlanRealFloat2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_M_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_M_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::M",1,"AudioDSP::FFTPlanRealFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_M_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_N_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::N",1,"AudioDSP::FFTPlanRealFloat2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_N_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_N_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::N",1,"AudioDSP::FFTPlanRealFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_N_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_pf_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  fftwf_plan arg2 ;
  fftwf_plan *argp2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::pf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::pf",1,"AudioDSP::FFTPlanRealFloat2D *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::pf",2,"fftwf_plan");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_pf_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fftwf_plan,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_pf_set",2,SWIGTYPE_p_fftwf_plan);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_pf_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  fftwf_plan result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::pf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::pf",1,"AudioDSP::FFTPlanRealFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_pf_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  result =  ((arg1)->pf);
  {
    fftwf_plan * resultptr = new fftwf_plan((const fftwf_plan &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fftwf_plan,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_pb_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  fftwf_plan arg2 ;
  fftwf_plan *argp2 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::pb",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::pb",1,"AudioDSP::FFTPlanRealFloat2D *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::pb",2,"fftwf_plan");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_pb_set",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_fftwf_plan,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_pb_set",2,SWIGTYPE_p_fftwf_plan);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pb = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_pb_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  fftwf_plan result;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::pb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::pb",1,"AudioDSP::FFTPlanRealFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_pb_get",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  result =  ((arg1)->pb);
  {
    fftwf_plan * resultptr = new fftwf_plan((const fftwf_plan &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_fftwf_plan,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanRealFloat2D__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::FFTPlanRealFloat2D",0,0)
  result = (AudioDSP::FFTPlanRealFloat2D *)new AudioDSP::FFTPlanRealFloat2D();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanRealFloat2D__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  AudioDSP::FFTPlanRealFloat2D *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::FFTPlanRealFloat2D",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::FFTPlanRealFloat2D",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::FFTPlanRealFloat2D",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (AudioDSP::FFTPlanRealFloat2D *)new AudioDSP::FFTPlanRealFloat2D(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTPlanRealFloat2D(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FFTPlanRealFloat2D__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FFTPlanRealFloat2D__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FFTPlanRealFloat2D'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::FFTPlanRealFloat2D::FFTPlanRealFloat2D()\n"
    "    AudioDSP::FFTPlanRealFloat2D::FFTPlanRealFloat2D(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FFTPlanRealFloat2D_deinit(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::deinit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::deinit",1,"AudioDSP::FFTPlanRealFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_deinit",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  (arg1)->deinit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_init(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::init",1,"AudioDSP::FFTPlanRealFloat2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::init",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::init",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_init",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->init(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_set_input(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::set_input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::set_input",1,"AudioDSP::FFTPlanRealFloat2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::set_input",2,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_set_input",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_set_input",2,SWIGTYPE_p_float);
  }
  
  (arg1)->set_input((float const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_set_complex_input(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::set_complex_input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::set_complex_input",1,"AudioDSP::FFTPlanRealFloat2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::set_complex_input",2,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_set_complex_input",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_set_complex_input",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->set_complex_input((std::complex< float > const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_get_output(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::get_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::get_output",1,"AudioDSP::FFTPlanRealFloat2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::get_output",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_get_output",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_get_output",2,SWIGTYPE_p_float);
  }
  
  (arg1)->get_output(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_get_complex_output(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::get_complex_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::get_complex_output",1,"AudioDSP::FFTPlanRealFloat2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::get_complex_output",2,"std::complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_get_complex_output",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_get_complex_output",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->get_complex_output(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_normalize(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::normalize",1,"AudioDSP::FFTPlanRealFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_normalize",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_forward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::forward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::forward",1,"AudioDSP::FFTPlanRealFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_forward",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  (arg1)->forward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTPlanRealFloat2D_backward(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTPlanRealFloat2D::backward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTPlanRealFloat2D::backward",1,"AudioDSP::FFTPlanRealFloat2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("FFTPlanRealFloat2D_backward",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  (arg1)->backward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTPlanRealFloat2D(void *obj) {
AudioDSP::FFTPlanRealFloat2D *arg1 = (AudioDSP::FFTPlanRealFloat2D *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTPlanRealFloat2D(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTPlanRealFloat2D);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTPlanRealFloat2D_attributes[] = {
    { "x", _wrap_FFTPlanRealFloat2D_x_get, _wrap_FFTPlanRealFloat2D_x_set },
    { "y", _wrap_FFTPlanRealFloat2D_y_get, _wrap_FFTPlanRealFloat2D_y_set },
    { "size", _wrap_FFTPlanRealFloat2D_size_get, _wrap_FFTPlanRealFloat2D_size_set },
    { "M", _wrap_FFTPlanRealFloat2D_M_get, _wrap_FFTPlanRealFloat2D_M_set },
    { "N", _wrap_FFTPlanRealFloat2D_N_get, _wrap_FFTPlanRealFloat2D_N_set },
    { "pf", _wrap_FFTPlanRealFloat2D_pf_get, _wrap_FFTPlanRealFloat2D_pf_set },
    { "pb", _wrap_FFTPlanRealFloat2D_pb_get, _wrap_FFTPlanRealFloat2D_pb_set },
    {0,0,0}
};
static swig_lua_method swig_FFTPlanRealFloat2D_methods[]= {
    { "deinit", _wrap_FFTPlanRealFloat2D_deinit},
    { "init", _wrap_FFTPlanRealFloat2D_init},
    { "set_input", _wrap_FFTPlanRealFloat2D_set_input},
    { "set_complex_input", _wrap_FFTPlanRealFloat2D_set_complex_input},
    { "get_output", _wrap_FFTPlanRealFloat2D_get_output},
    { "get_complex_output", _wrap_FFTPlanRealFloat2D_get_complex_output},
    { "normalize", _wrap_FFTPlanRealFloat2D_normalize},
    { "forward", _wrap_FFTPlanRealFloat2D_forward},
    { "backward", _wrap_FFTPlanRealFloat2D_backward},
    {0,0}
};
static swig_lua_method swig_FFTPlanRealFloat2D_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTPlanRealFloat2D_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTPlanRealFloat2D_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTPlanRealFloat2D_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTPlanRealFloat2D_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTPlanRealFloat2D_Sf_SwigStatic = {
    "FFTPlanRealFloat2D",
    swig_FFTPlanRealFloat2D_Sf_SwigStatic_methods,
    swig_FFTPlanRealFloat2D_Sf_SwigStatic_attributes,
    swig_FFTPlanRealFloat2D_Sf_SwigStatic_constants,
    swig_FFTPlanRealFloat2D_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTPlanRealFloat2D_bases[] = {0};
static const char *swig_FFTPlanRealFloat2D_base_names[] = {0};
static swig_lua_class _wrap_class_FFTPlanRealFloat2D = { "FFTPlanRealFloat2D", "FFTPlanRealFloat2D", &SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,_proxy__wrap_new_FFTPlanRealFloat2D, swig_delete_FFTPlanRealFloat2D, swig_FFTPlanRealFloat2D_methods, swig_FFTPlanRealFloat2D_attributes, &swig_FFTPlanRealFloat2D_Sf_SwigStatic, swig_FFTPlanRealFloat2D_meta, swig_FFTPlanRealFloat2D_bases, swig_FFTPlanRealFloat2D_base_names };

static int _wrap_fft__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("AudioDSP::fft",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft",1,"AudioDSP::FFTPlanComplexDouble &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft",2,"std::complex< double > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft",3,"std::complex< double > *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AudioDSP::fft",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("fft",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("fft",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("fft",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  AudioDSP::fft(*arg1,(std::complex< double > const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::fft",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft",1,"AudioDSP::FFTPlanComplexDouble &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft",2,"std::complex< double > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft",3,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("fft",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("fft",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("fft",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  AudioDSP::fft(*arg1,(std::complex< double > const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("AudioDSP::ifft",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft",1,"AudioDSP::FFTPlanComplexDouble &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft",2,"std::complex< double > *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft",3,"std::complex< double > *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AudioDSP::ifft",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("ifft",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ifft",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ifft",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  AudioDSP::ifft(*arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble *arg1 = 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::ifft",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft",1,"AudioDSP::FFTPlanComplexDouble &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft",2,"std::complex< double > *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft",3,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble,0))){
    SWIG_fail_ptr("ifft",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ifft",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ifft",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  AudioDSP::ifft(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("AudioDSP::fft2",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft2",1,"AudioDSP::FFTPlanComplexDouble2D &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft2",2,"std::complex< double > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft2",3,"std::complex< double > *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AudioDSP::fft2",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("fft2",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("fft2",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("fft2",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  AudioDSP::fft2(*arg1,(std::complex< double > const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::fft2",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft2",1,"AudioDSP::FFTPlanComplexDouble2D &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft2",2,"std::complex< double > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft2",3,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("fft2",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("fft2",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("fft2",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  AudioDSP::fft2(*arg1,(std::complex< double > const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("AudioDSP::ifft2",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft2",1,"AudioDSP::FFTPlanComplexDouble2D &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft2",2,"std::complex< double > *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft2",3,"std::complex< double > *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AudioDSP::ifft2",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("ifft2",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ifft2",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ifft2",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  AudioDSP::ifft2(*arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexDouble2D *arg1 = 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::ifft2",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft2",1,"AudioDSP::FFTPlanComplexDouble2D &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft2",2,"std::complex< double > *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft2",3,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D,0))){
    SWIG_fail_ptr("ifft2",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ifft2",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ifft2",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  AudioDSP::ifft2(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  std::complex< float > *arg3 = (std::complex< float > *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("AudioDSP::fft",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft",1,"AudioDSP::FFTPlanComplexFloat &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft",2,"std::complex< float > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft",3,"std::complex< float > *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AudioDSP::fft",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("fft",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fft",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fft",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  AudioDSP::fft(*arg1,(std::complex< float > const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  std::complex< float > *arg3 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::fft",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft",1,"AudioDSP::FFTPlanComplexFloat &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft",2,"std::complex< float > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft",3,"std::complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("fft",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fft",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fft",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  AudioDSP::fft(*arg1,(std::complex< float > const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  std::complex< float > *arg3 = (std::complex< float > *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("AudioDSP::ifft",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft",1,"AudioDSP::FFTPlanComplexFloat &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft",2,"std::complex< float > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft",3,"std::complex< float > *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AudioDSP::ifft",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("ifft",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ifft",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ifft",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  AudioDSP::ifft(*arg1,(std::complex< float > const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat *arg1 = 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  std::complex< float > *arg3 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::ifft",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft",1,"AudioDSP::FFTPlanComplexFloat &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft",2,"std::complex< float > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft",3,"std::complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat,0))){
    SWIG_fail_ptr("ifft",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ifft",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ifft",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  AudioDSP::ifft(*arg1,(std::complex< float > const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  std::complex< float > *arg3 = (std::complex< float > *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("AudioDSP::fft2",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft2",1,"AudioDSP::FFTPlanComplexFloat2D &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft2",2,"std::complex< float > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft2",3,"std::complex< float > *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AudioDSP::fft2",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("fft2",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fft2",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fft2",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  AudioDSP::fft2(*arg1,(std::complex< float > const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  std::complex< float > *arg3 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::fft2",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft2",1,"AudioDSP::FFTPlanComplexFloat2D &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft2",2,"std::complex< float > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft2",3,"std::complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("fft2",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fft2",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fft2",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  AudioDSP::fft2(*arg1,(std::complex< float > const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  std::complex< float > *arg3 = (std::complex< float > *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("AudioDSP::ifft2",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft2",1,"AudioDSP::FFTPlanComplexFloat2D &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft2",2,"std::complex< float > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft2",3,"std::complex< float > *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AudioDSP::ifft2",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("ifft2",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ifft2",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ifft2",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  AudioDSP::ifft2(*arg1,(std::complex< float > const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanComplexFloat2D *arg1 = 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  std::complex< float > *arg3 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::ifft2",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft2",1,"AudioDSP::FFTPlanComplexFloat2D &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft2",2,"std::complex< float > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft2",3,"std::complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D,0))){
    SWIG_fail_ptr("ifft2",1,SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ifft2",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ifft2",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  AudioDSP::ifft2(*arg1,(std::complex< float > const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("AudioDSP::fft",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft",1,"AudioDSP::FFTPlanRealDouble &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft",3,"std::complex< double > *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AudioDSP::fft",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("fft",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("fft",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("fft",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  AudioDSP::fft(*arg1,(double const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::fft",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft",1,"AudioDSP::FFTPlanRealDouble &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft",3,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("fft",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("fft",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("fft",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  AudioDSP::fft(*arg1,(double const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  double *arg3 = (double *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("AudioDSP::ifft",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft",1,"AudioDSP::FFTPlanRealDouble &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft",2,"std::complex< double > *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft",3,"double *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AudioDSP::ifft",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("ifft",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ifft",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ifft",3,SWIGTYPE_p_double);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  AudioDSP::ifft(*arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble *arg1 = 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("AudioDSP::ifft",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft",1,"AudioDSP::FFTPlanRealDouble &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft",2,"std::complex< double > *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("ifft",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ifft",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ifft",3,SWIGTYPE_p_double);
  }
  
  AudioDSP::ifft(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft2__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("AudioDSP::fft2",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft2",1,"AudioDSP::FFTPlanRealDouble2D &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft2",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft2",3,"std::complex< double > *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AudioDSP::fft2",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("fft2",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("fft2",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("fft2",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  AudioDSP::fft2(*arg1,(double const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft2__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::fft2",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft2",1,"AudioDSP::FFTPlanRealDouble2D &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft2",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft2",3,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("fft2",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("fft2",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("fft2",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  AudioDSP::fft2(*arg1,(double const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft2__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  double *arg3 = (double *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("AudioDSP::ifft2",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft2",1,"AudioDSP::FFTPlanRealDouble2D &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft2",2,"std::complex< double > *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft2",3,"double *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AudioDSP::ifft2",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("ifft2",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ifft2",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ifft2",3,SWIGTYPE_p_double);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  AudioDSP::ifft2(*arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft2__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealDouble2D *arg1 = 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("AudioDSP::ifft2",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft2",1,"AudioDSP::FFTPlanRealDouble2D &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft2",2,"std::complex< double > *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft2",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D,0))){
    SWIG_fail_ptr("ifft2",1,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ifft2",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ifft2",3,SWIGTYPE_p_double);
  }
  
  AudioDSP::ifft2(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  std::complex< float > *arg3 = (std::complex< float > *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("AudioDSP::fft",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft",1,"AudioDSP::FFTPlanRealFloat &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft",3,"std::complex< float > *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AudioDSP::fft",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("fft",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("fft",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fft",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  AudioDSP::fft(*arg1,(float const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  std::complex< float > *arg3 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::fft",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft",1,"AudioDSP::FFTPlanRealFloat &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft",3,"std::complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("fft",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("fft",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fft",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  AudioDSP::fft(*arg1,(float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlan, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fft__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlan, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fft__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fft__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fft__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanRealDouble, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fft__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanRealFloat, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fft__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanRealDouble, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_fft__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_fft__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanRealFloat, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_fft__SWIG_8(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_fft__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fft'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::fft(AudioDSP::FFTPlan &,std::complex< DspFloatType > const *,std::complex< DspFloatType > *)\n"
    "    AudioDSP::fft(AudioDSP::FFTPlan &,DspFloatType const *,std::complex< DspFloatType > *)\n"
    "    AudioDSP::fft(AudioDSP::FFTPlanComplexDouble &,std::complex< double > const *,std::complex< double > *,bool)\n"
    "    AudioDSP::fft(AudioDSP::FFTPlanComplexDouble &,std::complex< double > const *,std::complex< double > *)\n"
    "    AudioDSP::fft(AudioDSP::FFTPlanComplexFloat &,std::complex< float > const *,std::complex< float > *,bool)\n"
    "    AudioDSP::fft(AudioDSP::FFTPlanComplexFloat &,std::complex< float > const *,std::complex< float > *)\n"
    "    AudioDSP::fft(AudioDSP::FFTPlanRealDouble &,double const *,std::complex< double > *,bool)\n"
    "    AudioDSP::fft(AudioDSP::FFTPlanRealDouble &,double const *,std::complex< double > *)\n"
    "    AudioDSP::fft(AudioDSP::FFTPlanRealFloat &,float const *,std::complex< float > *,bool)\n"
    "    AudioDSP::fft(AudioDSP::FFTPlanRealFloat &,float const *,std::complex< float > *)\n");
  lua_error(L);return 0;
}


static int _wrap_ifft__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  float *arg3 = (float *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("AudioDSP::ifft",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft",1,"AudioDSP::FFTPlanRealFloat &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft",2,"std::complex< float > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft",3,"float *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AudioDSP::ifft",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("ifft",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ifft",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ifft",3,SWIGTYPE_p_float);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  AudioDSP::ifft(*arg1,(std::complex< float > const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat *arg1 = 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("AudioDSP::ifft",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft",1,"AudioDSP::FFTPlanRealFloat &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft",2,"std::complex< float > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("ifft",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ifft",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ifft",3,SWIGTYPE_p_float);
  }
  
  AudioDSP::ifft(*arg1,(std::complex< float > const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlan, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ifft__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlan, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ifft__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ifft__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ifft__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanRealDouble, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ifft__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanRealFloat, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ifft__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanRealDouble, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ifft__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ifft__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanRealFloat, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ifft__SWIG_8(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ifft__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ifft'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::ifft(AudioDSP::FFTPlan &,std::complex< DspFloatType > const *,std::complex< DspFloatType > *)\n"
    "    AudioDSP::ifft(AudioDSP::FFTPlan &,std::complex< DspFloatType > *,DspFloatType *)\n"
    "    AudioDSP::ifft(AudioDSP::FFTPlanComplexDouble &,std::complex< double > *,std::complex< double > *,bool)\n"
    "    AudioDSP::ifft(AudioDSP::FFTPlanComplexDouble &,std::complex< double > *,std::complex< double > *)\n"
    "    AudioDSP::ifft(AudioDSP::FFTPlanComplexFloat &,std::complex< float > const *,std::complex< float > *,bool)\n"
    "    AudioDSP::ifft(AudioDSP::FFTPlanComplexFloat &,std::complex< float > const *,std::complex< float > *)\n"
    "    AudioDSP::ifft(AudioDSP::FFTPlanRealDouble &,std::complex< double > *,double *,bool)\n"
    "    AudioDSP::ifft(AudioDSP::FFTPlanRealDouble &,std::complex< double > *,double *)\n"
    "    AudioDSP::ifft(AudioDSP::FFTPlanRealFloat &,std::complex< float > const *,float *,bool)\n"
    "    AudioDSP::ifft(AudioDSP::FFTPlanRealFloat &,std::complex< float > const *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_fft2__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  std::complex< float > *arg3 = (std::complex< float > *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("AudioDSP::fft2",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft2",1,"AudioDSP::FFTPlanRealFloat2D &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft2",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft2",3,"std::complex< float > *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AudioDSP::fft2",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("fft2",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("fft2",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fft2",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  AudioDSP::fft2(*arg1,(float const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft2__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  std::complex< float > *arg3 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::fft2",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fft2",1,"AudioDSP::FFTPlanRealFloat2D &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::fft2",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::fft2",3,"std::complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("fft2",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("fft2",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fft2",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  AudioDSP::fft2(*arg1,(float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fft2(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fft2__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fft2__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fft2__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fft2__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_fft2__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_fft2__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_fft2__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_fft2__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fft2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::fft2(AudioDSP::FFTPlanComplexDouble2D &,std::complex< double > const *,std::complex< double > *,bool)\n"
    "    AudioDSP::fft2(AudioDSP::FFTPlanComplexDouble2D &,std::complex< double > const *,std::complex< double > *)\n"
    "    AudioDSP::fft2(AudioDSP::FFTPlanComplexFloat2D &,std::complex< float > const *,std::complex< float > *,bool)\n"
    "    AudioDSP::fft2(AudioDSP::FFTPlanComplexFloat2D &,std::complex< float > const *,std::complex< float > *)\n"
    "    AudioDSP::fft2(AudioDSP::FFTPlanRealDouble2D &,double const *,std::complex< double > *,bool)\n"
    "    AudioDSP::fft2(AudioDSP::FFTPlanRealDouble2D &,double const *,std::complex< double > *)\n"
    "    AudioDSP::fft2(AudioDSP::FFTPlanRealFloat2D &,float const *,std::complex< float > *,bool)\n"
    "    AudioDSP::fft2(AudioDSP::FFTPlanRealFloat2D &,float const *,std::complex< float > *)\n");
  lua_error(L);return 0;
}


static int _wrap_ifft2__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  float *arg3 = (float *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("AudioDSP::ifft2",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft2",1,"AudioDSP::FFTPlanRealFloat2D &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft2",2,"std::complex< float > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft2",3,"float *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("AudioDSP::ifft2",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("ifft2",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ifft2",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ifft2",3,SWIGTYPE_p_float);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  AudioDSP::ifft2(*arg1,(std::complex< float > const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft2__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTPlanRealFloat2D *arg1 = 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("AudioDSP::ifft2",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ifft2",1,"AudioDSP::FFTPlanRealFloat2D &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::ifft2",2,"std::complex< float > const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::ifft2",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D,0))){
    SWIG_fail_ptr("ifft2",1,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ifft2",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ifft2",3,SWIGTYPE_p_float);
  }
  
  AudioDSP::ifft2(*arg1,(std::complex< float > const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ifft2(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ifft2__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ifft2__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ifft2__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ifft2__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanRealDouble2D, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ifft2__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanComplexFloat2D, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ifft2__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanRealFloat2D, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ifft2__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__FFTPlanComplexDouble2D, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ifft2__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ifft2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::ifft2(AudioDSP::FFTPlanComplexDouble2D &,std::complex< double > *,std::complex< double > *,bool)\n"
    "    AudioDSP::ifft2(AudioDSP::FFTPlanComplexDouble2D &,std::complex< double > *,std::complex< double > *)\n"
    "    AudioDSP::ifft2(AudioDSP::FFTPlanComplexFloat2D &,std::complex< float > const *,std::complex< float > *,bool)\n"
    "    AudioDSP::ifft2(AudioDSP::FFTPlanComplexFloat2D &,std::complex< float > const *,std::complex< float > *)\n"
    "    AudioDSP::ifft2(AudioDSP::FFTPlanRealDouble2D &,std::complex< double > *,double *,bool)\n"
    "    AudioDSP::ifft2(AudioDSP::FFTPlanRealDouble2D &,std::complex< double > *,double *)\n"
    "    AudioDSP::ifft2(AudioDSP::FFTPlanRealFloat2D &,std::complex< float > const *,float *,bool)\n"
    "    AudioDSP::ifft2(AudioDSP::FFTPlanRealFloat2D &,std::complex< float > const *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_factorize(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int *arg3 ;
  int *arg4 = (int *) 0 ;
  
  SWIG_check_num_args("AudioDSP::factorize",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::factorize",1,"int const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::factorize",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::factorize",3,"int []");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("AudioDSP::factorize",4,"int *");
  arg1 = (int const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("factorize",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("factorize",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("factorize",4,SWIGTYPE_p_int);
  }
  
  AudioDSP::factorize(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_is_optimal(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  SWIG_check_num_args("AudioDSP::is_optimal",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::is_optimal",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::is_optimal",2,"int *");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("is_optimal",2,SWIGTYPE_p_int);
  }
  
  result = (bool)AudioDSP::is_optimal(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_find_closest_factor(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("AudioDSP::find_closest_factor",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::find_closest_factor",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)AudioDSP::find_closest_factor(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_fftPlan_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  AudioDSP::FFTPlanRealDouble *arg2 = (AudioDSP::FFTPlanRealDouble *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::fftPlan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::fftPlan",1,"AudioDSP::FFTConvolutionDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::fftPlan",2,"AudioDSP::FFTPlanRealDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_fftPlan_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_fftPlan_set",2,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble);
  }
  
  if (arg1) (arg1)->fftPlan = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_fftPlan_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  AudioDSP::FFTPlanRealDouble *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::fftPlan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::fftPlan",1,"AudioDSP::FFTConvolutionDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_fftPlan_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  result = (AudioDSP::FFTPlanRealDouble *)& ((arg1)->fftPlan);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanRealDouble,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_length_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::length",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::length",1,"AudioDSP::FFTConvolutionDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::length",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_length_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->length = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_length_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::length",1,"AudioDSP::FFTConvolutionDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_length_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  result =  ((arg1)->length);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_fftSize_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::fftSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::fftSize",1,"AudioDSP::FFTConvolutionDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::fftSize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_fftSize_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->fftSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_fftSize_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::fftSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::fftSize",1,"AudioDSP::FFTConvolutionDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_fftSize_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  result =  ((arg1)->fftSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_blockSize_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::blockSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::blockSize",1,"AudioDSP::FFTConvolutionDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::blockSize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_blockSize_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->blockSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_blockSize_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::blockSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::blockSize",1,"AudioDSP::FFTConvolutionDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_blockSize_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  result =  ((arg1)->blockSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_t1_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  std::vector< std::complex< DspFloatType >,std::allocator< std::complex< DspFloatType > > > *arg2 = (std::vector< std::complex< DspFloatType >,std::allocator< std::complex< DspFloatType > > > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::t1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::t1",1,"AudioDSP::FFTConvolutionDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::t1",2,"std::vector< std::complex< DspFloatType >,std::allocator< std::complex< DspFloatType > > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_t1_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_std__allocatorT_std__complexT_DspFloatType_t_t_t,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_t1_set",2,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_std__allocatorT_std__complexT_DspFloatType_t_t_t);
  }
  
  if (arg1) (arg1)->t1 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_t1_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  std::vector< std::complex< DspFloatType >,std::allocator< std::complex< DspFloatType > > > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::t1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::t1",1,"AudioDSP::FFTConvolutionDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_t1_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  result = (std::vector< std::complex< DspFloatType >,std::allocator< std::complex< DspFloatType > > > *)& ((arg1)->t1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_std__allocatorT_std__complexT_DspFloatType_t_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_t2_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  std::vector< std::complex< DspFloatType >,std::allocator< std::complex< DspFloatType > > > *arg2 = (std::vector< std::complex< DspFloatType >,std::allocator< std::complex< DspFloatType > > > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::t2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::t2",1,"AudioDSP::FFTConvolutionDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::t2",2,"std::vector< std::complex< DspFloatType >,std::allocator< std::complex< DspFloatType > > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_t2_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_std__allocatorT_std__complexT_DspFloatType_t_t_t,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_t2_set",2,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_std__allocatorT_std__complexT_DspFloatType_t_t_t);
  }
  
  if (arg1) (arg1)->t2 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_t2_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  std::vector< std::complex< DspFloatType >,std::allocator< std::complex< DspFloatType > > > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::t2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::t2",1,"AudioDSP::FFTConvolutionDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_t2_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  result = (std::vector< std::complex< DspFloatType >,std::allocator< std::complex< DspFloatType > > > *)& ((arg1)->t2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_std__allocatorT_std__complexT_DspFloatType_t_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_tempC_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  std::vector< std::complex< DspFloatType >,std::allocator< std::complex< DspFloatType > > > *arg2 = (std::vector< std::complex< DspFloatType >,std::allocator< std::complex< DspFloatType > > > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::tempC",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::tempC",1,"AudioDSP::FFTConvolutionDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::tempC",2,"std::vector< std::complex< DspFloatType >,std::allocator< std::complex< DspFloatType > > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_tempC_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_std__allocatorT_std__complexT_DspFloatType_t_t_t,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_tempC_set",2,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_std__allocatorT_std__complexT_DspFloatType_t_t_t);
  }
  
  if (arg1) (arg1)->tempC = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_tempC_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  std::vector< std::complex< DspFloatType >,std::allocator< std::complex< DspFloatType > > > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::tempC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::tempC",1,"AudioDSP::FFTConvolutionDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_tempC_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  result = (std::vector< std::complex< DspFloatType >,std::allocator< std::complex< DspFloatType > > > *)& ((arg1)->tempC);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_std__allocatorT_std__complexT_DspFloatType_t_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_H_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::H",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::H",1,"AudioDSP::FFTConvolutionDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::H",2,"std::vector< double,std::allocator< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_H_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_H_set",2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  if (arg1) (arg1)->H = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_H_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::H",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::H",1,"AudioDSP::FFTConvolutionDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_H_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->H);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_i1_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::i1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::i1",1,"AudioDSP::FFTConvolutionDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::i1",2,"std::vector< double,std::allocator< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_i1_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_i1_set",2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  if (arg1) (arg1)->i1 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_i1_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::i1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::i1",1,"AudioDSP::FFTConvolutionDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_i1_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->i1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_ola_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::ola",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::ola",1,"AudioDSP::FFTConvolutionDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::ola",2,"std::vector< double,std::allocator< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_ola_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_ola_set",2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  if (arg1) (arg1)->ola = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_ola_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::ola",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::ola",1,"AudioDSP::FFTConvolutionDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_ola_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->ola);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_temp_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::temp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::temp",1,"AudioDSP::FFTConvolutionDouble *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::temp",2,"std::vector< double,std::allocator< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_temp_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_temp_set",2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  if (arg1) (arg1)->temp = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_temp_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::temp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::temp",1,"AudioDSP::FFTConvolutionDouble *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_temp_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->temp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTConvolutionDouble(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = (double *) 0 ;
  size_t arg3 ;
  AudioDSP::FFTConvolutionDouble *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::FFTConvolutionDouble",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::FFTConvolutionDouble",1,"size_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::FFTConvolutionDouble",2,"double *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::FFTConvolutionDouble",3,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("new_FFTConvolutionDouble",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (AudioDSP::FFTConvolutionDouble *)new AudioDSP::FFTConvolutionDouble(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionDouble_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionDouble::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::ProcessBlock",1,"AudioDSP::FFTConvolutionDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("AudioDSP::FFTConvolutionDouble::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_ProcessBlock",1,SWIGTYPE_p_AudioDSP__FFTConvolutionDouble);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTConvolutionDouble_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTConvolutionDouble(void *obj) {
AudioDSP::FFTConvolutionDouble *arg1 = (AudioDSP::FFTConvolutionDouble *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTConvolutionDouble(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTConvolutionDouble);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTConvolutionDouble_attributes[] = {
    { "fftPlan", _wrap_FFTConvolutionDouble_fftPlan_get, _wrap_FFTConvolutionDouble_fftPlan_set },
    { "length", _wrap_FFTConvolutionDouble_length_get, _wrap_FFTConvolutionDouble_length_set },
    { "fftSize", _wrap_FFTConvolutionDouble_fftSize_get, _wrap_FFTConvolutionDouble_fftSize_set },
    { "blockSize", _wrap_FFTConvolutionDouble_blockSize_get, _wrap_FFTConvolutionDouble_blockSize_set },
    { "t1", _wrap_FFTConvolutionDouble_t1_get, _wrap_FFTConvolutionDouble_t1_set },
    { "t2", _wrap_FFTConvolutionDouble_t2_get, _wrap_FFTConvolutionDouble_t2_set },
    { "tempC", _wrap_FFTConvolutionDouble_tempC_get, _wrap_FFTConvolutionDouble_tempC_set },
    { "H", _wrap_FFTConvolutionDouble_H_get, _wrap_FFTConvolutionDouble_H_set },
    { "i1", _wrap_FFTConvolutionDouble_i1_get, _wrap_FFTConvolutionDouble_i1_set },
    { "ola", _wrap_FFTConvolutionDouble_ola_get, _wrap_FFTConvolutionDouble_ola_set },
    { "temp", _wrap_FFTConvolutionDouble_temp_get, _wrap_FFTConvolutionDouble_temp_set },
    {0,0,0}
};
static swig_lua_method swig_FFTConvolutionDouble_methods[]= {
    { "ProcessBlock", _wrap_FFTConvolutionDouble_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_FFTConvolutionDouble_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTConvolutionDouble_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTConvolutionDouble_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTConvolutionDouble_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTConvolutionDouble_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTConvolutionDouble_Sf_SwigStatic = {
    "FFTConvolutionDouble",
    swig_FFTConvolutionDouble_Sf_SwigStatic_methods,
    swig_FFTConvolutionDouble_Sf_SwigStatic_attributes,
    swig_FFTConvolutionDouble_Sf_SwigStatic_constants,
    swig_FFTConvolutionDouble_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTConvolutionDouble_bases[] = {0};
static const char *swig_FFTConvolutionDouble_base_names[] = {0};
static swig_lua_class _wrap_class_FFTConvolutionDouble = { "FFTConvolutionDouble", "FFTConvolutionDouble", &SWIGTYPE_p_AudioDSP__FFTConvolutionDouble,_proxy__wrap_new_FFTConvolutionDouble, swig_delete_FFTConvolutionDouble, swig_FFTConvolutionDouble_methods, swig_FFTConvolutionDouble_attributes, &swig_FFTConvolutionDouble_Sf_SwigStatic, swig_FFTConvolutionDouble_meta, swig_FFTConvolutionDouble_bases, swig_FFTConvolutionDouble_base_names };

static int _wrap_FFTConvolutionFloat_fftPlan_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  AudioDSP::FFTPlanRealFloat *arg2 = (AudioDSP::FFTPlanRealFloat *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::fftPlan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::fftPlan",1,"AudioDSP::FFTConvolutionFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::fftPlan",2,"AudioDSP::FFTPlanRealFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_fftPlan_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_fftPlan_set",2,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat);
  }
  
  if (arg1) (arg1)->fftPlan = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_fftPlan_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  AudioDSP::FFTPlanRealFloat *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::fftPlan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::fftPlan",1,"AudioDSP::FFTConvolutionFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_fftPlan_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  result = (AudioDSP::FFTPlanRealFloat *)& ((arg1)->fftPlan);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTPlanRealFloat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_length_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::length",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::length",1,"AudioDSP::FFTConvolutionFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::length",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_length_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->length = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_length_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::length",1,"AudioDSP::FFTConvolutionFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_length_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  result =  ((arg1)->length);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_fftSize_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::fftSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::fftSize",1,"AudioDSP::FFTConvolutionFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::fftSize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_fftSize_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->fftSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_fftSize_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::fftSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::fftSize",1,"AudioDSP::FFTConvolutionFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_fftSize_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  result =  ((arg1)->fftSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_blockSize_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::blockSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::blockSize",1,"AudioDSP::FFTConvolutionFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::blockSize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_blockSize_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->blockSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_blockSize_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::blockSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::blockSize",1,"AudioDSP::FFTConvolutionFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_blockSize_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  result =  ((arg1)->blockSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_t1_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  std::vector< std::complex< float >,std::allocator< std::complex< float > > > *arg2 = (std::vector< std::complex< float >,std::allocator< std::complex< float > > > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::t1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::t1",1,"AudioDSP::FFTConvolutionFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::t1",2,"std::vector< std::complex< float >,std::allocator< std::complex< float > > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_t1_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_t1_set",2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  if (arg1) (arg1)->t1 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_t1_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  std::vector< std::complex< float >,std::allocator< std::complex< float > > > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::t1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::t1",1,"AudioDSP::FFTConvolutionFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_t1_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  result = (std::vector< std::complex< float >,std::allocator< std::complex< float > > > *)& ((arg1)->t1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_t2_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  std::vector< std::complex< float >,std::allocator< std::complex< float > > > *arg2 = (std::vector< std::complex< float >,std::allocator< std::complex< float > > > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::t2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::t2",1,"AudioDSP::FFTConvolutionFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::t2",2,"std::vector< std::complex< float >,std::allocator< std::complex< float > > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_t2_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_t2_set",2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  if (arg1) (arg1)->t2 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_t2_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  std::vector< std::complex< float >,std::allocator< std::complex< float > > > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::t2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::t2",1,"AudioDSP::FFTConvolutionFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_t2_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  result = (std::vector< std::complex< float >,std::allocator< std::complex< float > > > *)& ((arg1)->t2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_tempC_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  std::vector< std::complex< float >,std::allocator< std::complex< float > > > *arg2 = (std::vector< std::complex< float >,std::allocator< std::complex< float > > > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::tempC",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::tempC",1,"AudioDSP::FFTConvolutionFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::tempC",2,"std::vector< std::complex< float >,std::allocator< std::complex< float > > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_tempC_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_tempC_set",2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  if (arg1) (arg1)->tempC = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_tempC_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  std::vector< std::complex< float >,std::allocator< std::complex< float > > > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::tempC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::tempC",1,"AudioDSP::FFTConvolutionFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_tempC_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  result = (std::vector< std::complex< float >,std::allocator< std::complex< float > > > *)& ((arg1)->tempC);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_H_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = (std::vector< float,std::allocator< float > > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::H",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::H",1,"AudioDSP::FFTConvolutionFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::H",2,"std::vector< float,std::allocator< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_H_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_H_set",2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  if (arg1) (arg1)->H = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_H_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::H",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::H",1,"AudioDSP::FFTConvolutionFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_H_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  result = (std::vector< float,std::allocator< float > > *)& ((arg1)->H);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_i1_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = (std::vector< float,std::allocator< float > > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::i1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::i1",1,"AudioDSP::FFTConvolutionFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::i1",2,"std::vector< float,std::allocator< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_i1_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_i1_set",2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  if (arg1) (arg1)->i1 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_i1_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::i1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::i1",1,"AudioDSP::FFTConvolutionFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_i1_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  result = (std::vector< float,std::allocator< float > > *)& ((arg1)->i1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_ola_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = (std::vector< float,std::allocator< float > > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::ola",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::ola",1,"AudioDSP::FFTConvolutionFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::ola",2,"std::vector< float,std::allocator< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_ola_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_ola_set",2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  if (arg1) (arg1)->ola = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_ola_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::ola",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::ola",1,"AudioDSP::FFTConvolutionFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_ola_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  result = (std::vector< float,std::allocator< float > > *)& ((arg1)->ola);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_temp_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = (std::vector< float,std::allocator< float > > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::temp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::temp",1,"AudioDSP::FFTConvolutionFloat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::temp",2,"std::vector< float,std::allocator< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_temp_set",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_temp_set",2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  if (arg1) (arg1)->temp = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_temp_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::temp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::temp",1,"AudioDSP::FFTConvolutionFloat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_temp_get",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  result = (std::vector< float,std::allocator< float > > *)& ((arg1)->temp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTConvolutionFloat(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  AudioDSP::FFTConvolutionFloat *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::FFTConvolutionFloat",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::FFTConvolutionFloat",1,"size_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::FFTConvolutionFloat",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::FFTConvolutionFloat",3,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_FFTConvolutionFloat",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (AudioDSP::FFTConvolutionFloat *)new AudioDSP::FFTConvolutionFloat(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolutionFloat_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("AudioDSP::FFTConvolutionFloat::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::ProcessBlock",1,"AudioDSP::FFTConvolutionFloat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("AudioDSP::FFTConvolutionFloat::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_ProcessBlock",1,SWIGTYPE_p_AudioDSP__FFTConvolutionFloat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FFTConvolutionFloat_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTConvolutionFloat(void *obj) {
AudioDSP::FFTConvolutionFloat *arg1 = (AudioDSP::FFTConvolutionFloat *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTConvolutionFloat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTConvolutionFloat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTConvolutionFloat_attributes[] = {
    { "fftPlan", _wrap_FFTConvolutionFloat_fftPlan_get, _wrap_FFTConvolutionFloat_fftPlan_set },
    { "length", _wrap_FFTConvolutionFloat_length_get, _wrap_FFTConvolutionFloat_length_set },
    { "fftSize", _wrap_FFTConvolutionFloat_fftSize_get, _wrap_FFTConvolutionFloat_fftSize_set },
    { "blockSize", _wrap_FFTConvolutionFloat_blockSize_get, _wrap_FFTConvolutionFloat_blockSize_set },
    { "t1", _wrap_FFTConvolutionFloat_t1_get, _wrap_FFTConvolutionFloat_t1_set },
    { "t2", _wrap_FFTConvolutionFloat_t2_get, _wrap_FFTConvolutionFloat_t2_set },
    { "tempC", _wrap_FFTConvolutionFloat_tempC_get, _wrap_FFTConvolutionFloat_tempC_set },
    { "H", _wrap_FFTConvolutionFloat_H_get, _wrap_FFTConvolutionFloat_H_set },
    { "i1", _wrap_FFTConvolutionFloat_i1_get, _wrap_FFTConvolutionFloat_i1_set },
    { "ola", _wrap_FFTConvolutionFloat_ola_get, _wrap_FFTConvolutionFloat_ola_set },
    { "temp", _wrap_FFTConvolutionFloat_temp_get, _wrap_FFTConvolutionFloat_temp_set },
    {0,0,0}
};
static swig_lua_method swig_FFTConvolutionFloat_methods[]= {
    { "ProcessBlock", _wrap_FFTConvolutionFloat_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_FFTConvolutionFloat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTConvolutionFloat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTConvolutionFloat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTConvolutionFloat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTConvolutionFloat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTConvolutionFloat_Sf_SwigStatic = {
    "FFTConvolutionFloat",
    swig_FFTConvolutionFloat_Sf_SwigStatic_methods,
    swig_FFTConvolutionFloat_Sf_SwigStatic_attributes,
    swig_FFTConvolutionFloat_Sf_SwigStatic_constants,
    swig_FFTConvolutionFloat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTConvolutionFloat_bases[] = {0};
static const char *swig_FFTConvolutionFloat_base_names[] = {0};
static swig_lua_class _wrap_class_FFTConvolutionFloat = { "FFTConvolutionFloat", "FFTConvolutionFloat", &SWIGTYPE_p_AudioDSP__FFTConvolutionFloat,_proxy__wrap_new_FFTConvolutionFloat, swig_delete_FFTConvolutionFloat, swig_FFTConvolutionFloat_methods, swig_FFTConvolutionFloat_attributes, &swig_FFTConvolutionFloat_Sf_SwigStatic, swig_FFTConvolutionFloat_meta, swig_FFTConvolutionFloat_bases, swig_FFTConvolutionFloat_base_names };

static int _wrap_get_left_channel__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::get_left_channel< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::get_left_channel< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("get_left_channel",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR get_left_channel< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_left_channel__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = (double *) 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::get_left_channel< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::get_left_channel< DspFloatType >",1,"size_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::get_left_channel< DspFloatType >",2,"double const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("get_left_channel",2,SWIGTYPE_p_double);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR get_left_channel< DspFloatType >(arg1,(double const *)arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_left_channel(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_get_left_channel__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_get_left_channel__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'get_left_channel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::get_left_channel< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::get_left_channel< DspFloatType >(size_t,double const *)\n");
  lua_error(L);return 0;
}


static int _wrap_get_right_channel__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::get_right_channel< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::get_right_channel< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("get_right_channel",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR get_right_channel< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_right_channel__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double **arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::get_right_channel< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::get_right_channel< DspFloatType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::get_right_channel< DspFloatType >",2,"double const *&");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("get_right_channel",2,SWIGTYPE_p_p_double);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR get_right_channel< DspFloatType >(arg1,(double const *&)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_right_channel(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_get_right_channel__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_double, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_get_right_channel__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'get_right_channel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::get_right_channel< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::get_right_channel< DspFloatType >(size_t,double const *&)\n");
  lua_error(L);return 0;
}


static int _wrap_get_channel__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::get_channel< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::get_channel< DspFloatType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::get_channel< DspFloatType >",2,"AudioDSP::sample_vector< double > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("get_channel",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR get_channel< DspFloatType >(arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_channel__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::get_channel< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::get_channel< DspFloatType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::get_channel< DspFloatType >",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::get_channel< DspFloatType >",3,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("get_channel",3,SWIGTYPE_p_double);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR get_channel< DspFloatType >(arg1,arg2,arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_channel(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_get_channel__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_get_channel__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'get_channel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::get_channel< DspFloatType >(size_t,AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::get_channel< DspFloatType >(size_t,size_t,double *)\n");
  lua_error(L);return 0;
}


static int _wrap_interleave__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  AudioDSP::sample_vector< AudioDSP::sample_vector< double > > *arg3 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::interleave< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",3,"AudioDSP::sample_vector< AudioDSP::sample_vector< double > > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AudioDSP__sample_vectorT_AudioDSP__sample_vectorT_DspFloatType_t_t,0))){
    SWIG_fail_ptr("interleave",3,SWIGTYPE_p_AudioDSP__sample_vectorT_AudioDSP__sample_vectorT_DspFloatType_t_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR interleave< DspFloatType >(arg1,arg2,(AudioDSP::sample_vector< AudioDSP::sample_vector< double > > const &)*arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interleave__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  AudioDSP::sample_vector< double * > *arg3 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::interleave< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",3,"AudioDSP::sample_vector< double * > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AudioDSP__sample_vectorT_double_p_t,0))){
    SWIG_fail_ptr("interleave",3,SWIGTYPE_p_AudioDSP__sample_vectorT_double_p_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR interleave< DspFloatType >(arg1,arg2,(AudioDSP::sample_vector< double * > const &)*arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interleave__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  double ***arg3 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::interleave< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",3,"double const **&");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_p_double,0))){
    SWIG_fail_ptr("interleave",3,SWIGTYPE_p_p_p_double);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR interleave< DspFloatType >(arg1,arg2,(double const **&)*arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interleave(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_AudioDSP__sample_vectorT_DspFloatType_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_interleave__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_p_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_interleave__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_p_double, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_interleave__SWIG_5(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interleave'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::interleave< DspFloatType >(size_t,size_t,AudioDSP::sample_vector< AudioDSP::sample_vector< double > > const &)\n"
    "    AudioDSP::interleave< DspFloatType >(size_t,size_t,AudioDSP::sample_vector< double * > const &)\n"
    "    AudioDSP::interleave< DspFloatType >(size_t,size_t,double const **&)\n");
  lua_error(L);return 0;
}


static int _wrap_deinterleave__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  AudioDSP::sample_vector< AudioDSP::sample_vector< double > > *arg3 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::interleave< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",3,"AudioDSP::sample_vector< AudioDSP::sample_vector< double > > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AudioDSP__sample_vectorT_AudioDSP__sample_vectorT_DspFloatType_t_t,0))){
    SWIG_fail_ptr("deinterleave",3,SWIGTYPE_p_AudioDSP__sample_vectorT_AudioDSP__sample_vectorT_DspFloatType_t_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR interleave< DspFloatType >(arg1,arg2,(AudioDSP::sample_vector< AudioDSP::sample_vector< double > > const &)*arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_deinterleave__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  AudioDSP::sample_vector< double * > *arg3 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::interleave< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",3,"AudioDSP::sample_vector< double * > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AudioDSP__sample_vectorT_double_p_t,0))){
    SWIG_fail_ptr("deinterleave",3,SWIGTYPE_p_AudioDSP__sample_vectorT_double_p_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR interleave< DspFloatType >(arg1,arg2,(AudioDSP::sample_vector< double * > const &)*arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_deinterleave__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  double ***arg3 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::interleave< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AudioDSP::interleave< DspFloatType >",3,"double const **&");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_p_double,0))){
    SWIG_fail_ptr("deinterleave",3,SWIGTYPE_p_p_p_double);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR interleave< DspFloatType >(arg1,arg2,(double const **&)*arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_deinterleave(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_AudioDSP__sample_vectorT_DspFloatType_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_deinterleave__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_p_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_deinterleave__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_p_double, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_deinterleave__SWIG_4(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'deinterleave'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::interleave< DspFloatType >(size_t,size_t,AudioDSP::sample_vector< AudioDSP::sample_vector< double > > const &)\n"
    "    AudioDSP::interleave< DspFloatType >(size_t,size_t,AudioDSP::sample_vector< double * > const &)\n"
    "    AudioDSP::interleave< DspFloatType >(size_t,size_t,double const **&)\n");
  lua_error(L);return 0;
}


static int _wrap_copy_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("AudioDSP::copy_vector< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::copy_vector< DspFloatType >",1,"AudioDSP::sample_vector< double > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::copy_vector< DspFloatType >",2,"AudioDSP::sample_vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("copy_vector",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("copy_vector",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  AudioDSP::SWIGTEMPLATEDISAMBIGUATOR copy_vector< DspFloatType >(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copy_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("AudioDSP::copy_vector< DspFloatType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::copy_vector< DspFloatType >",1,"AudioDSP::sample_vector< double > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::copy_vector< DspFloatType >",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::copy_vector< DspFloatType >",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("copy_vector",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("copy_vector",3,SWIGTYPE_p_double);
  }
  
  AudioDSP::SWIGTEMPLATEDISAMBIGUATOR copy_vector< DspFloatType >(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copy_vector(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_copy_vector__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_copy_vector__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'copy_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::copy_vector< DspFloatType >(AudioDSP::sample_vector< double > &,AudioDSP::sample_vector< double > &)\n"
    "    AudioDSP::copy_vector< DspFloatType >(AudioDSP::sample_vector< double > &,size_t,double *)\n");
  lua_error(L);return 0;
}


static int _wrap_slice_vector(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  AudioDSP::sample_vector< double > *arg3 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::slice_vector< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::slice_vector< DspFloatType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::slice_vector< DspFloatType >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AudioDSP::slice_vector< DspFloatType >",3,"AudioDSP::sample_vector< double > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("slice_vector",3,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR slice_vector< DspFloatType >(arg1,arg2,*arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copy_buffer(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("AudioDSP::copy_buffer< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::copy_buffer< DspFloatType >",1,"size_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::copy_buffer< DspFloatType >",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::copy_buffer< DspFloatType >",3,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("copy_buffer",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("copy_buffer",3,SWIGTYPE_p_double);
  }
  
  AudioDSP::SWIGTEMPLATEDISAMBIGUATOR copy_buffer< DspFloatType >(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_slice_buffer(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::slice_buffer< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::slice_buffer< DspFloatType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::slice_buffer< DspFloatType >",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::slice_buffer< DspFloatType >",3,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("slice_buffer",3,SWIGTYPE_p_double);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR slice_buffer< DspFloatType >(arg1,arg2,arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stereo_split__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("AudioDSP::split_stereo< DspFloatType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::split_stereo< DspFloatType >",1,"size_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AudioDSP::split_stereo< DspFloatType >",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::split_stereo< DspFloatType >",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("AudioDSP::split_stereo< DspFloatType >",4,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("stereo_split",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("stereo_split",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("stereo_split",4,SWIGTYPE_p_double);
  }
  
  AudioDSP::SWIGTEMPLATEDISAMBIGUATOR split_stereo< DspFloatType >(arg1,(double const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stereo_split__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("AudioDSP::split_stereo< DspFloatType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::split_stereo< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::split_stereo< DspFloatType >",2,"AudioDSP::sample_vector< double > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AudioDSP::split_stereo< DspFloatType >",3,"AudioDSP::sample_vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("stereo_split",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("stereo_split",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("stereo_split",3,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  AudioDSP::SWIGTEMPLATEDISAMBIGUATOR split_stereo< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stereo_split(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_stereo_split__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_stereo_split__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'stereo_split'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::split_stereo< DspFloatType >(size_t,double const *,double *,double *)\n"
    "    AudioDSP::split_stereo< DspFloatType >(AudioDSP::sample_vector< double > const &,AudioDSP::sample_vector< double > &,AudioDSP::sample_vector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fill(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  double arg2 ;
  
  SWIG_check_num_args("AudioDSP::fill< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fill< DspFloatType >",1,"AudioDSP::sample_vector< double > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::fill< DspFloatType >",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("fill",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  AudioDSP::SWIGTEMPLATEDISAMBIGUATOR fill< DspFloatType >(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zeros(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  
  SWIG_check_num_args("AudioDSP::zeros< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::zeros< DspFloatType >",1,"AudioDSP::sample_vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("zeros",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  AudioDSP::SWIGTEMPLATEDISAMBIGUATOR zeros< DspFloatType >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ones(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  
  SWIG_check_num_args("AudioDSP::ones< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ones< DspFloatType >",1,"AudioDSP::sample_vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("ones",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  AudioDSP::SWIGTEMPLATEDISAMBIGUATOR ones< DspFloatType >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sample_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::sample_vector",0,0)
  result = (AudioDSP::sample_vector< DspFloatType > *)new AudioDSP::sample_vector< DspFloatType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sample_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  AudioDSP::sample_vector< DspFloatType > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::sample_vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::sample_vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (AudioDSP::sample_vector< DspFloatType > *)new AudioDSP::sample_vector< DspFloatType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sample_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_sample_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_sample_vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sample_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sample_vector< DspFloatType >::sample_vector()\n"
    "    AudioDSP::sample_vector< DspFloatType >::sample_vector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_sample_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::size",1,"AudioDSP::sample_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_size",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::resize",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_resize",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::max_size",1,"AudioDSP::sample_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_max_size",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::capacity",1,"AudioDSP::sample_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_capacity",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::empty",1,"AudioDSP::sample_vector< DspFloatType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_empty",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = (bool)((AudioDSP::sample_vector< DspFloatType > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::reserve",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_reserve",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::shrink_to_fit",1,"AudioDSP::sample_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_shrink_to_fit",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::at",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_at",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::front",1,"AudioDSP::sample_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_front",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::back",1,"AudioDSP::sample_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_back",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::data",1,"AudioDSP::sample_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_data",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::assign",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::assign",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_assign",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::push_back",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::push_back",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_push_back",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::pop_back",1,"AudioDSP::sample_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_pop_back",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_erase_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::erase",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_erase",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  AudioDSP_sample_vector_Sl_DspFloatType_Sg__erase_SWIG_0_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_erase_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::erase",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_erase",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  AudioDSP_sample_vector_Sl_DspFloatType_Sg__erase_SWIG_0_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_sample_vector_erase_SWIG_0_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_sample_vector_erase_SWIG_0_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sample_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sample_vector< DspFloatType >::erase(size_t)\n"
    "    AudioDSP::sample_vector< DspFloatType >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_sample_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg2 = 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::swap",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::swap",2,"std::vector< double,Allocator::aligned_allocator< double,64 > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_swap",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("sample_vector_swap",2,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::clear",1,"AudioDSP::sample_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_clear",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::copy",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::copy",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_copy",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("sample_vector_copy",3,SWIGTYPE_p_double);
  }
  
  (arg1)->copy(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::fill",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::fill",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_fill",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector_print(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::print",1,"AudioDSP::sample_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector_print",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__getitem__",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___getitem",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)AudioDSP_sample_vector_Sl_DspFloatType_Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__setitem",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__setitem",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___setitem",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  AudioDSP_sample_vector_Sl_DspFloatType_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__add__",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__add__",2,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___add",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___add",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP_sample_vector_Sl_DspFloatType_Sg____add____SWIG_0(arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__sub__",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__sub__",2,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___sub",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___sub",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP_sample_vector_Sl_DspFloatType_Sg____sub____SWIG_0(arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__mul__",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__mul__",2,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___mul",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___mul",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP_sample_vector_Sl_DspFloatType_Sg____mul____SWIG_0(arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__div__",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__div__",2,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___div",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___div",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP_sample_vector_Sl_DspFloatType_Sg____div____SWIG_0(arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__pow__",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__pow__",2,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___pow",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___pow",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP_sample_vector_Sl_DspFloatType_Sg____pow____SWIG_0(arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  double arg2 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__add__",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__add__",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___add",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP_sample_vector_Sl_DspFloatType_Sg____add____SWIG_1(arg1,arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_sample_vector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_sample_vector___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sample_vector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sample_vector< DspFloatType >::__add__(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::sample_vector< DspFloatType >::__add__(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_sample_vector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  double arg2 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__sub__",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__sub__",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___sub",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP_sample_vector_Sl_DspFloatType_Sg____sub____SWIG_1(arg1,arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_sample_vector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_sample_vector___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sample_vector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sample_vector< DspFloatType >::__sub__(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::sample_vector< DspFloatType >::__sub__(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_sample_vector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  double arg2 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__mul__",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__mul__",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___mul",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP_sample_vector_Sl_DspFloatType_Sg____mul____SWIG_1(arg1,arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_sample_vector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_sample_vector___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sample_vector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sample_vector< DspFloatType >::__mul__(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::sample_vector< DspFloatType >::__mul__(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_sample_vector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  double arg2 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__div__",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__div__",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___div",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP_sample_vector_Sl_DspFloatType_Sg____div____SWIG_1(arg1,arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_sample_vector___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_sample_vector___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sample_vector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sample_vector< DspFloatType >::__div__(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::sample_vector< DspFloatType >::__div__(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_sample_vector___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  double arg2 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__pow__",1,"AudioDSP::sample_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__pow__",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___pow",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP_sample_vector_Sl_DspFloatType_Sg____pow____SWIG_1(arg1,arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_vector___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_sample_vector___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_sample_vector___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sample_vector___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sample_vector< DspFloatType >::__pow__(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::sample_vector< DspFloatType >::__pow__(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_sample_vector___unm(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_vector< DspFloatType >::__neg__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_vector< DspFloatType >::__neg__",1,"AudioDSP::sample_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sample_vector___unm",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP_sample_vector_Sl_DspFloatType_Sg____neg____SWIG(arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sample_vector(void *obj) {
AudioDSP::sample_vector< DspFloatType > *arg1 = (AudioDSP::sample_vector< DspFloatType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sample_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sample_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sample_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sample_vector_methods[]= {
    { "size", _wrap_sample_vector_size},
    { "resize", _wrap_sample_vector_resize},
    { "max_size", _wrap_sample_vector_max_size},
    { "capacity", _wrap_sample_vector_capacity},
    { "empty", _wrap_sample_vector_empty},
    { "reserve", _wrap_sample_vector_reserve},
    { "shrink_to_fit", _wrap_sample_vector_shrink_to_fit},
    { "at", _wrap_sample_vector_at},
    { "front", _wrap_sample_vector_front},
    { "back", _wrap_sample_vector_back},
    { "data", _wrap_sample_vector_data},
    { "assign", _wrap_sample_vector_assign},
    { "push_back", _wrap_sample_vector_push_back},
    { "pop_back", _wrap_sample_vector_pop_back},
    { "erase", _wrap_sample_vector_erase},
    { "swap", _wrap_sample_vector_swap},
    { "clear", _wrap_sample_vector_clear},
    { "copy", _wrap_sample_vector_copy},
    { "fill", _wrap_sample_vector_fill},
    { "print", _wrap_sample_vector_print},
    { "__getitem", _wrap_sample_vector___getitem},
    { "__setitem", _wrap_sample_vector___setitem},
    { "__add", _wrap_sample_vector___add},
    { "__sub", _wrap_sample_vector___sub},
    { "__mul", _wrap_sample_vector___mul},
    { "__div", _wrap_sample_vector___div},
    { "__pow", _wrap_sample_vector___pow},
    { "__unm", _wrap_sample_vector___unm},
    {0,0}
};
static swig_lua_method swig_sample_vector_meta[] = {
    { "__getitem", _wrap_sample_vector___getitem},
    { "__setitem", _wrap_sample_vector___setitem},
    { "__add", _wrap_sample_vector___add},
    { "__sub", _wrap_sample_vector___sub},
    { "__mul", _wrap_sample_vector___mul},
    { "__div", _wrap_sample_vector___div},
    { "__pow", _wrap_sample_vector___pow},
    { "__unm", _wrap_sample_vector___unm},
    {0,0}
};

static swig_lua_attribute swig_sample_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sample_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sample_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sample_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sample_vector_Sf_SwigStatic = {
    "sample_vector",
    swig_sample_vector_Sf_SwigStatic_methods,
    swig_sample_vector_Sf_SwigStatic_attributes,
    swig_sample_vector_Sf_SwigStatic_constants,
    swig_sample_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sample_vector_bases[] = {0,0};
static const char *swig_sample_vector_base_names[] = {"std::vector< double,Allocator::aligned_allocator< double,64 > > *",0};
static swig_lua_class _wrap_class_sample_vector = { "sample_vector", "sample_vector", &SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,_proxy__wrap_new_sample_vector, swig_delete_sample_vector, swig_sample_vector_methods, swig_sample_vector_attributes, &swig_sample_vector_Sf_SwigStatic, swig_sample_vector_meta, swig_sample_vector_bases, swig_sample_vector_base_names };

static int _wrap_new_complex_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::complex_vector",0,0)
  result = (AudioDSP::complex_vector< DspFloatType > *)new AudioDSP::complex_vector< DspFloatType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  AudioDSP::complex_vector< DspFloatType > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::complex_vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::complex_vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (AudioDSP::complex_vector< DspFloatType > *)new AudioDSP::complex_vector< DspFloatType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_complex_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_complex_vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::complex_vector< DspFloatType >::complex_vector()\n"
    "    AudioDSP::complex_vector< DspFloatType >::complex_vector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::size",1,"AudioDSP::complex_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_size",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::resize",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_resize",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::max_size",1,"AudioDSP::complex_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_max_size",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::capacity",1,"AudioDSP::complex_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_capacity",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::empty",1,"AudioDSP::complex_vector< DspFloatType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_empty",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = (bool)((AudioDSP::complex_vector< DspFloatType > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::reserve",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_reserve",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::shrink_to_fit",1,"AudioDSP::complex_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_shrink_to_fit",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::at",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_at",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< double > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::front",1,"AudioDSP::complex_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_front",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = (std::complex< double > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::back",1,"AudioDSP::complex_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_back",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = (std::complex< double > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  std::complex< double > *arg3 = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::assign",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::assign",3,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_assign",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_vector_assign",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->assign(arg2,(std::complex< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::push_back",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::push_back",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_push_back",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_vector_push_back",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->push_back((std::complex< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::pop_back",1,"AudioDSP::complex_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_pop_back",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_erase_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::erase",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_erase",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  AudioDSP_complex_vector_Sl_DspFloatType_Sg__erase_SWIG_0_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_erase_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::erase",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_erase",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  AudioDSP_complex_vector_Sl_DspFloatType_Sg__erase_SWIG_0_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_vector_erase_SWIG_0_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_vector_erase_SWIG_0_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::complex_vector< DspFloatType >::erase(size_t)\n"
    "    AudioDSP::complex_vector< DspFloatType >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  std::vector< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > *arg2 = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::swap",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::swap",2,"std::vector< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_swap",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_vector_swap",2,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::clear",1,"AudioDSP::complex_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_clear",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::fill",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::fill",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_fill",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_vector_fill",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->fill((std::complex< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_print(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::print",1,"AudioDSP::complex_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_print",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::copy",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::copy",3,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_copy",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_vector_copy",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->copy(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__getitem__",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___getitem",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = AudioDSP_complex_vector_Sl_DspFloatType_Sg____getitem____SWIG(arg1,arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  size_t arg2 ;
  std::complex< double > *arg3 = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__setitem__",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__setitem__",3,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___setitem",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_vector___setitem",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  AudioDSP_complex_vector_Sl_DspFloatType_Sg____setitem____SWIG(arg1,arg2,(std::complex< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::data",1,"AudioDSP::complex_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector_data",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = (std::complex< double > *)AudioDSP_complex_vector_Sl_DspFloatType_Sg__data__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  AudioDSP::complex_vector< double > *arg2 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__add__",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__add__",2,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___add",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___add",2,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP_complex_vector_Sl_DspFloatType_Sg____add____SWIG_0(arg1,(AudioDSP::complex_vector< double > const &)*arg2);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  AudioDSP::complex_vector< double > *arg2 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__sub__",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__sub__",2,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___sub",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___sub",2,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP_complex_vector_Sl_DspFloatType_Sg____sub____SWIG_0(arg1,(AudioDSP::complex_vector< double > const &)*arg2);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  AudioDSP::complex_vector< double > *arg2 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__mul__",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__mul__",2,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___mul",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___mul",2,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP_complex_vector_Sl_DspFloatType_Sg____mul____SWIG_0(arg1,(AudioDSP::complex_vector< double > const &)*arg2);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  AudioDSP::complex_vector< double > *arg2 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__div__",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__div__",2,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___div",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___div",2,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP_complex_vector_Sl_DspFloatType_Sg____div____SWIG_0(arg1,(AudioDSP::complex_vector< double > const &)*arg2);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  AudioDSP::complex_vector< double > *arg2 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__pow__",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__pow__",2,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___pow",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___pow",2,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP_complex_vector_Sl_DspFloatType_Sg____pow____SWIG_0(arg1,(AudioDSP::complex_vector< double > const &)*arg2);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  double arg2 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__add__",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__add__",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___add",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP_complex_vector_Sl_DspFloatType_Sg____add____SWIG_1(arg1,arg2);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex_vector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_vector___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_vector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::complex_vector< DspFloatType >::__add__(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::complex_vector< DspFloatType >::__add__(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_vector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  double arg2 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__sub__",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__sub__",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___sub",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP_complex_vector_Sl_DspFloatType_Sg____sub____SWIG_1(arg1,arg2);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex_vector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_vector___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_vector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::complex_vector< DspFloatType >::__sub__(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::complex_vector< DspFloatType >::__sub__(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_vector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  double arg2 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__mul__",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__mul__",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___mul",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP_complex_vector_Sl_DspFloatType_Sg____mul____SWIG_1(arg1,arg2);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex_vector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_vector___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_vector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::complex_vector< DspFloatType >::__mul__(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::complex_vector< DspFloatType >::__mul__(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_vector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  double arg2 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__div__",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__div__",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___div",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP_complex_vector_Sl_DspFloatType_Sg____div____SWIG_1(arg1,arg2);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex_vector___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_vector___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_vector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::complex_vector< DspFloatType >::__div__(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::complex_vector< DspFloatType >::__div__(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_vector___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  double arg2 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__pow__",1,"AudioDSP::complex_vector< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__pow__",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___pow",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP_complex_vector_Sl_DspFloatType_Sg____pow____SWIG_1(arg1,arg2);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_vector___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex_vector___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_vector___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_vector___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::complex_vector< DspFloatType >::__pow__(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::complex_vector< DspFloatType >::__pow__(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_vector___unm(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_vector< DspFloatType >::__neg__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_vector< DspFloatType >::__neg__",1,"AudioDSP::complex_vector< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("complex_vector___unm",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP_complex_vector_Sl_DspFloatType_Sg____neg____SWIG(arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_complex_vector(void *obj) {
AudioDSP::complex_vector< DspFloatType > *arg1 = (AudioDSP::complex_vector< DspFloatType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_complex_vector_methods[]= {
    { "size", _wrap_complex_vector_size},
    { "resize", _wrap_complex_vector_resize},
    { "max_size", _wrap_complex_vector_max_size},
    { "capacity", _wrap_complex_vector_capacity},
    { "empty", _wrap_complex_vector_empty},
    { "reserve", _wrap_complex_vector_reserve},
    { "shrink_to_fit", _wrap_complex_vector_shrink_to_fit},
    { "at", _wrap_complex_vector_at},
    { "front", _wrap_complex_vector_front},
    { "back", _wrap_complex_vector_back},
    { "assign", _wrap_complex_vector_assign},
    { "push_back", _wrap_complex_vector_push_back},
    { "pop_back", _wrap_complex_vector_pop_back},
    { "erase", _wrap_complex_vector_erase},
    { "swap", _wrap_complex_vector_swap},
    { "clear", _wrap_complex_vector_clear},
    { "fill", _wrap_complex_vector_fill},
    { "print", _wrap_complex_vector_print},
    { "copy", _wrap_complex_vector_copy},
    { "__getitem", _wrap_complex_vector___getitem},
    { "__setitem", _wrap_complex_vector___setitem},
    { "data", _wrap_complex_vector_data},
    { "__add", _wrap_complex_vector___add},
    { "__sub", _wrap_complex_vector___sub},
    { "__mul", _wrap_complex_vector___mul},
    { "__div", _wrap_complex_vector___div},
    { "__pow", _wrap_complex_vector___pow},
    { "__unm", _wrap_complex_vector___unm},
    {0,0}
};
static swig_lua_method swig_complex_vector_meta[] = {
    { "__getitem", _wrap_complex_vector___getitem},
    { "__setitem", _wrap_complex_vector___setitem},
    { "__add", _wrap_complex_vector___add},
    { "__sub", _wrap_complex_vector___sub},
    { "__mul", _wrap_complex_vector___mul},
    { "__div", _wrap_complex_vector___div},
    { "__pow", _wrap_complex_vector___pow},
    { "__unm", _wrap_complex_vector___unm},
    {0,0}
};

static swig_lua_attribute swig_complex_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex_vector_Sf_SwigStatic = {
    "complex_vector",
    swig_complex_vector_Sf_SwigStatic_methods,
    swig_complex_vector_Sf_SwigStatic_attributes,
    swig_complex_vector_Sf_SwigStatic_constants,
    swig_complex_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex_vector_bases[] = {0};
static const char *swig_complex_vector_base_names[] = {0};
static swig_lua_class _wrap_class_complex_vector = { "complex_vector", "complex_vector", &SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,_proxy__wrap_new_complex_vector, swig_delete_complex_vector, swig_complex_vector_methods, swig_complex_vector_attributes, &swig_complex_vector_Sf_SwigStatic, swig_complex_vector_meta, swig_complex_vector_bases, swig_complex_vector_base_names };

static int _wrap_sample_matrix_M_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::M",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_M_set",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_M_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::M",1,"AudioDSP::sample_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_M_get",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_N_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::N",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_N_set",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_N_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::N",1,"AudioDSP::sample_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_N_get",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sample_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::sample_matrix",0,0)
  result = (AudioDSP::sample_matrix< DspFloatType > *)new AudioDSP::sample_matrix< DspFloatType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sample_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  AudioDSP::sample_matrix< DspFloatType > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::sample_matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::sample_matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::sample_matrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (AudioDSP::sample_matrix< DspFloatType > *)new AudioDSP::sample_matrix< DspFloatType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sample_matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_sample_matrix__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_sample_matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sample_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sample_matrix< DspFloatType >::sample_matrix()\n"
    "    AudioDSP::sample_matrix< DspFloatType >::sample_matrix(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_sample_matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::size",1,"AudioDSP::sample_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_size",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_resize__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::resize",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_resize",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_max_size(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::max_size",1,"AudioDSP::sample_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_max_size",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_capacity(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::capacity",1,"AudioDSP::sample_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_capacity",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::empty",1,"AudioDSP::sample_matrix< DspFloatType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_empty",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = (bool)((AudioDSP::sample_matrix< DspFloatType > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_reserve(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::reserve",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_reserve",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::shrink_to_fit",1,"AudioDSP::sample_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_shrink_to_fit",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::at",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_at",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_front(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::front",1,"AudioDSP::sample_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_front",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_back(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::back",1,"AudioDSP::sample_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_back",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::data",1,"AudioDSP::sample_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_data",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_assign(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::assign",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::assign",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_assign",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::push_back",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::push_back",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_push_back",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::pop_back",1,"AudioDSP::sample_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_pop_back",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_erase_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::erase",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_erase",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  AudioDSP_sample_matrix_Sl_DspFloatType_Sg__erase_SWIG_0_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_erase_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::erase",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_erase",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  AudioDSP_sample_matrix_Sl_DspFloatType_Sg__erase_SWIG_0_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_sample_matrix_erase_SWIG_0_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_sample_matrix_erase_SWIG_0_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sample_matrix_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sample_matrix< DspFloatType >::erase(size_t)\n"
    "    AudioDSP::sample_matrix< DspFloatType >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_sample_matrix_swap(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  std::vector< double,Allocator::aligned_allocator< double,64 > > *arg2 = 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::swap",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::swap",2,"std::vector< double,Allocator::aligned_allocator< double,64 > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_swap",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,0))){
    SWIG_fail_ptr("sample_matrix_swap",2,SWIGTYPE_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::clear",1,"AudioDSP::sample_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_clear",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix___call__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::operator ()",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___call",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix___call__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::operator ()",1,"AudioDSP::sample_matrix< DspFloatType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___call",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (double)((AudioDSP::sample_matrix< DspFloatType > const *)arg1)->operator ()(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix___call(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_sample_matrix___call__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_sample_matrix___call__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sample_matrix___call'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sample_matrix< DspFloatType >::operator ()(size_t,size_t)\n"
    "    AudioDSP::sample_matrix< DspFloatType >::operator ()(size_t,size_t) const\n");
  lua_error(L);return 0;
}


static int _wrap_sample_matrix___getitem(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< AudioDSP::sample_matrix_view< double > > result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__getitem__",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___getitem",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = AudioDSP_sample_matrix_Sl_DspFloatType_Sg____getitem____SWIG(arg1,arg2);
  {
    AudioDSP::sample_matrix_view< double > * resultptr = new AudioDSP::sample_matrix_view< double >((const AudioDSP::sample_matrix_view< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrix_viewT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__add__",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__add__",2,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___add",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___add",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP_sample_matrix_Sl_DspFloatType_Sg____add____SWIG_0(arg1,(AudioDSP::sample_matrix< double > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__sub__",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__sub__",2,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___sub",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___sub",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP_sample_matrix_Sl_DspFloatType_Sg____sub____SWIG_0(arg1,(AudioDSP::sample_matrix< double > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__mul__",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__mul__",2,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___mul",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___mul",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP_sample_matrix_Sl_DspFloatType_Sg____mul____SWIG_0(arg1,(AudioDSP::sample_matrix< double > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__div__",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__div__",2,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___div",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___div",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP_sample_matrix_Sl_DspFloatType_Sg____div____SWIG_0(arg1,(AudioDSP::sample_matrix< double > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__pow__",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__pow__",2,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___pow",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___pow",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP_sample_matrix_Sl_DspFloatType_Sg____pow____SWIG_0(arg1,(AudioDSP::sample_matrix< double > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__add__",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__add__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___add",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = AudioDSP_sample_matrix_Sl_DspFloatType_Sg____add____SWIG_1(arg1,(double const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_sample_matrix___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_sample_matrix___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sample_matrix___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sample_matrix< DspFloatType >::__add__(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::sample_matrix< DspFloatType >::__add__(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sample_matrix___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__sub__",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__sub__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___sub",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = AudioDSP_sample_matrix_Sl_DspFloatType_Sg____sub____SWIG_1(arg1,(double const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_sample_matrix___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_sample_matrix___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sample_matrix___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sample_matrix< DspFloatType >::__sub__(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::sample_matrix< DspFloatType >::__sub__(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sample_matrix___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__mul__",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__mul__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___mul",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = AudioDSP_sample_matrix_Sl_DspFloatType_Sg____mul____SWIG_1(arg1,(double const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_sample_matrix___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_sample_matrix___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sample_matrix___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sample_matrix< DspFloatType >::__mul__(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::sample_matrix< DspFloatType >::__mul__(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sample_matrix___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__div__",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__div__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___div",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = AudioDSP_sample_matrix_Sl_DspFloatType_Sg____div____SWIG_1(arg1,(double const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_sample_matrix___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_sample_matrix___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sample_matrix___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sample_matrix< DspFloatType >::__div__(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::sample_matrix< DspFloatType >::__div__(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sample_matrix___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__pow__",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__pow__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___pow",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = AudioDSP_sample_matrix_Sl_DspFloatType_Sg____pow____SWIG_1(arg1,(double const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_sample_matrix___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_sample_matrix___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sample_matrix___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sample_matrix< DspFloatType >::__pow__(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::sample_matrix< DspFloatType >::__pow__(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sample_matrix___unm(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::__neg__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::__neg__",1,"AudioDSP::sample_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix___unm",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP_sample_matrix_Sl_DspFloatType_Sg____neg____SWIG(arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::rows",1,"AudioDSP::sample_matrix< DspFloatType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_rows",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = ((AudioDSP::sample_matrix< DspFloatType > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::cols",1,"AudioDSP::sample_matrix< DspFloatType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_cols",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = ((AudioDSP::sample_matrix< DspFloatType > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::resize",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_resize",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_sample_matrix_resize__SWIG_0_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_sample_matrix_resize__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sample_matrix_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sample_matrix< DspFloatType >::resize(size_t)\n"
    "    AudioDSP::sample_matrix< DspFloatType >::resize(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_sample_matrix_fill(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::fill",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::fill",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_fill",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_print(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::print",1,"AudioDSP::sample_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_print",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sample_matrix_copy(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("AudioDSP::sample_matrix< DspFloatType >::copy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::copy",1,"AudioDSP::sample_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::copy",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::copy",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("AudioDSP::sample_matrix< DspFloatType >::copy",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sample_matrix_copy",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("sample_matrix_copy",4,SWIGTYPE_p_double);
  }
  
  (arg1)->copy(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_sample_matrix(void *obj) {
AudioDSP::sample_matrix< DspFloatType > *arg1 = (AudioDSP::sample_matrix< DspFloatType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sample_matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sample_matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sample_matrix_attributes[] = {
    { "M", _wrap_sample_matrix_M_get, _wrap_sample_matrix_M_set },
    { "N", _wrap_sample_matrix_N_get, _wrap_sample_matrix_N_set },
    {0,0,0}
};
static swig_lua_method swig_sample_matrix_methods[]= {
    { "size", _wrap_sample_matrix_size},
    { "max_size", _wrap_sample_matrix_max_size},
    { "capacity", _wrap_sample_matrix_capacity},
    { "empty", _wrap_sample_matrix_empty},
    { "reserve", _wrap_sample_matrix_reserve},
    { "shrink_to_fit", _wrap_sample_matrix_shrink_to_fit},
    { "at", _wrap_sample_matrix_at},
    { "front", _wrap_sample_matrix_front},
    { "back", _wrap_sample_matrix_back},
    { "data", _wrap_sample_matrix_data},
    { "assign", _wrap_sample_matrix_assign},
    { "push_back", _wrap_sample_matrix_push_back},
    { "pop_back", _wrap_sample_matrix_pop_back},
    { "erase", _wrap_sample_matrix_erase},
    { "swap", _wrap_sample_matrix_swap},
    { "clear", _wrap_sample_matrix_clear},
    { "__call", _wrap_sample_matrix___call},
    { "__getitem", _wrap_sample_matrix___getitem},
    { "__add", _wrap_sample_matrix___add},
    { "__sub", _wrap_sample_matrix___sub},
    { "__mul", _wrap_sample_matrix___mul},
    { "__div", _wrap_sample_matrix___div},
    { "__pow", _wrap_sample_matrix___pow},
    { "__unm", _wrap_sample_matrix___unm},
    { "rows", _wrap_sample_matrix_rows},
    { "cols", _wrap_sample_matrix_cols},
    { "resize", _wrap_sample_matrix_resize},
    { "fill", _wrap_sample_matrix_fill},
    { "print", _wrap_sample_matrix_print},
    { "copy", _wrap_sample_matrix_copy},
    {0,0}
};
static swig_lua_method swig_sample_matrix_meta[] = {
    { "__call", _wrap_sample_matrix___call},
    { "__getitem", _wrap_sample_matrix___getitem},
    { "__add", _wrap_sample_matrix___add},
    { "__sub", _wrap_sample_matrix___sub},
    { "__mul", _wrap_sample_matrix___mul},
    { "__div", _wrap_sample_matrix___div},
    { "__pow", _wrap_sample_matrix___pow},
    { "__unm", _wrap_sample_matrix___unm},
    {0,0}
};

static swig_lua_attribute swig_sample_matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sample_matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sample_matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sample_matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sample_matrix_Sf_SwigStatic = {
    "sample_matrix",
    swig_sample_matrix_Sf_SwigStatic_methods,
    swig_sample_matrix_Sf_SwigStatic_attributes,
    swig_sample_matrix_Sf_SwigStatic_constants,
    swig_sample_matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sample_matrix_bases[] = {0,0};
static const char *swig_sample_matrix_base_names[] = {"std::vector< double,Allocator::aligned_allocator< double,64 > > *",0};
static swig_lua_class _wrap_class_sample_matrix = { "sample_matrix", "sample_matrix", &SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,_proxy__wrap_new_sample_matrix, swig_delete_sample_matrix, swig_sample_matrix_methods, swig_sample_matrix_attributes, &swig_sample_matrix_Sf_SwigStatic, swig_sample_matrix_meta, swig_sample_matrix_bases, swig_sample_matrix_base_names };

static int _wrap_complex_matrix_M_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::M",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::M",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::M",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_M_set",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->M = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_M_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::M",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::M",1,"AudioDSP::complex_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_M_get",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result =  ((arg1)->M);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_N_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::N",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::N",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::N",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_N_set",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->N = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_N_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::N",1,"AudioDSP::complex_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_N_get",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result =  ((arg1)->N);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::complex_matrix",0,0)
  result = (AudioDSP::complex_matrix< DspFloatType > *)new AudioDSP::complex_matrix< DspFloatType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  AudioDSP::complex_matrix< DspFloatType > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::complex_matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::complex_matrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::complex_matrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (AudioDSP::complex_matrix< DspFloatType > *)new AudioDSP::complex_matrix< DspFloatType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_complex_matrix__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_complex_matrix__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex_matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::complex_matrix< DspFloatType >::complex_matrix()\n"
    "    AudioDSP::complex_matrix< DspFloatType >::complex_matrix(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_matrix_size(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::size",1,"AudioDSP::complex_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_size",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_resize__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::resize",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_resize",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_max_size(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::max_size",1,"AudioDSP::complex_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_max_size",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_capacity(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::capacity",1,"AudioDSP::complex_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_capacity",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_empty(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::empty",1,"AudioDSP::complex_matrix< DspFloatType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_empty",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = (bool)((AudioDSP::complex_matrix< DspFloatType > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_reserve(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::reserve",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_reserve",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::shrink_to_fit",1,"AudioDSP::complex_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_shrink_to_fit",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_at(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::at",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_at",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< double > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_front(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::front",1,"AudioDSP::complex_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_front",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = (std::complex< double > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_back(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::back",1,"AudioDSP::complex_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_back",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = (std::complex< double > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_data(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::data",1,"AudioDSP::complex_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_data",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = (std::complex< double > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_assign(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  std::complex< double > *arg3 = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::assign",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::assign",3,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_assign",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_assign",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->assign(arg2,(std::complex< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_push_back(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::push_back",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::push_back",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_push_back",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_push_back",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->push_back((std::complex< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::pop_back",1,"AudioDSP::complex_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_pop_back",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_erase_SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::erase",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_erase",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  AudioDSP_complex_matrix_Sl_DspFloatType_Sg__erase_SWIG_0_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_erase_SWIG_0_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::erase",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_erase",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  AudioDSP_complex_matrix_Sl_DspFloatType_Sg__erase_SWIG_0_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_matrix_erase_SWIG_0_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_matrix_erase_SWIG_0_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_matrix_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::complex_matrix< DspFloatType >::erase(size_t)\n"
    "    AudioDSP::complex_matrix< DspFloatType >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_matrix_swap(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  std::vector< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > *arg2 = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::swap",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::swap",2,"std::vector< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_swap",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,0))){
    SWIG_fail_ptr("complex_matrix_swap",2,SWIGTYPE_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_clear(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::clear",1,"AudioDSP::complex_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_clear",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix___call__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::operator ()",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___call",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (std::complex< double > *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix___call__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::complex< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::operator ()",1,"AudioDSP::complex_matrix< DspFloatType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___call",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = ((AudioDSP::complex_matrix< DspFloatType > const *)arg1)->operator ()(arg2,arg3);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix___call(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_matrix___call__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_matrix___call__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_matrix___call'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::complex_matrix< DspFloatType >::operator ()(size_t,size_t)\n"
    "    AudioDSP::complex_matrix< DspFloatType >::operator ()(size_t,size_t) const\n");
  lua_error(L);return 0;
}


static int _wrap_complex_matrix_rows(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::rows",1,"AudioDSP::complex_matrix< DspFloatType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_rows",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = ((AudioDSP::complex_matrix< DspFloatType > const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_cols(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::cols",1,"AudioDSP::complex_matrix< DspFloatType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_cols",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = ((AudioDSP::complex_matrix< DspFloatType > const *)arg1)->cols();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::resize",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_resize",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_matrix_resize__SWIG_0_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_matrix_resize__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_matrix_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::complex_matrix< DspFloatType >::resize(size_t)\n"
    "    AudioDSP::complex_matrix< DspFloatType >::resize(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_matrix_copy(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::complex< double > *arg4 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::copy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::copy",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::copy",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::copy",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::copy",4,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_copy",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_copy",4,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->copy(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  AudioDSP::complex_matrix< double > *arg2 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__add__",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__add__",2,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___add",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___add",2,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP_complex_matrix_Sl_DspFloatType_Sg____add____SWIG_0(arg1,(AudioDSP::complex_matrix< double > const &)*arg2);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  AudioDSP::complex_matrix< double > *arg2 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__sub__",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__sub__",2,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___sub",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___sub",2,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP_complex_matrix_Sl_DspFloatType_Sg____sub____SWIG_0(arg1,(AudioDSP::complex_matrix< double > const &)*arg2);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  AudioDSP::complex_matrix< double > *arg2 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__mul__",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__mul__",2,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___mul",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___mul",2,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP_complex_matrix_Sl_DspFloatType_Sg____mul____SWIG_0(arg1,(AudioDSP::complex_matrix< double > const &)*arg2);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  AudioDSP::complex_matrix< double > *arg2 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__div__",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__div__",2,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___div",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___div",2,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP_complex_matrix_Sl_DspFloatType_Sg____div____SWIG_0(arg1,(AudioDSP::complex_matrix< double > const &)*arg2);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  AudioDSP::complex_matrix< double > *arg2 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__pow__",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__pow__",2,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___pow",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___pow",2,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP_complex_matrix_Sl_DspFloatType_Sg____pow____SWIG_0(arg1,(AudioDSP::complex_matrix< double > const &)*arg2);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__add__",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__add__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___add",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = AudioDSP_complex_matrix_Sl_DspFloatType_Sg____add____SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex_matrix___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex_matrix___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_matrix___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::complex_matrix< DspFloatType >::__add__(AudioDSP::complex_matrix< double > const &)\n"
    "    AudioDSP::complex_matrix< DspFloatType >::__add__(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_matrix___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__sub__",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__sub__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___sub",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = AudioDSP_complex_matrix_Sl_DspFloatType_Sg____sub____SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex_matrix___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex_matrix___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_matrix___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::complex_matrix< DspFloatType >::__sub__(AudioDSP::complex_matrix< double > const &)\n"
    "    AudioDSP::complex_matrix< DspFloatType >::__sub__(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_matrix___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__mul__",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__mul__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___mul",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = AudioDSP_complex_matrix_Sl_DspFloatType_Sg____mul____SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex_matrix___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex_matrix___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_matrix___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::complex_matrix< DspFloatType >::__mul__(AudioDSP::complex_matrix< double > const &)\n"
    "    AudioDSP::complex_matrix< DspFloatType >::__mul__(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_matrix___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__div__",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__div__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___div",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = AudioDSP_complex_matrix_Sl_DspFloatType_Sg____div____SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex_matrix___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex_matrix___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_matrix___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::complex_matrix< DspFloatType >::__div__(AudioDSP::complex_matrix< double > const &)\n"
    "    AudioDSP::complex_matrix< DspFloatType >::__div__(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_matrix___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__pow__",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__pow__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___pow",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___pow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = AudioDSP_complex_matrix_Sl_DspFloatType_Sg____pow____SWIG_1(arg1,(std::complex< double > const &)*arg2);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex_matrix___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex_matrix___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_matrix___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::complex_matrix< DspFloatType >::__pow__(AudioDSP::complex_matrix< double > const &)\n"
    "    AudioDSP::complex_matrix< DspFloatType >::__pow__(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_matrix___unm(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::__neg__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::__neg__",1,"AudioDSP::complex_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix___unm",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP_complex_matrix_Sl_DspFloatType_Sg____neg____SWIG(arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_fill(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::fill",1,"AudioDSP::complex_matrix< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::fill",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_fill",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_fill",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->fill((std::complex< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_matrix_print(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) 0 ;
  
  SWIG_check_num_args("AudioDSP::complex_matrix< DspFloatType >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::complex_matrix< DspFloatType >::print",1,"AudioDSP::complex_matrix< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("complex_matrix_print",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_complex_matrix(void *obj) {
AudioDSP::complex_matrix< DspFloatType > *arg1 = (AudioDSP::complex_matrix< DspFloatType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex_matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex_matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex_matrix_attributes[] = {
    { "M", _wrap_complex_matrix_M_get, _wrap_complex_matrix_M_set },
    { "N", _wrap_complex_matrix_N_get, _wrap_complex_matrix_N_set },
    {0,0,0}
};
static swig_lua_method swig_complex_matrix_methods[]= {
    { "size", _wrap_complex_matrix_size},
    { "max_size", _wrap_complex_matrix_max_size},
    { "capacity", _wrap_complex_matrix_capacity},
    { "empty", _wrap_complex_matrix_empty},
    { "reserve", _wrap_complex_matrix_reserve},
    { "shrink_to_fit", _wrap_complex_matrix_shrink_to_fit},
    { "at", _wrap_complex_matrix_at},
    { "front", _wrap_complex_matrix_front},
    { "back", _wrap_complex_matrix_back},
    { "data", _wrap_complex_matrix_data},
    { "assign", _wrap_complex_matrix_assign},
    { "push_back", _wrap_complex_matrix_push_back},
    { "pop_back", _wrap_complex_matrix_pop_back},
    { "erase", _wrap_complex_matrix_erase},
    { "swap", _wrap_complex_matrix_swap},
    { "clear", _wrap_complex_matrix_clear},
    { "__call", _wrap_complex_matrix___call},
    { "rows", _wrap_complex_matrix_rows},
    { "cols", _wrap_complex_matrix_cols},
    { "resize", _wrap_complex_matrix_resize},
    { "copy", _wrap_complex_matrix_copy},
    { "__add", _wrap_complex_matrix___add},
    { "__sub", _wrap_complex_matrix___sub},
    { "__mul", _wrap_complex_matrix___mul},
    { "__div", _wrap_complex_matrix___div},
    { "__pow", _wrap_complex_matrix___pow},
    { "__unm", _wrap_complex_matrix___unm},
    { "fill", _wrap_complex_matrix_fill},
    { "print", _wrap_complex_matrix_print},
    {0,0}
};
static swig_lua_method swig_complex_matrix_meta[] = {
    { "__call", _wrap_complex_matrix___call},
    { "__add", _wrap_complex_matrix___add},
    { "__sub", _wrap_complex_matrix___sub},
    { "__mul", _wrap_complex_matrix___mul},
    { "__div", _wrap_complex_matrix___div},
    { "__pow", _wrap_complex_matrix___pow},
    { "__unm", _wrap_complex_matrix___unm},
    {0,0}
};

static swig_lua_attribute swig_complex_matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex_matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex_matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex_matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex_matrix_Sf_SwigStatic = {
    "complex_matrix",
    swig_complex_matrix_Sf_SwigStatic_methods,
    swig_complex_matrix_Sf_SwigStatic_attributes,
    swig_complex_matrix_Sf_SwigStatic_constants,
    swig_complex_matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex_matrix_bases[] = {0};
static const char *swig_complex_matrix_base_names[] = {0};
static swig_lua_class _wrap_class_complex_matrix = { "complex_matrix", "complex_matrix", &SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,_proxy__wrap_new_complex_matrix, swig_delete_complex_matrix, swig_complex_matrix_methods, swig_complex_matrix_attributes, &swig_complex_matrix_Sf_SwigStatic, swig_complex_matrix_meta, swig_complex_matrix_bases, swig_complex_matrix_base_names };

static int _wrap_window_type_set(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::Window< DspFloatType > *arg1 = (AudioDSP::Window< DspFloatType > *) 0 ;
  enum AudioDSP::Window< double >::WindowType arg2 ;
  
  SWIG_check_num_args("AudioDSP::Window< DspFloatType >::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::type",1,"AudioDSP::Window< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::type",2,"enum AudioDSP::Window< double >::WindowType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__WindowT_double_t,0))){
    SWIG_fail_ptr("window_type_set",1,SWIGTYPE_p_AudioDSP__WindowT_double_t);
  }
  
  arg2 = (enum AudioDSP::Window< double >::WindowType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_type_get(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::Window< DspFloatType > *arg1 = (AudioDSP::Window< DspFloatType > *) 0 ;
  enum AudioDSP::Window< double >::WindowType result;
  
  SWIG_check_num_args("AudioDSP::Window< DspFloatType >::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::type",1,"AudioDSP::Window< DspFloatType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__WindowT_double_t,0))){
    SWIG_fail_ptr("window_type_get",1,SWIGTYPE_p_AudioDSP__WindowT_double_t);
  }
  
  result = (enum AudioDSP::Window< double >::WindowType) ((arg1)->type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_window__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::Window< DspFloatType > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::Window< DspFloatType >::Window",0,0)
  result = (AudioDSP::Window< DspFloatType > *)new AudioDSP::Window< DspFloatType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__WindowT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_window__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< enum AudioDSP::Window< DspFloatType >::WindowType > arg1 ;
  size_t arg2 ;
  AudioDSP::Window< DspFloatType > *result = 0 ;
  
  SWIG_check_num_args("AudioDSP::Window< DspFloatType >::Window",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::Window",1,"AudioDSP::Window< double >::WindowType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::Window",2,"size_t");
  arg1 = (AudioDSP::Window< double >::WindowType)(int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (AudioDSP::Window< DspFloatType > *)new AudioDSP::Window< DspFloatType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AudioDSP__WindowT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_window(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_window__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_window__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_window'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::Window< DspFloatType >::Window()\n"
    "    AudioDSP::Window< DspFloatType >::Window(AudioDSP::Window< double >::WindowType,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_make_window(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::Window< DspFloatType > *arg1 = (AudioDSP::Window< DspFloatType > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< enum AudioDSP::Window< DspFloatType >::WindowType > arg3 ;
  
  SWIG_check_num_args("AudioDSP::Window< DspFloatType >::make_window",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::make_window",1,"AudioDSP::Window< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::make_window",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::make_window",3,"AudioDSP::Window< double >::WindowType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__WindowT_double_t,0))){
    SWIG_fail_ptr("window_make_window",1,SWIGTYPE_p_AudioDSP__WindowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (AudioDSP::Window< double >::WindowType)(int)lua_tonumber(L, 3);
  (arg1)->make_window(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_rectangle(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::Window< DspFloatType > *arg1 = (AudioDSP::Window< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::Window< DspFloatType >::rectangle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::rectangle",1,"AudioDSP::Window< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::rectangle",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__WindowT_double_t,0))){
    SWIG_fail_ptr("window_rectangle",1,SWIGTYPE_p_AudioDSP__WindowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->rectangle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_hamming(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::Window< DspFloatType > *arg1 = (AudioDSP::Window< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::Window< DspFloatType >::hamming",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::hamming",1,"AudioDSP::Window< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::hamming",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__WindowT_double_t,0))){
    SWIG_fail_ptr("window_hamming",1,SWIGTYPE_p_AudioDSP__WindowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->hamming(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_hanning(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::Window< DspFloatType > *arg1 = (AudioDSP::Window< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::Window< DspFloatType >::hanning",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::hanning",1,"AudioDSP::Window< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::hanning",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__WindowT_double_t,0))){
    SWIG_fail_ptr("window_hanning",1,SWIGTYPE_p_AudioDSP__WindowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->hanning(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::Window< DspFloatType > *arg1 = (AudioDSP::Window< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::Window< DspFloatType >::blackman",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::blackman",1,"AudioDSP::Window< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::blackman",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__WindowT_double_t,0))){
    SWIG_fail_ptr("window_blackman",1,SWIGTYPE_p_AudioDSP__WindowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->blackman(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackmanharris(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::Window< DspFloatType > *arg1 = (AudioDSP::Window< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::Window< DspFloatType >::blackmanharris",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::blackmanharris",1,"AudioDSP::Window< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::blackmanharris",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__WindowT_double_t,0))){
    SWIG_fail_ptr("window_blackmanharris",1,SWIGTYPE_p_AudioDSP__WindowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->blackmanharris(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussian(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::Window< DspFloatType > *arg1 = (AudioDSP::Window< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::Window< DspFloatType >::gaussian",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::gaussian",1,"AudioDSP::Window< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::gaussian",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__WindowT_double_t,0))){
    SWIG_fail_ptr("window_gaussian",1,SWIGTYPE_p_AudioDSP__WindowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->gaussian(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_welch(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::Window< DspFloatType > *arg1 = (AudioDSP::Window< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::Window< DspFloatType >::welch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::welch",1,"AudioDSP::Window< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::welch",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__WindowT_double_t,0))){
    SWIG_fail_ptr("window_welch",1,SWIGTYPE_p_AudioDSP__WindowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->welch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_parzen(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::Window< DspFloatType > *arg1 = (AudioDSP::Window< DspFloatType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("AudioDSP::Window< DspFloatType >::parzen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::parzen",1,"AudioDSP::Window< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::parzen",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__WindowT_double_t,0))){
    SWIG_fail_ptr("window_parzen",1,SWIGTYPE_p_AudioDSP__WindowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->parzen(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_tukey(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::Window< DspFloatType > *arg1 = (AudioDSP::Window< DspFloatType > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("AudioDSP::Window< DspFloatType >::tukey",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::tukey",1,"AudioDSP::Window< DspFloatType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::tukey",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::tukey",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__WindowT_double_t,0))){
    SWIG_fail_ptr("window_tukey",1,SWIGTYPE_p_AudioDSP__WindowT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->tukey(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window___mul(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::Window< DspFloatType > *arg1 = (AudioDSP::Window< DspFloatType > *) 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::Window< DspFloatType >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::__mul__",1,"AudioDSP::Window< DspFloatType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::Window< DspFloatType >::__mul__",2,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__WindowT_double_t,0))){
    SWIG_fail_ptr("window___mul",1,SWIGTYPE_p_AudioDSP__WindowT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("window___mul",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP_Window_Sl_DspFloatType_Sg____mul____SWIG(arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_window(void *obj) {
AudioDSP::Window< DspFloatType > *arg1 = (AudioDSP::Window< DspFloatType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_window(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_window);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_window_attributes[] = {
    { "type", _wrap_window_type_get, _wrap_window_type_set },
    {0,0,0}
};
static swig_lua_method swig_window_methods[]= {
    { "make_window", _wrap_window_make_window},
    { "rectangle", _wrap_window_rectangle},
    { "hamming", _wrap_window_hamming},
    { "hanning", _wrap_window_hanning},
    { "blackman", _wrap_window_blackman},
    { "blackmanharris", _wrap_window_blackmanharris},
    { "gaussian", _wrap_window_gaussian},
    { "welch", _wrap_window_welch},
    { "parzen", _wrap_window_parzen},
    { "tukey", _wrap_window_tukey},
    { "__mul", _wrap_window___mul},
    {0,0}
};
static swig_lua_method swig_window_meta[] = {
    { "__mul", _wrap_window___mul},
    {0,0}
};

static swig_lua_attribute swig_window_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_window_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("RECTANGLE", AudioDSP::Window< DspFloatType >::RECTANGLE)},
    {SWIG_LUA_CONSTTAB_INT("HANNING", AudioDSP::Window< DspFloatType >::HANNING)},
    {SWIG_LUA_CONSTTAB_INT("HAMMING", AudioDSP::Window< DspFloatType >::HAMMING)},
    {SWIG_LUA_CONSTTAB_INT("BLACKMAN", AudioDSP::Window< DspFloatType >::BLACKMAN)},
    {SWIG_LUA_CONSTTAB_INT("BLACKMANHARRIS", AudioDSP::Window< DspFloatType >::BLACKMANHARRIS)},
    {SWIG_LUA_CONSTTAB_INT("GAUSSIAN", AudioDSP::Window< DspFloatType >::GAUSSIAN)},
    {SWIG_LUA_CONSTTAB_INT("WELCH", AudioDSP::Window< DspFloatType >::WELCH)},
    {SWIG_LUA_CONSTTAB_INT("PARZEN", AudioDSP::Window< DspFloatType >::PARZEN)},
    {SWIG_LUA_CONSTTAB_INT("TUKEY", AudioDSP::Window< DspFloatType >::TUKEY)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_window_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_window_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_window_Sf_SwigStatic = {
    "window",
    swig_window_Sf_SwigStatic_methods,
    swig_window_Sf_SwigStatic_attributes,
    swig_window_Sf_SwigStatic_constants,
    swig_window_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_window_bases[] = {0,0};
static const char *swig_window_base_names[] = {"AudioDSP::sample_vector< DspFloatType > *",0};
static swig_lua_class _wrap_class_window = { "window", "window", &SWIGTYPE_p_AudioDSP__WindowT_double_t,_proxy__wrap_new_window, swig_delete_window, swig_window_methods, swig_window_attributes, &swig_window_Sf_SwigStatic, swig_window_meta, swig_window_bases, swig_window_base_names };

static int _wrap_cube__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::cube< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::cube< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("cube",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR cube< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cube__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::cube< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::cube< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("cube",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR cube< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cube__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::cube< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::cube< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("cube",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR cube< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cube__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::cube< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::cube< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("cube",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR cube< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cube(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cube__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cube__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cube__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cube__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cube'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::cube< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::cube< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::cube< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::cube< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sqr__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sqr< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::sqr< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sqr",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR sqr< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqr__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sqr< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::sqr< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sqr",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR sqr< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqr__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sqr< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::sqr< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("sqr",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR sqr< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqr__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sqr< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::sqr< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("sqr",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR sqr< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqr__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqr__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqr__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqr__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sqr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sqr< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::sqr< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::sqr< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::sqr< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sqrt__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sqrt< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::sqrt< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sqrt",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR sqrt< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrt__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sqrt< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::sqrt< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sqrt",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR sqrt< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrt__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sqrt< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::sqrt< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("sqrt",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR sqrt< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrt__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sqrt< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::sqrt< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("sqrt",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR sqrt< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrt(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrt__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrt__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrt__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrt__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sqrt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sqrt< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::sqrt< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::sqrt< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::sqrt< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_exp__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::exp< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::exp< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("exp",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR exp< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::exp< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::exp< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("exp",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR exp< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::exp< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::exp< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("exp",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR exp< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::exp< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::exp< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("exp",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR exp< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_exp__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_exp__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_exp__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_exp__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'exp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::exp< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::exp< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::exp< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::exp< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_exp2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::exp2< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::exp2< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("exp2",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR exp2< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::exp2< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::exp2< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("exp2",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR exp2< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_exp2__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_exp2__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'exp2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::exp2< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::exp2< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_log__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::log< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::log< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("log",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR log< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::log< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::log< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("log",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR log< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::log< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::log< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("log",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR log< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::log< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::log< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("log",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR log< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'log'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::log< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::log< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::log< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::log< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_log10__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::log10< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::log10< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("log10",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR log10< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::log10< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::log10< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("log10",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR log10< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::log10< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::log10< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("log10",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR log10< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10__SWIG_5(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'log10'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::log10< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::log10< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::log10< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_log2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::log2< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::log2< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("log2",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR log2< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::log2< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::log2< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("log2",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR log2< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log2__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log2__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'log2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::log2< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::log2< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_logb__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::logb< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::logb< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("logb",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR logb< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logb__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::logb< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::logb< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("logb",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR logb< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logb(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logb__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logb__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'logb'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::logb< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::logb< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_pow__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::pow< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",2,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("pow",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("pow",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR pow< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  double arg2 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::pow< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("pow",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR pow< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::pow< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",1,"double const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",2,"AudioDSP::sample_vector< double > const &");
  arg1 = (double const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("pow",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR pow< DspFloatType >(arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::pow< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",2,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("pow",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("pow",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR pow< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,(AudioDSP::sample_matrix< double > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow__SWIG_16(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  double arg2 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::pow< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("pow",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR pow< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow__SWIG_17(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::pow< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",1,"double const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",2,"AudioDSP::sample_matrix< double > const &");
  arg1 = (double const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("pow",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR pow< DspFloatType >(arg1,(AudioDSP::sample_matrix< double > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow__SWIG_18(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > *arg2 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::pow< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",2,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("pow",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("pow",2,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR pow< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1,(AudioDSP::complex_vector< double > const &)*arg2);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow__SWIG_19(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  std::complex< double > arg2 ;
  std::complex< double > *argp2 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::pow< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",2,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("pow",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("pow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR pow< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1,arg2);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow__SWIG_20(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > arg1 ;
  AudioDSP::complex_vector< double > *arg2 = 0 ;
  std::complex< double > *argp1 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::pow< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",1,"std::complex< double > const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",2,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("pow",2,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR pow< DspFloatType >(arg1,(AudioDSP::complex_vector< double > const &)*arg2);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow__SWIG_21(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > *arg2 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::pow< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",2,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("pow",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("pow",2,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR pow< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1,(AudioDSP::complex_matrix< double > const &)*arg2);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow__SWIG_22(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  double arg2 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::pow< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("pow",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR pow< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1,arg2);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow__SWIG_23(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  AudioDSP::complex_matrix< double > *arg2 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::pow< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",1,"double const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::pow< DspFloatType >",2,"AudioDSP::complex_matrix< double > const &");
  arg1 = (double const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("pow",2,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR pow< DspFloatType >(arg1,(AudioDSP::complex_matrix< double > const &)*arg2);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_pow__SWIG_12(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_pow__SWIG_13(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_pow__SWIG_15(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_pow__SWIG_16(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_pow__SWIG_18(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_pow__SWIG_19(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_pow__SWIG_20(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_pow__SWIG_21(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_pow__SWIG_22(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_pow__SWIG_17(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_pow__SWIG_14(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_pow__SWIG_23(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::pow< DspFloatType >(AudioDSP::sample_vector< double > const &,AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::pow< DspFloatType >(AudioDSP::sample_vector< double > const &,double const)\n"
    "    AudioDSP::pow< DspFloatType >(double const,AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::pow< DspFloatType >(AudioDSP::sample_matrix< double > const &,AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::pow< DspFloatType >(AudioDSP::sample_matrix< double > const &,double const)\n"
    "    AudioDSP::pow< DspFloatType >(double const,AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::pow< DspFloatType >(AudioDSP::complex_vector< double > const &,AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::pow< DspFloatType >(AudioDSP::complex_vector< double > const &,std::complex< double > const)\n"
    "    AudioDSP::pow< DspFloatType >(std::complex< double > const,AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::pow< DspFloatType >(AudioDSP::complex_matrix< double > const &,AudioDSP::complex_matrix< double > const &)\n"
    "    AudioDSP::pow< DspFloatType >(AudioDSP::complex_matrix< double > const &,double const)\n"
    "    AudioDSP::pow< DspFloatType >(double const,AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_floor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::floor< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::floor< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("floor",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR floor< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floor__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::floor< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::floor< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("floor",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR floor< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floor(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floor__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floor__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'floor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::floor< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::floor< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_acos__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::acos< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::acos< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("acos",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR acos< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acos__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::acos< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::acos< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("acos",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR acos< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acos__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::acos< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::acos< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("acos",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR acos< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acos__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::acos< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::acos< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("acos",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR acos< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acos(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acos__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acos__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acos__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acos__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'acos'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::acos< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::acos< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::acos< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::acos< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_asin__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::asin< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::asin< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("asin",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR asin< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asin__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::asin< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::asin< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("asin",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR asin< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asin__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::asin< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::asin< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("asin",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR asin< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asin__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::asin< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::asin< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("asin",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR asin< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asin(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asin__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asin__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asin__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asin__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'asin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::asin< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::asin< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::asin< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::asin< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_atan__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::atan< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::atan< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("atan",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR atan< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::atan< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::atan< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("atan",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR atan< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::atan< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::atan< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("atan",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR atan< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::atan< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::atan< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("atan",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR atan< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atan__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atan__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atan__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atan__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atan'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::atan< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::atan< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::atan< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::atan< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_atan2__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  double arg2 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::atan2< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::atan2< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::atan2< DspFloatType >",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("atan2",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR atan2< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > arg2 ;
  AudioDSP::sample_vector< double > *argp2 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::atan2< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::atan2< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::atan2< DspFloatType >",2,"AudioDSP::sample_vector< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("atan2",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("atan2",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  arg2 = *argp2;
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR atan2< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  double arg2 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::atan2< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::atan2< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::atan2< DspFloatType >",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("atan2",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR atan2< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > arg2 ;
  AudioDSP::sample_matrix< double > *argp2 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::atan2< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::atan2< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::atan2< DspFloatType >",2,"AudioDSP::sample_matrix< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("atan2",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("atan2",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  arg2 = *argp2;
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR atan2< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_atan2__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_atan2__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_atan2__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_atan2__SWIG_6(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atan2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::atan2< DspFloatType >(AudioDSP::sample_vector< double > const &,double const)\n"
    "    AudioDSP::atan2< DspFloatType >(AudioDSP::sample_vector< double > const &,AudioDSP::sample_vector< double > const)\n"
    "    AudioDSP::atan2< DspFloatType >(AudioDSP::sample_matrix< double > const &,double const)\n"
    "    AudioDSP::atan2< DspFloatType >(AudioDSP::sample_matrix< double > const &,AudioDSP::sample_matrix< double > const)\n");
  lua_error(L);return 0;
}


static int _wrap_cos__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::cos< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::cos< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("cos",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR cos< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cos__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::cos< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::cos< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("cos",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR cos< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cos__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::cos< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::cos< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("cos",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR cos< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cos__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::cos< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::cos< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("cos",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR cos< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cos(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cos__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cos__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cos__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cos__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cos'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::cos< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::cos< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::cos< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::cos< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sin__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sin< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::sin< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sin",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR sin< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sin< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::sin< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sin",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR sin< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sin< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::sin< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("sin",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR sin< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sin< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::sin< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("sin",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR sin< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sin__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sin__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sin__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sin__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sin< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::sin< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::sin< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::sin< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_tan__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::tan< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::tan< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("tan",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR tan< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tan__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::tan< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::tan< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("tan",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR tan< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tan__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::tan< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::tan< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("tan",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR tan< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tan__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::tan< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::tan< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("tan",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR tan< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tan(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tan__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tan__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tan__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tan__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'tan'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::tan< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::tan< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::tan< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::tan< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cosh__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::cosh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::cosh< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("cosh",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR cosh< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosh__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::cosh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::cosh< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("cosh",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR cosh< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosh__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::cosh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::cosh< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("cosh",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR cosh< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosh__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::cosh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::cosh< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("cosh",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR cosh< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosh(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosh__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosh__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosh__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosh__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cosh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::cosh< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::cosh< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::cosh< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::cosh< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sinh__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sinh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::sinh< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("sinh",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR sinh< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinh__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sinh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::sinh< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("sinh",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR sinh< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinh__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::sinh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::sinh< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("sinh",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR sinh< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinh__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::sinh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::sinh< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("sinh",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR sinh< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinh(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinh__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinh__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinh__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinh__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sinh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::sinh< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::sinh< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::sinh< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::sinh< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_tanh__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::tanh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::tanh< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("tanh",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR tanh< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanh__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::tanh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::tanh< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("tanh",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR tanh< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanh__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::tanh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::tanh< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("tanh",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR tanh< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanh__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::tanh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::tanh< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("tanh",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR tanh< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanh(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanh__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanh__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanh__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanh__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'tanh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::tanh< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::tanh< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::tanh< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::tanh< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_lgamma__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::lgamma< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::lgamma< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("lgamma",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR lgamma< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgamma__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::lgamma< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::lgamma< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("lgamma",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR lgamma< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgamma(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_lgamma__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_lgamma__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lgamma'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::lgamma< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::lgamma< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_acosh__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::acosh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::acosh< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("acosh",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR acosh< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosh__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::acosh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::acosh< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("acosh",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR acosh< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosh__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::acosh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::acosh< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("acosh",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR acosh< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosh__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::acosh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::acosh< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("acosh",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR acosh< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosh(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosh__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosh__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosh__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosh__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'acosh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::acosh< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::acosh< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::acosh< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::acosh< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_asinh__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::asinh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::asinh< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("asinh",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR asinh< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinh__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::asinh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::asinh< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("asinh",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR asinh< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinh__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::asinh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::asinh< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("asinh",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR asinh< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinh__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::asinh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::asinh< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("asinh",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR asinh< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinh(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinh__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinh__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinh__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinh__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'asinh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::asinh< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::asinh< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::asinh< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::asinh< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_atanh__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::atanh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::atanh< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("atanh",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR atanh< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanh__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::atanh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::atanh< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("atanh",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR atanh< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanh__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_vector< double > *arg1 = 0 ;
  AudioDSP::complex_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::atanh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::atanh< DspFloatType >",1,"AudioDSP::complex_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,0))){
    SWIG_fail_ptr("atanh",1,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR atanh< DspFloatType >((AudioDSP::complex_vector< double > const &)*arg1);
  {
    AudioDSP::complex_vector< double > * resultptr = new AudioDSP::complex_vector< double >((const AudioDSP::complex_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanh__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::complex_matrix< double > *arg1 = 0 ;
  AudioDSP::complex_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::atanh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::atanh< DspFloatType >",1,"AudioDSP::complex_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,0))){
    SWIG_fail_ptr("atanh",1,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR atanh< DspFloatType >((AudioDSP::complex_matrix< double > const &)*arg1);
  {
    AudioDSP::complex_matrix< double > * resultptr = new AudioDSP::complex_matrix< double >((const AudioDSP::complex_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__complex_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanh(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanh__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanh__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanh__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__complex_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanh__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atanh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::atanh< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::atanh< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::atanh< DspFloatType >(AudioDSP::complex_vector< double > const &)\n"
    "    AudioDSP::atanh< DspFloatType >(AudioDSP::complex_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cbrt__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::cbrt< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::cbrt< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("cbrt",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR cbrt< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrt__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::cbrt< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::cbrt< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("cbrt",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR cbrt< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrt(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cbrt__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cbrt__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cbrt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::cbrt< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::cbrt< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ceil__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::cbrt< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::cbrt< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("ceil",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR cbrt< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceil__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::cbrt< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::cbrt< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("ceil",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR cbrt< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceil(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ceil__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ceil__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ceil'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::cbrt< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::cbrt< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_copysign__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::copysign< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::copysign< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::copysign< DspFloatType >",2,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("copysign",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("copysign",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR copysign< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysign__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::copysign< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::copysign< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::copysign< DspFloatType >",2,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("copysign",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("copysign",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR copysign< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,(AudioDSP::sample_matrix< double > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysign(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_copysign__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_copysign__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'copysign'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::copysign< DspFloatType >(AudioDSP::sample_vector< double > const &,AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::copysign< DspFloatType >(AudioDSP::sample_matrix< double > const &,AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_erf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::erf< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::erf< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("erf",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR erf< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::erf< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::erf< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("erf",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR erf< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_erf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_erf__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'erf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::erf< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::erf< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_erfc__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::erfc< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::erfc< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("erfc",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR erfc< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfc__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::erfc< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::erfc< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("erfc",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR erfc< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfc(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_erfc__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_erfc__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'erfc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::erfc< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::erfc< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_expm1__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::expm1< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::expm1< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("expm1",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR expm1< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::expm1< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::expm1< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("expm1",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR expm1< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expm1__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expm1__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'expm1'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::expm1< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::expm1< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fdim__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::fdim< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fdim< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::fdim< DspFloatType >",2,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("fdim",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("fdim",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR fdim< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdim__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::fdim< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fdim< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::fdim< DspFloatType >",2,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("fdim",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("fdim",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR fdim< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,(AudioDSP::sample_matrix< double > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdim(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fdim__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fdim__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fdim'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::fdim< DspFloatType >(AudioDSP::sample_vector< double > const &,AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::fdim< DspFloatType >(AudioDSP::sample_matrix< double > const &,AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fma__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > *arg3 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::fma< DspFloatType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fma< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::fma< DspFloatType >",2,"AudioDSP::sample_vector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AudioDSP::fma< DspFloatType >",3,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("fma",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("fma",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("fma",3,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR fma< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,(AudioDSP::sample_vector< double > const &)*arg2,(AudioDSP::sample_vector< double > const &)*arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fma__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > *arg3 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::fma< DspFloatType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fma< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::fma< DspFloatType >",2,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AudioDSP::fma< DspFloatType >",3,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("fma",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("fma",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("fma",3,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR fma< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,(AudioDSP::sample_matrix< double > const &)*arg2,(AudioDSP::sample_matrix< double > const &)*arg3);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fma(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fma__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fma__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fma'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::fma< DspFloatType >(AudioDSP::sample_vector< double > const &,AudioDSP::sample_vector< double > const &,AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::fma< DspFloatType >(AudioDSP::sample_matrix< double > const &,AudioDSP::sample_matrix< double > const &,AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fmax__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::fmax< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fmax< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::fmax< DspFloatType >",2,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("fmax",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("fmax",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR fmax< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmax__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::fmax< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fmax< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::fmax< DspFloatType >",2,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("fmax",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("fmax",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR fmax< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,(AudioDSP::sample_matrix< double > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmax(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fmax__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fmax__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmax'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::fmax< DspFloatType >(AudioDSP::sample_vector< double > const &,AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::fmax< DspFloatType >(AudioDSP::sample_matrix< double > const &,AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fmin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::fmin< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fmin< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::fmin< DspFloatType >",2,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("fmin",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("fmin",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR fmin< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmin__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::fmin< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fmin< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::fmin< DspFloatType >",2,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("fmin",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("fmin",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR fmin< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,(AudioDSP::sample_matrix< double > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmin(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fmin__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fmin__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::fmin< DspFloatType >(AudioDSP::sample_vector< double > const &,AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::fmin< DspFloatType >(AudioDSP::sample_matrix< double > const &,AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fmod__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::fmod< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fmod< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::fmod< DspFloatType >",2,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("fmod",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("fmod",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR fmod< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmod__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  double arg2 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::fmod< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fmod< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::fmod< DspFloatType >",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("fmod",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR fmod< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmod__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::fmod< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::fmod< DspFloatType >",1,"double const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::fmod< DspFloatType >",2,"AudioDSP::sample_vector< double > const &");
  arg1 = (double const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("fmod",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR fmod< DspFloatType >(arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmod__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::fmod< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fmod< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::fmod< DspFloatType >",2,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("fmod",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("fmod",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR fmod< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,(AudioDSP::sample_matrix< double > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmod__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  double arg2 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::fmod< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::fmod< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::fmod< DspFloatType >",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("fmod",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR fmod< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmod__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::fmod< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::fmod< DspFloatType >",1,"double const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::fmod< DspFloatType >",2,"AudioDSP::sample_matrix< double > const &");
  arg1 = (double const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("fmod",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR fmod< DspFloatType >(arg1,(AudioDSP::sample_matrix< double > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fmod__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fmod__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fmod__SWIG_9(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fmod__SWIG_10(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fmod__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fmod__SWIG_11(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::fmod< DspFloatType >(AudioDSP::sample_vector< double > const &,AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::fmod< DspFloatType >(AudioDSP::sample_vector< double > const &,double const)\n"
    "    AudioDSP::fmod< DspFloatType >(double const,AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::fmod< DspFloatType >(AudioDSP::sample_matrix< double > const &,AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::fmod< DspFloatType >(AudioDSP::sample_matrix< double > const &,double const)\n"
    "    AudioDSP::fmod< DspFloatType >(double const,AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_hypot__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::hypot< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::hypot< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::hypot< DspFloatType >",2,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("hypot",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("hypot",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR hypot< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypot__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  double arg2 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::hypot< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::hypot< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::hypot< DspFloatType >",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("hypot",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR hypot< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypot__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::hypot< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::hypot< DspFloatType >",1,"double const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::hypot< DspFloatType >",2,"AudioDSP::sample_vector< double > const &");
  arg1 = (double const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("hypot",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR hypot< DspFloatType >(arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypot__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::hypot< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::hypot< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::hypot< DspFloatType >",2,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("hypot",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("hypot",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR hypot< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,(AudioDSP::sample_matrix< double > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypot__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  double arg2 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::hypot< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::hypot< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::hypot< DspFloatType >",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("hypot",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR hypot< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypot__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::hypot< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::hypot< DspFloatType >",1,"double const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::hypot< DspFloatType >",2,"AudioDSP::sample_matrix< double > const &");
  arg1 = (double const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("hypot",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR hypot< DspFloatType >(arg1,(AudioDSP::sample_matrix< double > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypot(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_hypot__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_hypot__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_hypot__SWIG_9(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_hypot__SWIG_10(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_hypot__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_hypot__SWIG_11(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'hypot'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::hypot< DspFloatType >(AudioDSP::sample_vector< double > const &,AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::hypot< DspFloatType >(AudioDSP::sample_vector< double > const &,double const)\n"
    "    AudioDSP::hypot< DspFloatType >(double const,AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::hypot< DspFloatType >(AudioDSP::sample_matrix< double > const &,AudioDSP::sample_matrix< double > const &)\n"
    "    AudioDSP::hypot< DspFloatType >(AudioDSP::sample_matrix< double > const &,double const)\n"
    "    AudioDSP::hypot< DspFloatType >(double const,AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_remainder__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::remainder< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::remainder< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::remainder< DspFloatType >",2,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("remainder",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("remainder",2,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR remainder< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,(AudioDSP::sample_vector< double > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainder__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::remainder< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::remainder< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::remainder< DspFloatType >",2,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("remainder",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("remainder",2,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR remainder< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,(AudioDSP::sample_matrix< double > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainder(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_remainder__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_remainder__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'remainder'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::remainder< DspFloatType >(AudioDSP::sample_vector< double > const &,AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::remainder< DspFloatType >(AudioDSP::sample_matrix< double > const &,AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_round__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::round< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::round< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("round",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR round< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_round__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::round< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::round< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("round",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR round< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_round(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_round__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_round__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'round'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::round< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::round< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_scalbln__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< long > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::scalbln< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::scalbln< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::scalbln< DspFloatType >",2,"AudioDSP::sample_vector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("scalbln",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_long_t,0))){
    SWIG_fail_ptr("scalbln",2,SWIGTYPE_p_AudioDSP__sample_vectorT_long_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR scalbln< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,(AudioDSP::sample_vector< long > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbln__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  long arg2 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::scalbln< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::scalbln< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::scalbln< DspFloatType >",2,"long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("scalbln",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  arg2 = (long const)lua_tonumber(L, 2);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR scalbln< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbln__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< long > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::scalbln< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::scalbln< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::scalbln< DspFloatType >",2,"AudioDSP::sample_matrix< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("scalbln",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_long_t,0))){
    SWIG_fail_ptr("scalbln",2,SWIGTYPE_p_AudioDSP__sample_matrixT_long_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR scalbln< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,(AudioDSP::sample_matrix< long > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbln__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  long arg2 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::scalbln< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::scalbln< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::scalbln< DspFloatType >",2,"long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("scalbln",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  arg2 = (long const)lua_tonumber(L, 2);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR scalbln< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbln(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_scalbln__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_scalbln__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_scalbln__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_scalbln__SWIG_7(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'scalbln'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::scalbln< DspFloatType >(AudioDSP::sample_vector< double > const &,AudioDSP::sample_vector< long > const &)\n"
    "    AudioDSP::scalbln< DspFloatType >(AudioDSP::sample_vector< double > const &,long const)\n"
    "    AudioDSP::scalbln< DspFloatType >(AudioDSP::sample_matrix< double > const &,AudioDSP::sample_matrix< long > const &)\n"
    "    AudioDSP::scalbln< DspFloatType >(AudioDSP::sample_matrix< double > const &,long const)\n");
  lua_error(L);return 0;
}


static int _wrap_scalbn__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< int > *arg2 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::scalbn< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::scalbn< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::scalbn< DspFloatType >",2,"AudioDSP::sample_vector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("scalbn",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_vectorT_int_t,0))){
    SWIG_fail_ptr("scalbn",2,SWIGTYPE_p_AudioDSP__sample_vectorT_int_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR scalbn< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,(AudioDSP::sample_vector< int > const &)*arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbn__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  int arg2 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::scalbn< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::scalbn< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::scalbn< DspFloatType >",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("scalbn",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR scalbn< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1,arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbn__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< int > *arg2 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::scalbn< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::scalbn< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AudioDSP::scalbn< DspFloatType >",2,"AudioDSP::sample_matrix< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("scalbn",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioDSP__sample_matrixT_int_t,0))){
    SWIG_fail_ptr("scalbn",2,SWIGTYPE_p_AudioDSP__sample_matrixT_int_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR scalbn< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,(AudioDSP::sample_matrix< int > const &)*arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbn__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  int arg2 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::scalbn< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::scalbn< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::scalbn< DspFloatType >",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("scalbn",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR scalbn< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1,arg2);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbn(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_scalbn__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_scalbn__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_scalbn__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_scalbn__SWIG_7(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'scalbn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::scalbn< DspFloatType >(AudioDSP::sample_vector< double > const &,AudioDSP::sample_vector< int > const &)\n"
    "    AudioDSP::scalbn< DspFloatType >(AudioDSP::sample_vector< double > const &,int const)\n"
    "    AudioDSP::scalbn< DspFloatType >(AudioDSP::sample_matrix< double > const &,AudioDSP::sample_matrix< int > const &)\n"
    "    AudioDSP::scalbn< DspFloatType >(AudioDSP::sample_matrix< double > const &,int const)\n");
  lua_error(L);return 0;
}


static int _wrap_tgamma__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::tgamma< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::tgamma< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("tgamma",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR tgamma< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgamma__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::tgamma< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::tgamma< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("tgamma",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR tgamma< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgamma(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tgamma__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tgamma__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'tgamma'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::tgamma< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::tgamma< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_trunc__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::trunc< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::trunc< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("trunc",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR trunc< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_trunc__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::trunc< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::trunc< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("trunc",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR trunc< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_trunc(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_trunc__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_trunc__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'trunc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::trunc< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::trunc< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ilogb__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_vector< double > *arg1 = 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::ilogb< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ilogb< DspFloatType >",1,"AudioDSP::sample_vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,0))){
    SWIG_fail_ptr("ilogb",1,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR ilogb< DspFloatType >((AudioDSP::sample_vector< double > const &)*arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogb__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AudioDSP::sample_matrix< double > *arg1 = 0 ;
  AudioDSP::sample_matrix< double > result;
  
  SWIG_check_num_args("AudioDSP::ilogb< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::ilogb< DspFloatType >",1,"AudioDSP::sample_matrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,0))){
    SWIG_fail_ptr("ilogb",1,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR ilogb< DspFloatType >((AudioDSP::sample_matrix< double > const &)*arg1);
  {
    AudioDSP::sample_matrix< double > * resultptr = new AudioDSP::sample_matrix< double >((const AudioDSP::sample_matrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_matrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogb(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ilogb__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AudioDSP__sample_matrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ilogb__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ilogb'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioDSP::ilogb< DspFloatType >(AudioDSP::sample_vector< double > const &)\n"
    "    AudioDSP::ilogb< DspFloatType >(AudioDSP::sample_matrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_generate_noise(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::generate_noise< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::generate_noise< DspFloatType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR generate_noise< DspFloatType >(arg1);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_sin(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  size_t arg3 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::generate_sin< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::generate_sin< DspFloatType >",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::generate_sin< DspFloatType >",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::generate_sin< DspFloatType >",3,"size_t");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR generate_sin< DspFloatType >(arg1,arg2,arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_cos(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  size_t arg3 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::generate_cos< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::generate_cos< DspFloatType >",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::generate_cos< DspFloatType >",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::generate_cos< DspFloatType >",3,"size_t");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR generate_cos< DspFloatType >(arg1,arg2,arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_tan(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  size_t arg3 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::generate_tan< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::generate_tan< DspFloatType >",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::generate_tan< DspFloatType >",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::generate_tan< DspFloatType >",3,"size_t");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR generate_tan< DspFloatType >(arg1,arg2,arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_phasor(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  size_t arg3 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::generate_phasor< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::generate_phasor< DspFloatType >",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::generate_phasor< DspFloatType >",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::generate_phasor< DspFloatType >",3,"size_t");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR generate_phasor< DspFloatType >(arg1,arg2,arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_square(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  size_t arg3 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::generate_square< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::generate_square< DspFloatType >",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::generate_square< DspFloatType >",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::generate_square< DspFloatType >",3,"size_t");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR generate_square< DspFloatType >(arg1,arg2,arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_saw(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  size_t arg3 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::generate_saw< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::generate_saw< DspFloatType >",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::generate_saw< DspFloatType >",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::generate_saw< DspFloatType >",3,"size_t");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR generate_saw< DspFloatType >(arg1,arg2,arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_triangle(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  size_t arg3 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::generate_triangle< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AudioDSP::generate_triangle< DspFloatType >",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::generate_triangle< DspFloatType >",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AudioDSP::generate_triangle< DspFloatType >",3,"size_t");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR generate_triangle< DspFloatType >(arg1,arg2,arg3);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_oscillator(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = 0 ;
  size_t arg2 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::oscillator< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::oscillator< DspFloatType >",1,"OscillatorProcessor &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::oscillator< DspFloatType >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("oscillator",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR oscillator< DspFloatType >(*arg1,arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generator(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = 0 ;
  size_t arg2 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::generator< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::generator< DspFloatType >",1,"GeneratorProcessor &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::generator< DspFloatType >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("generator",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR generator< DspFloatType >(*arg1,arg2);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_filter(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  AudioDSP::sample_vector< double > result;
  
  SWIG_check_num_args("AudioDSP::filter< DspFloatType >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AudioDSP::filter< DspFloatType >",1,"FilterProcessor &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AudioDSP::filter< DspFloatType >",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AudioDSP::filter< DspFloatType >",3,"double const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("AudioDSP::filter< DspFloatType >",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("filter",1,SWIGTYPE_p_FilterProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("filter",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("filter",4,SWIGTYPE_p_double);
  }
  
  result = AudioDSP::SWIGTEMPLATEDISAMBIGUATOR filter< DspFloatType >(*arg1,arg2,(double const *)arg3,arg4);
  {
    AudioDSP::sample_vector< double > * resultptr = new AudioDSP::sample_vector< double >((const AudioDSP::sample_vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AudioDSP__sample_vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::abs< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::abs< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR abs< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::cube< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cube< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR cube< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::sqrt< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::sqrt< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR sqrt< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::exp< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::exp< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR exp< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2f(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::exp2< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::exp2< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR exp2< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::log< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR log< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::log10< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log10< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR log10< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2f(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::log2< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log2< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR log2< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::logb< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::logb< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR logb< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::pow< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::pow< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::pow< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR pow< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::floor< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::floor< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR floor< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::acos< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::acos< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR acos< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::asin< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::asin< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR asin< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::atan< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::atan< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR atan< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2f(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::atan2< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::atan2< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::atan2< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR atan2< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::cos< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cos< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR cos< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::sin< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::sin< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR sin< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::tan< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::tan< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR tan< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::cosh< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cosh< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR cosh< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::sinh< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::sinh< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR sinh< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::tanh< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::tanh< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR tanh< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammaf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::lgamma< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::lgamma< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR lgamma< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::acosh< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::acosh< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR acosh< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::asinh< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::asinh< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR asinh< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::atanh< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::atanh< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR atanh< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::cbrt< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cbrt< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR cbrt< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::cbrt< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cbrt< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR cbrt< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::copysign< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::copysign< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::copysign< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR copysign< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erff(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::erf< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::erf< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR erf< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::erfc< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::erfc< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR erfc< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1f(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::expm1< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::expm1< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR expm1< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::fdim< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fdim< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fdim< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR fdim< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp1 ;
  double temp2 ;
  double temp3 ;
  double result;
  
  SWIG_check_num_args("Ops::fma< DspFloatType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fma< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fma< DspFloatType >",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ops::fma< DspFloatType >",3,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR fma< DspFloatType >((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::fmax< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fmax< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fmax< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR fmax< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fminf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::fmin< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fmin< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fmin< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR fmin< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::fmod< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fmod< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fmod< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR fmod< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("Ops::fpclassify< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fpclassify< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)Ops::SWIGTEMPLATEDISAMBIGUATOR fpclassify< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::hypot< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::hypot< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::hypot< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR hypot< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("Ops::ilogb< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::ilogb< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)Ops::SWIGTEMPLATEDISAMBIGUATOR ilogb< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinitef(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isfinite< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isfinite< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isfinite< DspFloatType >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isgreater< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isgreater< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isgreater< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isgreater< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequalf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isgreaterequal< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isgreaterequal< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isgreaterequal< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isgreaterequal< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinff(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isinf< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isinf< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isinf< DspFloatType >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isless< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isless< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isless< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isless< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequalf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::islessequal< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::islessequal< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::islessequal< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR islessequal< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnanf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isnan< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isnan< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isnan< DspFloatType >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormalf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isnormal< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isnormal< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isnormal< DspFloatType >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isunordered< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isunordered< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isunordered< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isunordered< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::ldexp< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::ldexp< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::ldexp< DspFloatType >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR ldexp< DspFloatType >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::llrint< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::llrint< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR llrint< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::llround< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::llround< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR llround< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::log1p< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log1p< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR log1p< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::lrint< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::lrint< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR lrint< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::lround< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::lround< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR lround< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("Ops::nan< DspFloatType >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Ops::nan< DspFloatType >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nan< DspFloatType >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanff(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("Ops::nanf< DspFloatType >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Ops::nanf< DspFloatType >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nanf< DspFloatType >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanlf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("Ops::nanl< DspFloatType >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Ops::nanl< DspFloatType >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nanl< DspFloatType >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::nearbyint< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::nearbyint< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nearbyint< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::nextafter< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::nextafter< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::nextafter< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nextafter< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::nexttoward< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::nexttoward< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::nexttoward< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nexttoward< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::remainder< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::remainder< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::remainder< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR remainder< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::rint< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::rint< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR rint< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::round< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::round< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR round< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  long arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::scalbln< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::scalbln< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::scalbln< DspFloatType >",2,"long");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR scalbln< DspFloatType >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::scalbn< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::scalbn< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::scalbn< DspFloatType >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR scalbn< DspFloatType >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::square< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::square< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR square< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammaf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::tgamma< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::tgamma< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR tgamma< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncf(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::trunc< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::trunc< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR trunc< DspFloatType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_crealf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::real< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::real< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("crealf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR real< DspFloatType >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cimagf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::imag< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::imag< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cimagf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR imag< DspFloatType >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cabsf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::abs< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::abs< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cabsf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR abs< DspFloatType >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cargf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::arg< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::arg< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cargf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR arg< DspFloatType >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cexpf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::exp< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::exp< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cexpf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR exp< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clogf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::log< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::log< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("clogf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR log< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clog10f(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::log10< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::log10< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("clog10f",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR log10< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpowf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::pow< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::pow< DspFloatType >",1,"std::complex< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::pow< DspFloatType >",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cpowf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cpowf",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< DspFloatType >((std::complex< double > const &)*arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpowf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::pow< DspFloatType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::pow< DspFloatType >",1,"std::complex< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::pow< DspFloatType >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cpowf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< DspFloatType >((std::complex< double > const &)*arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpowf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  std::complex< double > *arg2 = 0 ;
  double temp1 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::pow< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::pow< DspFloatType >",1,"double const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::pow< DspFloatType >",2,"std::complex< double > const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cpowf",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< DspFloatType >((double const &)*arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpowf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cpowf__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cpowf__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cpowf__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cpowf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pow< DspFloatType >(std::complex< double > const &,std::complex< double > const &)\n"
    "    std::pow< DspFloatType >(std::complex< double > const &,double const &)\n"
    "    std::pow< DspFloatType >(double const &,std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_csqrtf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::sqrt< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sqrt< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("csqrtf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sqrt< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cnormf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::norm< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::norm< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cnormf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR norm< DspFloatType >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cprojf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::proj< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::proj< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cprojf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR proj< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpolarf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::polar< DspFloatType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< DspFloatType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::polar< DspFloatType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< DspFloatType >((double const &)*arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpolarf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::polar< DspFloatType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< DspFloatType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< DspFloatType >((double const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpolarf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_cpolarf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cpolarf__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cpolarf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::polar< DspFloatType >(double const &,double const &)\n"
    "    std::polar< DspFloatType >(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_csinf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::sin< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sin< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("csinf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sin< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ccosf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::cos< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cos< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ccosf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cos< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ctanf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::tan< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tan< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ctanf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tan< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_casinf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::asin< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asin< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("casinf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asin< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cacosf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::acos< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acos< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cacosf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acos< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_catanf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::atan< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atan< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("catanf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atan< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_csinhf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::sinh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sinh< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("csinhf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sinh< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ccoshf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::cosh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cosh< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ccoshf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cosh< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ctanhf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::tanh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tanh< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ctanhf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tanh< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_casinhf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::asinh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asinh< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("casinhf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asinh< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cacoshf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::acosh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acosh< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cacoshf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acosh< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_catanhf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::atanh< DspFloatType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atanh< DspFloatType >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("catanhf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atanh< DspFloatType >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("char_bit", CHAR_BIT)},
    {SWIG_LUA_CONSTTAB_INT("schar_min", SCHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("schar_max", SCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uchar_max", UCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("char_min", CHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("char_max", CHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("mb_len_max", MB_LEN_MAX)},
    {SWIG_LUA_CONSTTAB_INT("shrt_min", SHRT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("shrt_max", SHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ushrt_max", USHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("int_min", INT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("int_max", INT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uint_max", UINT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("long_min", LONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("long_max", LONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ulong_max", ULONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("llong_min", LLONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("llong_max", LLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ullong_max", ULLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("PARAMETER2_PROCESSOR", PARAMETER2_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREOSPLITTER_PROCESSOR", STEREOSPLITTER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_GENERATOR_PROCESSOR", MONO_GENERATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_FUNCTION_PROCESSOR", MONO_FUNCTION_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_OSCILLATOR_PROCESSOR", MONO_OSCILLATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_FILTER_PROCESSOR", MONO_FILTER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_AMPLIFIER_PROCESSOR", MONO_AMPLIFIER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_FX_PROCESSOR", MONO_FX_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_CASCADE_PROCESSOR", MONO_CASCADE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_MIXER_PROCESSOR", MONO_MIXER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_MORPHER_PROCESSOR", MONO_MORPHER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_OPERATOR_PROCESSOR", MONO_OPERATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_OVERSAMPLE_PROCESSOR", MONO_OVERSAMPLE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_UPSAMPLE_PROCESSOR", MONO_UPSAMPLE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_DOWNSAMPLE_PROCESSOR", MONO_DOWNSAMPLE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_FX_PROCESSOR", STEREO_FX_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_OVERSAMPLER_PROCESSOR", STEREO_OVERSAMPLER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_UPSAMPLER_PROCESSOR", STEREO_UPSAMPLER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_DOWNSAMPLER_PROCESSOR", STEREO_DOWNSAMPLER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_GENERATOR_PROCESSOR", STEREO_GENERATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_FUNCTION_PROCESSOR", STEREO_FUNCTION_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_PARAMETER2_PROCESSOR", STEREO_PARAMETER2_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_OSCILLATOR_PROCESSOR", STEREO_OSCILLATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_FILTER_PROCESSOR", STEREO_FILTER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_AMPLIFIER_PROCESSOR", STEREO_AMPLIFIER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_CASCADE_PROCESSOR", STEREO_CASCADE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_OPERATOR_PROCESSOR", STEREO_OPERATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_SIGNAL_SOURCE_PROCESSOR", MONO_SIGNAL_SOURCE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_SIGNAL_SOURCE_PROCESSOR", STEREO_SIGNAL_SOURCE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_SIGNAL_SINK_PROCESSOR", MONO_SIGNAL_SINK_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_SIGNAL_SINK_PROCESSOR", STEREO_SIGNAL_SINK_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("INTERLEAVE_PROCESSOR", INTERLEAVE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("DEINERLEAVE_PROCESSOR", DEINERLEAVE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_BANK_PROCESSOR", FILTER_BANK_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("SPECTRUM_PROCESSOR", SPECTRUM_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("window_RECTANGLE", AudioDSP::Window< DspFloatType >::RECTANGLE)},
    {SWIG_LUA_CONSTTAB_INT("window_HANNING", AudioDSP::Window< DspFloatType >::HANNING)},
    {SWIG_LUA_CONSTTAB_INT("window_HAMMING", AudioDSP::Window< DspFloatType >::HAMMING)},
    {SWIG_LUA_CONSTTAB_INT("window_BLACKMAN", AudioDSP::Window< DspFloatType >::BLACKMAN)},
    {SWIG_LUA_CONSTTAB_INT("window_BLACKMANHARRIS", AudioDSP::Window< DspFloatType >::BLACKMANHARRIS)},
    {SWIG_LUA_CONSTTAB_INT("window_GAUSSIAN", AudioDSP::Window< DspFloatType >::GAUSSIAN)},
    {SWIG_LUA_CONSTTAB_INT("window_WELCH", AudioDSP::Window< DspFloatType >::WELCH)},
    {SWIG_LUA_CONSTTAB_INT("window_PARZEN", AudioDSP::Window< DspFloatType >::PARZEN)},
    {SWIG_LUA_CONSTTAB_INT("window_TUKEY", AudioDSP::Window< DspFloatType >::TUKEY)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "Huge", _wrap_Huge},
    { "Hugef", _wrap_Hugef},
    { "Infinity", _wrap_Infinity},
    { "NaN", _wrap_NaN},
    { "Random_seed", _wrap_Random_seed},
    { "fft", _wrap_fft},
    { "ifft", _wrap_ifft},
    { "fft2", _wrap_fft2},
    { "ifft2", _wrap_ifft2},
    { "factorize", _wrap_factorize},
    { "is_optimal", _wrap_is_optimal},
    { "find_closest_factor", _wrap_find_closest_factor},
    { "get_left_channel", _wrap_get_left_channel},
    { "get_right_channel", _wrap_get_right_channel},
    { "get_channel", _wrap_get_channel},
    { "interleave", _wrap_interleave},
    { "deinterleave", _wrap_deinterleave},
    { "copy_vector", _wrap_copy_vector},
    { "slice_vector", _wrap_slice_vector},
    { "copy_buffer", _wrap_copy_buffer},
    { "slice_buffer", _wrap_slice_buffer},
    { "stereo_split", _wrap_stereo_split},
    { "fill", _wrap_fill},
    { "zeros", _wrap_zeros},
    { "ones", _wrap_ones},
    { "cube", _wrap_cube},
    { "sqr", _wrap_sqr},
    { "sqrt", _wrap_sqrt},
    { "exp", _wrap_exp},
    { "exp2", _wrap_exp2},
    { "log", _wrap_log},
    { "log10", _wrap_log10},
    { "log2", _wrap_log2},
    { "logb", _wrap_logb},
    { "pow", _wrap_pow},
    { "floor", _wrap_floor},
    { "acos", _wrap_acos},
    { "asin", _wrap_asin},
    { "atan", _wrap_atan},
    { "atan2", _wrap_atan2},
    { "cos", _wrap_cos},
    { "sin", _wrap_sin},
    { "tan", _wrap_tan},
    { "cosh", _wrap_cosh},
    { "sinh", _wrap_sinh},
    { "tanh", _wrap_tanh},
    { "lgamma", _wrap_lgamma},
    { "acosh", _wrap_acosh},
    { "asinh", _wrap_asinh},
    { "atanh", _wrap_atanh},
    { "cbrt", _wrap_cbrt},
    { "ceil", _wrap_ceil},
    { "copysign", _wrap_copysign},
    { "erf", _wrap_erf},
    { "erfc", _wrap_erfc},
    { "expm1", _wrap_expm1},
    { "fdim", _wrap_fdim},
    { "fma", _wrap_fma},
    { "fmax", _wrap_fmax},
    { "fmin", _wrap_fmin},
    { "fmod", _wrap_fmod},
    { "hypot", _wrap_hypot},
    { "remainder", _wrap_remainder},
    { "round", _wrap_round},
    { "scalbln", _wrap_scalbln},
    { "scalbn", _wrap_scalbn},
    { "tgamma", _wrap_tgamma},
    { "trunc", _wrap_trunc},
    { "ilogb", _wrap_ilogb},
    { "generate_noise", _wrap_generate_noise},
    { "generate_sin", _wrap_generate_sin},
    { "generate_cos", _wrap_generate_cos},
    { "generate_tan", _wrap_generate_tan},
    { "generate_phasor", _wrap_generate_phasor},
    { "generate_square", _wrap_generate_square},
    { "generate_saw", _wrap_generate_saw},
    { "generate_triangle", _wrap_generate_triangle},
    { "oscillator", _wrap_oscillator},
    { "generator", _wrap_generator},
    { "filter", _wrap_filter},
    { "absf", _wrap_absf},
    { "cubef", _wrap_cubef},
    { "sqrtf", _wrap_sqrtf},
    { "expf", _wrap_expf},
    { "exp2f", _wrap_exp2f},
    { "logf", _wrap_logf},
    { "log10f", _wrap_log10f},
    { "log2f", _wrap_log2f},
    { "logbf", _wrap_logbf},
    { "powf", _wrap_powf},
    { "floorf", _wrap_floorf},
    { "acosf", _wrap_acosf},
    { "asinf", _wrap_asinf},
    { "atanf", _wrap_atanf},
    { "atan2f", _wrap_atan2f},
    { "cosf", _wrap_cosf},
    { "sinf", _wrap_sinf},
    { "tanf", _wrap_tanf},
    { "coshf", _wrap_coshf},
    { "sinhf", _wrap_sinhf},
    { "tanhf", _wrap_tanhf},
    { "lgammaf", _wrap_lgammaf},
    { "acoshf", _wrap_acoshf},
    { "asinhf", _wrap_asinhf},
    { "atanhf", _wrap_atanhf},
    { "cbrtf", _wrap_cbrtf},
    { "ceilf", _wrap_ceilf},
    { "copysignf", _wrap_copysignf},
    { "erff", _wrap_erff},
    { "erfcf", _wrap_erfcf},
    { "expm1f", _wrap_expm1f},
    { "fdimf", _wrap_fdimf},
    { "fmaf", _wrap_fmaf},
    { "fmaxf", _wrap_fmaxf},
    { "fminf", _wrap_fminf},
    { "fmodf", _wrap_fmodf},
    { "fpclassifyf", _wrap_fpclassifyf},
    { "hypotf", _wrap_hypotf},
    { "ilogbf", _wrap_ilogbf},
    { "isfinitef", _wrap_isfinitef},
    { "isgreaterf", _wrap_isgreaterf},
    { "isgreaterequalf", _wrap_isgreaterequalf},
    { "isinff", _wrap_isinff},
    { "islessf", _wrap_islessf},
    { "islessequalf", _wrap_islessequalf},
    { "isnanf", _wrap_isnanf},
    { "isnormalf", _wrap_isnormalf},
    { "isunorderedf", _wrap_isunorderedf},
    { "ldexpf", _wrap_ldexpf},
    { "llrintf", _wrap_llrintf},
    { "llroundf", _wrap_llroundf},
    { "log1pf", _wrap_log1pf},
    { "lrintf", _wrap_lrintf},
    { "lroundf", _wrap_lroundf},
    { "nanf", _wrap_nanf},
    { "nanff", _wrap_nanff},
    { "nanlf", _wrap_nanlf},
    { "nearbyintf", _wrap_nearbyintf},
    { "nextafterf", _wrap_nextafterf},
    { "nexttowardf", _wrap_nexttowardf},
    { "remainderf", _wrap_remainderf},
    { "rintf", _wrap_rintf},
    { "roundf", _wrap_roundf},
    { "scalblnf", _wrap_scalblnf},
    { "scalbnf", _wrap_scalbnf},
    { "squaref", _wrap_squaref},
    { "tgammaf", _wrap_tgammaf},
    { "truncf", _wrap_truncf},
    { "crealf", _wrap_crealf},
    { "cimagf", _wrap_cimagf},
    { "cabsf", _wrap_cabsf},
    { "cargf", _wrap_cargf},
    { "cexpf", _wrap_cexpf},
    { "clogf", _wrap_clogf},
    { "clog10f", _wrap_clog10f},
    { "cpowf", _wrap_cpowf},
    { "csqrtf", _wrap_csqrtf},
    { "cnormf", _wrap_cnormf},
    { "cprojf", _wrap_cprojf},
    { "cpolarf", _wrap_cpolarf},
    { "csinf", _wrap_csinf},
    { "ccosf", _wrap_ccosf},
    { "ctanf", _wrap_ctanf},
    { "casinf", _wrap_casinf},
    { "cacosf", _wrap_cacosf},
    { "catanf", _wrap_catanf},
    { "csinhf", _wrap_csinhf},
    { "ccoshf", _wrap_ccoshf},
    { "ctanhf", _wrap_ctanhf},
    { "casinhf", _wrap_casinhf},
    { "cacoshf", _wrap_cacoshf},
    { "catanhf", _wrap_catanhf},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_float_numeric_limits,
&_wrap_class_double_numeric_limits,
&_wrap_class_int_numeric_limits,
&_wrap_class_uint_numeric_limits,
&_wrap_class_short_numeric_limits,
&_wrap_class_ushort_numeric_limits,
&_wrap_class_long_numeric_limits,
&_wrap_class_ulong_numeric_limits,
&_wrap_class_llong_numeric_limits,
&_wrap_class_ullong_numeric_limits,
&_wrap_class_Random,
&_wrap_class_SoundProcessor,
&_wrap_class_Port,
&_wrap_class_Ports,
&_wrap_class_MonoProcessor,
&_wrap_class_MonoCascadeProcessor,
&_wrap_class_StereoProcessor,
&_wrap_class_StereoCascadeProcessor,
&_wrap_class_MonoFXProcessor,
&_wrap_class_StereoFXProcessor,
&_wrap_class_GeneratorProcessor,
&_wrap_class_MixerProcessor,
&_wrap_class_FunctionProcessor,
&_wrap_class_Parameter2Processor,
&_wrap_class_StereoSplitterProcessor,
&_wrap_class_OscillatorProcessor,
&_wrap_class_FilterProcessor,
&_wrap_class_AmplifierProcessor,
&_wrap_class_StereoOscillatorProcessor,
&_wrap_class_StereoGeneratorProcessor,
&_wrap_class_StereoFunctionProcessor,
&_wrap_class_StereoFilterProcessor,
&_wrap_class_StereoAmplifierProcessor,
&_wrap_class_SpectrumProcessor,
&_wrap_class_SignalSourceProcessor,
&_wrap_class_SignalSinkProcessor,
&_wrap_class_MonoOversampleProcessor,
&_wrap_class_MonoUpsampleProcessor,
&_wrap_class_MonoDownsampleProcessor,
&_wrap_class_OperatorProcessor,
&_wrap_class_MonoOperatorProcessor,
&_wrap_class_MonoCascadeOperatorProcessor,
&_wrap_class_MonoMultiplierOperatorProcessor,
&_wrap_class_MonoAdderOperatorProcessor,
&_wrap_class_MonoSubtractorOperatorProcessor,
&_wrap_class_MonoModulatorOperatorProcessor,
&_wrap_class_MonoBlendOperatorProcessor,
&_wrap_class_complex,
&_wrap_class_float_vector,
&_wrap_class_double_vector,
&_wrap_class_complex_float_vector,
&_wrap_class_complex_double_vector,
&_wrap_class_int8_vector,
&_wrap_class_uint8_vector,
&_wrap_class_int16_vector,
&_wrap_class_uint16_vector,
&_wrap_class_int32_vector,
&_wrap_class_uint32_vector,
&_wrap_class_int64_vector,
&_wrap_class_uint64_vector,
&_wrap_class_wav_data,
&_wrap_class_SndFileReaderFloat,
&_wrap_class_SndFileReaderDouble,
&_wrap_class_SndFileReaderInt,
&_wrap_class_SndFileReaderShort,
&_wrap_class_SndFileWriterFloat,
&_wrap_class_SndFileWriterDouble,
&_wrap_class_SndFileWriterShort,
&_wrap_class_SndFileWriterInt,
&_wrap_class_FFTPlan,
&_wrap_class_FFTPlanComplexDouble,
&_wrap_class_FFTPlanComplexDouble2D,
&_wrap_class_FFTPlanComplexFloat,
&_wrap_class_FFTPlanComplexFloat2D,
&_wrap_class_FFTPlanRealDouble,
&_wrap_class_FFTPlanRealDouble2D,
&_wrap_class_FFTPlanRealFloat,
&_wrap_class_FFTPlanRealFloat2D,
&_wrap_class_FFTConvolutionDouble,
&_wrap_class_FFTConvolutionFloat,
&_wrap_class_sample_vector,
&_wrap_class_complex_vector,
&_wrap_class_sample_matrix,
&_wrap_class_complex_matrix,
&_wrap_class_window,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "stdsamples",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_AudioDSP__WindowT_double_tTo_p_AudioDSP__sample_vectorT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AudioDSP::sample_vector< double > *)  ((AudioDSP::Window< double > *) x));
}
static void *_p_AudioDSP__complex_vectorT_double_tTo_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::vector< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > *)  ((AudioDSP::complex_vector< double > *) x));
}
static void *_p_AudioDSP__complex_matrixT_double_tTo_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::vector< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > *)  ((AudioDSP::complex_matrix< double > *) x));
}
static void *_p_AudioDSP__sample_vectorT_double_tTo_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::vector< double,Allocator::aligned_allocator< double,64 > > *)  ((AudioDSP::sample_vector< double > *) x));
}
static void *_p_AudioDSP__sample_matrixT_double_tTo_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::vector< double,Allocator::aligned_allocator< double,64 > > *)  ((AudioDSP::sample_matrix< double > *) x));
}
static void *_p_AudioDSP__WindowT_double_tTo_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::vector< double,Allocator::aligned_allocator< double,64 > > *) (AudioDSP::sample_vector< DspFloatType > *) ((AudioDSP::Window< double > *) x));
}
static void *_p_AmplifierProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((AmplifierProcessor *) x));
}
static void *_p_FilterProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((FilterProcessor *) x));
}
static void *_p_OscillatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((OscillatorProcessor *) x));
}
static void *_p_StereoSplitterProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((StereoSplitterProcessor *) x));
}
static void *_p_Parameter2ProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((Parameter2Processor *) x));
}
static void *_p_FunctionProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((FunctionProcessor *) x));
}
static void *_p_MixerProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MixerProcessor *) x));
}
static void *_p_GeneratorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((GeneratorProcessor *) x));
}
static void *_p_StereoFXProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoFXProcessor *) x));
}
static void *_p_MonoFXProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((MonoFXProcessor *) x));
}
static void *_p_StereoCascadeProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoCascadeProcessor *) x));
}
static void *_p_StereoProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((StereoProcessor *) x));
}
static void *_p_MonoCascadeProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((MonoCascadeProcessor *) x));
}
static void *_p_MonoProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MonoProcessor *) x));
}
static void *_p_StereoOscillatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoOscillatorProcessor *) x));
}
static void *_p_StereoGeneratorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoGeneratorProcessor *) x));
}
static void *_p_StereoFunctionProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoFunctionProcessor *) x));
}
static void *_p_StereoFilterProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoFilterProcessor *) x));
}
static void *_p_StereoAmplifierProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoAmplifierProcessor *) x));
}
static void *_p_SpectrumProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((SpectrumProcessor *) x));
}
static void *_p_SignalSourceProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((SignalSourceProcessor *) x));
}
static void *_p_SignalSinkProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((SignalSinkProcessor *) x));
}
static void *_p_MonoOversampleProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MonoOversampleProcessor *) x));
}
static void *_p_MonoUpsampleProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MonoUpsampleProcessor *) x));
}
static void *_p_MonoDownsampleProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MonoDownsampleProcessor *) x));
}
static void *_p_OperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((OperatorProcessor *) x));
}
static void *_p_MonoOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MonoOperatorProcessor *) x));
}
static void *_p_MonoCascadeOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoCascadeOperatorProcessor *) x));
}
static void *_p_MonoMultiplierOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoMultiplierOperatorProcessor *) x));
}
static void *_p_MonoAdderOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoAdderOperatorProcessor *) x));
}
static void *_p_MonoSubtractorOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoSubtractorOperatorProcessor *) x));
}
static void *_p_MonoModulatorOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoModulatorOperatorProcessor *) x));
}
static void *_p_MonoBlendOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoBlendOperatorProcessor *) x));
}
static void *_p_MonoCascadeProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((MonoCascadeProcessor *) x));
}
static void *_p_MonoFXProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((MonoFXProcessor *) x));
}
static void *_p_GeneratorProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((GeneratorProcessor *) x));
}
static void *_p_FunctionProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((FunctionProcessor *) x));
}
static void *_p_OscillatorProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((OscillatorProcessor *) x));
}
static void *_p_FilterProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((FilterProcessor *) x));
}
static void *_p_AmplifierProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((AmplifierProcessor *) x));
}
static void *_p_StereoCascadeProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoCascadeProcessor *) x));
}
static void *_p_StereoFXProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoFXProcessor *) x));
}
static void *_p_StereoOscillatorProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoOscillatorProcessor *) x));
}
static void *_p_StereoGeneratorProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoGeneratorProcessor *) x));
}
static void *_p_StereoFunctionProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoFunctionProcessor *) x));
}
static void *_p_StereoFilterProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoFilterProcessor *) x));
}
static void *_p_StereoAmplifierProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoAmplifierProcessor *) x));
}
static void *_p_MonoCascadeOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoCascadeOperatorProcessor *) x));
}
static void *_p_MonoMultiplierOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoMultiplierOperatorProcessor *) x));
}
static void *_p_MonoAdderOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoAdderOperatorProcessor *) x));
}
static void *_p_MonoSubtractorOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoSubtractorOperatorProcessor *) x));
}
static void *_p_MonoModulatorOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoModulatorOperatorProcessor *) x));
}
static void *_p_MonoBlendOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoBlendOperatorProcessor *) x));
}
static swig_type_info _swigt__p_AmplifierProcessor = {"_p_AmplifierProcessor", "AmplifierProcessor *", 0, 0, (void*)&_wrap_class_AmplifierProcessor, 0};
static swig_type_info _swigt__p_AudioDSP__FFTConvolutionDouble = {"_p_AudioDSP__FFTConvolutionDouble", "AudioDSP::FFTConvolutionDouble *", 0, 0, (void*)&_wrap_class_FFTConvolutionDouble, 0};
static swig_type_info _swigt__p_AudioDSP__FFTConvolutionFloat = {"_p_AudioDSP__FFTConvolutionFloat", "AudioDSP::FFTConvolutionFloat *", 0, 0, (void*)&_wrap_class_FFTConvolutionFloat, 0};
static swig_type_info _swigt__p_AudioDSP__FFTPlan = {"_p_AudioDSP__FFTPlan", "AudioDSP::FFTPlan *", 0, 0, (void*)&_wrap_class_FFTPlan, 0};
static swig_type_info _swigt__p_AudioDSP__FFTPlanComplexDouble = {"_p_AudioDSP__FFTPlanComplexDouble", "AudioDSP::FFTPlanComplexDouble *", 0, 0, (void*)&_wrap_class_FFTPlanComplexDouble, 0};
static swig_type_info _swigt__p_AudioDSP__FFTPlanComplexDouble2D = {"_p_AudioDSP__FFTPlanComplexDouble2D", "AudioDSP::FFTPlanComplexDouble2D *", 0, 0, (void*)&_wrap_class_FFTPlanComplexDouble2D, 0};
static swig_type_info _swigt__p_AudioDSP__FFTPlanComplexFloat = {"_p_AudioDSP__FFTPlanComplexFloat", "AudioDSP::FFTPlanComplexFloat *", 0, 0, (void*)&_wrap_class_FFTPlanComplexFloat, 0};
static swig_type_info _swigt__p_AudioDSP__FFTPlanComplexFloat2D = {"_p_AudioDSP__FFTPlanComplexFloat2D", "AudioDSP::FFTPlanComplexFloat2D *", 0, 0, (void*)&_wrap_class_FFTPlanComplexFloat2D, 0};
static swig_type_info _swigt__p_AudioDSP__FFTPlanRealDouble = {"_p_AudioDSP__FFTPlanRealDouble", "AudioDSP::FFTPlanRealDouble *", 0, 0, (void*)&_wrap_class_FFTPlanRealDouble, 0};
static swig_type_info _swigt__p_AudioDSP__FFTPlanRealDouble2D = {"_p_AudioDSP__FFTPlanRealDouble2D", "AudioDSP::FFTPlanRealDouble2D *", 0, 0, (void*)&_wrap_class_FFTPlanRealDouble2D, 0};
static swig_type_info _swigt__p_AudioDSP__FFTPlanRealFloat = {"_p_AudioDSP__FFTPlanRealFloat", "AudioDSP::FFTPlanRealFloat *", 0, 0, (void*)&_wrap_class_FFTPlanRealFloat, 0};
static swig_type_info _swigt__p_AudioDSP__FFTPlanRealFloat2D = {"_p_AudioDSP__FFTPlanRealFloat2D", "AudioDSP::FFTPlanRealFloat2D *", 0, 0, (void*)&_wrap_class_FFTPlanRealFloat2D, 0};
static swig_type_info _swigt__p_AudioDSP__WindowT_double_t = {"_p_AudioDSP__WindowT_double_t", "AudioDSP::Window< double > *|AudioDSP::Window< DspFloatType > *", 0, 0, (void*)&_wrap_class_window, 0};
static swig_type_info _swigt__p_AudioDSP__complex_matrixT_double_t = {"_p_AudioDSP__complex_matrixT_double_t", "AudioDSP::complex_matrix< double > *|AudioDSP::complex_matrix< DspFloatType > *", 0, 0, (void*)&_wrap_class_complex_matrix, 0};
static swig_type_info _swigt__p_AudioDSP__complex_vectorT_double_t = {"_p_AudioDSP__complex_vectorT_double_t", "AudioDSP::complex_vector< double > *|AudioDSP::complex_vector< DspFloatType > *", 0, 0, (void*)&_wrap_class_complex_vector, 0};
static swig_type_info _swigt__p_AudioDSP__sample_matrixT_double_t = {"_p_AudioDSP__sample_matrixT_double_t", "AudioDSP::sample_matrix< double > *|AudioDSP::sample_matrix< DspFloatType > *", 0, 0, (void*)&_wrap_class_sample_matrix, 0};
static swig_type_info _swigt__p_AudioDSP__sample_matrixT_int_t = {"_p_AudioDSP__sample_matrixT_int_t", "AudioDSP::sample_matrix< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AudioDSP__sample_matrixT_long_t = {"_p_AudioDSP__sample_matrixT_long_t", "AudioDSP::sample_matrix< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AudioDSP__sample_matrix_viewT_double_t = {"_p_AudioDSP__sample_matrix_viewT_double_t", "AudioDSP::sample_matrix_view< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AudioDSP__sample_vectorT_AudioDSP__sample_vectorT_DspFloatType_t_t = {"_p_AudioDSP__sample_vectorT_AudioDSP__sample_vectorT_DspFloatType_t_t", "AudioDSP::sample_vector< AudioDSP::sample_vector< double > > *|AudioDSP::sample_vector< AudioDSP::sample_vector< DspFloatType > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AudioDSP__sample_vectorT_double_p_t = {"_p_AudioDSP__sample_vectorT_double_p_t", "AudioDSP::sample_vector< double * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AudioDSP__sample_vectorT_double_t = {"_p_AudioDSP__sample_vectorT_double_t", "AudioDSP::sample_vector< double > *|AudioDSP::sample_vector< DspFloatType > *", 0, 0, (void*)&_wrap_class_sample_vector, 0};
static swig_type_info _swigt__p_AudioDSP__sample_vectorT_int_t = {"_p_AudioDSP__sample_vectorT_int_t", "AudioDSP::sample_vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AudioDSP__sample_vectorT_long_t = {"_p_AudioDSP__sample_vectorT_long_t", "AudioDSP::sample_vector< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AudioDSP__wav_data = {"_p_AudioDSP__wav_data", "AudioDSP::wav_data *", 0, 0, (void*)&_wrap_class_wav_data, 0};
static swig_type_info _swigt__p_FilterProcessor = {"_p_FilterProcessor", "FilterProcessor *", 0, 0, (void*)&_wrap_class_FilterProcessor, 0};
static swig_type_info _swigt__p_FunctionProcessor = {"_p_FunctionProcessor", "FunctionProcessor *", 0, 0, (void*)&_wrap_class_FunctionProcessor, 0};
static swig_type_info _swigt__p_GeneratorProcessor = {"_p_GeneratorProcessor", "GeneratorProcessor *", 0, 0, (void*)&_wrap_class_GeneratorProcessor, 0};
static swig_type_info _swigt__p_MixerProcessor = {"_p_MixerProcessor", "MixerProcessor *", 0, 0, (void*)&_wrap_class_MixerProcessor, 0};
static swig_type_info _swigt__p_MonoAdderOperatorProcessor = {"_p_MonoAdderOperatorProcessor", "MonoAdderOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoAdderOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoBlendOperatorProcessor = {"_p_MonoBlendOperatorProcessor", "MonoBlendOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoBlendOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoCascadeOperatorProcessor = {"_p_MonoCascadeOperatorProcessor", "MonoCascadeOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoCascadeOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoCascadeProcessor = {"_p_MonoCascadeProcessor", "MonoCascadeProcessor *", 0, 0, (void*)&_wrap_class_MonoCascadeProcessor, 0};
static swig_type_info _swigt__p_MonoDownsampleProcessor = {"_p_MonoDownsampleProcessor", "MonoDownsampleProcessor *", 0, 0, (void*)&_wrap_class_MonoDownsampleProcessor, 0};
static swig_type_info _swigt__p_MonoFXProcessor = {"_p_MonoFXProcessor", "MonoFXProcessor *", 0, 0, (void*)&_wrap_class_MonoFXProcessor, 0};
static swig_type_info _swigt__p_MonoModulatorOperatorProcessor = {"_p_MonoModulatorOperatorProcessor", "MonoModulatorOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoModulatorOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoMultiplierOperatorProcessor = {"_p_MonoMultiplierOperatorProcessor", "MonoMultiplierOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoMultiplierOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoOperatorProcessor = {"_p_MonoOperatorProcessor", "MonoOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoOversampleProcessor = {"_p_MonoOversampleProcessor", "MonoOversampleProcessor *", 0, 0, (void*)&_wrap_class_MonoOversampleProcessor, 0};
static swig_type_info _swigt__p_MonoProcessor = {"_p_MonoProcessor", "MonoProcessor *", 0, 0, (void*)&_wrap_class_MonoProcessor, 0};
static swig_type_info _swigt__p_MonoSubtractorOperatorProcessor = {"_p_MonoSubtractorOperatorProcessor", "MonoSubtractorOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoSubtractorOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoUpsampleProcessor = {"_p_MonoUpsampleProcessor", "MonoUpsampleProcessor *", 0, 0, (void*)&_wrap_class_MonoUpsampleProcessor, 0};
static swig_type_info _swigt__p_OperatorProcessor = {"_p_OperatorProcessor", "OperatorProcessor *", 0, 0, (void*)&_wrap_class_OperatorProcessor, 0};
static swig_type_info _swigt__p_OscillatorProcessor = {"_p_OscillatorProcessor", "OscillatorProcessor *", 0, 0, (void*)&_wrap_class_OscillatorProcessor, 0};
static swig_type_info _swigt__p_Parameter2Processor = {"_p_Parameter2Processor", "Parameter2Processor *", 0, 0, (void*)&_wrap_class_Parameter2Processor, 0};
static swig_type_info _swigt__p_Port = {"_p_Port", "Port *", 0, 0, (void*)&_wrap_class_Port, 0};
static swig_type_info _swigt__p_PortMap = {"_p_PortMap", "PortMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ports = {"_p_Ports", "Ports *", 0, 0, (void*)&_wrap_class_Ports, 0};
static swig_type_info _swigt__p_Random = {"_p_Random", "Random *", 0, 0, (void*)&_wrap_class_Random, 0};
static swig_type_info _swigt__p_SignalSinkProcessor = {"_p_SignalSinkProcessor", "SignalSinkProcessor *", 0, 0, (void*)&_wrap_class_SignalSinkProcessor, 0};
static swig_type_info _swigt__p_SignalSourceProcessor = {"_p_SignalSourceProcessor", "SignalSourceProcessor *", 0, 0, (void*)&_wrap_class_SignalSourceProcessor, 0};
static swig_type_info _swigt__p_SndFileReaderDouble = {"_p_SndFileReaderDouble", "SndFileReaderDouble *", 0, 0, (void*)&_wrap_class_SndFileReaderDouble, 0};
static swig_type_info _swigt__p_SndFileReaderFloat = {"_p_SndFileReaderFloat", "SndFileReaderFloat *", 0, 0, (void*)&_wrap_class_SndFileReaderFloat, 0};
static swig_type_info _swigt__p_SndFileReaderInt = {"_p_SndFileReaderInt", "SndFileReaderInt *", 0, 0, (void*)&_wrap_class_SndFileReaderInt, 0};
static swig_type_info _swigt__p_SndFileReaderShort = {"_p_SndFileReaderShort", "SndFileReaderShort *", 0, 0, (void*)&_wrap_class_SndFileReaderShort, 0};
static swig_type_info _swigt__p_SndFileWriterDouble = {"_p_SndFileWriterDouble", "SndFileWriterDouble *", 0, 0, (void*)&_wrap_class_SndFileWriterDouble, 0};
static swig_type_info _swigt__p_SndFileWriterFloat = {"_p_SndFileWriterFloat", "SndFileWriterFloat *", 0, 0, (void*)&_wrap_class_SndFileWriterFloat, 0};
static swig_type_info _swigt__p_SndFileWriterInt = {"_p_SndFileWriterInt", "SndFileWriterInt *", 0, 0, (void*)&_wrap_class_SndFileWriterInt, 0};
static swig_type_info _swigt__p_SndFileWriterShort = {"_p_SndFileWriterShort", "SndFileWriterShort *", 0, 0, (void*)&_wrap_class_SndFileWriterShort, 0};
static swig_type_info _swigt__p_SoundProcessor = {"_p_SoundProcessor", "SoundProcessor *", 0, 0, (void*)&_wrap_class_SoundProcessor, 0};
static swig_type_info _swigt__p_SpectrumProcessor = {"_p_SpectrumProcessor", "SpectrumProcessor *", 0, 0, (void*)&_wrap_class_SpectrumProcessor, 0};
static swig_type_info _swigt__p_StereoAmplifierProcessor = {"_p_StereoAmplifierProcessor", "StereoAmplifierProcessor *", 0, 0, (void*)&_wrap_class_StereoAmplifierProcessor, 0};
static swig_type_info _swigt__p_StereoCascadeProcessor = {"_p_StereoCascadeProcessor", "StereoCascadeProcessor *", 0, 0, (void*)&_wrap_class_StereoCascadeProcessor, 0};
static swig_type_info _swigt__p_StereoFXProcessor = {"_p_StereoFXProcessor", "StereoFXProcessor *", 0, 0, (void*)&_wrap_class_StereoFXProcessor, 0};
static swig_type_info _swigt__p_StereoFilterProcessor = {"_p_StereoFilterProcessor", "StereoFilterProcessor *", 0, 0, (void*)&_wrap_class_StereoFilterProcessor, 0};
static swig_type_info _swigt__p_StereoFunctionProcessor = {"_p_StereoFunctionProcessor", "StereoFunctionProcessor *", 0, 0, (void*)&_wrap_class_StereoFunctionProcessor, 0};
static swig_type_info _swigt__p_StereoGeneratorProcessor = {"_p_StereoGeneratorProcessor", "StereoGeneratorProcessor *", 0, 0, (void*)&_wrap_class_StereoGeneratorProcessor, 0};
static swig_type_info _swigt__p_StereoOscillatorProcessor = {"_p_StereoOscillatorProcessor", "StereoOscillatorProcessor *", 0, 0, (void*)&_wrap_class_StereoOscillatorProcessor, 0};
static swig_type_info _swigt__p_StereoProcessor = {"_p_StereoProcessor", "StereoProcessor *", 0, 0, (void*)&_wrap_class_StereoProcessor, 0};
static swig_type_info _swigt__p_StereoSplitterProcessor = {"_p_StereoSplitterProcessor", "StereoSplitterProcessor *", 0, 0, (void*)&_wrap_class_StereoSplitterProcessor, 0};
static swig_type_info _swigt__p_base = {"_p_base", "base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "DspFloatType *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fftw_complex = {"_p_fftw_complex", "fftw_complex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fftw_plan = {"_p_fftw_plan", "fftw_plan *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fftwf_complex = {"_p_fftwf_complex", "fftwf_complex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fftwf_plan = {"_p_fftwf_plan", "fftwf_plan *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_AmplifierProcessor = {"_p_p_AmplifierProcessor", "AmplifierProcessor **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_FilterProcessor = {"_p_p_FilterProcessor", "FilterProcessor **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_FunctionProcessor = {"_p_p_FunctionProcessor", "FunctionProcessor **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **|DspFloatType **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_double = {"_p_p_p_double", "double ***", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std::complex< double > *|std::complex< DspFloatType > *", 0, 0, (void*)&_wrap_class_complex, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_MonoProcessor_p_t = {"_p_std__listT_MonoProcessor_p_t", "MonoProcessorList *|std::list< MonoProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_SoundProcessor_p_t = {"_p_std__listT_SoundProcessor_p_t", "SoundProcessorList *|std::list< SoundProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_StereoProcessor_p_t = {"_p_std__listT_StereoProcessor_p_t", "StereoProcessorList *|std::list< StereoProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__shared_ptrT_Port_t_t = {"_p_std__listT_std__shared_ptrT_Port_t_t", "std::list< std::shared_ptr< Port > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_MonoProcessor_p_t = {"_p_std__mapT_std__string_MonoProcessor_p_t", "MonoProcessorNameMap *|std::map< std::string,MonoProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_Port_p_t = {"_p_std__mapT_std__string_Port_p_t", "Ports::PortMap *|std::map< std::string,Port * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_SoundProcessor_p_t = {"_p_std__mapT_std__string_SoundProcessor_p_t", "SoundProcessorNameMap *|std::map< std::string,SoundProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_StereoProcessor_p_t = {"_p_std__mapT_std__string_StereoProcessor_p_t", "StereoProcessorNameMap *|std::map< std::string,StereoProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_double_t = {"_p_std__numeric_limitsT_double_t", "std::numeric_limits< double > *", 0, 0, (void*)&_wrap_class_double_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_float_t = {"_p_std__numeric_limitsT_float_t", "std::numeric_limits< float > *", 0, 0, (void*)&_wrap_class_float_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_int_t = {"_p_std__numeric_limitsT_int_t", "std::numeric_limits< int > *", 0, 0, (void*)&_wrap_class_int_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_long_t = {"_p_std__numeric_limitsT_long_long_t", "std::numeric_limits< long long > *", 0, 0, (void*)&_wrap_class_llong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_t = {"_p_std__numeric_limitsT_long_t", "std::numeric_limits< long > *", 0, 0, (void*)&_wrap_class_long_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_short_t = {"_p_std__numeric_limitsT_short_t", "std::numeric_limits< short > *", 0, 0, (void*)&_wrap_class_short_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_int_t = {"_p_std__numeric_limitsT_unsigned_int_t", "std::numeric_limits< unsigned int > *", 0, 0, (void*)&_wrap_class_uint_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_long_t = {"_p_std__numeric_limitsT_unsigned_long_long_t", "std::numeric_limits< unsigned long long > *", 0, 0, (void*)&_wrap_class_ullong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_t = {"_p_std__numeric_limitsT_unsigned_long_t", "std::numeric_limits< unsigned long > *", 0, 0, (void*)&_wrap_class_ulong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_short_t = {"_p_std__numeric_limitsT_unsigned_short_t", "std::numeric_limits< unsigned short > *", 0, 0, (void*)&_wrap_class_ushort_numeric_limits, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_MonoProcessor_p_std__allocatorT_MonoProcessor_p_t_t = {"_p_std__vectorT_MonoProcessor_p_std__allocatorT_MonoProcessor_p_t_t", "std::vector< MonoProcessor *,std::allocator< MonoProcessor * > > *|MonoProcessorVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t = {"_p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t", "std::vector< OscillatorProcessor *,std::allocator< OscillatorProcessor * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_SoundProcessor_p_std__allocatorT_SoundProcessor_p_t_t = {"_p_std__vectorT_SoundProcessor_p_std__allocatorT_SoundProcessor_p_t_t", "std::vector< SoundProcessor *,std::allocator< SoundProcessor * > > *|SoundProcessorVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_StereoProcessor_p_std__allocatorT_StereoProcessor_p_t_t = {"_p_std__vectorT_StereoProcessor_p_std__allocatorT_StereoProcessor_p_t_t", "std::vector< StereoProcessor *,std::allocator< StereoProcessor * > > *|StereoProcessorVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t = {"_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t", "std::vector< double,Allocator::aligned_allocator< double,64 > > *", 0, 0, (void*)&_wrap_class_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< DspFloatType,std::allocator< DspFloatType > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t = {"_p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t", "std::vector< float,Allocator::aligned_allocator< float,64 > > *", 0, 0, (void*)&_wrap_class_float_vector, 0};
static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t = {"_p_std__vectorT_float_std__allocatorT_float_t_t", "std::vector< float,std::allocator< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)&_wrap_class_int32_vector, 0};
static swig_type_info _swigt__p_std__vectorT_long_std__allocatorT_long_t_t = {"_p_std__vectorT_long_std__allocatorT_long_t_t", "std::vector< long,std::allocator< long > > *|std::vector< long > *", 0, 0, (void*)&_wrap_class_int64_vector, 0};
static swig_type_info _swigt__p_std__vectorT_short_std__allocatorT_short_t_t = {"_p_std__vectorT_short_std__allocatorT_short_t_t", "std::vector< short > *|std::vector< short,std::allocator< short > > *", 0, 0, (void*)&_wrap_class_int16_vector, 0};
static swig_type_info _swigt__p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t = {"_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t", "std::vector< signed char > *|std::vector< signed char,std::allocator< signed char > > *", 0, 0, (void*)&_wrap_class_int8_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t = {"_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t", "std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< double >,64 > > *|std::vector< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > *|std::vector< std::complex< double >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > *", 0, 0, (void*)&_wrap_class_complex_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_DspFloatType_t_std__allocatorT_std__complexT_DspFloatType_t_t_t = {"_p_std__vectorT_std__complexT_DspFloatType_t_std__allocatorT_std__complexT_DspFloatType_t_t_t", "std::vector< std::complex< DspFloatType >,std::allocator< std::complex< DspFloatType > > > *|std::vector< std::complex< double >,std::allocator< std::complex< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t = {"_p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t", "std::vector< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *", 0, 0, (void*)&_wrap_class_complex_float_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t = {"_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t", "std::vector< std::complex< float >,std::allocator< std::complex< float > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t = {"_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t", "std::vector< unsigned char > *|std::vector< unsigned char,std::allocator< unsigned char > > *", 0, 0, (void*)&_wrap_class_uint8_vector, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< unsigned int,std::allocator< unsigned int > > *|std::vector< unsigned int > *", 0, 0, (void*)&_wrap_class_uint32_vector, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t = {"_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t", "std::vector< unsigned long > *|std::vector< unsigned long,std::allocator< unsigned long > > *", 0, 0, (void*)&_wrap_class_uint64_vector, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t = {"_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t", "std::vector< unsigned short > *|std::vector< unsigned short,std::allocator< unsigned short > > *", 0, 0, (void*)&_wrap_class_uint16_vector, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_double_Allocator__aligned_allocatorT_double_64_t_t = {"_p_std__vector_iteratorT_double_Allocator__aligned_allocatorT_double_64_t_t", "std::vector_iterator< double,Allocator::aligned_allocator< double,64 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_float_Allocator__aligned_allocatorT_float_64_t_t = {"_p_std__vector_iteratorT_float_Allocator__aligned_allocatorT_float_64_t_t", "std::vector_iterator< float,Allocator::aligned_allocator< float,64 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_int_std__allocatorT_int_t_t = {"_p_std__vector_iteratorT_int_std__allocatorT_int_t_t", "std::vector_iterator< int,std::allocator< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_long_std__allocatorT_long_t_t = {"_p_std__vector_iteratorT_long_std__allocatorT_long_t_t", "std::vector_iterator< long,std::allocator< long > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_short_std__allocatorT_short_t_t = {"_p_std__vector_iteratorT_short_std__allocatorT_short_t_t", "std::vector_iterator< short,std::allocator< short > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_signed_char_std__allocatorT_signed_char_t_t = {"_p_std__vector_iteratorT_signed_char_std__allocatorT_signed_char_t_t", "std::vector_iterator< signed char,std::allocator< signed char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t = {"_p_std__vector_iteratorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t", "std::vector_iterator< std::complex< double >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > *|std::vector_iterator< std::complex< DspFloatType >,Allocator::aligned_allocator< std::complex< DspFloatType >,64 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t = {"_p_std__vector_iteratorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t", "std::vector_iterator< std::complex< float >,Allocator::aligned_allocator< std::complex< float >,64 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_unsigned_char_std__allocatorT_unsigned_char_t_t = {"_p_std__vector_iteratorT_unsigned_char_std__allocatorT_unsigned_char_t_t", "std::vector_iterator< unsigned char,std::allocator< unsigned char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vector_iteratorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector_iterator< unsigned int,std::allocator< unsigned int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_unsigned_long_std__allocatorT_unsigned_long_t_t = {"_p_std__vector_iteratorT_unsigned_long_std__allocatorT_unsigned_long_t_t", "std::vector_iterator< unsigned long,std::allocator< unsigned long > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_unsigned_short_std__allocatorT_unsigned_short_t_t = {"_p_std__vector_iteratorT_unsigned_short_std__allocatorT_unsigned_short_t_t", "std::vector_iterator< unsigned short,std::allocator< unsigned short > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AmplifierProcessor,
  &_swigt__p_AudioDSP__FFTConvolutionDouble,
  &_swigt__p_AudioDSP__FFTConvolutionFloat,
  &_swigt__p_AudioDSP__FFTPlan,
  &_swigt__p_AudioDSP__FFTPlanComplexDouble,
  &_swigt__p_AudioDSP__FFTPlanComplexDouble2D,
  &_swigt__p_AudioDSP__FFTPlanComplexFloat,
  &_swigt__p_AudioDSP__FFTPlanComplexFloat2D,
  &_swigt__p_AudioDSP__FFTPlanRealDouble,
  &_swigt__p_AudioDSP__FFTPlanRealDouble2D,
  &_swigt__p_AudioDSP__FFTPlanRealFloat,
  &_swigt__p_AudioDSP__FFTPlanRealFloat2D,
  &_swigt__p_AudioDSP__WindowT_double_t,
  &_swigt__p_AudioDSP__complex_matrixT_double_t,
  &_swigt__p_AudioDSP__complex_vectorT_double_t,
  &_swigt__p_AudioDSP__sample_matrixT_double_t,
  &_swigt__p_AudioDSP__sample_matrixT_int_t,
  &_swigt__p_AudioDSP__sample_matrixT_long_t,
  &_swigt__p_AudioDSP__sample_matrix_viewT_double_t,
  &_swigt__p_AudioDSP__sample_vectorT_AudioDSP__sample_vectorT_DspFloatType_t_t,
  &_swigt__p_AudioDSP__sample_vectorT_double_p_t,
  &_swigt__p_AudioDSP__sample_vectorT_double_t,
  &_swigt__p_AudioDSP__sample_vectorT_int_t,
  &_swigt__p_AudioDSP__sample_vectorT_long_t,
  &_swigt__p_AudioDSP__wav_data,
  &_swigt__p_FilterProcessor,
  &_swigt__p_FunctionProcessor,
  &_swigt__p_GeneratorProcessor,
  &_swigt__p_MixerProcessor,
  &_swigt__p_MonoAdderOperatorProcessor,
  &_swigt__p_MonoBlendOperatorProcessor,
  &_swigt__p_MonoCascadeOperatorProcessor,
  &_swigt__p_MonoCascadeProcessor,
  &_swigt__p_MonoDownsampleProcessor,
  &_swigt__p_MonoFXProcessor,
  &_swigt__p_MonoModulatorOperatorProcessor,
  &_swigt__p_MonoMultiplierOperatorProcessor,
  &_swigt__p_MonoOperatorProcessor,
  &_swigt__p_MonoOversampleProcessor,
  &_swigt__p_MonoProcessor,
  &_swigt__p_MonoSubtractorOperatorProcessor,
  &_swigt__p_MonoUpsampleProcessor,
  &_swigt__p_OperatorProcessor,
  &_swigt__p_OscillatorProcessor,
  &_swigt__p_Parameter2Processor,
  &_swigt__p_Port,
  &_swigt__p_PortMap,
  &_swigt__p_Ports,
  &_swigt__p_Random,
  &_swigt__p_SignalSinkProcessor,
  &_swigt__p_SignalSourceProcessor,
  &_swigt__p_SndFileReaderDouble,
  &_swigt__p_SndFileReaderFloat,
  &_swigt__p_SndFileReaderInt,
  &_swigt__p_SndFileReaderShort,
  &_swigt__p_SndFileWriterDouble,
  &_swigt__p_SndFileWriterFloat,
  &_swigt__p_SndFileWriterInt,
  &_swigt__p_SndFileWriterShort,
  &_swigt__p_SoundProcessor,
  &_swigt__p_SpectrumProcessor,
  &_swigt__p_StereoAmplifierProcessor,
  &_swigt__p_StereoCascadeProcessor,
  &_swigt__p_StereoFXProcessor,
  &_swigt__p_StereoFilterProcessor,
  &_swigt__p_StereoFunctionProcessor,
  &_swigt__p_StereoGeneratorProcessor,
  &_swigt__p_StereoOscillatorProcessor,
  &_swigt__p_StereoProcessor,
  &_swigt__p_StereoSplitterProcessor,
  &_swigt__p_base,
  &_swigt__p_double,
  &_swigt__p_fftw_complex,
  &_swigt__p_fftw_plan,
  &_swigt__p_fftwf_complex,
  &_swigt__p_fftwf_plan,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_p_AmplifierProcessor,
  &_swigt__p_p_FilterProcessor,
  &_swigt__p_p_FunctionProcessor,
  &_swigt__p_p_double,
  &_swigt__p_p_p_double,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__listT_MonoProcessor_p_t,
  &_swigt__p_std__listT_SoundProcessor_p_t,
  &_swigt__p_std__listT_StereoProcessor_p_t,
  &_swigt__p_std__listT_std__shared_ptrT_Port_t_t,
  &_swigt__p_std__mapT_std__string_MonoProcessor_p_t,
  &_swigt__p_std__mapT_std__string_Port_p_t,
  &_swigt__p_std__mapT_std__string_SoundProcessor_p_t,
  &_swigt__p_std__mapT_std__string_StereoProcessor_p_t,
  &_swigt__p_std__numeric_limitsT_double_t,
  &_swigt__p_std__numeric_limitsT_float_t,
  &_swigt__p_std__numeric_limitsT_int_t,
  &_swigt__p_std__numeric_limitsT_long_long_t,
  &_swigt__p_std__numeric_limitsT_long_t,
  &_swigt__p_std__numeric_limitsT_short_t,
  &_swigt__p_std__numeric_limitsT_unsigned_int_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_short_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_MonoProcessor_p_std__allocatorT_MonoProcessor_p_t_t,
  &_swigt__p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t,
  &_swigt__p_std__vectorT_SoundProcessor_p_std__allocatorT_SoundProcessor_p_t_t,
  &_swigt__p_std__vectorT_StereoProcessor_p_std__allocatorT_StereoProcessor_p_t_t,
  &_swigt__p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,
  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_long_std__allocatorT_long_t_t,
  &_swigt__p_std__vectorT_short_std__allocatorT_short_t_t,
  &_swigt__p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,
  &_swigt__p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,
  &_swigt__p_std__vectorT_std__complexT_DspFloatType_t_std__allocatorT_std__complexT_DspFloatType_t_t_t,
  &_swigt__p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,
  &_swigt__p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,
  &_swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,
  &_swigt__p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,
  &_swigt__p_std__vector_iteratorT_double_Allocator__aligned_allocatorT_double_64_t_t,
  &_swigt__p_std__vector_iteratorT_float_Allocator__aligned_allocatorT_float_64_t_t,
  &_swigt__p_std__vector_iteratorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vector_iteratorT_long_std__allocatorT_long_t_t,
  &_swigt__p_std__vector_iteratorT_short_std__allocatorT_short_t_t,
  &_swigt__p_std__vector_iteratorT_signed_char_std__allocatorT_signed_char_t_t,
  &_swigt__p_std__vector_iteratorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,
  &_swigt__p_std__vector_iteratorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,
  &_swigt__p_std__vector_iteratorT_unsigned_char_std__allocatorT_unsigned_char_t_t,
  &_swigt__p_std__vector_iteratorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_std__vector_iteratorT_unsigned_long_std__allocatorT_unsigned_long_t_t,
  &_swigt__p_std__vector_iteratorT_unsigned_short_std__allocatorT_unsigned_short_t_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_AmplifierProcessor[] = {  {&_swigt__p_AmplifierProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__FFTConvolutionDouble[] = {  {&_swigt__p_AudioDSP__FFTConvolutionDouble, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__FFTConvolutionFloat[] = {  {&_swigt__p_AudioDSP__FFTConvolutionFloat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__FFTPlan[] = {  {&_swigt__p_AudioDSP__FFTPlan, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__FFTPlanComplexDouble[] = {  {&_swigt__p_AudioDSP__FFTPlanComplexDouble, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__FFTPlanComplexDouble2D[] = {  {&_swigt__p_AudioDSP__FFTPlanComplexDouble2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__FFTPlanComplexFloat[] = {  {&_swigt__p_AudioDSP__FFTPlanComplexFloat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__FFTPlanComplexFloat2D[] = {  {&_swigt__p_AudioDSP__FFTPlanComplexFloat2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__FFTPlanRealDouble[] = {  {&_swigt__p_AudioDSP__FFTPlanRealDouble, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__FFTPlanRealDouble2D[] = {  {&_swigt__p_AudioDSP__FFTPlanRealDouble2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__FFTPlanRealFloat[] = {  {&_swigt__p_AudioDSP__FFTPlanRealFloat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__FFTPlanRealFloat2D[] = {  {&_swigt__p_AudioDSP__FFTPlanRealFloat2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__WindowT_double_t[] = {  {&_swigt__p_AudioDSP__WindowT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__complex_matrixT_double_t[] = {  {&_swigt__p_AudioDSP__complex_matrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__complex_vectorT_double_t[] = {  {&_swigt__p_AudioDSP__complex_vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__sample_matrixT_double_t[] = {  {&_swigt__p_AudioDSP__sample_matrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__sample_matrixT_int_t[] = {  {&_swigt__p_AudioDSP__sample_matrixT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__sample_matrixT_long_t[] = {  {&_swigt__p_AudioDSP__sample_matrixT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__sample_matrix_viewT_double_t[] = {  {&_swigt__p_AudioDSP__sample_matrix_viewT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__sample_vectorT_AudioDSP__sample_vectorT_DspFloatType_t_t[] = {  {&_swigt__p_AudioDSP__sample_vectorT_AudioDSP__sample_vectorT_DspFloatType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__sample_vectorT_double_p_t[] = {  {&_swigt__p_AudioDSP__sample_vectorT_double_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__sample_vectorT_double_t[] = {  {&_swigt__p_AudioDSP__sample_vectorT_double_t, 0, 0, 0},  {&_swigt__p_AudioDSP__WindowT_double_t, _p_AudioDSP__WindowT_double_tTo_p_AudioDSP__sample_vectorT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__sample_vectorT_int_t[] = {  {&_swigt__p_AudioDSP__sample_vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__sample_vectorT_long_t[] = {  {&_swigt__p_AudioDSP__sample_vectorT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioDSP__wav_data[] = {  {&_swigt__p_AudioDSP__wav_data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FilterProcessor[] = {  {&_swigt__p_FilterProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FunctionProcessor[] = {  {&_swigt__p_FunctionProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeneratorProcessor[] = {  {&_swigt__p_GeneratorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MixerProcessor[] = {  {&_swigt__p_MixerProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoAdderOperatorProcessor[] = {  {&_swigt__p_MonoAdderOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoBlendOperatorProcessor[] = {  {&_swigt__p_MonoBlendOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoCascadeOperatorProcessor[] = {  {&_swigt__p_MonoCascadeOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoCascadeProcessor[] = {  {&_swigt__p_MonoCascadeProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoDownsampleProcessor[] = {  {&_swigt__p_MonoDownsampleProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoFXProcessor[] = {  {&_swigt__p_MonoFXProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoModulatorOperatorProcessor[] = {  {&_swigt__p_MonoModulatorOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoMultiplierOperatorProcessor[] = {  {&_swigt__p_MonoMultiplierOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoOperatorProcessor[] = {  {&_swigt__p_MonoOperatorProcessor, 0, 0, 0},  {&_swigt__p_MonoCascadeOperatorProcessor, _p_MonoCascadeOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},  {&_swigt__p_MonoMultiplierOperatorProcessor, _p_MonoMultiplierOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},  {&_swigt__p_MonoAdderOperatorProcessor, _p_MonoAdderOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},  {&_swigt__p_MonoSubtractorOperatorProcessor, _p_MonoSubtractorOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},  {&_swigt__p_MonoModulatorOperatorProcessor, _p_MonoModulatorOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},  {&_swigt__p_MonoBlendOperatorProcessor, _p_MonoBlendOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoOversampleProcessor[] = {  {&_swigt__p_MonoOversampleProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoProcessor[] = {  {&_swigt__p_MonoProcessor, 0, 0, 0},  {&_swigt__p_MonoCascadeProcessor, _p_MonoCascadeProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_MonoFXProcessor, _p_MonoFXProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_GeneratorProcessor, _p_GeneratorProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_FunctionProcessor, _p_FunctionProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_OscillatorProcessor, _p_OscillatorProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_FilterProcessor, _p_FilterProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_AmplifierProcessor, _p_AmplifierProcessorTo_p_MonoProcessor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoSubtractorOperatorProcessor[] = {  {&_swigt__p_MonoSubtractorOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoUpsampleProcessor[] = {  {&_swigt__p_MonoUpsampleProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OperatorProcessor[] = {  {&_swigt__p_OperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OscillatorProcessor[] = {  {&_swigt__p_OscillatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Parameter2Processor[] = {  {&_swigt__p_Parameter2Processor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Port[] = {  {&_swigt__p_Port, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PortMap[] = {  {&_swigt__p_PortMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ports[] = {  {&_swigt__p_Ports, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Random[] = {  {&_swigt__p_Random, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalSinkProcessor[] = {  {&_swigt__p_SignalSinkProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalSourceProcessor[] = {  {&_swigt__p_SignalSourceProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SndFileReaderDouble[] = {  {&_swigt__p_SndFileReaderDouble, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SndFileReaderFloat[] = {  {&_swigt__p_SndFileReaderFloat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SndFileReaderInt[] = {  {&_swigt__p_SndFileReaderInt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SndFileReaderShort[] = {  {&_swigt__p_SndFileReaderShort, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SndFileWriterDouble[] = {  {&_swigt__p_SndFileWriterDouble, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SndFileWriterFloat[] = {  {&_swigt__p_SndFileWriterFloat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SndFileWriterInt[] = {  {&_swigt__p_SndFileWriterInt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SndFileWriterShort[] = {  {&_swigt__p_SndFileWriterShort, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundProcessor[] = {  {&_swigt__p_StereoProcessor, _p_StereoProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoCascadeProcessor, _p_StereoCascadeProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoFXProcessor, _p_StereoFXProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MixerProcessor, _p_MixerProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Parameter2Processor, _p_Parameter2ProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoSplitterProcessor, _p_StereoSplitterProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_AmplifierProcessor, _p_AmplifierProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_FilterProcessor, _p_FilterProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_OscillatorProcessor, _p_OscillatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_FunctionProcessor, _p_FunctionProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_GeneratorProcessor, _p_GeneratorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoFXProcessor, _p_MonoFXProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoCascadeProcessor, _p_MonoCascadeProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoProcessor, _p_MonoProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoOscillatorProcessor, _p_StereoOscillatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoGeneratorProcessor, _p_StereoGeneratorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoFunctionProcessor, _p_StereoFunctionProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoFilterProcessor, _p_StereoFilterProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoAmplifierProcessor, _p_StereoAmplifierProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_SpectrumProcessor, _p_SpectrumProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_SoundProcessor, 0, 0, 0},  {&_swigt__p_MonoBlendOperatorProcessor, _p_MonoBlendOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoModulatorOperatorProcessor, _p_MonoModulatorOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoSubtractorOperatorProcessor, _p_MonoSubtractorOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoAdderOperatorProcessor, _p_MonoAdderOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoMultiplierOperatorProcessor, _p_MonoMultiplierOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoCascadeOperatorProcessor, _p_MonoCascadeOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoOperatorProcessor, _p_MonoOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_OperatorProcessor, _p_OperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoDownsampleProcessor, _p_MonoDownsampleProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoUpsampleProcessor, _p_MonoUpsampleProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoOversampleProcessor, _p_MonoOversampleProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_SignalSinkProcessor, _p_SignalSinkProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_SignalSourceProcessor, _p_SignalSourceProcessorTo_p_SoundProcessor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectrumProcessor[] = {  {&_swigt__p_SpectrumProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoAmplifierProcessor[] = {  {&_swigt__p_StereoAmplifierProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoCascadeProcessor[] = {  {&_swigt__p_StereoCascadeProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoFXProcessor[] = {  {&_swigt__p_StereoFXProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoFilterProcessor[] = {  {&_swigt__p_StereoFilterProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoFunctionProcessor[] = {  {&_swigt__p_StereoFunctionProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoGeneratorProcessor[] = {  {&_swigt__p_StereoGeneratorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoOscillatorProcessor[] = {  {&_swigt__p_StereoOscillatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoProcessor[] = {  {&_swigt__p_StereoProcessor, 0, 0, 0},  {&_swigt__p_StereoCascadeProcessor, _p_StereoCascadeProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoFXProcessor, _p_StereoFXProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoOscillatorProcessor, _p_StereoOscillatorProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoGeneratorProcessor, _p_StereoGeneratorProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoFunctionProcessor, _p_StereoFunctionProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoFilterProcessor, _p_StereoFilterProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoAmplifierProcessor, _p_StereoAmplifierProcessorTo_p_StereoProcessor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoSplitterProcessor[] = {  {&_swigt__p_StereoSplitterProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_base[] = {  {&_swigt__p_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fftw_complex[] = {  {&_swigt__p_fftw_complex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fftw_plan[] = {  {&_swigt__p_fftw_plan, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fftwf_complex[] = {  {&_swigt__p_fftwf_complex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fftwf_plan[] = {  {&_swigt__p_fftwf_plan, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_AmplifierProcessor[] = {  {&_swigt__p_p_AmplifierProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_FilterProcessor[] = {  {&_swigt__p_p_FilterProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_FunctionProcessor[] = {  {&_swigt__p_p_FunctionProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_double[] = {  {&_swigt__p_p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_MonoProcessor_p_t[] = {  {&_swigt__p_std__listT_MonoProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_SoundProcessor_p_t[] = {  {&_swigt__p_std__listT_SoundProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_StereoProcessor_p_t[] = {  {&_swigt__p_std__listT_StereoProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__shared_ptrT_Port_t_t[] = {  {&_swigt__p_std__listT_std__shared_ptrT_Port_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_MonoProcessor_p_t[] = {  {&_swigt__p_std__mapT_std__string_MonoProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_Port_p_t[] = {  {&_swigt__p_std__mapT_std__string_Port_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_SoundProcessor_p_t[] = {  {&_swigt__p_std__mapT_std__string_SoundProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_StereoProcessor_p_t[] = {  {&_swigt__p_std__mapT_std__string_StereoProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_double_t[] = {  {&_swigt__p_std__numeric_limitsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_float_t[] = {  {&_swigt__p_std__numeric_limitsT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_int_t[] = {  {&_swigt__p_std__numeric_limitsT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_short_t[] = {  {&_swigt__p_std__numeric_limitsT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_int_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_short_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_MonoProcessor_p_std__allocatorT_MonoProcessor_p_t_t[] = {  {&_swigt__p_std__vectorT_MonoProcessor_p_std__allocatorT_MonoProcessor_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t[] = {  {&_swigt__p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_SoundProcessor_p_std__allocatorT_SoundProcessor_p_t_t[] = {  {&_swigt__p_std__vectorT_SoundProcessor_p_std__allocatorT_SoundProcessor_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_StereoProcessor_p_std__allocatorT_StereoProcessor_p_t_t[] = {  {&_swigt__p_std__vectorT_StereoProcessor_p_std__allocatorT_StereoProcessor_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t[] = {  {&_swigt__p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t, 0, 0, 0},  {&_swigt__p_AudioDSP__sample_vectorT_double_t, _p_AudioDSP__sample_vectorT_double_tTo_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t, 0, 0},  {&_swigt__p_AudioDSP__WindowT_double_t, _p_AudioDSP__WindowT_double_tTo_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t, 0, 0},  {&_swigt__p_AudioDSP__sample_matrixT_double_t, _p_AudioDSP__sample_matrixT_double_tTo_p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t[] = {  {&_swigt__p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_std__allocatorT_long_t_t[] = {  {&_swigt__p_std__vectorT_long_std__allocatorT_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_short_std__allocatorT_short_t_t[] = {  {&_swigt__p_std__vectorT_short_std__allocatorT_short_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t[] = {  {&_swigt__p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t[] = {  {&_swigt__p_AudioDSP__complex_vectorT_double_t, _p_AudioDSP__complex_vectorT_double_tTo_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t, 0, 0},  {&_swigt__p_AudioDSP__complex_matrixT_double_t, _p_AudioDSP__complex_matrixT_double_tTo_p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t, 0, 0},  {&_swigt__p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_DspFloatType_t_std__allocatorT_std__complexT_DspFloatType_t_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_DspFloatType_t_std__allocatorT_std__complexT_DspFloatType_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_double_Allocator__aligned_allocatorT_double_64_t_t[] = {  {&_swigt__p_std__vector_iteratorT_double_Allocator__aligned_allocatorT_double_64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_float_Allocator__aligned_allocatorT_float_64_t_t[] = {  {&_swigt__p_std__vector_iteratorT_float_Allocator__aligned_allocatorT_float_64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vector_iteratorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_long_std__allocatorT_long_t_t[] = {  {&_swigt__p_std__vector_iteratorT_long_std__allocatorT_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_short_std__allocatorT_short_t_t[] = {  {&_swigt__p_std__vector_iteratorT_short_std__allocatorT_short_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_signed_char_std__allocatorT_signed_char_t_t[] = {  {&_swigt__p_std__vector_iteratorT_signed_char_std__allocatorT_signed_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_unsigned_char_std__allocatorT_unsigned_char_t_t[] = {  {&_swigt__p_std__vector_iteratorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vector_iteratorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_unsigned_long_std__allocatorT_unsigned_long_t_t[] = {  {&_swigt__p_std__vector_iteratorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_unsigned_short_std__allocatorT_unsigned_short_t_t[] = {  {&_swigt__p_std__vector_iteratorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AmplifierProcessor,
  _swigc__p_AudioDSP__FFTConvolutionDouble,
  _swigc__p_AudioDSP__FFTConvolutionFloat,
  _swigc__p_AudioDSP__FFTPlan,
  _swigc__p_AudioDSP__FFTPlanComplexDouble,
  _swigc__p_AudioDSP__FFTPlanComplexDouble2D,
  _swigc__p_AudioDSP__FFTPlanComplexFloat,
  _swigc__p_AudioDSP__FFTPlanComplexFloat2D,
  _swigc__p_AudioDSP__FFTPlanRealDouble,
  _swigc__p_AudioDSP__FFTPlanRealDouble2D,
  _swigc__p_AudioDSP__FFTPlanRealFloat,
  _swigc__p_AudioDSP__FFTPlanRealFloat2D,
  _swigc__p_AudioDSP__WindowT_double_t,
  _swigc__p_AudioDSP__complex_matrixT_double_t,
  _swigc__p_AudioDSP__complex_vectorT_double_t,
  _swigc__p_AudioDSP__sample_matrixT_double_t,
  _swigc__p_AudioDSP__sample_matrixT_int_t,
  _swigc__p_AudioDSP__sample_matrixT_long_t,
  _swigc__p_AudioDSP__sample_matrix_viewT_double_t,
  _swigc__p_AudioDSP__sample_vectorT_AudioDSP__sample_vectorT_DspFloatType_t_t,
  _swigc__p_AudioDSP__sample_vectorT_double_p_t,
  _swigc__p_AudioDSP__sample_vectorT_double_t,
  _swigc__p_AudioDSP__sample_vectorT_int_t,
  _swigc__p_AudioDSP__sample_vectorT_long_t,
  _swigc__p_AudioDSP__wav_data,
  _swigc__p_FilterProcessor,
  _swigc__p_FunctionProcessor,
  _swigc__p_GeneratorProcessor,
  _swigc__p_MixerProcessor,
  _swigc__p_MonoAdderOperatorProcessor,
  _swigc__p_MonoBlendOperatorProcessor,
  _swigc__p_MonoCascadeOperatorProcessor,
  _swigc__p_MonoCascadeProcessor,
  _swigc__p_MonoDownsampleProcessor,
  _swigc__p_MonoFXProcessor,
  _swigc__p_MonoModulatorOperatorProcessor,
  _swigc__p_MonoMultiplierOperatorProcessor,
  _swigc__p_MonoOperatorProcessor,
  _swigc__p_MonoOversampleProcessor,
  _swigc__p_MonoProcessor,
  _swigc__p_MonoSubtractorOperatorProcessor,
  _swigc__p_MonoUpsampleProcessor,
  _swigc__p_OperatorProcessor,
  _swigc__p_OscillatorProcessor,
  _swigc__p_Parameter2Processor,
  _swigc__p_Port,
  _swigc__p_PortMap,
  _swigc__p_Ports,
  _swigc__p_Random,
  _swigc__p_SignalSinkProcessor,
  _swigc__p_SignalSourceProcessor,
  _swigc__p_SndFileReaderDouble,
  _swigc__p_SndFileReaderFloat,
  _swigc__p_SndFileReaderInt,
  _swigc__p_SndFileReaderShort,
  _swigc__p_SndFileWriterDouble,
  _swigc__p_SndFileWriterFloat,
  _swigc__p_SndFileWriterInt,
  _swigc__p_SndFileWriterShort,
  _swigc__p_SoundProcessor,
  _swigc__p_SpectrumProcessor,
  _swigc__p_StereoAmplifierProcessor,
  _swigc__p_StereoCascadeProcessor,
  _swigc__p_StereoFXProcessor,
  _swigc__p_StereoFilterProcessor,
  _swigc__p_StereoFunctionProcessor,
  _swigc__p_StereoGeneratorProcessor,
  _swigc__p_StereoOscillatorProcessor,
  _swigc__p_StereoProcessor,
  _swigc__p_StereoSplitterProcessor,
  _swigc__p_base,
  _swigc__p_double,
  _swigc__p_fftw_complex,
  _swigc__p_fftw_plan,
  _swigc__p_fftwf_complex,
  _swigc__p_fftwf_plan,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_p_AmplifierProcessor,
  _swigc__p_p_FilterProcessor,
  _swigc__p_p_FunctionProcessor,
  _swigc__p_p_double,
  _swigc__p_p_p_double,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__listT_MonoProcessor_p_t,
  _swigc__p_std__listT_SoundProcessor_p_t,
  _swigc__p_std__listT_StereoProcessor_p_t,
  _swigc__p_std__listT_std__shared_ptrT_Port_t_t,
  _swigc__p_std__mapT_std__string_MonoProcessor_p_t,
  _swigc__p_std__mapT_std__string_Port_p_t,
  _swigc__p_std__mapT_std__string_SoundProcessor_p_t,
  _swigc__p_std__mapT_std__string_StereoProcessor_p_t,
  _swigc__p_std__numeric_limitsT_double_t,
  _swigc__p_std__numeric_limitsT_float_t,
  _swigc__p_std__numeric_limitsT_int_t,
  _swigc__p_std__numeric_limitsT_long_long_t,
  _swigc__p_std__numeric_limitsT_long_t,
  _swigc__p_std__numeric_limitsT_short_t,
  _swigc__p_std__numeric_limitsT_unsigned_int_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_short_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_MonoProcessor_p_std__allocatorT_MonoProcessor_p_t_t,
  _swigc__p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t,
  _swigc__p_std__vectorT_SoundProcessor_p_std__allocatorT_SoundProcessor_p_t_t,
  _swigc__p_std__vectorT_StereoProcessor_p_std__allocatorT_StereoProcessor_p_t_t,
  _swigc__p_std__vectorT_double_Allocator__aligned_allocatorT_double_64_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_float_Allocator__aligned_allocatorT_float_64_t_t,
  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_long_std__allocatorT_long_t_t,
  _swigc__p_std__vectorT_short_std__allocatorT_short_t_t,
  _swigc__p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,
  _swigc__p_std__vectorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,
  _swigc__p_std__vectorT_std__complexT_DspFloatType_t_std__allocatorT_std__complexT_DspFloatType_t_t_t,
  _swigc__p_std__vectorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,
  _swigc__p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,
  _swigc__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,
  _swigc__p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,
  _swigc__p_std__vector_iteratorT_double_Allocator__aligned_allocatorT_double_64_t_t,
  _swigc__p_std__vector_iteratorT_float_Allocator__aligned_allocatorT_float_64_t_t,
  _swigc__p_std__vector_iteratorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vector_iteratorT_long_std__allocatorT_long_t_t,
  _swigc__p_std__vector_iteratorT_short_std__allocatorT_short_t_t,
  _swigc__p_std__vector_iteratorT_signed_char_std__allocatorT_signed_char_t_t,
  _swigc__p_std__vector_iteratorT_std__complexT_DspFloatType_t_Allocator__aligned_allocatorT_std__complexT_DspFloatType_t_64_t_t,
  _swigc__p_std__vector_iteratorT_std__complexT_float_t_Allocator__aligned_allocatorT_std__complexT_float_t_64_t_t,
  _swigc__p_std__vector_iteratorT_unsigned_char_std__allocatorT_unsigned_char_t_t,
  _swigc__p_std__vector_iteratorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_std__vector_iteratorT_unsigned_long_std__allocatorT_unsigned_long_t_t,
  _swigc__p_std__vector_iteratorT_unsigned_short_std__allocatorT_unsigned_short_t_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

