/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AmplifierProcessor swig_types[0]
#define SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew swig_types[1]
#define SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter swig_types[2]
#define SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF swig_types[3]
#define SWIGTYPE_p_Analog__Filters__MS20__MS20Filter swig_types[4]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__BiQuadBase swig_types[5]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__BrownNoise swig_types[6]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__BrowningFilter swig_types[7]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__Filter swig_types[8]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__HuovilainenMoog swig_types[9]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__ImprovedMoog swig_types[10]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__KrajeskiMoog swig_types[11]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__LadderFilterBase swig_types[12]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog swig_types[13]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1 swig_types[14]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2 swig_types[15]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter swig_types[16]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike swig_types[17]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF swig_types[18]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__MusicDSPMoog swig_types[19]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator swig_types[20]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples swig_types[21]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__OberheimVariationMoog swig_types[22]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__PinkNoise swig_types[23]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__PinkingFilter swig_types[24]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__RBJAllPassFilter swig_types[25]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__RBJBandPassFilter swig_types[26]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter swig_types[27]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__RBJHighPassFilter swig_types[28]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__RBJHighShelfFilter swig_types[29]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__RBJLowPassFilter swig_types[30]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__RBJLowShelfFilter swig_types[31]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__RBJNotchFilter swig_types[32]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__RBJPeakFilter swig_types[33]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__RKSimulationMoog swig_types[34]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__SimplifiedMoog swig_types[35]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog swig_types[36]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2 swig_types[37]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__VAOnePole swig_types[38]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__WhiteNoise swig_types[39]
#define SWIGTYPE_p_Analog__Filters__MoogLadders__WhiteNoiseSource swig_types[40]
#define SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter swig_types[41]
#define SWIGTYPE_p_Analog__Filters__RCFilter swig_types[42]
#define SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter swig_types[43]
#define SWIGTYPE_p_Analog__Filters__VCS3Filter__VCS3Filter swig_types[44]
#define SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP swig_types[45]
#define SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_AP swig_types[46]
#define SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_HP swig_types[47]
#define SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LP swig_types[48]
#define SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LPHP swig_types[49]
#define SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P swig_types[50]
#define SWIGTYPE_p_Analog__Oscillators__BlitSaw swig_types[51]
#define SWIGTYPE_p_Analog__Oscillators__BlitSquare swig_types[52]
#define SWIGTYPE_p_Analog__Oscillators__BlitTriangle swig_types[53]
#define SWIGTYPE_p_Analog__Oscillators__DPWPulse swig_types[54]
#define SWIGTYPE_p_Analog__Oscillators__DPWSaw swig_types[55]
#define SWIGTYPE_p_Analog__Oscillators__DPWTriangle swig_types[56]
#define SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP swig_types[57]
#define SWIGTYPE_p_Analog__Oscillators__blitSaw swig_types[58]
#define SWIGTYPE_p_Analog__Oscillators__blitSquare swig_types[59]
#define SWIGTYPE_p_Analog__Oscillators__blitTriangle swig_types[60]
#define SWIGTYPE_p_Analog__SstFilter__SstFilter swig_types[61]
#define SWIGTYPE_p_Analog__SstFilter__SstFilterState swig_types[62]
#define SWIGTYPE_p_Analog__SstWaveshaper swig_types[63]
#define SWIGTYPE_p_Analog__minBLEP__minBLEP swig_types[64]
#define SWIGTYPE_p_Analog__minBLEP__osc_t swig_types[65]
#define SWIGTYPE_p_Analog__minBLEP__oscwave_t swig_types[66]
#define SWIGTYPE_p_FX__Filters__OnePole swig_types[67]
#define SWIGTYPE_p_FilterProcessor swig_types[68]
#define SWIGTYPE_p_FunctionProcessor swig_types[69]
#define SWIGTYPE_p_GeneratorProcessor swig_types[70]
#define SWIGTYPE_p_MixerProcessor swig_types[71]
#define SWIGTYPE_p_MonoAdderOperatorProcessor swig_types[72]
#define SWIGTYPE_p_MonoBlendOperatorProcessor swig_types[73]
#define SWIGTYPE_p_MonoCascadeOperatorProcessor swig_types[74]
#define SWIGTYPE_p_MonoCascadeProcessor swig_types[75]
#define SWIGTYPE_p_MonoDownsampleProcessor swig_types[76]
#define SWIGTYPE_p_MonoFXProcessor swig_types[77]
#define SWIGTYPE_p_MonoModulatorOperatorProcessor swig_types[78]
#define SWIGTYPE_p_MonoMultiplierOperatorProcessor swig_types[79]
#define SWIGTYPE_p_MonoOperatorProcessor swig_types[80]
#define SWIGTYPE_p_MonoOversampleProcessor swig_types[81]
#define SWIGTYPE_p_MonoProcessor swig_types[82]
#define SWIGTYPE_p_MonoSubtractorOperatorProcessor swig_types[83]
#define SWIGTYPE_p_MonoUpsampleProcessor swig_types[84]
#define SWIGTYPE_p_OperatorProcessor swig_types[85]
#define SWIGTYPE_p_OscillatorProcessor swig_types[86]
#define SWIGTYPE_p_Parameter2Processor swig_types[87]
#define SWIGTYPE_p_Port swig_types[88]
#define SWIGTYPE_p_PortMap swig_types[89]
#define SWIGTYPE_p_Ports swig_types[90]
#define SWIGTYPE_p_Random swig_types[91]
#define SWIGTYPE_p_SignalSinkProcessor swig_types[92]
#define SWIGTYPE_p_SignalSourceProcessor swig_types[93]
#define SWIGTYPE_p_SoundProcessor swig_types[94]
#define SWIGTYPE_p_SpectrumProcessor swig_types[95]
#define SWIGTYPE_p_StereoAmplifierProcessor swig_types[96]
#define SWIGTYPE_p_StereoCascadeProcessor swig_types[97]
#define SWIGTYPE_p_StereoFXProcessor swig_types[98]
#define SWIGTYPE_p_StereoFilterProcessor swig_types[99]
#define SWIGTYPE_p_StereoFunctionProcessor swig_types[100]
#define SWIGTYPE_p_StereoGeneratorProcessor swig_types[101]
#define SWIGTYPE_p_StereoOscillatorProcessor swig_types[102]
#define SWIGTYPE_p_StereoProcessor swig_types[103]
#define SWIGTYPE_p_StereoSplitterProcessor swig_types[104]
#define SWIGTYPE_p_VCS3DiodeFilter swig_types[105]
#define SWIGTYPE_p_double swig_types[106]
#define SWIGTYPE_p_float swig_types[107]
#define SWIGTYPE_p_int swig_types[108]
#define SWIGTYPE_p_long_long swig_types[109]
#define SWIGTYPE_p_p_AmplifierProcessor swig_types[110]
#define SWIGTYPE_p_p_Analog__Calculus__RateLimiters__Slew swig_types[111]
#define SWIGTYPE_p_p_Analog__Calculus__RateLimiters__SlewLimiter swig_types[112]
#define SWIGTYPE_p_p_Analog__Filters__AnalogSVF__AnalogSVF swig_types[113]
#define SWIGTYPE_p_p_Analog__Filters__MS20__MS20Filter swig_types[114]
#define SWIGTYPE_p_p_Analog__Filters__Oberheim__OBXFilter swig_types[115]
#define SWIGTYPE_p_p_Analog__Filters__RCFilter swig_types[116]
#define SWIGTYPE_p_p_Analog__Filters__VCS3Filter__VCS3Filter swig_types[117]
#define SWIGTYPE_p_p_Analog__Filters__XOD__xodMoogLadder4P swig_types[118]
#define SWIGTYPE_p_p_FilterProcessor swig_types[119]
#define SWIGTYPE_p_p_FunctionProcessor swig_types[120]
#define SWIGTYPE_p_p_float swig_types[121]
#define SWIGTYPE_p_short swig_types[122]
#define SWIGTYPE_p_signed_char swig_types[123]
#define SWIGTYPE_p_sst__filters__FilterCoefficientMakerT_t swig_types[124]
#define SWIGTYPE_p_std__arrayT_float_2_t swig_types[125]
#define SWIGTYPE_p_std__arrayT_float_3_t swig_types[126]
#define SWIGTYPE_p_std__complexT_double_t swig_types[127]
#define SWIGTYPE_p_std__complexT_float_t swig_types[128]
#define SWIGTYPE_p_std__listT_MonoProcessor_p_t swig_types[129]
#define SWIGTYPE_p_std__listT_SoundProcessor_p_t swig_types[130]
#define SWIGTYPE_p_std__listT_StereoProcessor_p_t swig_types[131]
#define SWIGTYPE_p_std__listT_std__shared_ptrT_Port_t_t swig_types[132]
#define SWIGTYPE_p_std__mapT_std__string_MonoProcessor_p_t swig_types[133]
#define SWIGTYPE_p_std__mapT_std__string_Port_p_t swig_types[134]
#define SWIGTYPE_p_std__mapT_std__string_SoundProcessor_p_t swig_types[135]
#define SWIGTYPE_p_std__mapT_std__string_StereoProcessor_p_t swig_types[136]
#define SWIGTYPE_p_std__mt19937 swig_types[137]
#define SWIGTYPE_p_std__numeric_limitsT_double_t swig_types[138]
#define SWIGTYPE_p_std__numeric_limitsT_float_t swig_types[139]
#define SWIGTYPE_p_std__numeric_limitsT_int_t swig_types[140]
#define SWIGTYPE_p_std__numeric_limitsT_long_long_t swig_types[141]
#define SWIGTYPE_p_std__numeric_limitsT_long_t swig_types[142]
#define SWIGTYPE_p_std__numeric_limitsT_short_t swig_types[143]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t swig_types[144]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t swig_types[145]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t swig_types[146]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t swig_types[147]
#define SWIGTYPE_p_std__string swig_types[148]
#define SWIGTYPE_p_std__uniform_real_distributionT_float_t swig_types[149]
#define SWIGTYPE_p_std__vectorT_MonoProcessor_p_std__allocatorT_MonoProcessor_p_t_t swig_types[150]
#define SWIGTYPE_p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t swig_types[151]
#define SWIGTYPE_p_std__vectorT_SoundProcessor_p_std__allocatorT_SoundProcessor_p_t_t swig_types[152]
#define SWIGTYPE_p_std__vectorT_StereoProcessor_p_std__allocatorT_StereoProcessor_p_t_t swig_types[153]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[154]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[155]
#define SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t swig_types[156]
#define SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t swig_types[157]
#define SWIGTYPE_p_std__vector_iteratorT_double_std__allocatorT_double_t_t swig_types[158]
#define SWIGTYPE_p_std__vector_iteratorT_float_std__allocatorT_float_t_t swig_types[159]
#define SWIGTYPE_p_std__vector_iteratorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t swig_types[160]
#define SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t swig_types[161]
#define SWIGTYPE_p_unsigned_char swig_types[162]
#define SWIGTYPE_p_unsigned_int swig_types[163]
#define SWIGTYPE_p_unsigned_long_long swig_types[164]
#define SWIGTYPE_p_unsigned_short swig_types[165]
static swig_type_info *swig_types[167];
static swig_module_info swig_module = {swig_types, 166, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "Analog"
#define SWIG_init      luaopen_Analog
#define SWIG_init_user luaopen_Analog_user

#define SWIG_LUACODE   luaopen_Analog_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "SoundObject.hpp"

#include <cassert>
#include <random>
#include <chrono>
#include <complex>
#include <cstdio>
#include <cstring>
#include <cstdlib>


#include "Analog/VABandLimitedOscillators.hpp"
#include "Analog/VAPolyBLEPOscillator.hpp"
#include "Analog/VAMinBlepOscillators.hpp"

#include "Analog/VADiodeLadderFilter2.hpp"
#include "Analog/VAAnalogSVF.hpp"
#include "Analog/VAGenSVF.hpp"
#include "Analog/VAStateVariableFilter.hpp"
#include "Analog/VAMoogLadders.hpp"
#include "Analog/VASVFFilter.hpp"

#include "Analog/VAOBXDFilter.hpp"
#include "Analog/VAMorphableFilter.hpp"
#include "Analog/VAMS20Filter.hpp"
#include "Analog/VARCFilter.hpp"
#include "Analog/VASstFilters.hpp"
#include "Analog/VASstWaveshaper.hpp"
#include "Analog/VASlewLimiter.hpp"
#include "Analog/VATwoPoleEnvelopes.hpp"
#include "Analog/VAVCS3DiodeFilter.hpp"
#include "Analog/VAVCS3Filter.hpp"
#include "Analog/VAXodFilters.hpp"

/*
#include "Analog/VADinkyFilter.hpp"
#include "Analog/VAHybridCurtisVCF.hpp"
#include "Analog/VAKorg35HPFFilter.hpp"
#include "Analog/VAKorg35HPFilter.cpp
#include "Analog/VAKorg35LPFFilter.cpp
#include "Analog/VAKorg35LPFFilter.hpp"
#include "Analog/VAOberheimFilter.cpp
#include "Analog/VAOberheimFilter.hpp"
#include "Analog/VAVecSVF.hpp"
#include "Analog/VAVectorSVF.hpp"
*/


#include <stdint.h>		// Use the C99 official header


#include <complex>
#include <valarray>
#include <fenv.h>


#include <complex>


#include <limits>


  /*
    typedef float f32;
    typedef double f64;
    typedef signed char i8;
    typedef unsigned char u8;
    typedef signed short i16;
    typedef unsigned short u16;
    typedef signed int i32;
    typedef unsigned int u32;
    typedef signed long ilong;
    typedef unsigned long ulong;
    typedef signed long long i64;
    typedef unsigned long long u64;
  */
    
    namespace Ops
    {
    
      template<typename T> T abs(const T& x) { return std::abs(x); }
      template<typename T> T fabs(const T& x) { return std::fabs(x); }
      template<typename T> T acos(const T& x) { return std::acos(x); }
      template<typename T> T acosh(const T& x) { return std::acosh(x); }
      template<typename T> T asinh(const T& x) { return std::asinh(x); }
      template<typename T> T asin(const T& x) { return std::asinh(x); }
      template<typename T> T atan(const T& x) { return std::atan(x); }
      template<typename T> T atan2(const T& x,const T& y) { return std::atan2(x,y); }
      template<typename T> T atanh(const T& x) { return std::atanh(x); }
      template<typename T> T cbrt(const T& x) { return std::cbrt(x); }
      template<typename T> T ceil(const T& x) { return std::ceil(x); }    
      template<typename T> T copysign(const T& x, const T& y) { return std::copysign(x,y); }
      template<typename T> T cos(const T& x) { return std::cos(x); }
      template<typename T> T cosh(const T& x) { return std::cosh(x); }
      template<typename T> T erf(const T& x) { return std::erf(x); }
      template<typename T> T erfc(const T& x) { return std::erfc(x); }
      template<typename T> T exp(const T& x) { return std::exp(x); }
      template<typename T> T exp2(const T& x) { return std::exp2(x); }
      template<typename T> T expm1(const T& x) { return std::expm1(x); }
      template<typename T> T fdim(const T & x, const T & y) { return std::fdim(x,y); }
      template<typename T> T floor(const T & x) { return std::floor(x); }
      template<typename T> T fma(const T & x, const T & y, const T& z) { return std::fma(x,y,z); }
      template<typename T> T fmax(const T & x, const T & y) { return std::fmax(x,y); }
      template<typename T> T fmin(const T & x, const T & y) { return std::fmax(x,y); }
      template<typename T> T fmod(const T & x, const T & y) { return std::fmod(x,y); }
      template<typename T> int fpclassify(const T & x) { return std::fpclassify(x); }
      template<typename T> T hypot(const T & x, const T & y) { return std::hypot(x,y); }
      template<typename T> int ilogb(const T & x) { return std::ilogb(x); }
      template<typename T> bool isfinite(const T & x) { return std::isfinite(x); }
      template<typename T> bool isgreater(const T & x, const T & y) { return std::isgreater(x,y); }
      template<typename T> bool isgreaterequal(const T & x, const T & y) { return std::isgreaterequal(x,y); }
      template<typename T> bool isinf(const T & x) { return std::isinf(x); }
      template<typename T> bool isless(const T & x, const T & y) { return std::isless(x,y); }
      template<typename T> bool islessequal(const T & x, const T & y) { return std::islessequal(x,y); }
      template<typename T> bool islessgreater(const T & x, const T & y) { return std::islessgreater(x,y); }
      template<typename T> bool isnan(const T & x) { return std::isnan(x); }
      template<typename T> bool isnormal(const T & x) { return std::isnormal(x); }
      template<typename T> bool isunordered(const T & x, const T& y) { return std::isunordered(x,y); }
      template<typename T> T ldexp(const T & x, int exp) { return std::ldexp(x,exp); }
      template<typename T> T lgamma(const T & x) { return std::lgamma(x); }
      template<typename T> T llrint(const T & x) { return std::llrint(x); }
      template<typename T> T llround(const T & x) { return std::llround(x); }
      template<typename T> T log(const T & x) { return std::log(x); }
      template<typename T> T log10(const T & x) { return std::log10(x); }
      template<typename T> T log1p(const T & x) { return std::log1p(x); }
      template<typename T> T log2(const T & x) { return std::log2(x); }
      template<typename T> T logb(const T & x) { return std::logb(x); }
      template<typename T> T lrint(const T & x) { return std::lrint(x); }
      template<typename T> T lround(const T & x) { return std::lround(x); }
      template<typename T> T nan(const char *tagp) { return std::nan(tagp);}
      template<typename T> T nanf(const char *tagp) { return std::nanf(tagp);}
      template<typename T> T nanl(const char *tagp) { return std::nanl(tagp);}
      template<typename T> T nearbyint(const T &x) { return std::nearbyint(x); }
      template<typename T> T nextafter(const T & x, const T & y) { return std::nextafter(x,y); }
      template<typename T> T nexttoward(const T & x, const T & y) { return std::nexttoward(x,y); }
      template<typename T> T pow(const T & b, const T & e) { return std::pow(b,e); }
      template<typename T> T remainder(const T & n, const T & d) { return std::remainder(n,d); }
      template<typename T> T rint(const T& x) { return std::rint(x); }
      template<typename T> T round(const T& x) { return std::round(x); }
      template<typename T> T scalbln(const T& x, long int n) { return std::scalbln(x,n);}
      template<typename T> T scalbn(const T& x, int n) { return std::scalbln(x,n);}
      template<typename T> bool signbit(const T & x) { return signbit(x); }
      template<typename T> T sin(const T& x) { return std::sin(x); }
      template<typename T> T sinh(const T& x) { return std::sinh(x); }    
      template<typename T> T sqrt(const T& x) { return std::sqrt(x); }
      template<typename T> T square(const T& x) { return x*x; }
      template<typename T> T cube(const T& x) { return x*x*x; }
      template<typename T> T tan(const T& x) { return std::tan(x); }
      template<typename T> T tanh(const T& x) { return std::tanh(x); }        
      template<typename T> T tgamma(const T& x) { return std::tgamma(x); }    
      template<typename T> T trunc(const T& x) { return std::trunc(x); }
      double Huge() { return HUGE_VAL; }
      float Hugef() { return HUGE_VALF; }
      double Infinity() { return INFINITY; }
      double NaN() { return NAN; }
    }    


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T, class Alloc = std::allocator<T>>
    struct vector_iterator
    {
        typename std::vector<T,Alloc>::iterator iter;
        std::vector<T,Alloc> v;

        vector_iterator(const std::vector<T,Alloc> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T,Alloc> & vec, const typename std::vector<T,Alloc>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T,Alloc>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T,Alloc>& operator = (const vector_iterator<T,Alloc>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}

#include <list>


  namespace std {
    template<typename T>
        struct list_iterator 
        {
            typename std::list<T>::iterator _iter;
            std::list<T> _list;;

            list_iterator(const std::list<T> & l, const typename std::list<T>::iterator & i) {
                _list = l;
                _iter = i;
            }

            void next() { if(_iter != _list.end()) _iter++; }
            void prev() { if(_iter != _list.begin()) _iter--; }
            T& get() { return *_iter;}

            //void insert(const Data& value) { _map.insert(_iter,value); }
            //bool find(const Key& key) { return _map.find(key) != _map.end(); }   
            
        };
    }


#include <map>


  namespace std {
        template<typename Key,  typename Data>
        struct map_iterator 
        {
            typename std::map<Key,Data>::iterator _iter;
            std::map<Key,Data> _map;

            map_iterator(const std::map<Key,Data> & m, const typename std::map<Key,Data>::iterator & i) {
                _map = m;
                _iter = i;
            }

            void next() { if(_iter != _map.end()) _iter++; }
            void prev() { if(_iter != _map.begin()) _iter--; }
            Data& get() { return *_iter;}

            void insert(const Data& value) { _map.insert(_iter,value); }
            bool find(const Key& key) { return _map.find(key) != _map.end(); }   
            
        };
    }


typedef struct{
  lua_State* L; /* the state */
  int idx;      /* the index on the stack */
}SWIGLUA_FN;

#define SWIGLUA_FN_GET(fn) {lua_pushvalue(fn.L,fn.idx);}


typedef struct{
  lua_State* L; /* the state */
  int ref;      /* a ref in the lua global index */
}SWIGLUA_REF;


void swiglua_ref_clear(SWIGLUA_REF* pref){
 	if (pref->L!=0 && pref->ref!=LUA_NOREF && pref->ref!=LUA_REFNIL){
		luaL_unref(pref->L,LUA_REGISTRYINDEX,pref->ref);
	}
	pref->L=0; pref->ref=0;
}

void swiglua_ref_set(SWIGLUA_REF* pref,lua_State* L,int idx){
	pref->L=L;
	lua_pushvalue(L,idx);                 /* copy obj to top */
	pref->ref=luaL_ref(L,LUA_REGISTRYINDEX); /* remove obj from top & put into registry */
}

void swiglua_ref_get(SWIGLUA_REF* pref){
	if (pref->L!=0)
		lua_rawgeti(pref->L,LUA_REGISTRYINDEX,pref->ref);
}



#include <string.h>

SWIGINTERN float std_vector_Sl_float_Sg____getitem__SWIG(std::vector< float > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_float_Sg____setitem__SWIG(std::vector< float > *self,size_t i,float val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< float,std::allocator< float > > std_vector_Sl_float_Sg__ibegin__SWIG(std::vector< float > *self){
                std::vector_iterator<float,std::allocator< float >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< float,std::allocator< float > > std_vector_Sl_float_Sg__iend__SWIG(std::vector< float > *self){
                std::vector_iterator<float,std::allocator< float >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_0(std::vector< float > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_1(std::vector< float > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN double std_vector_Sl_double_Sg____getitem__SWIG(std::vector< double > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_double_Sg____setitem__SWIG(std::vector< double > *self,size_t i,double val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< double,std::allocator< double > > std_vector_Sl_double_Sg__ibegin__SWIG(std::vector< double > *self){
                std::vector_iterator<double,std::allocator< double >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< double,std::allocator< double > > std_vector_Sl_double_Sg__iend__SWIG(std::vector< double > *self){
                std::vector_iterator<double,std::allocator< double >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::complex< float > std_vector_Sl_std_complex_Sl_float_Sg__Sg____getitem__SWIG(std::vector< std::complex< float > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem__SWIG(std::vector< std::complex< float > > *self,size_t i,std::complex< float > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::complex< float >,std::allocator< std::complex< float > > > std_vector_Sl_std_complex_Sl_float_Sg__Sg__ibegin__SWIG(std::vector< std::complex< float > > *self){
                std::vector_iterator<std::complex< float >,std::allocator< std::complex< float > >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::complex< float >,std::allocator< std::complex< float > > > std_vector_Sl_std_complex_Sl_float_Sg__Sg__iend__SWIG(std::vector< std::complex< float > > *self){
                std::vector_iterator<std::complex< float >,std::allocator< std::complex< float > >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_0(std::vector< std::complex< float > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_1(std::vector< std::complex< float > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN std::complex< double > std_vector_Sl_std_complex_Sl_double_Sg__Sg____getitem__SWIG(std::vector< std::complex< double > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem__SWIG(std::vector< std::complex< double > > *self,size_t i,std::complex< double > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< std::complex< double >,std::allocator< std::complex< double > > > std_vector_Sl_std_complex_Sl_double_Sg__Sg__ibegin__SWIG(std::vector< std::complex< double > > *self){
                std::vector_iterator<std::complex< double >,std::allocator< std::complex< double > >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< std::complex< double >,std::allocator< std::complex< double > > > std_vector_Sl_std_complex_Sl_double_Sg__Sg__iend__SWIG(std::vector< std::complex< double > > *self){
                std::vector_iterator<std::complex< double >,std::allocator< std::complex< double > >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_0(std::vector< std::complex< double > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_1(std::vector< std::complex< double > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_crealf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::real< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::real< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("crealf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR real< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cimagf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::imag< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::imag< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cimagf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR imag< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cabsf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::abs< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cabsf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR abs< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cargf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::arg< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::arg< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cargf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR arg< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cnormf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::norm< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::norm< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cnormf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR norm< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cprojf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::proj< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::proj< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cprojf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR proj< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpolarf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::polar< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::polar< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< float >((float const &)*arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpolarf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::polar< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< float >((float const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpolarf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_cpolarf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cpolarf__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cpolarf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::polar< float >(float const &,float const &)\n"
    "    std::polar< float >(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_csinf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sin< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("csinf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sin< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ccosf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cos< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ccosf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cos< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ctanf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tan< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ctanf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tan< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_casinf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asin< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("casinf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asin< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cacosf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acos< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cacosf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acos< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_catanf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atan< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("catanf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atan< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_csinhf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sinh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("csinhf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sinh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ccoshf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cosh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ccoshf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cosh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ctanhf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tanh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ctanhf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tanh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_casinhf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::asinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asinh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("casinhf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cacoshf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::acosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acosh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cacoshf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_catanhf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::atanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atanh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("catanhf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::max",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::epsilon",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::round_error",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::infinity",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::quiet_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::signaling_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::denorm_min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< float >::numeric_limits",0,0)
  result = (std::numeric_limits< float > *)new std::numeric_limits< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_numeric_limits(void *obj) {
std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_numeric_limits_methods[]= {
    { "min", _wrap_float_numeric_limits_min},
    { "max", _wrap_float_numeric_limits_max},
    { "epsilon", _wrap_float_numeric_limits_epsilon},
    { "round_error", _wrap_float_numeric_limits_round_error},
    { "infinity", _wrap_float_numeric_limits_infinity},
    { "quiet_NaN", _wrap_float_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_float_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_float_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_float_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_float_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_numeric_limits_Sf_SwigStatic = {
    "float_numeric_limits",
    swig_float_numeric_limits_Sf_SwigStatic_methods,
    swig_float_numeric_limits_Sf_SwigStatic_attributes,
    swig_float_numeric_limits_Sf_SwigStatic_constants,
    swig_float_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_numeric_limits_bases[] = {0};
static const char *swig_float_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_float_numeric_limits = { "float_numeric_limits", "float_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_float_t,_proxy__wrap_new_float_numeric_limits, swig_delete_float_numeric_limits, swig_float_numeric_limits_methods, swig_float_numeric_limits_attributes, &swig_float_numeric_limits_Sf_SwigStatic, swig_float_numeric_limits_meta, swig_float_numeric_limits_bases, swig_float_numeric_limits_base_names };

static int _wrap_double_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::max",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::epsilon",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::round_error",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::infinity",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::quiet_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::signaling_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::denorm_min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< double >::numeric_limits",0,0)
  result = (std::numeric_limits< double > *)new std::numeric_limits< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_numeric_limits(void *obj) {
std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_numeric_limits_methods[]= {
    { "min", _wrap_double_numeric_limits_min},
    { "max", _wrap_double_numeric_limits_max},
    { "epsilon", _wrap_double_numeric_limits_epsilon},
    { "round_error", _wrap_double_numeric_limits_round_error},
    { "infinity", _wrap_double_numeric_limits_infinity},
    { "quiet_NaN", _wrap_double_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_double_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_double_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_double_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_double_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_numeric_limits_Sf_SwigStatic = {
    "double_numeric_limits",
    swig_double_numeric_limits_Sf_SwigStatic_methods,
    swig_double_numeric_limits_Sf_SwigStatic_attributes,
    swig_double_numeric_limits_Sf_SwigStatic_constants,
    swig_double_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_numeric_limits_bases[] = {0};
static const char *swig_double_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_double_numeric_limits = { "double_numeric_limits", "double_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_double_t,_proxy__wrap_new_double_numeric_limits, swig_delete_double_numeric_limits, swig_double_numeric_limits_methods, swig_double_numeric_limits_attributes, &swig_double_numeric_limits_Sf_SwigStatic, swig_double_numeric_limits_meta, swig_double_numeric_limits_bases, swig_double_numeric_limits_base_names };

static int _wrap_int_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::max",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::epsilon",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::round_error",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::infinity",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::quiet_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::signaling_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::denorm_min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< int >::numeric_limits",0,0)
  result = (std::numeric_limits< int > *)new std::numeric_limits< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int_numeric_limits(void *obj) {
std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int_numeric_limits_methods[]= {
    { "min", _wrap_int_numeric_limits_min},
    { "max", _wrap_int_numeric_limits_max},
    { "epsilon", _wrap_int_numeric_limits_epsilon},
    { "round_error", _wrap_int_numeric_limits_round_error},
    { "infinity", _wrap_int_numeric_limits_infinity},
    { "quiet_NaN", _wrap_int_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_int_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_int_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_int_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_int_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int_numeric_limits_Sf_SwigStatic = {
    "int_numeric_limits",
    swig_int_numeric_limits_Sf_SwigStatic_methods,
    swig_int_numeric_limits_Sf_SwigStatic_attributes,
    swig_int_numeric_limits_Sf_SwigStatic_constants,
    swig_int_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int_numeric_limits_bases[] = {0};
static const char *swig_int_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_int_numeric_limits = { "int_numeric_limits", "int_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_int_t,_proxy__wrap_new_int_numeric_limits, swig_delete_int_numeric_limits, swig_int_numeric_limits_methods, swig_int_numeric_limits_attributes, &swig_int_numeric_limits_Sf_SwigStatic, swig_int_numeric_limits_meta, swig_int_numeric_limits_bases, swig_int_numeric_limits_base_names };

static int _wrap_uint_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::max",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::epsilon",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::round_error",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::infinity",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::quiet_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::signaling_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::denorm_min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned int > *)new std::numeric_limits< unsigned int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint_numeric_limits(void *obj) {
std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_methods[]= {
    { "min", _wrap_uint_numeric_limits_min},
    { "max", _wrap_uint_numeric_limits_max},
    { "epsilon", _wrap_uint_numeric_limits_epsilon},
    { "round_error", _wrap_uint_numeric_limits_round_error},
    { "infinity", _wrap_uint_numeric_limits_infinity},
    { "quiet_NaN", _wrap_uint_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_uint_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_uint_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_uint_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uint_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint_numeric_limits_Sf_SwigStatic = {
    "uint_numeric_limits",
    swig_uint_numeric_limits_Sf_SwigStatic_methods,
    swig_uint_numeric_limits_Sf_SwigStatic_attributes,
    swig_uint_numeric_limits_Sf_SwigStatic_constants,
    swig_uint_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint_numeric_limits_bases[] = {0};
static const char *swig_uint_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_uint_numeric_limits = { "uint_numeric_limits", "uint_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,_proxy__wrap_new_uint_numeric_limits, swig_delete_uint_numeric_limits, swig_uint_numeric_limits_methods, swig_uint_numeric_limits_attributes, &swig_uint_numeric_limits_Sf_SwigStatic, swig_uint_numeric_limits_meta, swig_uint_numeric_limits_bases, swig_uint_numeric_limits_base_names };

static int _wrap_short_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::max",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::epsilon",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::round_error",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::infinity",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::quiet_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::signaling_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::denorm_min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< short >::numeric_limits",0,0)
  result = (std::numeric_limits< short > *)new std::numeric_limits< short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_short_numeric_limits(void *obj) {
std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_short_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_short_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_short_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_short_numeric_limits_methods[]= {
    { "min", _wrap_short_numeric_limits_min},
    { "max", _wrap_short_numeric_limits_max},
    { "epsilon", _wrap_short_numeric_limits_epsilon},
    { "round_error", _wrap_short_numeric_limits_round_error},
    { "infinity", _wrap_short_numeric_limits_infinity},
    { "quiet_NaN", _wrap_short_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_short_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_short_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_short_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_short_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_short_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_short_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_short_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_short_numeric_limits_Sf_SwigStatic = {
    "short_numeric_limits",
    swig_short_numeric_limits_Sf_SwigStatic_methods,
    swig_short_numeric_limits_Sf_SwigStatic_attributes,
    swig_short_numeric_limits_Sf_SwigStatic_constants,
    swig_short_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_short_numeric_limits_bases[] = {0};
static const char *swig_short_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_short_numeric_limits = { "short_numeric_limits", "short_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_short_t,_proxy__wrap_new_short_numeric_limits, swig_delete_short_numeric_limits, swig_short_numeric_limits_methods, swig_short_numeric_limits_attributes, &swig_short_numeric_limits_Sf_SwigStatic, swig_short_numeric_limits_meta, swig_short_numeric_limits_bases, swig_short_numeric_limits_base_names };

static int _wrap_ushort_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::max",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::epsilon",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::round_error",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::infinity",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::quiet_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::signaling_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::denorm_min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned short > *)new std::numeric_limits< unsigned short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ushort_numeric_limits(void *obj) {
std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ushort_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ushort_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ushort_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_methods[]= {
    { "min", _wrap_ushort_numeric_limits_min},
    { "max", _wrap_ushort_numeric_limits_max},
    { "epsilon", _wrap_ushort_numeric_limits_epsilon},
    { "round_error", _wrap_ushort_numeric_limits_round_error},
    { "infinity", _wrap_ushort_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ushort_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ushort_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ushort_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ushort_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ushort_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ushort_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ushort_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ushort_numeric_limits_Sf_SwigStatic = {
    "ushort_numeric_limits",
    swig_ushort_numeric_limits_Sf_SwigStatic_methods,
    swig_ushort_numeric_limits_Sf_SwigStatic_attributes,
    swig_ushort_numeric_limits_Sf_SwigStatic_constants,
    swig_ushort_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ushort_numeric_limits_bases[] = {0};
static const char *swig_ushort_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ushort_numeric_limits = { "ushort_numeric_limits", "ushort_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,_proxy__wrap_new_ushort_numeric_limits, swig_delete_ushort_numeric_limits, swig_ushort_numeric_limits_methods, swig_ushort_numeric_limits_attributes, &swig_ushort_numeric_limits_Sf_SwigStatic, swig_ushort_numeric_limits_meta, swig_ushort_numeric_limits_bases, swig_ushort_numeric_limits_base_names };

static int _wrap_long_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::max",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::epsilon",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::round_error",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::infinity",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::quiet_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::signaling_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::denorm_min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long >::numeric_limits",0,0)
  result = (std::numeric_limits< long > *)new std::numeric_limits< long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_long_numeric_limits(void *obj) {
std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_long_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_long_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_long_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_long_numeric_limits_methods[]= {
    { "min", _wrap_long_numeric_limits_min},
    { "max", _wrap_long_numeric_limits_max},
    { "epsilon", _wrap_long_numeric_limits_epsilon},
    { "round_error", _wrap_long_numeric_limits_round_error},
    { "infinity", _wrap_long_numeric_limits_infinity},
    { "quiet_NaN", _wrap_long_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_long_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_long_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_long_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_long_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_long_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_long_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_long_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_long_numeric_limits_Sf_SwigStatic = {
    "long_numeric_limits",
    swig_long_numeric_limits_Sf_SwigStatic_methods,
    swig_long_numeric_limits_Sf_SwigStatic_attributes,
    swig_long_numeric_limits_Sf_SwigStatic_constants,
    swig_long_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_long_numeric_limits_bases[] = {0};
static const char *swig_long_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_long_numeric_limits = { "long_numeric_limits", "long_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_t,_proxy__wrap_new_long_numeric_limits, swig_delete_long_numeric_limits, swig_long_numeric_limits_methods, swig_long_numeric_limits_attributes, &swig_long_numeric_limits_Sf_SwigStatic, swig_long_numeric_limits_meta, swig_long_numeric_limits_bases, swig_long_numeric_limits_base_names };

static int _wrap_ulong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::max",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::epsilon",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::round_error",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::infinity",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::quiet_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::signaling_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::denorm_min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long > *)new std::numeric_limits< unsigned long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ulong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ulong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ulong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ulong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_methods[]= {
    { "min", _wrap_ulong_numeric_limits_min},
    { "max", _wrap_ulong_numeric_limits_max},
    { "epsilon", _wrap_ulong_numeric_limits_epsilon},
    { "round_error", _wrap_ulong_numeric_limits_round_error},
    { "infinity", _wrap_ulong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ulong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ulong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ulong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ulong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ulong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ulong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ulong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ulong_numeric_limits_Sf_SwigStatic = {
    "ulong_numeric_limits",
    swig_ulong_numeric_limits_Sf_SwigStatic_methods,
    swig_ulong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ulong_numeric_limits_Sf_SwigStatic_constants,
    swig_ulong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ulong_numeric_limits_bases[] = {0};
static const char *swig_ulong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ulong_numeric_limits = { "ulong_numeric_limits", "ulong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,_proxy__wrap_new_ulong_numeric_limits, swig_delete_ulong_numeric_limits, swig_ulong_numeric_limits_methods, swig_ulong_numeric_limits_attributes, &swig_ulong_numeric_limits_Sf_SwigStatic, swig_ulong_numeric_limits_meta, swig_ulong_numeric_limits_bases, swig_ulong_numeric_limits_base_names };

static int _wrap_llong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::max",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::epsilon",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::round_error",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::infinity",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::quiet_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::signaling_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::denorm_min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long long >::numeric_limits",0,0)
  result = (std::numeric_limits< long long > *)new std::numeric_limits< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_llong_numeric_limits(void *obj) {
std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_llong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_llong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_llong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_methods[]= {
    { "min", _wrap_llong_numeric_limits_min},
    { "max", _wrap_llong_numeric_limits_max},
    { "epsilon", _wrap_llong_numeric_limits_epsilon},
    { "round_error", _wrap_llong_numeric_limits_round_error},
    { "infinity", _wrap_llong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_llong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_llong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_llong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_llong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_llong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_llong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_llong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_llong_numeric_limits_Sf_SwigStatic = {
    "llong_numeric_limits",
    swig_llong_numeric_limits_Sf_SwigStatic_methods,
    swig_llong_numeric_limits_Sf_SwigStatic_attributes,
    swig_llong_numeric_limits_Sf_SwigStatic_constants,
    swig_llong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_llong_numeric_limits_bases[] = {0};
static const char *swig_llong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_llong_numeric_limits = { "llong_numeric_limits", "llong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_long_t,_proxy__wrap_new_llong_numeric_limits, swig_delete_llong_numeric_limits, swig_llong_numeric_limits_methods, swig_llong_numeric_limits_attributes, &swig_llong_numeric_limits_Sf_SwigStatic, swig_llong_numeric_limits_meta, swig_llong_numeric_limits_bases, swig_llong_numeric_limits_base_names };

static int _wrap_ullong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::max",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::epsilon",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::round_error",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::infinity",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::quiet_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::signaling_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::denorm_min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long long > *)new std::numeric_limits< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ullong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ullong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ullong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ullong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_methods[]= {
    { "min", _wrap_ullong_numeric_limits_min},
    { "max", _wrap_ullong_numeric_limits_max},
    { "epsilon", _wrap_ullong_numeric_limits_epsilon},
    { "round_error", _wrap_ullong_numeric_limits_round_error},
    { "infinity", _wrap_ullong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ullong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ullong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ullong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ullong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ullong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ullong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ullong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ullong_numeric_limits_Sf_SwigStatic = {
    "ullong_numeric_limits",
    swig_ullong_numeric_limits_Sf_SwigStatic_methods,
    swig_ullong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ullong_numeric_limits_Sf_SwigStatic_constants,
    swig_ullong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ullong_numeric_limits_bases[] = {0};
static const char *swig_ullong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ullong_numeric_limits = { "ullong_numeric_limits", "ullong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,_proxy__wrap_new_ullong_numeric_limits, swig_delete_ullong_numeric_limits, swig_ullong_numeric_limits_methods, swig_ullong_numeric_limits_attributes, &swig_ullong_numeric_limits_Sf_SwigStatic, swig_ullong_numeric_limits_meta, swig_ullong_numeric_limits_bases, swig_ullong_numeric_limits_base_names };

static int _wrap_Huge(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Ops::Huge",0,0)
  result = (double)Ops::Huge();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Hugef(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("Ops::Hugef",0,0)
  result = (float)Ops::Hugef();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Infinity(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Ops::Infinity",0,0)
  result = (double)Ops::Infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NaN(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Ops::NaN",0,0)
  result = (double)Ops::NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::abs< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::abs< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR abs< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::cube< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cube< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR cube< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::sqrt< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::sqrt< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::exp< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::exp< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR exp< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::exp2< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::exp2< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR exp2< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::log< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR log< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::log10< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log10< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR log10< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::log2< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log2< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR log2< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::logb< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::logb< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR logb< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::pow< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::pow< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::pow< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR pow< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::floor< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::floor< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR floor< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::acos< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::acos< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR acos< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::asin< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::asin< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR asin< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::atan< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::atan< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR atan< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::atan2< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::atan2< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::atan2< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR atan2< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::cos< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cos< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR cos< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::sin< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::sin< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR sin< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::tan< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::tan< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR tan< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::cosh< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cosh< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR cosh< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::sinh< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::sinh< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR sinh< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::tanh< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::tanh< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR tanh< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::lgamma< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::lgamma< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR lgamma< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::acosh< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::acosh< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::asinh< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::asinh< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::atanh< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::atanh< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::cbrt< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cbrt< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR cbrt< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::cbrt< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cbrt< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR cbrt< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::copysign< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::copysign< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::copysign< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR copysign< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::erf< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::erf< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR erf< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::erfc< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::erfc< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR erfc< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::expm1< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::expm1< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR expm1< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::fdim< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fdim< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fdim< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR fdim< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp1 ;
  float temp2 ;
  float temp3 ;
  float result;
  
  SWIG_check_num_args("Ops::fma< float >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fma< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fma< float >",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ops::fma< float >",3,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR fma< float >((float const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::fmax< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fmax< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fmax< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR fmax< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fminf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::fmin< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fmin< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fmin< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR fmin< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::fmod< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fmod< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fmod< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR fmod< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("Ops::fpclassify< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fpclassify< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)Ops::SWIGTEMPLATEDISAMBIGUATOR fpclassify< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::hypot< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::hypot< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::hypot< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR hypot< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("Ops::ilogb< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::ilogb< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)Ops::SWIGTEMPLATEDISAMBIGUATOR ilogb< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinitef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isfinite< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isfinite< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isfinite< float >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isgreater< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isgreater< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isgreater< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isgreater< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isgreaterequal< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isgreaterequal< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isgreaterequal< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isgreaterequal< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isinf< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isinf< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isinf< float >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isless< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isless< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isless< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isless< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::islessequal< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::islessequal< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::islessequal< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR islessequal< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isnan< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isnan< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isnan< float >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isnormal< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isnormal< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isnormal< float >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isunordered< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isunordered< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isunordered< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isunordered< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::ldexp< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::ldexp< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::ldexp< float >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR ldexp< float >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::llrint< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::llrint< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR llrint< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::llround< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::llround< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR llround< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::log1p< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log1p< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR log1p< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::lrint< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::lrint< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR lrint< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::lround< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::lround< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR lround< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("Ops::nan< float >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Ops::nan< float >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR nan< float >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanff(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("Ops::nanf< float >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Ops::nanf< float >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR nanf< float >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanlf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("Ops::nanl< float >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Ops::nanl< float >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR nanl< float >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::nearbyint< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::nearbyint< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR nearbyint< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::nextafter< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::nextafter< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::nextafter< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR nextafter< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::nexttoward< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::nexttoward< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::nexttoward< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR nexttoward< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::remainder< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::remainder< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::remainder< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR remainder< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::rint< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::rint< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR rint< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::round< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::round< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR round< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  long arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::scalbln< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::scalbln< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::scalbln< float >",2,"long");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR scalbln< float >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::scalbn< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::scalbn< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::scalbn< float >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR scalbn< float >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::square< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::square< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR square< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::tgamma< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::tgamma< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR tgamma< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::trunc< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::trunc< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR trunc< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::abs< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::abs< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR abs< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::sqrt< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::sqrt< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR sqrt< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::exp< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::exp< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR exp< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::exp2< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::exp2< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR exp2< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::log< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR log< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::log10< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log10< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR log10< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::log2< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log2< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR log2< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::logb< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::logb< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR logb< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::pow< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::pow< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::pow< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR pow< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floord(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::floor< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::floor< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR floor< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::acos< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::acos< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR acos< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::asin< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::asin< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR asin< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::atan< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::atan< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR atan< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::atan2< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::atan2< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::atan2< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR atan2< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::cos< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cos< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR cos< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::sin< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::sin< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR sin< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::tan< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::tan< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR tan< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::cosh< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cosh< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR cosh< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::sinh< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::sinh< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR sinh< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::tanh< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::tanh< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR tanh< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::lgamma< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::lgamma< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR lgamma< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::acosh< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::acosh< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR acosh< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::asinh< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::asinh< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR asinh< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::atanh< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::atanh< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR atanh< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::cbrt< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cbrt< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR cbrt< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceild(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::cbrt< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cbrt< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR cbrt< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::copysign< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::copysign< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::copysign< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR copysign< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::erf< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::erf< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR erf< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::erfc< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::erfc< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR erfc< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::expm1< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::expm1< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR expm1< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::fdim< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fdim< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fdim< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR fdim< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp1 ;
  double temp2 ;
  double temp3 ;
  double result;
  
  SWIG_check_num_args("Ops::fma< double >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fma< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fma< double >",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ops::fma< double >",3,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR fma< double >((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::fmax< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fmax< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fmax< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR fmax< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::fmin< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fmin< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fmin< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR fmin< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::fmod< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fmod< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fmod< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR fmod< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("Ops::fpclassify< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fpclassify< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)Ops::SWIGTEMPLATEDISAMBIGUATOR fpclassify< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::hypot< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::hypot< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::hypot< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR hypot< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("Ops::ilogb< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::ilogb< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)Ops::SWIGTEMPLATEDISAMBIGUATOR ilogb< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinited(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isfinite< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isfinite< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isfinite< double >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isgreater< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isgreater< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isgreater< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isgreater< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isgreaterequal< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isgreaterequal< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isgreaterequal< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isgreaterequal< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isinf< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isinf< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isinf< double >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isless< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isless< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isless< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isless< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::islessequal< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::islessequal< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::islessequal< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR islessequal< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isnan< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isnan< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isnan< double >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isnormal< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isnormal< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isnormal< double >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isunordered< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isunordered< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isunordered< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isunordered< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::ldexp< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::ldexp< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::ldexp< double >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR ldexp< double >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::llrint< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::llrint< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR llrint< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::llround< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::llround< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR llround< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::log1p< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log1p< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR log1p< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::lrint< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::lrint< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR lrint< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::lround< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::lround< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR lround< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nand(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("Ops::nan< double >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Ops::nan< double >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nan< double >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanfd(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("Ops::nanf< double >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Ops::nanf< double >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nanf< double >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanld(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("Ops::nanl< double >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Ops::nanl< double >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nanl< double >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::nearbyint< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::nearbyint< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nearbyint< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::nextafter< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::nextafter< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::nextafter< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nextafter< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::nexttoward< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::nexttoward< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::nexttoward< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nexttoward< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::remainder< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::remainder< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::remainder< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR remainder< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::rint< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::rint< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR rint< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::round< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::round< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR round< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  long arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::scalbln< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::scalbln< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::scalbln< double >",2,"long");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR scalbln< double >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::scalbn< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::scalbn< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::scalbn< double >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR scalbn< double >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squared(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::square< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::square< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR square< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::tgamma< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::tgamma< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR tgamma< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::trunc< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::trunc< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR trunc< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Random(lua_State* L) {
  int SWIG_arg = 0;
  Random *result = 0 ;
  
  SWIG_check_num_args("Random::Random",0,0)
  result = (Random *)new Random();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Random,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_seed(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("Random::seed",0,0)
  Random::seed();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_frand(lua_State* L) {
  int SWIG_arg = 0;
  Random *arg1 = (Random *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Random::frand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Random::frand",1,"Random *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Random,0))){
    SWIG_fail_ptr("Random_frand",1,SWIGTYPE_p_Random);
  }
  
  result = (DspFloatType)(arg1)->frand();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_randint(lua_State* L) {
  int SWIG_arg = 0;
  Random *arg1 = (Random *) 0 ;
  int arg2 ;
  int arg3 ;
  uint64_t result;
  
  SWIG_check_num_args("Random::randint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Random::randint",1,"Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Random::randint",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Random::randint",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Random,0))){
    SWIG_fail_ptr("Random_randint",1,SWIGTYPE_p_Random);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (uint64_t)(arg1)->randint(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_flip(lua_State* L) {
  int SWIG_arg = 0;
  Random *arg1 = (Random *) 0 ;
  DspFloatType arg2 ;
  bool result;
  
  SWIG_check_num_args("Random::flip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Random::flip",1,"Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Random::flip",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Random,0))){
    SWIG_fail_ptr("Random_flip",1,SWIGTYPE_p_Random);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (bool)(arg1)->flip(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Random_random(lua_State* L) {
  int SWIG_arg = 0;
  Random *arg1 = (Random *) 0 ;
  int arg2 ;
  uint64_t result;
  
  SWIG_check_num_args("Random::random",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Random::random",1,"Random *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Random::random",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Random,0))){
    SWIG_fail_ptr("Random_random",1,SWIGTYPE_p_Random);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (uint64_t)(arg1)->random(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Random(void *obj) {
Random *arg1 = (Random *) obj;
delete arg1;
}
static int _proxy__wrap_new_Random(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Random);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Random_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Random_methods[]= {
    { "frand", _wrap_Random_frand},
    { "randint", _wrap_Random_randint},
    { "flip", _wrap_Random_flip},
    { "random", _wrap_Random_random},
    {0,0}
};
static swig_lua_method swig_Random_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Random_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Random_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Random_Sf_SwigStatic_methods[]= {
    { "seed", _wrap_Random_seed},
    {0,0}
};
static swig_lua_class* swig_Random_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Random_Sf_SwigStatic = {
    "Random",
    swig_Random_Sf_SwigStatic_methods,
    swig_Random_Sf_SwigStatic_attributes,
    swig_Random_Sf_SwigStatic_constants,
    swig_Random_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Random_bases[] = {0};
static const char *swig_Random_base_names[] = {0};
static swig_lua_class _wrap_class_Random = { "Random", "Random", &SWIGTYPE_p_Random,_proxy__wrap_new_Random, swig_delete_Random, swig_Random_methods, swig_Random_attributes, &swig_Random_Sf_SwigStatic, swig_Random_meta, swig_Random_bases, swig_Random_base_names };

static int _wrap_SoundProcessor_preGain_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("SoundProcessor::preGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::preGain",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::preGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_preGain_set",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->preGain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_preGain_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("SoundProcessor::preGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::preGain",1,"SoundProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_preGain_get",1,SWIGTYPE_p_SoundProcessor);
  }
  
  result = (DspFloatType) ((arg1)->preGain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_postGain_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("SoundProcessor::postGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::postGain",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::postGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_postGain_set",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->postGain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_postGain_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("SoundProcessor::postGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::postGain",1,"SoundProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_postGain_get",1,SWIGTYPE_p_SoundProcessor);
  }
  
  result = (DspFloatType) ((arg1)->postGain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("SoundProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::getType",1,"SoundProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_getType",1,SWIGTYPE_p_SoundProcessor);
  }
  
  result = (ObjectType)((SoundProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_setPort(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("SoundProcessor::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::setPort",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundProcessor::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_setPort",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_setPort2(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  
  SWIG_check_num_args("SoundProcessor::setPort2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::setPort2",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::setPort2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundProcessor::setPort2",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundProcessor::setPort2",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_setPort2",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  (arg1)->setPort2(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_setPortV(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  std::vector< DspFloatType,std::allocator< DspFloatType > > *arg3 = 0 ;
  
  SWIG_check_num_args("SoundProcessor::setPortV",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::setPortV",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::setPortV",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundProcessor::setPortV",3,"std::vector< DspFloatType,std::allocator< DspFloatType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_setPortV",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("SoundProcessor_setPortV",3,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  (arg1)->setPortV(arg2,(std::vector< DspFloatType,std::allocator< DspFloatType > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_getPort(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("SoundProcessor::getPort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::getPort",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::getPort",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_getPort",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->getPort(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_getPort2(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("SoundProcessor::getPort2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::getPort2",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::getPort2",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundProcessor::getPort2",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_getPort2",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->getPort2(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_getPortV(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  int arg2 ;
  std::vector< DspFloatType,std::allocator< DspFloatType > > *arg3 = 0 ;
  
  SWIG_check_num_args("SoundProcessor::getPortV",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::getPortV",1,"SoundProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundProcessor::getPortV",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundProcessor::getPortV",3,"std::vector< DspFloatType,std::allocator< DspFloatType > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_getPortV",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("SoundProcessor_getPortV",3,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  (arg1)->getPortV(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_printPortMap(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  
  SWIG_check_num_args("SoundProcessor::printPortMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::printPortMap",1,"SoundProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_printPortMap",1,SWIGTYPE_p_SoundProcessor);
  }
  
  (arg1)->printPortMap();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_randomize(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  
  SWIG_check_num_args("SoundProcessor::randomize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::randomize",1,"SoundProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_randomize",1,SWIGTYPE_p_SoundProcessor);
  }
  
  (arg1)->randomize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_loadPreset(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SoundProcessor::loadPreset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::loadPreset",1,"SoundProcessor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SoundProcessor::loadPreset",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_loadPreset",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->loadPreset((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundProcessor_savePreset(lua_State* L) {
  int SWIG_arg = 0;
  SoundProcessor *arg1 = (SoundProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SoundProcessor::savePreset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundProcessor::savePreset",1,"SoundProcessor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SoundProcessor::savePreset",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundProcessor,0))){
    SWIG_fail_ptr("SoundProcessor_savePreset",1,SWIGTYPE_p_SoundProcessor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->savePreset((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoundProcessor(void *obj) {
SoundProcessor *arg1 = (SoundProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_SoundProcessor_attributes[] = {
    { "preGain", _wrap_SoundProcessor_preGain_get, _wrap_SoundProcessor_preGain_set },
    { "postGain", _wrap_SoundProcessor_postGain_get, _wrap_SoundProcessor_postGain_set },
    {0,0,0}
};
static swig_lua_method swig_SoundProcessor_methods[]= {
    { "getType", _wrap_SoundProcessor_getType},
    { "setPort", _wrap_SoundProcessor_setPort},
    { "setPort2", _wrap_SoundProcessor_setPort2},
    { "setPortV", _wrap_SoundProcessor_setPortV},
    { "getPort", _wrap_SoundProcessor_getPort},
    { "getPort2", _wrap_SoundProcessor_getPort2},
    { "getPortV", _wrap_SoundProcessor_getPortV},
    { "printPortMap", _wrap_SoundProcessor_printPortMap},
    { "randomize", _wrap_SoundProcessor_randomize},
    { "loadPreset", _wrap_SoundProcessor_loadPreset},
    { "savePreset", _wrap_SoundProcessor_savePreset},
    {0,0}
};
static swig_lua_method swig_SoundProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SoundProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SoundProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SoundProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SoundProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SoundProcessor_Sf_SwigStatic = {
    "SoundProcessor",
    swig_SoundProcessor_Sf_SwigStatic_methods,
    swig_SoundProcessor_Sf_SwigStatic_attributes,
    swig_SoundProcessor_Sf_SwigStatic_constants,
    swig_SoundProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SoundProcessor_bases[] = {0};
static const char *swig_SoundProcessor_base_names[] = {0};
static swig_lua_class _wrap_class_SoundProcessor = { "SoundProcessor", "SoundProcessor", &SWIGTYPE_p_SoundProcessor,0, swig_delete_SoundProcessor, swig_SoundProcessor_methods, swig_SoundProcessor_attributes, &swig_SoundProcessor_Sf_SwigStatic, swig_SoundProcessor_meta, swig_SoundProcessor_bases, swig_SoundProcessor_base_names };

static int _wrap_Port_port_set(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Port::port",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::port",1,"Port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Port::port",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_port_set",1,SWIGTYPE_p_Port);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->port = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_port_get(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  int result;
  
  SWIG_check_num_args("Port::port",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::port",1,"Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_port_get",1,SWIGTYPE_p_Port);
  }
  
  result = (int) ((arg1)->port);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_value_set(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Port::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::value",1,"Port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Port::value",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_value_set",1,SWIGTYPE_p_Port);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->value = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_value_get(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Port::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::value",1,"Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_value_get",1,SWIGTYPE_p_Port);
  }
  
  result = (DspFloatType) ((arg1)->value);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_p_set(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  SoundProcessor *arg2 = (SoundProcessor *) 0 ;
  
  SWIG_check_num_args("Port::p",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::p",1,"Port *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Port::p",2,"SoundProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_p_set",1,SWIGTYPE_p_Port);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundProcessor,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Port_p_set",2,SWIGTYPE_p_SoundProcessor);
  }
  
  if (arg1) (arg1)->p = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_p_get(lua_State* L) {
  int SWIG_arg = 0;
  Port *arg1 = (Port *) 0 ;
  SoundProcessor *result = 0 ;
  
  SWIG_check_num_args("Port::p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Port::p",1,"Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Port_p_get",1,SWIGTYPE_p_Port);
  }
  
  result = (SoundProcessor *) ((arg1)->p);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Port(lua_State* L) {
  int SWIG_arg = 0;
  Port *result = 0 ;
  
  SWIG_check_num_args("Port::Port",0,0)
  result = (Port *)new Port();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Port,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Port(void *obj) {
Port *arg1 = (Port *) obj;
delete arg1;
}
static int _proxy__wrap_new_Port(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Port);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Port_attributes[] = {
    { "port", _wrap_Port_port_get, _wrap_Port_port_set },
    { "value", _wrap_Port_value_get, _wrap_Port_value_set },
    { "p", _wrap_Port_p_get, _wrap_Port_p_set },
    {0,0,0}
};
static swig_lua_method swig_Port_methods[]= {
    {0,0}
};
static swig_lua_method swig_Port_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Port_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Port_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Port_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Port_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Port_Sf_SwigStatic = {
    "Port",
    swig_Port_Sf_SwigStatic_methods,
    swig_Port_Sf_SwigStatic_attributes,
    swig_Port_Sf_SwigStatic_constants,
    swig_Port_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Port_bases[] = {0};
static const char *swig_Port_base_names[] = {0};
static swig_lua_class _wrap_class_Port = { "Port", "Port", &SWIGTYPE_p_Port,_proxy__wrap_new_Port, swig_delete_Port, swig_Port_methods, swig_Port_attributes, &swig_Port_Sf_SwigStatic, swig_Port_meta, swig_Port_bases, swig_Port_base_names };

static int _wrap_Ports_ports_set(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  std::list< std::shared_ptr< Port > > *arg2 = (std::list< std::shared_ptr< Port > > *) 0 ;
  
  SWIG_check_num_args("Ports::ports",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::ports",1,"Ports *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ports::ports",2,"std::list< std::shared_ptr< Port > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_ports_set",1,SWIGTYPE_p_Ports);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_std__shared_ptrT_Port_t_t,0))){
    SWIG_fail_ptr("Ports_ports_set",2,SWIGTYPE_p_std__listT_std__shared_ptrT_Port_t_t);
  }
  
  if (arg1) (arg1)->ports = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ports_ports_get(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  std::list< std::shared_ptr< Port > > *result = 0 ;
  
  SWIG_check_num_args("Ports::ports",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::ports",1,"Ports *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_ports_get",1,SWIGTYPE_p_Ports);
  }
  
  result = (std::list< std::shared_ptr< Port > > *)& ((arg1)->ports);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_std__shared_ptrT_Port_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ports_portmap_set(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  Ports::PortMap *arg2 = (Ports::PortMap *) 0 ;
  
  SWIG_check_num_args("Ports::portmap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::portmap",1,"Ports *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ports::portmap",2,"Ports::PortMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_portmap_set",1,SWIGTYPE_p_Ports);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mapT_std__string_Port_p_t,0))){
    SWIG_fail_ptr("Ports_portmap_set",2,SWIGTYPE_p_std__mapT_std__string_Port_p_t);
  }
  
  if (arg1) (arg1)->portmap = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ports_portmap_get(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  Ports::PortMap *result = 0 ;
  
  SWIG_check_num_args("Ports::portmap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::portmap",1,"Ports *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_portmap_get",1,SWIGTYPE_p_Ports);
  }
  
  result = (Ports::PortMap *)& ((arg1)->portmap);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_Port_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ports(lua_State* L) {
  int SWIG_arg = 0;
  Ports *result = 0 ;
  
  SWIG_check_num_args("Ports::Ports",0,0)
  result = (Ports *)new Ports();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ports,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ports_addPort(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  std::string *arg2 = 0 ;
  Port *arg3 = (Port *) 0 ;
  
  SWIG_check_num_args("Ports::addPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::addPort",1,"Ports *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ports::addPort",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Ports::addPort",3,"Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_addPort",1,SWIGTYPE_p_Ports);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Ports_addPort",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Port,0))){
    SWIG_fail_ptr("Ports_addPort",3,SWIGTYPE_p_Port);
  }
  
  (arg1)->addPort((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ports_Run(lua_State* L) {
  int SWIG_arg = 0;
  Ports *arg1 = (Ports *) 0 ;
  
  SWIG_check_num_args("Ports::Run",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ports::Run",1,"Ports *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ports,0))){
    SWIG_fail_ptr("Ports_Run",1,SWIGTYPE_p_Ports);
  }
  
  (arg1)->Run();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Ports(void *obj) {
Ports *arg1 = (Ports *) obj;
delete arg1;
}
static int _proxy__wrap_new_Ports(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Ports);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Ports_attributes[] = {
    { "ports", _wrap_Ports_ports_get, _wrap_Ports_ports_set },
    { "portmap", _wrap_Ports_portmap_get, _wrap_Ports_portmap_set },
    {0,0,0}
};
static swig_lua_method swig_Ports_methods[]= {
    { "addPort", _wrap_Ports_addPort},
    { "Run", _wrap_Ports_Run},
    {0,0}
};
static swig_lua_method swig_Ports_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Ports_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Ports_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Ports_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Ports_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Ports_Sf_SwigStatic = {
    "Ports",
    swig_Ports_Sf_SwigStatic_methods,
    swig_Ports_Sf_SwigStatic_attributes,
    swig_Ports_Sf_SwigStatic_constants,
    swig_Ports_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Ports_bases[] = {0};
static const char *swig_Ports_base_names[] = {0};
static swig_lua_class _wrap_class_Ports = { "Ports", "Ports", &SWIGTYPE_p_Ports,_proxy__wrap_new_Ports, swig_delete_Ports, swig_Ports_methods, swig_Ports_attributes, &swig_Ports_Sf_SwigStatic, swig_Ports_meta, swig_Ports_bases, swig_Ports_base_names };

static int _wrap_MonoProcessor_InplaceProcess(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoProcessor::InplaceProcess",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::InplaceProcess",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::InplaceProcess",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoProcessor::InplaceProcess",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_InplaceProcess",1,SWIGTYPE_p_MonoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoProcessor_InplaceProcess",3,SWIGTYPE_p_float);
  }
  
  (arg1)->InplaceProcess(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::Tick",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MonoProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("MonoProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("MonoProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_Tick",1,SWIGTYPE_p_MonoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::Tick",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MonoProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("MonoProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_Tick",1,SWIGTYPE_p_MonoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::Tick",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MonoProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_Tick",1,SWIGTYPE_p_MonoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::Tick",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_Tick",1,SWIGTYPE_p_MonoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoProcessor::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::Tick",1,"MonoProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_Tick",1,SWIGTYPE_p_MonoProcessor);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MonoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_MonoProcessor_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MonoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MonoProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MonoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MonoProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MonoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MonoProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MonoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MonoProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MonoProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MonoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    MonoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    MonoProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    MonoProcessor::Tick(DspFloatType)\n"
    "    MonoProcessor::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_MonoProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoProcessor *arg1 = (MonoProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoProcessor::ProcessBlock",1,"MonoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoProcessor_ProcessBlock",1,SWIGTYPE_p_MonoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoProcessor(void *obj) {
MonoProcessor *arg1 = (MonoProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_MonoProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoProcessor_methods[]= {
    { "InplaceProcess", _wrap_MonoProcessor_InplaceProcess},
    { "Tick", _wrap_MonoProcessor_Tick},
    { "ProcessBlock", _wrap_MonoProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoProcessor_Sf_SwigStatic = {
    "MonoProcessor",
    swig_MonoProcessor_Sf_SwigStatic_methods,
    swig_MonoProcessor_Sf_SwigStatic_attributes,
    swig_MonoProcessor_Sf_SwigStatic_constants,
    swig_MonoProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoProcessor_bases[] = {0,0};
static const char *swig_MonoProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MonoProcessor = { "MonoProcessor", "MonoProcessor", &SWIGTYPE_p_MonoProcessor,0, swig_delete_MonoProcessor, swig_MonoProcessor_methods, swig_MonoProcessor_attributes, &swig_MonoProcessor_Sf_SwigStatic, swig_MonoProcessor_meta, swig_MonoProcessor_bases, swig_MonoProcessor_base_names };

static int _wrap_MonoCascadeProcessor_procs_set(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeProcessor *arg1 = (MonoCascadeProcessor *) 0 ;
  std::list< MonoProcessor * > *arg2 = (std::list< MonoProcessor * > *) 0 ;
  
  SWIG_check_num_args("MonoCascadeProcessor::procs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoCascadeProcessor::procs",1,"MonoCascadeProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MonoCascadeProcessor::procs",2,"std::list< MonoProcessor * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoCascadeProcessor,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_procs_set",1,SWIGTYPE_p_MonoCascadeProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_MonoProcessor_p_t,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_procs_set",2,SWIGTYPE_p_std__listT_MonoProcessor_p_t);
  }
  
  if (arg1) (arg1)->procs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoCascadeProcessor_procs_get(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeProcessor *arg1 = (MonoCascadeProcessor *) 0 ;
  std::list< MonoProcessor * > *result = 0 ;
  
  SWIG_check_num_args("MonoCascadeProcessor::procs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoCascadeProcessor::procs",1,"MonoCascadeProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoCascadeProcessor,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_procs_get",1,SWIGTYPE_p_MonoCascadeProcessor);
  }
  
  result = (std::list< MonoProcessor * > *)& ((arg1)->procs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_MonoProcessor_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoCascadeProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoCascadeProcessor::MonoCascadeProcessor",0,0)
  result = (MonoCascadeProcessor *)new MonoCascadeProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoCascadeProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoCascadeProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeProcessor *arg1 = (MonoCascadeProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoCascadeProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoCascadeProcessor::getType",1,"MonoCascadeProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoCascadeProcessor,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_getType",1,SWIGTYPE_p_MonoCascadeProcessor);
  }
  
  result = (ObjectType)((MonoCascadeProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoCascadeProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeProcessor *arg1 = (MonoCascadeProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoCascadeProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoCascadeProcessor::ProcessBlock",1,"MonoCascadeProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoCascadeProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoCascadeProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoCascadeProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoCascadeProcessor,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_ProcessBlock",1,SWIGTYPE_p_MonoCascadeProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoCascadeProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoCascadeProcessor(void *obj) {
MonoCascadeProcessor *arg1 = (MonoCascadeProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoCascadeProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoCascadeProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoCascadeProcessor_attributes[] = {
    { "procs", _wrap_MonoCascadeProcessor_procs_get, _wrap_MonoCascadeProcessor_procs_set },
    {0,0,0}
};
static swig_lua_method swig_MonoCascadeProcessor_methods[]= {
    { "getType", _wrap_MonoCascadeProcessor_getType},
    { "ProcessBlock", _wrap_MonoCascadeProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoCascadeProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoCascadeProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoCascadeProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoCascadeProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoCascadeProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoCascadeProcessor_Sf_SwigStatic = {
    "MonoCascadeProcessor",
    swig_MonoCascadeProcessor_Sf_SwigStatic_methods,
    swig_MonoCascadeProcessor_Sf_SwigStatic_attributes,
    swig_MonoCascadeProcessor_Sf_SwigStatic_constants,
    swig_MonoCascadeProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoCascadeProcessor_bases[] = {0,0};
static const char *swig_MonoCascadeProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_MonoCascadeProcessor = { "MonoCascadeProcessor", "MonoCascadeProcessor", &SWIGTYPE_p_MonoCascadeProcessor,_proxy__wrap_new_MonoCascadeProcessor, swig_delete_MonoCascadeProcessor, swig_MonoCascadeProcessor_methods, swig_MonoCascadeProcessor_attributes, &swig_MonoCascadeProcessor_Sf_SwigStatic, swig_MonoCascadeProcessor_meta, swig_MonoCascadeProcessor_bases, swig_MonoCascadeProcessor_base_names };

static int _wrap_StereoProcessor_pan_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("StereoProcessor::pan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::pan",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::pan",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_pan_set",1,SWIGTYPE_p_StereoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->pan = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_pan_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoProcessor::pan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::pan",1,"StereoProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_pan_get",1,SWIGTYPE_p_StereoProcessor);
  }
  
  result = (DspFloatType) ((arg1)->pan);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::ProcessBlock",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_ProcessBlock",1,SWIGTYPE_p_StereoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::Tick",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",1,SWIGTYPE_p_StereoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::Tick",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",1,SWIGTYPE_p_StereoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::Tick",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",1,SWIGTYPE_p_StereoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::Tick",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",1,SWIGTYPE_p_StereoProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoProcessor_InplaceProcess(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoProcessor::InplaceProcess",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::InplaceProcess",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::InplaceProcess",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoProcessor::InplaceProcess",3,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_InplaceProcess",1,SWIGTYPE_p_StereoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_InplaceProcess",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->InplaceProcess(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoProcessor_Run(lua_State* L) {
  int SWIG_arg = 0;
  StereoProcessor *arg1 = (StereoProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoProcessor::Run",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoProcessor::Run",1,"StereoProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoProcessor::Run",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoProcessor::Run",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoProcessor::Run",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoProcessor,0))){
    SWIG_fail_ptr("StereoProcessor_Run",1,SWIGTYPE_p_StereoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Run",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoProcessor_Run",4,SWIGTYPE_p_p_float);
  }
  
  (arg1)->Run(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoProcessor(void *obj) {
StereoProcessor *arg1 = (StereoProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_StereoProcessor_attributes[] = {
    { "pan", _wrap_StereoProcessor_pan_get, _wrap_StereoProcessor_pan_set },
    {0,0,0}
};
static swig_lua_method swig_StereoProcessor_methods[]= {
    { "ProcessBlock", _wrap_StereoProcessor_ProcessBlock},
    { "Tick", _wrap_StereoProcessor_Tick},
    { "InplaceProcess", _wrap_StereoProcessor_InplaceProcess},
    { "Run", _wrap_StereoProcessor_Run},
    {0,0}
};
static swig_lua_method swig_StereoProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoProcessor_Sf_SwigStatic = {
    "StereoProcessor",
    swig_StereoProcessor_Sf_SwigStatic_methods,
    swig_StereoProcessor_Sf_SwigStatic_attributes,
    swig_StereoProcessor_Sf_SwigStatic_constants,
    swig_StereoProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoProcessor_bases[] = {0,0};
static const char *swig_StereoProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_StereoProcessor = { "StereoProcessor", "StereoProcessor", &SWIGTYPE_p_StereoProcessor,0, swig_delete_StereoProcessor, swig_StereoProcessor_methods, swig_StereoProcessor_attributes, &swig_StereoProcessor_Sf_SwigStatic, swig_StereoProcessor_meta, swig_StereoProcessor_bases, swig_StereoProcessor_base_names };

static int _wrap_StereoCascadeProcessor_procs_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoCascadeProcessor *arg1 = (StereoCascadeProcessor *) 0 ;
  std::list< StereoProcessor * > *arg2 = (std::list< StereoProcessor * > *) 0 ;
  
  SWIG_check_num_args("StereoCascadeProcessor::procs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoCascadeProcessor::procs",1,"StereoCascadeProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoCascadeProcessor::procs",2,"std::list< StereoProcessor * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoCascadeProcessor,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_procs_set",1,SWIGTYPE_p_StereoCascadeProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_StereoProcessor_p_t,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_procs_set",2,SWIGTYPE_p_std__listT_StereoProcessor_p_t);
  }
  
  if (arg1) (arg1)->procs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoCascadeProcessor_procs_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoCascadeProcessor *arg1 = (StereoCascadeProcessor *) 0 ;
  std::list< StereoProcessor * > *result = 0 ;
  
  SWIG_check_num_args("StereoCascadeProcessor::procs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoCascadeProcessor::procs",1,"StereoCascadeProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoCascadeProcessor,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_procs_get",1,SWIGTYPE_p_StereoCascadeProcessor);
  }
  
  result = (std::list< StereoProcessor * > *)& ((arg1)->procs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_StereoProcessor_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoCascadeProcessor(lua_State* L) {
  int SWIG_arg = 0;
  StereoCascadeProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoCascadeProcessor::StereoCascadeProcessor",0,0)
  result = (StereoCascadeProcessor *)new StereoCascadeProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoCascadeProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoCascadeProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoCascadeProcessor *arg1 = (StereoCascadeProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoCascadeProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoCascadeProcessor::getType",1,"StereoCascadeProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoCascadeProcessor,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_getType",1,SWIGTYPE_p_StereoCascadeProcessor);
  }
  
  result = (ObjectType)((StereoCascadeProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoCascadeProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoCascadeProcessor *arg1 = (StereoCascadeProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoCascadeProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoCascadeProcessor::ProcessBlock",1,"StereoCascadeProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoCascadeProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoCascadeProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoCascadeProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoCascadeProcessor,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_ProcessBlock",1,SWIGTYPE_p_StereoCascadeProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoCascadeProcessor_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoCascadeProcessor(void *obj) {
StereoCascadeProcessor *arg1 = (StereoCascadeProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoCascadeProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoCascadeProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoCascadeProcessor_attributes[] = {
    { "procs", _wrap_StereoCascadeProcessor_procs_get, _wrap_StereoCascadeProcessor_procs_set },
    {0,0,0}
};
static swig_lua_method swig_StereoCascadeProcessor_methods[]= {
    { "getType", _wrap_StereoCascadeProcessor_getType},
    { "ProcessBlock", _wrap_StereoCascadeProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_StereoCascadeProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoCascadeProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoCascadeProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoCascadeProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoCascadeProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoCascadeProcessor_Sf_SwigStatic = {
    "StereoCascadeProcessor",
    swig_StereoCascadeProcessor_Sf_SwigStatic_methods,
    swig_StereoCascadeProcessor_Sf_SwigStatic_attributes,
    swig_StereoCascadeProcessor_Sf_SwigStatic_constants,
    swig_StereoCascadeProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoCascadeProcessor_bases[] = {0,0};
static const char *swig_StereoCascadeProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoCascadeProcessor = { "StereoCascadeProcessor", "StereoCascadeProcessor", &SWIGTYPE_p_StereoCascadeProcessor,_proxy__wrap_new_StereoCascadeProcessor, swig_delete_StereoCascadeProcessor, swig_StereoCascadeProcessor_methods, swig_StereoCascadeProcessor_attributes, &swig_StereoCascadeProcessor_Sf_SwigStatic, swig_StereoCascadeProcessor_meta, swig_StereoCascadeProcessor_bases, swig_StereoCascadeProcessor_base_names };

static int _wrap_MonoFXProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoFXProcessor *arg1 = (MonoFXProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoFXProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoFXProcessor::getType",1,"MonoFXProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoFXProcessor,0))){
    SWIG_fail_ptr("MonoFXProcessor_getType",1,SWIGTYPE_p_MonoFXProcessor);
  }
  
  result = (ObjectType)((MonoFXProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoFXProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoFXProcessor *arg1 = (MonoFXProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoFXProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoFXProcessor::ProcessBlock",1,"MonoFXProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoFXProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoFXProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoFXProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoFXProcessor,0))){
    SWIG_fail_ptr("MonoFXProcessor_ProcessBlock",1,SWIGTYPE_p_MonoFXProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoFXProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoFXProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoFXProcessor(void *obj) {
MonoFXProcessor *arg1 = (MonoFXProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_MonoFXProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoFXProcessor_methods[]= {
    { "getType", _wrap_MonoFXProcessor_getType},
    { "ProcessBlock", _wrap_MonoFXProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoFXProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoFXProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoFXProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoFXProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoFXProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoFXProcessor_Sf_SwigStatic = {
    "MonoFXProcessor",
    swig_MonoFXProcessor_Sf_SwigStatic_methods,
    swig_MonoFXProcessor_Sf_SwigStatic_attributes,
    swig_MonoFXProcessor_Sf_SwigStatic_constants,
    swig_MonoFXProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoFXProcessor_bases[] = {0,0};
static const char *swig_MonoFXProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_MonoFXProcessor = { "MonoFXProcessor", "MonoFXProcessor", &SWIGTYPE_p_MonoFXProcessor,0, swig_delete_MonoFXProcessor, swig_MonoFXProcessor_methods, swig_MonoFXProcessor_attributes, &swig_MonoFXProcessor_Sf_SwigStatic, swig_MonoFXProcessor_meta, swig_MonoFXProcessor_bases, swig_MonoFXProcessor_base_names };

static int _wrap_StereoFXProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoFXProcessor *arg1 = (StereoFXProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoFXProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFXProcessor::getType",1,"StereoFXProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFXProcessor,0))){
    SWIG_fail_ptr("StereoFXProcessor_getType",1,SWIGTYPE_p_StereoFXProcessor);
  }
  
  result = (ObjectType)((StereoFXProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFXProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoFXProcessor *arg1 = (StereoFXProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoFXProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFXProcessor::ProcessBlock",1,"StereoFXProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFXProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoFXProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoFXProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFXProcessor,0))){
    SWIG_fail_ptr("StereoFXProcessor_ProcessBlock",1,SWIGTYPE_p_StereoFXProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoFXProcessor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoFXProcessor_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoFXProcessor(void *obj) {
StereoFXProcessor *arg1 = (StereoFXProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_StereoFXProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoFXProcessor_methods[]= {
    { "getType", _wrap_StereoFXProcessor_getType},
    { "ProcessBlock", _wrap_StereoFXProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_StereoFXProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoFXProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoFXProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoFXProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoFXProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoFXProcessor_Sf_SwigStatic = {
    "StereoFXProcessor",
    swig_StereoFXProcessor_Sf_SwigStatic_methods,
    swig_StereoFXProcessor_Sf_SwigStatic_attributes,
    swig_StereoFXProcessor_Sf_SwigStatic_constants,
    swig_StereoFXProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoFXProcessor_bases[] = {0,0};
static const char *swig_StereoFXProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoFXProcessor = { "StereoFXProcessor", "StereoFXProcessor", &SWIGTYPE_p_StereoFXProcessor,0, swig_delete_StereoFXProcessor, swig_StereoFXProcessor_methods, swig_StereoFXProcessor_attributes, &swig_StereoFXProcessor_Sf_SwigStatic, swig_StereoFXProcessor_meta, swig_StereoFXProcessor_bases, swig_StereoFXProcessor_base_names };

static int _wrap_GeneratorProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("GeneratorProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::getType",1,"GeneratorProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_getType",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  result = (ObjectType)((GeneratorProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("GeneratorProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Tick",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("GeneratorProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("GeneratorProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Tick",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("GeneratorProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Tick",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("GeneratorProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Tick",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("GeneratorProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Tick",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GeneratorProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Tick",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("GeneratorProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Tick",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Tick",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("GeneratorProcessor::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Tick",1,"GeneratorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Tick",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GeneratorProcessor_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeneratorProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GeneratorProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_GeneratorProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_GeneratorProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GeneratorProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    GeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    GeneratorProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    GeneratorProcessor::Tick(DspFloatType)\n"
    "    GeneratorProcessor::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_GeneratorProcessor_Generate(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("GeneratorProcessor::Generate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::Generate",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::Generate",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("GeneratorProcessor::Generate",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_Generate",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("GeneratorProcessor_Generate",3,SWIGTYPE_p_float);
  }
  
  (arg1)->Generate(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeneratorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("GeneratorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeneratorProcessor::ProcessBlock",1,"GeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeneratorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("GeneratorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("GeneratorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("GeneratorProcessor_ProcessBlock",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("GeneratorProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("GeneratorProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GeneratorProcessor(void *obj) {
GeneratorProcessor *arg1 = (GeneratorProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_GeneratorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GeneratorProcessor_methods[]= {
    { "getType", _wrap_GeneratorProcessor_getType},
    { "Tick", _wrap_GeneratorProcessor_Tick},
    { "Generate", _wrap_GeneratorProcessor_Generate},
    { "ProcessBlock", _wrap_GeneratorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_GeneratorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GeneratorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GeneratorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GeneratorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GeneratorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GeneratorProcessor_Sf_SwigStatic = {
    "GeneratorProcessor",
    swig_GeneratorProcessor_Sf_SwigStatic_methods,
    swig_GeneratorProcessor_Sf_SwigStatic_attributes,
    swig_GeneratorProcessor_Sf_SwigStatic_constants,
    swig_GeneratorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GeneratorProcessor_bases[] = {0,0};
static const char *swig_GeneratorProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_GeneratorProcessor = { "GeneratorProcessor", "GeneratorProcessor", &SWIGTYPE_p_GeneratorProcessor,0, swig_delete_GeneratorProcessor, swig_GeneratorProcessor_methods, swig_GeneratorProcessor_attributes, &swig_GeneratorProcessor_Sf_SwigStatic, swig_GeneratorProcessor_meta, swig_GeneratorProcessor_bases, swig_GeneratorProcessor_base_names };

static int _wrap_new_MixerProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MixerProcessor *result = 0 ;
  
  SWIG_check_num_args("MixerProcessor::MixerProcessor",0,0)
  result = (MixerProcessor *)new MixerProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MixerProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MixerProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MixerProcessor *arg1 = (MixerProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MixerProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MixerProcessor::getType",1,"MixerProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MixerProcessor,0))){
    SWIG_fail_ptr("MixerProcessor_getType",1,SWIGTYPE_p_MixerProcessor);
  }
  
  result = (ObjectType)((MixerProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MixerProcessor_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  MixerProcessor *arg1 = (MixerProcessor *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MixerProcessor::ProcessBlock",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MixerProcessor::ProcessBlock",1,"MixerProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MixerProcessor::ProcessBlock",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MixerProcessor::ProcessBlock",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MixerProcessor::ProcessBlock",4,"DspFloatType **");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("MixerProcessor::ProcessBlock",5,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MixerProcessor,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",1,SWIGTYPE_p_MixerProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",5,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MixerProcessor_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  MixerProcessor *arg1 = (MixerProcessor *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  DspFloatType **arg5 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("MixerProcessor::ProcessBlock",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MixerProcessor::ProcessBlock",1,"MixerProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MixerProcessor::ProcessBlock",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MixerProcessor::ProcessBlock",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MixerProcessor::ProcessBlock",4,"DspFloatType **");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("MixerProcessor::ProcessBlock",5,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MixerProcessor,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",1,SWIGTYPE_p_MixerProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("MixerProcessor_ProcessBlock",5,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MixerProcessor_ProcessBlock(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MixerProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_MixerProcessor_ProcessBlock__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MixerProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_MixerProcessor_ProcessBlock__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MixerProcessor_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MixerProcessor::ProcessBlock(size_t,size_t,DspFloatType **,DspFloatType *)\n"
    "    MixerProcessor::ProcessBlock(size_t,size_t,DspFloatType **,DspFloatType **)\n");
  lua_error(L);return 0;
}


static void swig_delete_MixerProcessor(void *obj) {
MixerProcessor *arg1 = (MixerProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MixerProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MixerProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MixerProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MixerProcessor_methods[]= {
    { "getType", _wrap_MixerProcessor_getType},
    { "ProcessBlock", _wrap_MixerProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MixerProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MixerProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MixerProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MixerProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MixerProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MixerProcessor_Sf_SwigStatic = {
    "MixerProcessor",
    swig_MixerProcessor_Sf_SwigStatic_methods,
    swig_MixerProcessor_Sf_SwigStatic_attributes,
    swig_MixerProcessor_Sf_SwigStatic_constants,
    swig_MixerProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MixerProcessor_bases[] = {0,0};
static const char *swig_MixerProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MixerProcessor = { "MixerProcessor", "MixerProcessor", &SWIGTYPE_p_MixerProcessor,_proxy__wrap_new_MixerProcessor, swig_delete_MixerProcessor, swig_MixerProcessor_methods, swig_MixerProcessor_attributes, &swig_MixerProcessor_Sf_SwigStatic, swig_MixerProcessor_meta, swig_MixerProcessor_bases, swig_MixerProcessor_base_names };

static int _wrap_FunctionProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("FunctionProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::getType",1,"FunctionProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_getType",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  result = (ObjectType)((FunctionProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("FunctionProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::Tick",1,"FunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FunctionProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FunctionProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_Tick",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("FunctionProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::Tick",1,"FunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FunctionProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_Tick",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("FunctionProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::Tick",1,"FunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FunctionProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_Tick",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("FunctionProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::Tick",1,"FunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FunctionProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_Tick",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FunctionProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FunctionProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FunctionProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FunctionProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FunctionProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    FunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    FunctionProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    FunctionProcessor::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_FunctionProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("FunctionProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FunctionProcessor::ProcessBlock",1,"FunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FunctionProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FunctionProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("FunctionProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("FunctionProcessor_ProcessBlock",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FunctionProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FunctionProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FunctionProcessor(void *obj) {
FunctionProcessor *arg1 = (FunctionProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_FunctionProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FunctionProcessor_methods[]= {
    { "getType", _wrap_FunctionProcessor_getType},
    { "Tick", _wrap_FunctionProcessor_Tick},
    { "ProcessBlock", _wrap_FunctionProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_FunctionProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FunctionProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FunctionProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FunctionProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FunctionProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FunctionProcessor_Sf_SwigStatic = {
    "FunctionProcessor",
    swig_FunctionProcessor_Sf_SwigStatic_methods,
    swig_FunctionProcessor_Sf_SwigStatic_attributes,
    swig_FunctionProcessor_Sf_SwigStatic_constants,
    swig_FunctionProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FunctionProcessor_bases[] = {0,0};
static const char *swig_FunctionProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_FunctionProcessor = { "FunctionProcessor", "FunctionProcessor", &SWIGTYPE_p_FunctionProcessor,0, swig_delete_FunctionProcessor, swig_FunctionProcessor_methods, swig_FunctionProcessor_attributes, &swig_FunctionProcessor_Sf_SwigStatic, swig_FunctionProcessor_meta, swig_FunctionProcessor_bases, swig_FunctionProcessor_base_names };

static int _wrap_Parameter2Processor_getType(lua_State* L) {
  int SWIG_arg = 0;
  Parameter2Processor *arg1 = (Parameter2Processor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("Parameter2Processor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Parameter2Processor::getType",1,"Parameter2Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Parameter2Processor,0))){
    SWIG_fail_ptr("Parameter2Processor_getType",1,SWIGTYPE_p_Parameter2Processor);
  }
  
  result = (ObjectType)((Parameter2Processor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parameter2Processor_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Parameter2Processor *arg1 = (Parameter2Processor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Parameter2Processor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Parameter2Processor::Tick",1,"Parameter2Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Parameter2Processor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Parameter2Processor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Parameter2Processor,0))){
    SWIG_fail_ptr("Parameter2Processor_Tick",1,SWIGTYPE_p_Parameter2Processor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parameter2Processor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  Parameter2Processor *arg1 = (Parameter2Processor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Parameter2Processor::ProcessBlock",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Parameter2Processor::ProcessBlock",1,"Parameter2Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Parameter2Processor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Parameter2Processor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Parameter2Processor::ProcessBlock",4,"DspFloatType *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Parameter2Processor::ProcessBlock",5,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Parameter2Processor,0))){
    SWIG_fail_ptr("Parameter2Processor_ProcessBlock",1,SWIGTYPE_p_Parameter2Processor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Parameter2Processor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Parameter2Processor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Parameter2Processor_ProcessBlock",5,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Parameter2Processor(void *obj) {
Parameter2Processor *arg1 = (Parameter2Processor *) obj;
delete arg1;
}
static swig_lua_attribute swig_Parameter2Processor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Parameter2Processor_methods[]= {
    { "getType", _wrap_Parameter2Processor_getType},
    { "Tick", _wrap_Parameter2Processor_Tick},
    { "ProcessBlock", _wrap_Parameter2Processor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_Parameter2Processor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Parameter2Processor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Parameter2Processor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Parameter2Processor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Parameter2Processor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Parameter2Processor_Sf_SwigStatic = {
    "Parameter2Processor",
    swig_Parameter2Processor_Sf_SwigStatic_methods,
    swig_Parameter2Processor_Sf_SwigStatic_attributes,
    swig_Parameter2Processor_Sf_SwigStatic_constants,
    swig_Parameter2Processor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Parameter2Processor_bases[] = {0,0};
static const char *swig_Parameter2Processor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_Parameter2Processor = { "Parameter2Processor", "Parameter2Processor", &SWIGTYPE_p_Parameter2Processor,0, swig_delete_Parameter2Processor, swig_Parameter2Processor_methods, swig_Parameter2Processor_attributes, &swig_Parameter2Processor_Sf_SwigStatic, swig_Parameter2Processor_meta, swig_Parameter2Processor_bases, swig_Parameter2Processor_base_names };

static int _wrap_StereoSplitterProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoSplitterProcessor *arg1 = (StereoSplitterProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoSplitterProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoSplitterProcessor::getType",1,"StereoSplitterProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoSplitterProcessor,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_getType",1,SWIGTYPE_p_StereoSplitterProcessor);
  }
  
  result = (ObjectType)((StereoSplitterProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoSplitterProcessor_Tick(lua_State* L) {
  int SWIG_arg = 0;
  StereoSplitterProcessor *arg1 = (StereoSplitterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType *arg3 = 0 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoSplitterProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoSplitterProcessor::Tick",1,"StereoSplitterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoSplitterProcessor::Tick",2,"DspFloatType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("StereoSplitterProcessor::Tick",3,"DspFloatType &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoSplitterProcessor::Tick",4,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoSplitterProcessor,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_Tick",1,SWIGTYPE_p_StereoSplitterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_Tick",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,*arg3,*arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoSplitterProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoSplitterProcessor *arg1 = (StereoSplitterProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("StereoSplitterProcessor::ProcessBlock",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoSplitterProcessor::ProcessBlock",1,"StereoSplitterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoSplitterProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoSplitterProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoSplitterProcessor::ProcessBlock",4,"DspFloatType *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("StereoSplitterProcessor::ProcessBlock",5,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoSplitterProcessor,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_ProcessBlock",1,SWIGTYPE_p_StereoSplitterProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoSplitterProcessor_ProcessBlock",5,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoSplitterProcessor(void *obj) {
StereoSplitterProcessor *arg1 = (StereoSplitterProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_StereoSplitterProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoSplitterProcessor_methods[]= {
    { "getType", _wrap_StereoSplitterProcessor_getType},
    { "Tick", _wrap_StereoSplitterProcessor_Tick},
    { "ProcessBlock", _wrap_StereoSplitterProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_StereoSplitterProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoSplitterProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoSplitterProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoSplitterProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoSplitterProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoSplitterProcessor_Sf_SwigStatic = {
    "StereoSplitterProcessor",
    swig_StereoSplitterProcessor_Sf_SwigStatic_methods,
    swig_StereoSplitterProcessor_Sf_SwigStatic_attributes,
    swig_StereoSplitterProcessor_Sf_SwigStatic_constants,
    swig_StereoSplitterProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoSplitterProcessor_bases[] = {0,0};
static const char *swig_StereoSplitterProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_StereoSplitterProcessor = { "StereoSplitterProcessor", "StereoSplitterProcessor", &SWIGTYPE_p_StereoSplitterProcessor,0, swig_delete_StereoSplitterProcessor, swig_StereoSplitterProcessor_methods, swig_StereoSplitterProcessor_attributes, &swig_StereoSplitterProcessor_Sf_SwigStatic, swig_StereoSplitterProcessor_meta, swig_StereoSplitterProcessor_bases, swig_StereoSplitterProcessor_base_names };

static int _wrap_OscillatorProcessor_slaves_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  std::vector< OscillatorProcessor *,std::allocator< OscillatorProcessor * > > *arg2 = (std::vector< OscillatorProcessor *,std::allocator< OscillatorProcessor * > > *) 0 ;
  
  SWIG_check_num_args("OscillatorProcessor::slaves",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::slaves",1,"OscillatorProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OscillatorProcessor::slaves",2,"std::vector< OscillatorProcessor *,std::allocator< OscillatorProcessor * > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_slaves_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t,0))){
    SWIG_fail_ptr("OscillatorProcessor_slaves_set",2,SWIGTYPE_p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t);
  }
  
  if (arg1) (arg1)->slaves = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_slaves_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  std::vector< OscillatorProcessor *,std::allocator< OscillatorProcessor * > > *result = 0 ;
  
  SWIG_check_num_args("OscillatorProcessor::slaves",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::slaves",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_slaves_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (std::vector< OscillatorProcessor *,std::allocator< OscillatorProcessor * > > *)& ((arg1)->slaves);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_waveform_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_waveform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_waveform",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_waveform",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_waveform_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_waveform = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_waveform_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  int result;
  
  SWIG_check_num_args("OscillatorProcessor::m_waveform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_waveform",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_waveform_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (int) ((arg1)->m_waveform);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_morph_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_morph",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_morph",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_morph",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_morph_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_morph = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_morph_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_morph",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_morph",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_morph_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_morph);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_freq",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_freq",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_freq_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_freq",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_freq_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_phase_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_phase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_phase",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_phase",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_phase_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_phase = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_phase_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_phase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_phase",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_phase_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_phase);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_index_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_index",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_index",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_index_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_index = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_index_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_index",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_index_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_index);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_gain_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_gain",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_gain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_gain_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_gain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_gain_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_gain",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_gain_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_gain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_fm_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_fm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_fm",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_fm",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_fm_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_fm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_fm_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_fm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_fm",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_fm_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_fm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_pm_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_pm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_pm",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_pm",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_pm_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_pm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_pm_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_pm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_pm",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_pm_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_pm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_fenv_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_fenv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_fenv",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_fenv",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_fenv_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_fenv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_fenv_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_fenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_fenv",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_fenv_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_fenv);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_penv_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_penv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_penv",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_penv",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_penv_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_penv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_penv_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_penv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_penv",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_penv_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_penv);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_drift_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_drift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_drift",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_drift",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_drift_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_drift = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_drift_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_drift",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_drift",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_drift_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_drift);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_mod_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_mod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_mod",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_mod",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_mod_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_mod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_mod_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_mod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_mod",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_mod_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_mod);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_cmod_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_cmod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_cmod",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_cmod",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_cmod_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_cmod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_cmod_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_cmod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_cmod",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_cmod_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_cmod);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_env_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_env",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_env",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_env",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_env_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_env = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_env_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_env",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_env",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_env_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_env);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_lfo_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_lfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_lfo",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_lfo",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_lfo_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_lfo = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_lfo_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_lfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_lfo",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_lfo_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_lfo);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_pwm_set(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("OscillatorProcessor::m_pwm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_pwm",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::m_pwm",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_pwm_set",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_pwm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_m_pwm_get(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::m_pwm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::m_pwm",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_m_pwm_get",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->m_pwm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("OscillatorProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::getType",1,"OscillatorProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_getType",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (ObjectType)((OscillatorProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::Tick",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OscillatorProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("OscillatorProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_Tick",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::Tick",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OscillatorProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_Tick",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::Tick",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OscillatorProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_Tick",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::Tick",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_Tick",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("OscillatorProcessor::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::Tick",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_Tick",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OscillatorProcessor_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OscillatorProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_OscillatorProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_OscillatorProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_OscillatorProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OscillatorProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    OscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    OscillatorProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    OscillatorProcessor::Tick(DspFloatType)\n"
    "    OscillatorProcessor::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_OscillatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("OscillatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OscillatorProcessor::ProcessBlock",1,"OscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OscillatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("OscillatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("OscillatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("OscillatorProcessor_ProcessBlock",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OscillatorProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OscillatorProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OscillatorProcessor(void *obj) {
OscillatorProcessor *arg1 = (OscillatorProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_OscillatorProcessor_attributes[] = {
    { "slaves", _wrap_OscillatorProcessor_slaves_get, _wrap_OscillatorProcessor_slaves_set },
    { "m_waveform", _wrap_OscillatorProcessor_m_waveform_get, _wrap_OscillatorProcessor_m_waveform_set },
    { "m_morph", _wrap_OscillatorProcessor_m_morph_get, _wrap_OscillatorProcessor_m_morph_set },
    { "m_freq", _wrap_OscillatorProcessor_m_freq_get, _wrap_OscillatorProcessor_m_freq_set },
    { "m_phase", _wrap_OscillatorProcessor_m_phase_get, _wrap_OscillatorProcessor_m_phase_set },
    { "m_index", _wrap_OscillatorProcessor_m_index_get, _wrap_OscillatorProcessor_m_index_set },
    { "m_gain", _wrap_OscillatorProcessor_m_gain_get, _wrap_OscillatorProcessor_m_gain_set },
    { "m_fm", _wrap_OscillatorProcessor_m_fm_get, _wrap_OscillatorProcessor_m_fm_set },
    { "m_pm", _wrap_OscillatorProcessor_m_pm_get, _wrap_OscillatorProcessor_m_pm_set },
    { "m_fenv", _wrap_OscillatorProcessor_m_fenv_get, _wrap_OscillatorProcessor_m_fenv_set },
    { "m_penv", _wrap_OscillatorProcessor_m_penv_get, _wrap_OscillatorProcessor_m_penv_set },
    { "m_drift", _wrap_OscillatorProcessor_m_drift_get, _wrap_OscillatorProcessor_m_drift_set },
    { "m_mod", _wrap_OscillatorProcessor_m_mod_get, _wrap_OscillatorProcessor_m_mod_set },
    { "m_cmod", _wrap_OscillatorProcessor_m_cmod_get, _wrap_OscillatorProcessor_m_cmod_set },
    { "m_env", _wrap_OscillatorProcessor_m_env_get, _wrap_OscillatorProcessor_m_env_set },
    { "m_lfo", _wrap_OscillatorProcessor_m_lfo_get, _wrap_OscillatorProcessor_m_lfo_set },
    { "m_pwm", _wrap_OscillatorProcessor_m_pwm_get, _wrap_OscillatorProcessor_m_pwm_set },
    {0,0,0}
};
static swig_lua_method swig_OscillatorProcessor_methods[]= {
    { "getType", _wrap_OscillatorProcessor_getType},
    { "Tick", _wrap_OscillatorProcessor_Tick},
    { "ProcessBlock", _wrap_OscillatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_OscillatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OscillatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OscillatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OscillatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OscillatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OscillatorProcessor_Sf_SwigStatic = {
    "OscillatorProcessor",
    swig_OscillatorProcessor_Sf_SwigStatic_methods,
    swig_OscillatorProcessor_Sf_SwigStatic_attributes,
    swig_OscillatorProcessor_Sf_SwigStatic_constants,
    swig_OscillatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OscillatorProcessor_bases[] = {0,0};
static const char *swig_OscillatorProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_OscillatorProcessor = { "OscillatorProcessor", "OscillatorProcessor", &SWIGTYPE_p_OscillatorProcessor,0, swig_delete_OscillatorProcessor, swig_OscillatorProcessor_methods, swig_OscillatorProcessor_attributes, &swig_OscillatorProcessor_Sf_SwigStatic, swig_OscillatorProcessor_meta, swig_OscillatorProcessor_bases, swig_OscillatorProcessor_base_names };

static int _wrap_FilterProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("FilterProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::getType",1,"FilterProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_getType",1,SWIGTYPE_p_FilterProcessor);
  }
  
  result = (ObjectType)((FilterProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Tick",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FilterProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FilterProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Tick",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Tick",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FilterProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Tick",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Tick",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Tick",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Tick",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Tick",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FilterProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FilterProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FilterProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FilterProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FilterProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_FilterProcessor_Run__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Run",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Run",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Run",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Run",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FilterProcessor::Run",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FilterProcessor::Run",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Run",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Run(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Run__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Run",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Run",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Run",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Run",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FilterProcessor::Run",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Run",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Run(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Run__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Run",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Run",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Run",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FilterProcessor::Run",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Run",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Run(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Run__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("FilterProcessor::Run",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::Run",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::Run",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_Run",1,SWIGTYPE_p_FilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Run(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterProcessor_Run(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FilterProcessor_Run__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FilterProcessor_Run__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FilterProcessor_Run__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FilterProcessor_Run__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FilterProcessor_Run'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FilterProcessor::Run(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Run(DspFloatType,DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Run(DspFloatType,DspFloatType)\n"
    "    FilterProcessor::Run(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_FilterProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("FilterProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FilterProcessor::ProcessBlock",1,"FilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FilterProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FilterProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("FilterProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("FilterProcessor_ProcessBlock",1,SWIGTYPE_p_FilterProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FilterProcessor(void *obj) {
FilterProcessor *arg1 = (FilterProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_FilterProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FilterProcessor_methods[]= {
    { "getType", _wrap_FilterProcessor_getType},
    { "Tick", _wrap_FilterProcessor_Tick},
    { "Run", _wrap_FilterProcessor_Run},
    { "ProcessBlock", _wrap_FilterProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_FilterProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FilterProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FilterProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FilterProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FilterProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FilterProcessor_Sf_SwigStatic = {
    "FilterProcessor",
    swig_FilterProcessor_Sf_SwigStatic_methods,
    swig_FilterProcessor_Sf_SwigStatic_attributes,
    swig_FilterProcessor_Sf_SwigStatic_constants,
    swig_FilterProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FilterProcessor_bases[] = {0,0};
static const char *swig_FilterProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_FilterProcessor = { "FilterProcessor", "FilterProcessor", &SWIGTYPE_p_FilterProcessor,0, swig_delete_FilterProcessor, swig_FilterProcessor_methods, swig_FilterProcessor_attributes, &swig_FilterProcessor_Sf_SwigStatic, swig_FilterProcessor_meta, swig_FilterProcessor_bases, swig_FilterProcessor_base_names };

static int _wrap_AmplifierProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("AmplifierProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::Tick",1,"AmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AmplifierProcessor::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("AmplifierProcessor::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_Tick",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmplifierProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("AmplifierProcessor::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::Tick",1,"AmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AmplifierProcessor::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_Tick",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmplifierProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("AmplifierProcessor::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::Tick",1,"AmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AmplifierProcessor::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_Tick",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmplifierProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("AmplifierProcessor::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::Tick",1,"AmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AmplifierProcessor::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_Tick",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmplifierProcessor_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AmplifierProcessor_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AmplifierProcessor_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AmplifierProcessor_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AmplifierProcessor_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AmplifierProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    AmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    AmplifierProcessor::Tick(DspFloatType,DspFloatType)\n"
    "    AmplifierProcessor::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_AmplifierProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("AmplifierProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::getType",1,"AmplifierProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_getType",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  result = (ObjectType)((AmplifierProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmplifierProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("AmplifierProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AmplifierProcessor::ProcessBlock",1,"AmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AmplifierProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AmplifierProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("AmplifierProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("AmplifierProcessor_ProcessBlock",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AmplifierProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AmplifierProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AmplifierProcessor(void *obj) {
AmplifierProcessor *arg1 = (AmplifierProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_AmplifierProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AmplifierProcessor_methods[]= {
    { "Tick", _wrap_AmplifierProcessor_Tick},
    { "getType", _wrap_AmplifierProcessor_getType},
    { "ProcessBlock", _wrap_AmplifierProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_AmplifierProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AmplifierProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AmplifierProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AmplifierProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AmplifierProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AmplifierProcessor_Sf_SwigStatic = {
    "AmplifierProcessor",
    swig_AmplifierProcessor_Sf_SwigStatic_methods,
    swig_AmplifierProcessor_Sf_SwigStatic_attributes,
    swig_AmplifierProcessor_Sf_SwigStatic_constants,
    swig_AmplifierProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AmplifierProcessor_bases[] = {0,0};
static const char *swig_AmplifierProcessor_base_names[] = {"MonoProcessor *",0};
static swig_lua_class _wrap_class_AmplifierProcessor = { "AmplifierProcessor", "AmplifierProcessor", &SWIGTYPE_p_AmplifierProcessor,0, swig_delete_AmplifierProcessor, swig_AmplifierProcessor_methods, swig_AmplifierProcessor_attributes, &swig_AmplifierProcessor_Sf_SwigStatic, swig_AmplifierProcessor_meta, swig_AmplifierProcessor_bases, swig_AmplifierProcessor_base_names };

static int _wrap_StereoOscillatorProcessor_osc_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  OscillatorProcessor *arg2 = (OscillatorProcessor *) 0 ;
  
  SWIG_check_num_args("StereoOscillatorProcessor::osc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::osc",1,"StereoOscillatorProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::osc",2,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_osc_set",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OscillatorProcessor,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("StereoOscillatorProcessor_osc_set",2,SWIGTYPE_p_OscillatorProcessor);
  }
  
  if (arg1) (arg1)->osc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_osc_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  OscillatorProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoOscillatorProcessor::osc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::osc",1,"StereoOscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_osc_get",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  result = (OscillatorProcessor *) ((arg1)->osc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OscillatorProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoOscillatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  OscillatorProcessor *arg1 = (OscillatorProcessor *) 0 ;
  StereoOscillatorProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoOscillatorProcessor::StereoOscillatorProcessor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::StereoOscillatorProcessor",1,"OscillatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OscillatorProcessor,0))){
    SWIG_fail_ptr("new_StereoOscillatorProcessor",1,SWIGTYPE_p_OscillatorProcessor);
  }
  
  result = (StereoOscillatorProcessor *)new StereoOscillatorProcessor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoOscillatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoOscillatorProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::getType",1,"StereoOscillatorProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_getType",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  result = (ObjectType)((StereoOscillatorProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_setPan(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("StereoOscillatorProcessor::setPan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::setPan",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::setPan",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_setPan",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setPan(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoOscillatorProcessor::ProcessBlock",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::ProcessBlock",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoOscillatorProcessor::ProcessBlock",3,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_ProcessBlock",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoOscillatorProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoOscillatorProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoOscillatorProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoOscillatorProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",1,"StereoOscillatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoOscillatorProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoOscillatorProcessor,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",1,SWIGTYPE_p_StereoOscillatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoOscillatorProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoOscillatorProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoOscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoOscillatorProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoOscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoOscillatorProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoOscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoOscillatorProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoOscillatorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoOscillatorProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoOscillatorProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoOscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoOscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoOscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoOscillatorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static void swig_delete_StereoOscillatorProcessor(void *obj) {
StereoOscillatorProcessor *arg1 = (StereoOscillatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoOscillatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoOscillatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoOscillatorProcessor_attributes[] = {
    { "osc", _wrap_StereoOscillatorProcessor_osc_get, _wrap_StereoOscillatorProcessor_osc_set },
    {0,0,0}
};
static swig_lua_method swig_StereoOscillatorProcessor_methods[]= {
    { "getType", _wrap_StereoOscillatorProcessor_getType},
    { "setPan", _wrap_StereoOscillatorProcessor_setPan},
    { "ProcessBlock", _wrap_StereoOscillatorProcessor_ProcessBlock},
    { "Tick", _wrap_StereoOscillatorProcessor_Tick},
    {0,0}
};
static swig_lua_method swig_StereoOscillatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoOscillatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoOscillatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoOscillatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoOscillatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoOscillatorProcessor_Sf_SwigStatic = {
    "StereoOscillatorProcessor",
    swig_StereoOscillatorProcessor_Sf_SwigStatic_methods,
    swig_StereoOscillatorProcessor_Sf_SwigStatic_attributes,
    swig_StereoOscillatorProcessor_Sf_SwigStatic_constants,
    swig_StereoOscillatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoOscillatorProcessor_bases[] = {0,0};
static const char *swig_StereoOscillatorProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoOscillatorProcessor = { "StereoOscillatorProcessor", "StereoOscillatorProcessor", &SWIGTYPE_p_StereoOscillatorProcessor,_proxy__wrap_new_StereoOscillatorProcessor, swig_delete_StereoOscillatorProcessor, swig_StereoOscillatorProcessor_methods, swig_StereoOscillatorProcessor_attributes, &swig_StereoOscillatorProcessor_Sf_SwigStatic, swig_StereoOscillatorProcessor_meta, swig_StereoOscillatorProcessor_bases, swig_StereoOscillatorProcessor_base_names };

static int _wrap_StereoGeneratorProcessor_osc_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  GeneratorProcessor *arg2 = (GeneratorProcessor *) 0 ;
  
  SWIG_check_num_args("StereoGeneratorProcessor::osc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::osc",1,"StereoGeneratorProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::osc",2,"GeneratorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_osc_set",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeneratorProcessor,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("StereoGeneratorProcessor_osc_set",2,SWIGTYPE_p_GeneratorProcessor);
  }
  
  if (arg1) (arg1)->osc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_osc_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  GeneratorProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoGeneratorProcessor::osc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::osc",1,"StereoGeneratorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_osc_get",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  result = (GeneratorProcessor *) ((arg1)->osc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GeneratorProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoGeneratorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  GeneratorProcessor *arg1 = (GeneratorProcessor *) 0 ;
  StereoGeneratorProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoGeneratorProcessor::StereoGeneratorProcessor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::StereoGeneratorProcessor",1,"GeneratorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeneratorProcessor,0))){
    SWIG_fail_ptr("new_StereoGeneratorProcessor",1,SWIGTYPE_p_GeneratorProcessor);
  }
  
  result = (StereoGeneratorProcessor *)new StereoGeneratorProcessor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoGeneratorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoGeneratorProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::getType",1,"StereoGeneratorProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_getType",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  result = (ObjectType)((StereoGeneratorProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_setPan(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("StereoGeneratorProcessor::setPan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::setPan",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::setPan",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_setPan",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setPan(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoGeneratorProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoGeneratorProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoGeneratorProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoGeneratorProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoGeneratorProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoGeneratorProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoGeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoGeneratorProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoGeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoGeneratorProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoGeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoGeneratorProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoGeneratorProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoGeneratorProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoGeneratorProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoGeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoGeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoGeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoGeneratorProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoGeneratorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoGeneratorProcessor::ProcessBlock",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoGeneratorProcessor::ProcessBlock",1,"StereoGeneratorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoGeneratorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoGeneratorProcessor::ProcessBlock",3,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoGeneratorProcessor,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_ProcessBlock",1,SWIGTYPE_p_StereoGeneratorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoGeneratorProcessor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoGeneratorProcessor(void *obj) {
StereoGeneratorProcessor *arg1 = (StereoGeneratorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoGeneratorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoGeneratorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoGeneratorProcessor_attributes[] = {
    { "osc", _wrap_StereoGeneratorProcessor_osc_get, _wrap_StereoGeneratorProcessor_osc_set },
    {0,0,0}
};
static swig_lua_method swig_StereoGeneratorProcessor_methods[]= {
    { "getType", _wrap_StereoGeneratorProcessor_getType},
    { "setPan", _wrap_StereoGeneratorProcessor_setPan},
    { "Tick", _wrap_StereoGeneratorProcessor_Tick},
    { "ProcessBlock", _wrap_StereoGeneratorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_StereoGeneratorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoGeneratorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoGeneratorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoGeneratorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoGeneratorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoGeneratorProcessor_Sf_SwigStatic = {
    "StereoGeneratorProcessor",
    swig_StereoGeneratorProcessor_Sf_SwigStatic_methods,
    swig_StereoGeneratorProcessor_Sf_SwigStatic_attributes,
    swig_StereoGeneratorProcessor_Sf_SwigStatic_constants,
    swig_StereoGeneratorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoGeneratorProcessor_bases[] = {0,0};
static const char *swig_StereoGeneratorProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoGeneratorProcessor = { "StereoGeneratorProcessor", "StereoGeneratorProcessor", &SWIGTYPE_p_StereoGeneratorProcessor,_proxy__wrap_new_StereoGeneratorProcessor, swig_delete_StereoGeneratorProcessor, swig_StereoGeneratorProcessor_methods, swig_StereoGeneratorProcessor_attributes, &swig_StereoGeneratorProcessor_Sf_SwigStatic, swig_StereoGeneratorProcessor_meta, swig_StereoGeneratorProcessor_bases, swig_StereoGeneratorProcessor_base_names };

static int _wrap_StereoFunctionProcessor_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  FunctionProcessor **arg2 ;
  
  SWIG_check_num_args("StereoFunctionProcessor::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::filter",1,"StereoFunctionProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoFunctionProcessor::filter",2,"FunctionProcessor *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_filter_set",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_FunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_filter_set",2,SWIGTYPE_p_p_FunctionProcessor);
  }
  
  {
    size_t ii;
    FunctionProcessor * *b = (FunctionProcessor * *) arg1->filter;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((FunctionProcessor * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  FunctionProcessor **result = 0 ;
  
  SWIG_check_num_args("StereoFunctionProcessor::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::filter",1,"StereoFunctionProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_filter_get",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  result = (FunctionProcessor **)(FunctionProcessor **) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_FunctionProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoFunctionProcessor(lua_State* L) {
  int SWIG_arg = 0;
  FunctionProcessor *arg1 = (FunctionProcessor *) 0 ;
  FunctionProcessor *arg2 = (FunctionProcessor *) 0 ;
  StereoFunctionProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoFunctionProcessor::StereoFunctionProcessor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::StereoFunctionProcessor",1,"FunctionProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoFunctionProcessor::StereoFunctionProcessor",2,"FunctionProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("new_StereoFunctionProcessor",1,SWIGTYPE_p_FunctionProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FunctionProcessor,0))){
    SWIG_fail_ptr("new_StereoFunctionProcessor",2,SWIGTYPE_p_FunctionProcessor);
  }
  
  result = (StereoFunctionProcessor *)new StereoFunctionProcessor(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoFunctionProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoFunctionProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::getType",1,"StereoFunctionProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_getType",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  result = (ObjectType)((StereoFunctionProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoFunctionProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::ProcessBlock",1,"StereoFunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFunctionProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoFunctionProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoFunctionProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_ProcessBlock",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFunctionProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::Tick",1,"StereoFunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFunctionProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFunctionProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFunctionProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoFunctionProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoFunctionProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFunctionProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::Tick",1,"StereoFunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFunctionProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFunctionProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFunctionProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoFunctionProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFunctionProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::Tick",1,"StereoFunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFunctionProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFunctionProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFunctionProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFunctionProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFunctionProcessor::Tick",1,"StereoFunctionProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFunctionProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFunctionProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFunctionProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFunctionProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFunctionProcessor,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",1,SWIGTYPE_p_StereoFunctionProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFunctionProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFunctionProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoFunctionProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoFunctionProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoFunctionProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFunctionProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoFunctionProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoFunctionProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoFunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoFunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoFunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoFunctionProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static void swig_delete_StereoFunctionProcessor(void *obj) {
StereoFunctionProcessor *arg1 = (StereoFunctionProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoFunctionProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoFunctionProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoFunctionProcessor_attributes[] = {
    { "filter", _wrap_StereoFunctionProcessor_filter_get, _wrap_StereoFunctionProcessor_filter_set },
    {0,0,0}
};
static swig_lua_method swig_StereoFunctionProcessor_methods[]= {
    { "getType", _wrap_StereoFunctionProcessor_getType},
    { "ProcessBlock", _wrap_StereoFunctionProcessor_ProcessBlock},
    { "Tick", _wrap_StereoFunctionProcessor_Tick},
    {0,0}
};
static swig_lua_method swig_StereoFunctionProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoFunctionProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoFunctionProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoFunctionProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoFunctionProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoFunctionProcessor_Sf_SwigStatic = {
    "StereoFunctionProcessor",
    swig_StereoFunctionProcessor_Sf_SwigStatic_methods,
    swig_StereoFunctionProcessor_Sf_SwigStatic_attributes,
    swig_StereoFunctionProcessor_Sf_SwigStatic_constants,
    swig_StereoFunctionProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoFunctionProcessor_bases[] = {0,0};
static const char *swig_StereoFunctionProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoFunctionProcessor = { "StereoFunctionProcessor", "StereoFunctionProcessor", &SWIGTYPE_p_StereoFunctionProcessor,_proxy__wrap_new_StereoFunctionProcessor, swig_delete_StereoFunctionProcessor, swig_StereoFunctionProcessor_methods, swig_StereoFunctionProcessor_attributes, &swig_StereoFunctionProcessor_Sf_SwigStatic, swig_StereoFunctionProcessor_meta, swig_StereoFunctionProcessor_bases, swig_StereoFunctionProcessor_base_names };

static int _wrap_StereoFilterProcessor_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  FilterProcessor **arg2 ;
  
  SWIG_check_num_args("StereoFilterProcessor::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::filter",1,"StereoFilterProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoFilterProcessor::filter",2,"FilterProcessor *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_filter_set",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_FilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_filter_set",2,SWIGTYPE_p_p_FilterProcessor);
  }
  
  {
    size_t ii;
    FilterProcessor * *b = (FilterProcessor * *) arg1->filter;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((FilterProcessor * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  FilterProcessor **result = 0 ;
  
  SWIG_check_num_args("StereoFilterProcessor::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::filter",1,"StereoFilterProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_filter_get",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  result = (FilterProcessor **)(FilterProcessor **) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_FilterProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoFilterProcessor(lua_State* L) {
  int SWIG_arg = 0;
  FilterProcessor *arg1 = (FilterProcessor *) 0 ;
  FilterProcessor *arg2 = (FilterProcessor *) 0 ;
  StereoFilterProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoFilterProcessor::StereoFilterProcessor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::StereoFilterProcessor",1,"FilterProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoFilterProcessor::StereoFilterProcessor",2,"FilterProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("new_StereoFilterProcessor",1,SWIGTYPE_p_FilterProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FilterProcessor,0))){
    SWIG_fail_ptr("new_StereoFilterProcessor",2,SWIGTYPE_p_FilterProcessor);
  }
  
  result = (StereoFilterProcessor *)new StereoFilterProcessor(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoFilterProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoFilterProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::getType",1,"StereoFilterProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_getType",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  result = (ObjectType)((StereoFilterProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoFilterProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::ProcessBlock",1,"StereoFilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFilterProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoFilterProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoFilterProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_ProcessBlock",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFilterProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::Tick",1,"StereoFilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFilterProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFilterProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFilterProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoFilterProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoFilterProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFilterProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::Tick",1,"StereoFilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFilterProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFilterProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFilterProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoFilterProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFilterProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::Tick",1,"StereoFilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFilterProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFilterProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoFilterProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoFilterProcessor *arg1 = (StereoFilterProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoFilterProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoFilterProcessor::Tick",1,"StereoFilterProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoFilterProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoFilterProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoFilterProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoFilterProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoFilterProcessor,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",1,SWIGTYPE_p_StereoFilterProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoFilterProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoFilterProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoFilterProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoFilterProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoFilterProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoFilterProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoFilterProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoFilterProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoFilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoFilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoFilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoFilterProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static void swig_delete_StereoFilterProcessor(void *obj) {
StereoFilterProcessor *arg1 = (StereoFilterProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoFilterProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoFilterProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoFilterProcessor_attributes[] = {
    { "filter", _wrap_StereoFilterProcessor_filter_get, _wrap_StereoFilterProcessor_filter_set },
    {0,0,0}
};
static swig_lua_method swig_StereoFilterProcessor_methods[]= {
    { "getType", _wrap_StereoFilterProcessor_getType},
    { "ProcessBlock", _wrap_StereoFilterProcessor_ProcessBlock},
    { "Tick", _wrap_StereoFilterProcessor_Tick},
    {0,0}
};
static swig_lua_method swig_StereoFilterProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoFilterProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoFilterProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoFilterProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoFilterProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoFilterProcessor_Sf_SwigStatic = {
    "StereoFilterProcessor",
    swig_StereoFilterProcessor_Sf_SwigStatic_methods,
    swig_StereoFilterProcessor_Sf_SwigStatic_attributes,
    swig_StereoFilterProcessor_Sf_SwigStatic_constants,
    swig_StereoFilterProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoFilterProcessor_bases[] = {0,0};
static const char *swig_StereoFilterProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoFilterProcessor = { "StereoFilterProcessor", "StereoFilterProcessor", &SWIGTYPE_p_StereoFilterProcessor,_proxy__wrap_new_StereoFilterProcessor, swig_delete_StereoFilterProcessor, swig_StereoFilterProcessor_methods, swig_StereoFilterProcessor_attributes, &swig_StereoFilterProcessor_Sf_SwigStatic, swig_StereoFilterProcessor_meta, swig_StereoFilterProcessor_bases, swig_StereoFilterProcessor_base_names };

static int _wrap_StereoAmplifierProcessor_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  AmplifierProcessor **arg2 ;
  
  SWIG_check_num_args("StereoAmplifierProcessor::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::amp",1,"StereoAmplifierProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::amp",2,"AmplifierProcessor *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_amp_set",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_amp_set",2,SWIGTYPE_p_p_AmplifierProcessor);
  }
  
  {
    size_t ii;
    AmplifierProcessor * *b = (AmplifierProcessor * *) arg1->amp;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((AmplifierProcessor * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  AmplifierProcessor **result = 0 ;
  
  SWIG_check_num_args("StereoAmplifierProcessor::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::amp",1,"StereoAmplifierProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_amp_get",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  result = (AmplifierProcessor **)(AmplifierProcessor **) ((arg1)->amp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_AmplifierProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoAmplifierProcessor(lua_State* L) {
  int SWIG_arg = 0;
  AmplifierProcessor *arg1 = (AmplifierProcessor *) 0 ;
  AmplifierProcessor *arg2 = (AmplifierProcessor *) 0 ;
  StereoAmplifierProcessor *result = 0 ;
  
  SWIG_check_num_args("StereoAmplifierProcessor::StereoAmplifierProcessor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::StereoAmplifierProcessor",1,"AmplifierProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::StereoAmplifierProcessor",2,"AmplifierProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("new_StereoAmplifierProcessor",1,SWIGTYPE_p_AmplifierProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AmplifierProcessor,0))){
    SWIG_fail_ptr("new_StereoAmplifierProcessor",2,SWIGTYPE_p_AmplifierProcessor);
  }
  
  result = (StereoAmplifierProcessor *)new StereoAmplifierProcessor(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_StereoAmplifierProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("StereoAmplifierProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::getType",1,"StereoAmplifierProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_getType",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  result = (ObjectType)((StereoAmplifierProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType **arg3 = (DspFloatType **) 0 ;
  DspFloatType **arg4 = (DspFloatType **) 0 ;
  
  SWIG_check_num_args("StereoAmplifierProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::ProcessBlock",1,"StereoAmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoAmplifierProcessor::ProcessBlock",3,"DspFloatType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("StereoAmplifierProcessor::ProcessBlock",4,"DspFloatType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_ProcessBlock",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType arg8 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoAmplifierProcessor::Tick",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",1,"StereoAmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",7,"DspFloatType");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",8,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  arg8 = (DspFloatType)lua_tonumber(L, 8);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType arg7 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoAmplifierProcessor::Tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",1,"StereoAmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",6,"DspFloatType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",7,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  arg7 = (DspFloatType)lua_tonumber(L, 7);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoAmplifierProcessor::Tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",1,"StereoAmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",5,"DspFloatType &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType *arg4 = 0 ;
  DspFloatType *arg5 = 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("StereoAmplifierProcessor::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",1,"StereoAmplifierProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",3,"DspFloatType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",4,"DspFloatType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("StereoAmplifierProcessor::Tick",5,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StereoAmplifierProcessor,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",1,SWIGTYPE_p_StereoAmplifierProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoAmplifierProcessor_Tick",5,SWIGTYPE_p_float);
  }
  
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoAmplifierProcessor_Tick(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoAmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_StereoAmplifierProcessor_Tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoAmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_StereoAmplifierProcessor_Tick__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoAmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_StereoAmplifierProcessor_Tick__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StereoAmplifierProcessor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_StereoAmplifierProcessor_Tick__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StereoAmplifierProcessor_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StereoAmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType,DspFloatType)\n"
    "    StereoAmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType,DspFloatType)\n"
    "    StereoAmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &,DspFloatType)\n"
    "    StereoAmplifierProcessor::Tick(DspFloatType,DspFloatType,DspFloatType &,DspFloatType &)\n");
  lua_error(L);return 0;
}


static void swig_delete_StereoAmplifierProcessor(void *obj) {
StereoAmplifierProcessor *arg1 = (StereoAmplifierProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoAmplifierProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoAmplifierProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoAmplifierProcessor_attributes[] = {
    { "amp", _wrap_StereoAmplifierProcessor_amp_get, _wrap_StereoAmplifierProcessor_amp_set },
    {0,0,0}
};
static swig_lua_method swig_StereoAmplifierProcessor_methods[]= {
    { "getType", _wrap_StereoAmplifierProcessor_getType},
    { "ProcessBlock", _wrap_StereoAmplifierProcessor_ProcessBlock},
    { "Tick", _wrap_StereoAmplifierProcessor_Tick},
    {0,0}
};
static swig_lua_method swig_StereoAmplifierProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoAmplifierProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoAmplifierProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoAmplifierProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoAmplifierProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoAmplifierProcessor_Sf_SwigStatic = {
    "StereoAmplifierProcessor",
    swig_StereoAmplifierProcessor_Sf_SwigStatic_methods,
    swig_StereoAmplifierProcessor_Sf_SwigStatic_attributes,
    swig_StereoAmplifierProcessor_Sf_SwigStatic_constants,
    swig_StereoAmplifierProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoAmplifierProcessor_bases[] = {0,0};
static const char *swig_StereoAmplifierProcessor_base_names[] = {"StereoProcessor *",0};
static swig_lua_class _wrap_class_StereoAmplifierProcessor = { "StereoAmplifierProcessor", "StereoAmplifierProcessor", &SWIGTYPE_p_StereoAmplifierProcessor,_proxy__wrap_new_StereoAmplifierProcessor, swig_delete_StereoAmplifierProcessor, swig_StereoAmplifierProcessor_methods, swig_StereoAmplifierProcessor_attributes, &swig_StereoAmplifierProcessor_Sf_SwigStatic, swig_StereoAmplifierProcessor_meta, swig_StereoAmplifierProcessor_bases, swig_StereoAmplifierProcessor_base_names };

static int _wrap_SpectrumProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  SpectrumProcessor *arg1 = (SpectrumProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("SpectrumProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SpectrumProcessor::getType",1,"SpectrumProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpectrumProcessor,0))){
    SWIG_fail_ptr("SpectrumProcessor_getType",1,SWIGTYPE_p_SpectrumProcessor);
  }
  
  result = (ObjectType)((SpectrumProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SpectrumProcessor(lua_State* L) {
  int SWIG_arg = 0;
  SpectrumProcessor *result = 0 ;
  
  SWIG_check_num_args("SpectrumProcessor::SpectrumProcessor",0,0)
  result = (SpectrumProcessor *)new SpectrumProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SpectrumProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SpectrumProcessor(void *obj) {
SpectrumProcessor *arg1 = (SpectrumProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_SpectrumProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SpectrumProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SpectrumProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SpectrumProcessor_methods[]= {
    { "getType", _wrap_SpectrumProcessor_getType},
    {0,0}
};
static swig_lua_method swig_SpectrumProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SpectrumProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SpectrumProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SpectrumProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SpectrumProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SpectrumProcessor_Sf_SwigStatic = {
    "SpectrumProcessor",
    swig_SpectrumProcessor_Sf_SwigStatic_methods,
    swig_SpectrumProcessor_Sf_SwigStatic_attributes,
    swig_SpectrumProcessor_Sf_SwigStatic_constants,
    swig_SpectrumProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SpectrumProcessor_bases[] = {0,0};
static const char *swig_SpectrumProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_SpectrumProcessor = { "SpectrumProcessor", "SpectrumProcessor", &SWIGTYPE_p_SpectrumProcessor,_proxy__wrap_new_SpectrumProcessor, swig_delete_SpectrumProcessor, swig_SpectrumProcessor_methods, swig_SpectrumProcessor_attributes, &swig_SpectrumProcessor_Sf_SwigStatic, swig_SpectrumProcessor_meta, swig_SpectrumProcessor_bases, swig_SpectrumProcessor_base_names };

static void swig_delete_SignalSourceProcessor(void *obj) {
SignalSourceProcessor *arg1 = (SignalSourceProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalSourceProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalSourceProcessor_methods[]= {
    {0,0}
};
static swig_lua_method swig_SignalSourceProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalSourceProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalSourceProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalSourceProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalSourceProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalSourceProcessor_Sf_SwigStatic = {
    "SignalSourceProcessor",
    swig_SignalSourceProcessor_Sf_SwigStatic_methods,
    swig_SignalSourceProcessor_Sf_SwigStatic_attributes,
    swig_SignalSourceProcessor_Sf_SwigStatic_constants,
    swig_SignalSourceProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalSourceProcessor_bases[] = {0,0};
static const char *swig_SignalSourceProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_SignalSourceProcessor = { "SignalSourceProcessor", "SignalSourceProcessor", &SWIGTYPE_p_SignalSourceProcessor,0, swig_delete_SignalSourceProcessor, swig_SignalSourceProcessor_methods, swig_SignalSourceProcessor_attributes, &swig_SignalSourceProcessor_Sf_SwigStatic, swig_SignalSourceProcessor_meta, swig_SignalSourceProcessor_bases, swig_SignalSourceProcessor_base_names };

static void swig_delete_SignalSinkProcessor(void *obj) {
SignalSinkProcessor *arg1 = (SignalSinkProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_SignalSinkProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SignalSinkProcessor_methods[]= {
    {0,0}
};
static swig_lua_method swig_SignalSinkProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SignalSinkProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SignalSinkProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SignalSinkProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SignalSinkProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SignalSinkProcessor_Sf_SwigStatic = {
    "SignalSinkProcessor",
    swig_SignalSinkProcessor_Sf_SwigStatic_methods,
    swig_SignalSinkProcessor_Sf_SwigStatic_attributes,
    swig_SignalSinkProcessor_Sf_SwigStatic_constants,
    swig_SignalSinkProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SignalSinkProcessor_bases[] = {0,0};
static const char *swig_SignalSinkProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_SignalSinkProcessor = { "SignalSinkProcessor", "SignalSinkProcessor", &SWIGTYPE_p_SignalSinkProcessor,0, swig_delete_SignalSinkProcessor, swig_SignalSinkProcessor_methods, swig_SignalSinkProcessor_attributes, &swig_SignalSinkProcessor_Sf_SwigStatic, swig_SignalSinkProcessor_meta, swig_SignalSinkProcessor_bases, swig_SignalSinkProcessor_base_names };

static int _wrap_MonoOversampleProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoOversampleProcessor *arg1 = (MonoOversampleProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoOversampleProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoOversampleProcessor::getType",1,"MonoOversampleProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoOversampleProcessor,0))){
    SWIG_fail_ptr("MonoOversampleProcessor_getType",1,SWIGTYPE_p_MonoOversampleProcessor);
  }
  
  result = (ObjectType)((MonoOversampleProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoOversampleProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoOversampleProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoOversampleProcessor::MonoOversampleProcessor",0,0)
  result = (MonoOversampleProcessor *)new MonoOversampleProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoOversampleProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoOversampleProcessor(void *obj) {
MonoOversampleProcessor *arg1 = (MonoOversampleProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoOversampleProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoOversampleProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoOversampleProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoOversampleProcessor_methods[]= {
    { "getType", _wrap_MonoOversampleProcessor_getType},
    {0,0}
};
static swig_lua_method swig_MonoOversampleProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoOversampleProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoOversampleProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoOversampleProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoOversampleProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoOversampleProcessor_Sf_SwigStatic = {
    "MonoOversampleProcessor",
    swig_MonoOversampleProcessor_Sf_SwigStatic_methods,
    swig_MonoOversampleProcessor_Sf_SwigStatic_attributes,
    swig_MonoOversampleProcessor_Sf_SwigStatic_constants,
    swig_MonoOversampleProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoOversampleProcessor_bases[] = {0,0};
static const char *swig_MonoOversampleProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MonoOversampleProcessor = { "MonoOversampleProcessor", "MonoOversampleProcessor", &SWIGTYPE_p_MonoOversampleProcessor,_proxy__wrap_new_MonoOversampleProcessor, swig_delete_MonoOversampleProcessor, swig_MonoOversampleProcessor_methods, swig_MonoOversampleProcessor_attributes, &swig_MonoOversampleProcessor_Sf_SwigStatic, swig_MonoOversampleProcessor_meta, swig_MonoOversampleProcessor_bases, swig_MonoOversampleProcessor_base_names };

static int _wrap_MonoUpsampleProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoUpsampleProcessor *arg1 = (MonoUpsampleProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoUpsampleProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoUpsampleProcessor::getType",1,"MonoUpsampleProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoUpsampleProcessor,0))){
    SWIG_fail_ptr("MonoUpsampleProcessor_getType",1,SWIGTYPE_p_MonoUpsampleProcessor);
  }
  
  result = (ObjectType)((MonoUpsampleProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoUpsampleProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoUpsampleProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoUpsampleProcessor::MonoUpsampleProcessor",0,0)
  result = (MonoUpsampleProcessor *)new MonoUpsampleProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoUpsampleProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoUpsampleProcessor(void *obj) {
MonoUpsampleProcessor *arg1 = (MonoUpsampleProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoUpsampleProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoUpsampleProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoUpsampleProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoUpsampleProcessor_methods[]= {
    { "getType", _wrap_MonoUpsampleProcessor_getType},
    {0,0}
};
static swig_lua_method swig_MonoUpsampleProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoUpsampleProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoUpsampleProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoUpsampleProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoUpsampleProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoUpsampleProcessor_Sf_SwigStatic = {
    "MonoUpsampleProcessor",
    swig_MonoUpsampleProcessor_Sf_SwigStatic_methods,
    swig_MonoUpsampleProcessor_Sf_SwigStatic_attributes,
    swig_MonoUpsampleProcessor_Sf_SwigStatic_constants,
    swig_MonoUpsampleProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoUpsampleProcessor_bases[] = {0,0};
static const char *swig_MonoUpsampleProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MonoUpsampleProcessor = { "MonoUpsampleProcessor", "MonoUpsampleProcessor", &SWIGTYPE_p_MonoUpsampleProcessor,_proxy__wrap_new_MonoUpsampleProcessor, swig_delete_MonoUpsampleProcessor, swig_MonoUpsampleProcessor_methods, swig_MonoUpsampleProcessor_attributes, &swig_MonoUpsampleProcessor_Sf_SwigStatic, swig_MonoUpsampleProcessor_meta, swig_MonoUpsampleProcessor_bases, swig_MonoUpsampleProcessor_base_names };

static int _wrap_MonoDownsampleProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoDownsampleProcessor *arg1 = (MonoDownsampleProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoDownsampleProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoDownsampleProcessor::getType",1,"MonoDownsampleProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoDownsampleProcessor,0))){
    SWIG_fail_ptr("MonoDownsampleProcessor_getType",1,SWIGTYPE_p_MonoDownsampleProcessor);
  }
  
  result = (ObjectType)((MonoDownsampleProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoDownsampleProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoDownsampleProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoDownsampleProcessor::MonoDownsampleProcessor",0,0)
  result = (MonoDownsampleProcessor *)new MonoDownsampleProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoDownsampleProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoDownsampleProcessor(void *obj) {
MonoDownsampleProcessor *arg1 = (MonoDownsampleProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoDownsampleProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoDownsampleProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoDownsampleProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoDownsampleProcessor_methods[]= {
    { "getType", _wrap_MonoDownsampleProcessor_getType},
    {0,0}
};
static swig_lua_method swig_MonoDownsampleProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoDownsampleProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoDownsampleProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoDownsampleProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoDownsampleProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoDownsampleProcessor_Sf_SwigStatic = {
    "MonoDownsampleProcessor",
    swig_MonoDownsampleProcessor_Sf_SwigStatic_methods,
    swig_MonoDownsampleProcessor_Sf_SwigStatic_attributes,
    swig_MonoDownsampleProcessor_Sf_SwigStatic_constants,
    swig_MonoDownsampleProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoDownsampleProcessor_bases[] = {0,0};
static const char *swig_MonoDownsampleProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MonoDownsampleProcessor = { "MonoDownsampleProcessor", "MonoDownsampleProcessor", &SWIGTYPE_p_MonoDownsampleProcessor,_proxy__wrap_new_MonoDownsampleProcessor, swig_delete_MonoDownsampleProcessor, swig_MonoDownsampleProcessor_methods, swig_MonoDownsampleProcessor_attributes, &swig_MonoDownsampleProcessor_Sf_SwigStatic, swig_MonoDownsampleProcessor_meta, swig_MonoDownsampleProcessor_bases, swig_MonoDownsampleProcessor_base_names };

static void swig_delete_OperatorProcessor(void *obj) {
OperatorProcessor *arg1 = (OperatorProcessor *) obj;
delete arg1;
}
static swig_lua_attribute swig_OperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OperatorProcessor_methods[]= {
    {0,0}
};
static swig_lua_method swig_OperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OperatorProcessor_Sf_SwigStatic = {
    "OperatorProcessor",
    swig_OperatorProcessor_Sf_SwigStatic_methods,
    swig_OperatorProcessor_Sf_SwigStatic_attributes,
    swig_OperatorProcessor_Sf_SwigStatic_constants,
    swig_OperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OperatorProcessor_bases[] = {0,0};
static const char *swig_OperatorProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_OperatorProcessor = { "OperatorProcessor", "OperatorProcessor", &SWIGTYPE_p_OperatorProcessor,0, swig_delete_OperatorProcessor, swig_OperatorProcessor_methods, swig_OperatorProcessor_attributes, &swig_OperatorProcessor_Sf_SwigStatic, swig_OperatorProcessor_meta, swig_OperatorProcessor_bases, swig_OperatorProcessor_base_names };

static int _wrap_MonoOperatorProcessor_list_set(lua_State* L) {
  int SWIG_arg = 0;
  MonoOperatorProcessor *arg1 = (MonoOperatorProcessor *) 0 ;
  MonoProcessorList *arg2 = (MonoProcessorList *) 0 ;
  
  SWIG_check_num_args("MonoOperatorProcessor::list",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoOperatorProcessor::list",1,"MonoOperatorProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MonoOperatorProcessor::list",2,"MonoProcessorList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoOperatorProcessor,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_list_set",1,SWIGTYPE_p_MonoOperatorProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_MonoProcessor_p_t,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_list_set",2,SWIGTYPE_p_std__listT_MonoProcessor_p_t);
  }
  
  if (arg1) (arg1)->list = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoOperatorProcessor_list_get(lua_State* L) {
  int SWIG_arg = 0;
  MonoOperatorProcessor *arg1 = (MonoOperatorProcessor *) 0 ;
  MonoProcessorList *result = 0 ;
  
  SWIG_check_num_args("MonoOperatorProcessor::list",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoOperatorProcessor::list",1,"MonoOperatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoOperatorProcessor,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_list_get",1,SWIGTYPE_p_MonoOperatorProcessor);
  }
  
  result = (MonoProcessorList *)& ((arg1)->list);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_MonoProcessor_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoOperatorProcessor::MonoOperatorProcessor",0,0)
  result = (MonoOperatorProcessor *)new MonoOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoOperatorProcessor_getType(lua_State* L) {
  int SWIG_arg = 0;
  MonoOperatorProcessor *arg1 = (MonoOperatorProcessor *) 0 ;
  ObjectType result;
  
  SWIG_check_num_args("MonoOperatorProcessor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoOperatorProcessor::getType",1,"MonoOperatorProcessor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoOperatorProcessor,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_getType",1,SWIGTYPE_p_MonoOperatorProcessor);
  }
  
  result = (ObjectType)((MonoOperatorProcessor const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoOperatorProcessor_GetSamples(lua_State* L) {
  int SWIG_arg = 0;
  MonoOperatorProcessor *arg1 = (MonoOperatorProcessor *) 0 ;
  MonoProcessor *arg2 = (MonoProcessor *) 0 ;
  size_t arg3 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoOperatorProcessor::GetSamples",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoOperatorProcessor::GetSamples",1,"MonoOperatorProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MonoOperatorProcessor::GetSamples",2,"MonoProcessor *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MonoOperatorProcessor::GetSamples",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoOperatorProcessor::GetSamples",4,"DspFloatType *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("MonoOperatorProcessor::GetSamples",5,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoOperatorProcessor,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_GetSamples",1,SWIGTYPE_p_MonoOperatorProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MonoProcessor,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_GetSamples",2,SWIGTYPE_p_MonoProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_GetSamples",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoOperatorProcessor_GetSamples",5,SWIGTYPE_p_float);
  }
  
  (arg1)->GetSamples(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoOperatorProcessor(void *obj) {
MonoOperatorProcessor *arg1 = (MonoOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoOperatorProcessor_attributes[] = {
    { "list", _wrap_MonoOperatorProcessor_list_get, _wrap_MonoOperatorProcessor_list_set },
    {0,0,0}
};
static swig_lua_method swig_MonoOperatorProcessor_methods[]= {
    { "getType", _wrap_MonoOperatorProcessor_getType},
    { "GetSamples", _wrap_MonoOperatorProcessor_GetSamples},
    {0,0}
};
static swig_lua_method swig_MonoOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoOperatorProcessor_Sf_SwigStatic = {
    "MonoOperatorProcessor",
    swig_MonoOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoOperatorProcessor_base_names[] = {"SoundProcessor *",0};
static swig_lua_class _wrap_class_MonoOperatorProcessor = { "MonoOperatorProcessor", "MonoOperatorProcessor", &SWIGTYPE_p_MonoOperatorProcessor,_proxy__wrap_new_MonoOperatorProcessor, swig_delete_MonoOperatorProcessor, swig_MonoOperatorProcessor_methods, swig_MonoOperatorProcessor_attributes, &swig_MonoOperatorProcessor_Sf_SwigStatic, swig_MonoOperatorProcessor_meta, swig_MonoOperatorProcessor_bases, swig_MonoOperatorProcessor_base_names };

static int _wrap_new_MonoCascadeOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoCascadeOperatorProcessor::MonoCascadeOperatorProcessor",0,0)
  result = (MonoCascadeOperatorProcessor *)new MonoCascadeOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoCascadeOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoCascadeOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoCascadeOperatorProcessor *arg1 = (MonoCascadeOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoCascadeOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoCascadeOperatorProcessor::ProcessBlock",1,"MonoCascadeOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoCascadeOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoCascadeOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoCascadeOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoCascadeOperatorProcessor,0))){
    SWIG_fail_ptr("MonoCascadeOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoCascadeOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoCascadeOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoCascadeOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoCascadeOperatorProcessor(void *obj) {
MonoCascadeOperatorProcessor *arg1 = (MonoCascadeOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoCascadeOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoCascadeOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoCascadeOperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoCascadeOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoCascadeOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoCascadeOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoCascadeOperatorProcessor_Sf_SwigStatic = {
    "MonoCascadeOperatorProcessor",
    swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoCascadeOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoCascadeOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoCascadeOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoCascadeOperatorProcessor = { "MonoCascadeOperatorProcessor", "MonoCascadeOperatorProcessor", &SWIGTYPE_p_MonoCascadeOperatorProcessor,_proxy__wrap_new_MonoCascadeOperatorProcessor, swig_delete_MonoCascadeOperatorProcessor, swig_MonoCascadeOperatorProcessor_methods, swig_MonoCascadeOperatorProcessor_attributes, &swig_MonoCascadeOperatorProcessor_Sf_SwigStatic, swig_MonoCascadeOperatorProcessor_meta, swig_MonoCascadeOperatorProcessor_bases, swig_MonoCascadeOperatorProcessor_base_names };

static int _wrap_new_MonoMultiplierOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoMultiplierOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoMultiplierOperatorProcessor::MonoMultiplierOperatorProcessor",0,0)
  result = (MonoMultiplierOperatorProcessor *)new MonoMultiplierOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoMultiplierOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoMultiplierOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoMultiplierOperatorProcessor *arg1 = (MonoMultiplierOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoMultiplierOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoMultiplierOperatorProcessor::ProcessBlock",1,"MonoMultiplierOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoMultiplierOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoMultiplierOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoMultiplierOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoMultiplierOperatorProcessor,0))){
    SWIG_fail_ptr("MonoMultiplierOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoMultiplierOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoMultiplierOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoMultiplierOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoMultiplierOperatorProcessor(void *obj) {
MonoMultiplierOperatorProcessor *arg1 = (MonoMultiplierOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoMultiplierOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoMultiplierOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoMultiplierOperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoMultiplierOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoMultiplierOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoMultiplierOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic = {
    "MonoMultiplierOperatorProcessor",
    swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoMultiplierOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoMultiplierOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoMultiplierOperatorProcessor = { "MonoMultiplierOperatorProcessor", "MonoMultiplierOperatorProcessor", &SWIGTYPE_p_MonoMultiplierOperatorProcessor,_proxy__wrap_new_MonoMultiplierOperatorProcessor, swig_delete_MonoMultiplierOperatorProcessor, swig_MonoMultiplierOperatorProcessor_methods, swig_MonoMultiplierOperatorProcessor_attributes, &swig_MonoMultiplierOperatorProcessor_Sf_SwigStatic, swig_MonoMultiplierOperatorProcessor_meta, swig_MonoMultiplierOperatorProcessor_bases, swig_MonoMultiplierOperatorProcessor_base_names };

static int _wrap_new_MonoAdderOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoAdderOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoAdderOperatorProcessor::MonoAdderOperatorProcessor",0,0)
  result = (MonoAdderOperatorProcessor *)new MonoAdderOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoAdderOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoAdderOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoAdderOperatorProcessor *arg1 = (MonoAdderOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoAdderOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoAdderOperatorProcessor::ProcessBlock",1,"MonoAdderOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoAdderOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoAdderOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoAdderOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoAdderOperatorProcessor,0))){
    SWIG_fail_ptr("MonoAdderOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoAdderOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoAdderOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoAdderOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoAdderOperatorProcessor(void *obj) {
MonoAdderOperatorProcessor *arg1 = (MonoAdderOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoAdderOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoAdderOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoAdderOperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoAdderOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoAdderOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoAdderOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoAdderOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoAdderOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoAdderOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoAdderOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoAdderOperatorProcessor_Sf_SwigStatic = {
    "MonoAdderOperatorProcessor",
    swig_MonoAdderOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoAdderOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoAdderOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoAdderOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoAdderOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoAdderOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoAdderOperatorProcessor = { "MonoAdderOperatorProcessor", "MonoAdderOperatorProcessor", &SWIGTYPE_p_MonoAdderOperatorProcessor,_proxy__wrap_new_MonoAdderOperatorProcessor, swig_delete_MonoAdderOperatorProcessor, swig_MonoAdderOperatorProcessor_methods, swig_MonoAdderOperatorProcessor_attributes, &swig_MonoAdderOperatorProcessor_Sf_SwigStatic, swig_MonoAdderOperatorProcessor_meta, swig_MonoAdderOperatorProcessor_bases, swig_MonoAdderOperatorProcessor_base_names };

static int _wrap_new_MonoSubtractorOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoSubtractorOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoSubtractorOperatorProcessor::MonoSubtractorOperatorProcessor",0,0)
  result = (MonoSubtractorOperatorProcessor *)new MonoSubtractorOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoSubtractorOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSubtractorOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoSubtractorOperatorProcessor *arg1 = (MonoSubtractorOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoSubtractorOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoSubtractorOperatorProcessor::ProcessBlock",1,"MonoSubtractorOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoSubtractorOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoSubtractorOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoSubtractorOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoSubtractorOperatorProcessor,0))){
    SWIG_fail_ptr("MonoSubtractorOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoSubtractorOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoSubtractorOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoSubtractorOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoSubtractorOperatorProcessor(void *obj) {
MonoSubtractorOperatorProcessor *arg1 = (MonoSubtractorOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoSubtractorOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoSubtractorOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoSubtractorOperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoSubtractorOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoSubtractorOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoSubtractorOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic = {
    "MonoSubtractorOperatorProcessor",
    swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoSubtractorOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoSubtractorOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoSubtractorOperatorProcessor = { "MonoSubtractorOperatorProcessor", "MonoSubtractorOperatorProcessor", &SWIGTYPE_p_MonoSubtractorOperatorProcessor,_proxy__wrap_new_MonoSubtractorOperatorProcessor, swig_delete_MonoSubtractorOperatorProcessor, swig_MonoSubtractorOperatorProcessor_methods, swig_MonoSubtractorOperatorProcessor_attributes, &swig_MonoSubtractorOperatorProcessor_Sf_SwigStatic, swig_MonoSubtractorOperatorProcessor_meta, swig_MonoSubtractorOperatorProcessor_bases, swig_MonoSubtractorOperatorProcessor_base_names };

static int _wrap_new_MonoModulatorOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoModulatorOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoModulatorOperatorProcessor::MonoModulatorOperatorProcessor",0,0)
  result = (MonoModulatorOperatorProcessor *)new MonoModulatorOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoModulatorOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoModulatorOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoModulatorOperatorProcessor *arg1 = (MonoModulatorOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoModulatorOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoModulatorOperatorProcessor::ProcessBlock",1,"MonoModulatorOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoModulatorOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoModulatorOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoModulatorOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoModulatorOperatorProcessor,0))){
    SWIG_fail_ptr("MonoModulatorOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoModulatorOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoModulatorOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoModulatorOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoModulatorOperatorProcessor(void *obj) {
MonoModulatorOperatorProcessor *arg1 = (MonoModulatorOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoModulatorOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoModulatorOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoModulatorOperatorProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoModulatorOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoModulatorOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoModulatorOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoModulatorOperatorProcessor_Sf_SwigStatic = {
    "MonoModulatorOperatorProcessor",
    swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoModulatorOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoModulatorOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoModulatorOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoModulatorOperatorProcessor = { "MonoModulatorOperatorProcessor", "MonoModulatorOperatorProcessor", &SWIGTYPE_p_MonoModulatorOperatorProcessor,_proxy__wrap_new_MonoModulatorOperatorProcessor, swig_delete_MonoModulatorOperatorProcessor, swig_MonoModulatorOperatorProcessor_methods, swig_MonoModulatorOperatorProcessor_attributes, &swig_MonoModulatorOperatorProcessor_Sf_SwigStatic, swig_MonoModulatorOperatorProcessor_meta, swig_MonoModulatorOperatorProcessor_bases, swig_MonoModulatorOperatorProcessor_base_names };

static int _wrap_MonoBlendOperatorProcessor_blend_set(lua_State* L) {
  int SWIG_arg = 0;
  MonoBlendOperatorProcessor *arg1 = (MonoBlendOperatorProcessor *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("MonoBlendOperatorProcessor::blend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoBlendOperatorProcessor::blend",1,"MonoBlendOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoBlendOperatorProcessor::blend",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoBlendOperatorProcessor,0))){
    SWIG_fail_ptr("MonoBlendOperatorProcessor_blend_set",1,SWIGTYPE_p_MonoBlendOperatorProcessor);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->blend = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoBlendOperatorProcessor_blend_get(lua_State* L) {
  int SWIG_arg = 0;
  MonoBlendOperatorProcessor *arg1 = (MonoBlendOperatorProcessor *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("MonoBlendOperatorProcessor::blend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoBlendOperatorProcessor::blend",1,"MonoBlendOperatorProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoBlendOperatorProcessor,0))){
    SWIG_fail_ptr("MonoBlendOperatorProcessor_blend_get",1,SWIGTYPE_p_MonoBlendOperatorProcessor);
  }
  
  result = (DspFloatType) ((arg1)->blend);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoBlendOperatorProcessor(lua_State* L) {
  int SWIG_arg = 0;
  MonoBlendOperatorProcessor *result = 0 ;
  
  SWIG_check_num_args("MonoBlendOperatorProcessor::MonoBlendOperatorProcessor",0,0)
  result = (MonoBlendOperatorProcessor *)new MonoBlendOperatorProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MonoBlendOperatorProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoBlendOperatorProcessor_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  MonoBlendOperatorProcessor *arg1 = (MonoBlendOperatorProcessor *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("MonoBlendOperatorProcessor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoBlendOperatorProcessor::ProcessBlock",1,"MonoBlendOperatorProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MonoBlendOperatorProcessor::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoBlendOperatorProcessor::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MonoBlendOperatorProcessor::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MonoBlendOperatorProcessor,0))){
    SWIG_fail_ptr("MonoBlendOperatorProcessor_ProcessBlock",1,SWIGTYPE_p_MonoBlendOperatorProcessor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoBlendOperatorProcessor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoBlendOperatorProcessor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoBlendOperatorProcessor(void *obj) {
MonoBlendOperatorProcessor *arg1 = (MonoBlendOperatorProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoBlendOperatorProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoBlendOperatorProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoBlendOperatorProcessor_attributes[] = {
    { "blend", _wrap_MonoBlendOperatorProcessor_blend_get, _wrap_MonoBlendOperatorProcessor_blend_set },
    {0,0,0}
};
static swig_lua_method swig_MonoBlendOperatorProcessor_methods[]= {
    { "ProcessBlock", _wrap_MonoBlendOperatorProcessor_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_MonoBlendOperatorProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoBlendOperatorProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoBlendOperatorProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoBlendOperatorProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoBlendOperatorProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoBlendOperatorProcessor_Sf_SwigStatic = {
    "MonoBlendOperatorProcessor",
    swig_MonoBlendOperatorProcessor_Sf_SwigStatic_methods,
    swig_MonoBlendOperatorProcessor_Sf_SwigStatic_attributes,
    swig_MonoBlendOperatorProcessor_Sf_SwigStatic_constants,
    swig_MonoBlendOperatorProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoBlendOperatorProcessor_bases[] = {0,0};
static const char *swig_MonoBlendOperatorProcessor_base_names[] = {"MonoOperatorProcessor *",0};
static swig_lua_class _wrap_class_MonoBlendOperatorProcessor = { "MonoBlendOperatorProcessor", "MonoBlendOperatorProcessor", &SWIGTYPE_p_MonoBlendOperatorProcessor,_proxy__wrap_new_MonoBlendOperatorProcessor, swig_delete_MonoBlendOperatorProcessor, swig_MonoBlendOperatorProcessor_methods, swig_MonoBlendOperatorProcessor_attributes, &swig_MonoBlendOperatorProcessor_Sf_SwigStatic, swig_MonoBlendOperatorProcessor_meta, swig_MonoBlendOperatorProcessor_bases, swig_MonoBlendOperatorProcessor_base_names };

static int _wrap_new_BlitSaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Analog::Oscillators::BlitSaw *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::BlitSaw",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::BlitSaw",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::BlitSaw",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Oscillators::BlitSaw *)new Analog::Oscillators::BlitSaw(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__BlitSaw,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlitSaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Oscillators::BlitSaw *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::BlitSaw",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::BlitSaw",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Oscillators::BlitSaw *)new Analog::Oscillators::BlitSaw(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__BlitSaw,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlitSaw__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::BlitSaw",0,0)
  result = (Analog::Oscillators::BlitSaw *)new Analog::Oscillators::BlitSaw();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__BlitSaw,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlitSaw(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BlitSaw__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BlitSaw__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BlitSaw__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BlitSaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::BlitSaw::BlitSaw(DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::BlitSaw::BlitSaw(DspFloatType)\n"
    "    Analog::Oscillators::BlitSaw::BlitSaw()\n");
  lua_error(L);return 0;
}


static int _wrap_BlitSaw_reset(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::reset",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_reset",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::setFrequency",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::setFrequency",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_setFrequency",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_setHarmonics__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::setHarmonics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::setHarmonics",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::setHarmonics",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_setHarmonics",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setHarmonics(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_setHarmonics__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::setHarmonics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::setHarmonics",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_setHarmonics",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  (arg1)->setHarmonics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_setHarmonics(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BlitSaw_setHarmonics__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BlitSaw_setHarmonics__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BlitSaw_setHarmonics'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::BlitSaw::setHarmonics(unsigned int)\n"
    "    Analog::Oscillators::BlitSaw::setHarmonics()\n");
  lua_error(L);return 0;
}


static int _wrap_BlitSaw_setGain(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::setGain",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::setGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_setGain",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_setPhaseOffset(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::setPhaseOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::setPhaseOffset",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::setPhaseOffset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_setPhaseOffset",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setPhaseOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_getPhase(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::getPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::getPhase",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_getPhase",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  result = (DspFloatType)(arg1)->getPhase();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_updateHarmonics(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::updateHarmonics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::updateHarmonics",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_updateHarmonics",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  (arg1)->updateHarmonics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::setPort",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_setPort",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::lastOut",1,"Analog::Oscillators::BlitSaw const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_lastOut",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  result = (DspFloatType)((Analog::Oscillators::BlitSaw const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::Tick",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_Tick",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::Tick",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_Tick",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::Tick",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_Tick",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::Tick",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_Tick",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::Tick",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_Tick",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BlitSaw_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BlitSaw_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BlitSaw_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BlitSaw_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BlitSaw_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BlitSaw_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::BlitSaw::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::BlitSaw::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::BlitSaw::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::BlitSaw::Tick(DspFloatType)\n"
    "    Analog::Oscillators::BlitSaw::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_BlitSaw_block_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  FX::Filters::OnePole arg2 ;
  FX::Filters::OnePole *argp2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::block",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::block",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::block",2,"FX::Filters::OnePole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_block_set",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_FX__Filters__OnePole,0))){
    SWIG_fail_ptr("BlitSaw_block_set",2,SWIGTYPE_p_FX__Filters__OnePole);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->block = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_block_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  FX::Filters::OnePole result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::block",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::block",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_block_get",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  result =  ((arg1)->block);
  {
    FX::Filters::OnePole * resultptr = new FX::Filters::OnePole((const FX::Filters::OnePole &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FX__Filters__OnePole,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_nHarmonics__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::nHarmonics_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::nHarmonics_",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::nHarmonics_",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_nHarmonics__set",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nHarmonics_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_nHarmonics__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::nHarmonics_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::nHarmonics_",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_nHarmonics__get",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  result = (unsigned int) ((arg1)->nHarmonics_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_m__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::m_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::m_",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::m_",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_m__set",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_m__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::m_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::m_",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_m__get",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  result = (unsigned int) ((arg1)->m_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_rate__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::rate_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::rate_",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::rate_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_rate__set",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->rate_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_rate__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::rate_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::rate_",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_rate__get",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  result = (DspFloatType) ((arg1)->rate_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_phase__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::phase_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::phase_",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::phase_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_phase__set",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->phase_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_phase__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::phase_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::phase_",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_phase__get",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  result = (DspFloatType) ((arg1)->phase_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_offset_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::offset",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::offset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_offset_set",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->offset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_offset_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::offset",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_offset_get",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  result = (DspFloatType) ((arg1)->offset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_p__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::p_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::p_",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::p_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_p__set",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->p_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_p__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::p_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::p_",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_p__get",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  result = (DspFloatType) ((arg1)->p_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_C2__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::C2_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::C2_",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::C2_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_C2__set",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->C2_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_C2__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::C2_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::C2_",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_C2__get",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  result = (DspFloatType) ((arg1)->C2_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_a__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::a_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::a_",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::a_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_a__set",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->a_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_a__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::a_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::a_",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_a__get",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  result = (DspFloatType) ((arg1)->a_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_state__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::state_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::state_",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::state_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_state__set",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->state_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_state__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::state_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::state_",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_state__get",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  result = (DspFloatType) ((arg1)->state_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::y",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::y",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_y_set",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::y",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_y_get",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  result = (DspFloatType) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_gain_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::gain",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::gain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_gain_set",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->gain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_gain_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::gain",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_gain_get",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  result = (DspFloatType) ((arg1)->gain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::sampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::sampleRate",1,"Analog::Oscillators::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::sampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_sampleRate_set",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSaw::sampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSaw::sampleRate",1,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_sampleRate_get",1,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  result = (DspFloatType) ((arg1)->sampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BlitSaw(void *obj) {
Analog::Oscillators::BlitSaw *arg1 = (Analog::Oscillators::BlitSaw *) obj;
delete arg1;
}
static int _proxy__wrap_new_BlitSaw(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BlitSaw);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BlitSaw_attributes[] = {
    { "block", _wrap_BlitSaw_block_get, _wrap_BlitSaw_block_set },
    { "nHarmonics_", _wrap_BlitSaw_nHarmonics__get, _wrap_BlitSaw_nHarmonics__set },
    { "m_", _wrap_BlitSaw_m__get, _wrap_BlitSaw_m__set },
    { "rate_", _wrap_BlitSaw_rate__get, _wrap_BlitSaw_rate__set },
    { "phase_", _wrap_BlitSaw_phase__get, _wrap_BlitSaw_phase__set },
    { "offset", _wrap_BlitSaw_offset_get, _wrap_BlitSaw_offset_set },
    { "p_", _wrap_BlitSaw_p__get, _wrap_BlitSaw_p__set },
    { "C2_", _wrap_BlitSaw_C2__get, _wrap_BlitSaw_C2__set },
    { "a_", _wrap_BlitSaw_a__get, _wrap_BlitSaw_a__set },
    { "state_", _wrap_BlitSaw_state__get, _wrap_BlitSaw_state__set },
    { "y", _wrap_BlitSaw_y_get, _wrap_BlitSaw_y_set },
    { "gain", _wrap_BlitSaw_gain_get, _wrap_BlitSaw_gain_set },
    { "sampleRate", _wrap_BlitSaw_sampleRate_get, _wrap_BlitSaw_sampleRate_set },
    {0,0,0}
};
static swig_lua_method swig_BlitSaw_methods[]= {
    { "reset", _wrap_BlitSaw_reset},
    { "setFrequency", _wrap_BlitSaw_setFrequency},
    { "setHarmonics", _wrap_BlitSaw_setHarmonics},
    { "setGain", _wrap_BlitSaw_setGain},
    { "setPhaseOffset", _wrap_BlitSaw_setPhaseOffset},
    { "getPhase", _wrap_BlitSaw_getPhase},
    { "updateHarmonics", _wrap_BlitSaw_updateHarmonics},
    { "setPort", _wrap_BlitSaw_setPort},
    { "lastOut", _wrap_BlitSaw_lastOut},
    { "Tick", _wrap_BlitSaw_Tick},
    {0,0}
};
static swig_lua_method swig_BlitSaw_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BlitSaw_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BlitSaw_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_FREQ", Analog::Oscillators::BlitSaw::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("PORT_HARMONICS", Analog::Oscillators::BlitSaw::PORT_HARMONICS)},
    {SWIG_LUA_CONSTTAB_INT("PORT_GAIN", Analog::Oscillators::BlitSaw::PORT_GAIN)},
    {SWIG_LUA_CONSTTAB_INT("PORT_PHASE", Analog::Oscillators::BlitSaw::PORT_PHASE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BlitSaw_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BlitSaw_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BlitSaw_Sf_SwigStatic = {
    "BlitSaw",
    swig_BlitSaw_Sf_SwigStatic_methods,
    swig_BlitSaw_Sf_SwigStatic_attributes,
    swig_BlitSaw_Sf_SwigStatic_constants,
    swig_BlitSaw_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BlitSaw_bases[] = {0,0};
static const char *swig_BlitSaw_base_names[] = {"OscillatorProcessor *",0};
static swig_lua_class _wrap_class_BlitSaw = { "BlitSaw", "BlitSaw", &SWIGTYPE_p_Analog__Oscillators__BlitSaw,_proxy__wrap_new_BlitSaw, swig_delete_BlitSaw, swig_BlitSaw_methods, swig_BlitSaw_attributes, &swig_BlitSaw_Sf_SwigStatic, swig_BlitSaw_meta, swig_BlitSaw_bases, swig_BlitSaw_base_names };

static int _wrap_BlitSquare_block_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  FX::Filters::OnePole arg2 ;
  FX::Filters::OnePole *argp2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::block",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::block",1,"Analog::Oscillators::BlitSquare *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::block",2,"FX::Filters::OnePole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_block_set",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_FX__Filters__OnePole,0))){
    SWIG_fail_ptr("BlitSquare_block_set",2,SWIGTYPE_p_FX__Filters__OnePole);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->block = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_block_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  FX::Filters::OnePole result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::block",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::block",1,"Analog::Oscillators::BlitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_block_get",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  result =  ((arg1)->block);
  {
    FX::Filters::OnePole * resultptr = new FX::Filters::OnePole((const FX::Filters::OnePole &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FX__Filters__OnePole,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_s1_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  Analog::Oscillators::BlitSaw *arg2 = (Analog::Oscillators::BlitSaw *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::s1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::s1",1,"Analog::Oscillators::BlitSquare *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::s1",2,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_s1_set",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSquare_s1_set",2,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  if (arg1) (arg1)->s1 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_s1_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  Analog::Oscillators::BlitSaw *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::s1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::s1",1,"Analog::Oscillators::BlitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_s1_get",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  result = (Analog::Oscillators::BlitSaw *)& ((arg1)->s1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_s2_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  Analog::Oscillators::BlitSaw *arg2 = (Analog::Oscillators::BlitSaw *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::s2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::s2",1,"Analog::Oscillators::BlitSquare *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::s2",2,"Analog::Oscillators::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_s2_set",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0))){
    SWIG_fail_ptr("BlitSquare_s2_set",2,SWIGTYPE_p_Analog__Oscillators__BlitSaw);
  }
  
  if (arg1) (arg1)->s2 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_s2_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  Analog::Oscillators::BlitSaw *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::s2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::s2",1,"Analog::Oscillators::BlitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_s2_get",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  result = (Analog::Oscillators::BlitSaw *)& ((arg1)->s2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__BlitSaw,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare__out_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::_out",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::_out",1,"Analog::Oscillators::BlitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::_out",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare__out_set",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->_out = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare__out_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::_out",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::_out",1,"Analog::Oscillators::BlitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare__out_get",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  result = (DspFloatType) ((arg1)->_out);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare__duty_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::_duty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::_duty",1,"Analog::Oscillators::BlitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::_duty",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare__duty_set",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->_duty = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare__duty_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::_duty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::_duty",1,"Analog::Oscillators::BlitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare__duty_get",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  result = (DspFloatType) ((arg1)->_duty);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::sampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::sampleRate",1,"Analog::Oscillators::BlitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::sampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_sampleRate_set",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::sampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::sampleRate",1,"Analog::Oscillators::BlitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_sampleRate_get",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  result = (DspFloatType) ((arg1)->sampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlitSquare__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Oscillators::BlitSquare *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::BlitSquare",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::BlitSquare",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Oscillators::BlitSquare *)new Analog::Oscillators::BlitSquare(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__BlitSquare,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlitSquare__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::BlitSquare",0,0)
  result = (Analog::Oscillators::BlitSquare *)new Analog::Oscillators::BlitSquare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__BlitSquare,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlitSquare(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BlitSquare__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BlitSquare__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BlitSquare'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::BlitSquare::BlitSquare(DspFloatType)\n"
    "    Analog::Oscillators::BlitSquare::BlitSquare()\n");
  lua_error(L);return 0;
}


static int _wrap_BlitSquare_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::setFrequency",1,"Analog::Oscillators::BlitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::setFrequency",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_setFrequency",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_setDuty(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::setDuty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::setDuty",1,"Analog::Oscillators::BlitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::setDuty",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_setDuty",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setDuty(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_reset(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::reset",1,"Analog::Oscillators::BlitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_reset",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::setPort",1,"Analog::Oscillators::BlitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_setPort",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::Tick",1,"Analog::Oscillators::BlitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_Tick",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::Tick",1,"Analog::Oscillators::BlitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_Tick",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::Tick",1,"Analog::Oscillators::BlitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_Tick",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::Tick",1,"Analog::Oscillators::BlitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_Tick",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitSquare::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitSquare::Tick",1,"Analog::Oscillators::BlitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_Tick",1,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BlitSquare_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BlitSquare_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BlitSquare_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BlitSquare_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BlitSquare_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BlitSquare_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::BlitSquare::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::BlitSquare::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::BlitSquare::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::BlitSquare::Tick(DspFloatType)\n"
    "    Analog::Oscillators::BlitSquare::Tick()\n");
  lua_error(L);return 0;
}


static void swig_delete_BlitSquare(void *obj) {
Analog::Oscillators::BlitSquare *arg1 = (Analog::Oscillators::BlitSquare *) obj;
delete arg1;
}
static int _proxy__wrap_new_BlitSquare(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BlitSquare);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BlitSquare_attributes[] = {
    { "block", _wrap_BlitSquare_block_get, _wrap_BlitSquare_block_set },
    { "s1", _wrap_BlitSquare_s1_get, _wrap_BlitSquare_s1_set },
    { "s2", _wrap_BlitSquare_s2_get, _wrap_BlitSquare_s2_set },
    { "_out", _wrap_BlitSquare__out_get, _wrap_BlitSquare__out_set },
    { "_duty", _wrap_BlitSquare__duty_get, _wrap_BlitSquare__duty_set },
    { "sampleRate", _wrap_BlitSquare_sampleRate_get, _wrap_BlitSquare_sampleRate_set },
    {0,0,0}
};
static swig_lua_method swig_BlitSquare_methods[]= {
    { "setFrequency", _wrap_BlitSquare_setFrequency},
    { "setDuty", _wrap_BlitSquare_setDuty},
    { "reset", _wrap_BlitSquare_reset},
    { "setPort", _wrap_BlitSquare_setPort},
    { "Tick", _wrap_BlitSquare_Tick},
    {0,0}
};
static swig_lua_method swig_BlitSquare_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BlitSquare_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BlitSquare_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_FREQ", Analog::Oscillators::BlitSquare::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("PORT_DUTY", Analog::Oscillators::BlitSquare::PORT_DUTY)},
    {SWIG_LUA_CONSTTAB_INT("PORT_RESET", Analog::Oscillators::BlitSquare::PORT_RESET)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BlitSquare_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BlitSquare_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BlitSquare_Sf_SwigStatic = {
    "BlitSquare",
    swig_BlitSquare_Sf_SwigStatic_methods,
    swig_BlitSquare_Sf_SwigStatic_attributes,
    swig_BlitSquare_Sf_SwigStatic_constants,
    swig_BlitSquare_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BlitSquare_bases[] = {0,0};
static const char *swig_BlitSquare_base_names[] = {"OscillatorProcessor *",0};
static swig_lua_class _wrap_class_BlitSquare = { "BlitSquare", "BlitSquare", &SWIGTYPE_p_Analog__Oscillators__BlitSquare,_proxy__wrap_new_BlitSquare, swig_delete_BlitSquare, swig_BlitSquare_methods, swig_BlitSquare_attributes, &swig_BlitSquare_Sf_SwigStatic, swig_BlitSquare_meta, swig_BlitSquare_bases, swig_BlitSquare_base_names };

static int _wrap_BlitTriangle_b1_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  FX::Filters::OnePole arg2 ;
  FX::Filters::OnePole *argp2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::b1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::b1",1,"Analog::Oscillators::BlitTriangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::b1",2,"FX::Filters::OnePole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_b1_set",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_FX__Filters__OnePole,0))){
    SWIG_fail_ptr("BlitTriangle_b1_set",2,SWIGTYPE_p_FX__Filters__OnePole);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->b1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle_b1_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  FX::Filters::OnePole result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::b1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::b1",1,"Analog::Oscillators::BlitTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_b1_get",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  result =  ((arg1)->b1);
  {
    FX::Filters::OnePole * resultptr = new FX::Filters::OnePole((const FX::Filters::OnePole &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FX__Filters__OnePole,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle_b2_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  FX::Filters::OnePole arg2 ;
  FX::Filters::OnePole *argp2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::b2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::b2",1,"Analog::Oscillators::BlitTriangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::b2",2,"FX::Filters::OnePole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_b2_set",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_FX__Filters__OnePole,0))){
    SWIG_fail_ptr("BlitTriangle_b2_set",2,SWIGTYPE_p_FX__Filters__OnePole);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->b2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle_b2_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  FX::Filters::OnePole result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::b2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::b2",1,"Analog::Oscillators::BlitTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_b2_get",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  result =  ((arg1)->b2);
  {
    FX::Filters::OnePole * resultptr = new FX::Filters::OnePole((const FX::Filters::OnePole &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FX__Filters__OnePole,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle_s1_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  Analog::Oscillators::BlitSquare *arg2 = (Analog::Oscillators::BlitSquare *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::s1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::s1",1,"Analog::Oscillators::BlitTriangle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::s1",2,"Analog::Oscillators::BlitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_s1_set",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0))){
    SWIG_fail_ptr("BlitTriangle_s1_set",2,SWIGTYPE_p_Analog__Oscillators__BlitSquare);
  }
  
  if (arg1) (arg1)->s1 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle_s1_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  Analog::Oscillators::BlitSquare *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::s1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::s1",1,"Analog::Oscillators::BlitTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_s1_get",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  result = (Analog::Oscillators::BlitSquare *)& ((arg1)->s1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__BlitSquare,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle__out_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::_out",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::_out",1,"Analog::Oscillators::BlitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::_out",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle__out_set",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->_out = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle__out_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::_out",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::_out",1,"Analog::Oscillators::BlitTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle__out_get",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  result = (DspFloatType) ((arg1)->_out);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::sampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::sampleRate",1,"Analog::Oscillators::BlitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::sampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_sampleRate_set",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::sampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::sampleRate",1,"Analog::Oscillators::BlitTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_sampleRate_get",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  result = (DspFloatType) ((arg1)->sampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlitTriangle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Oscillators::BlitTriangle *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::BlitTriangle",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::BlitTriangle",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Oscillators::BlitTriangle *)new Analog::Oscillators::BlitTriangle(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlitTriangle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::BlitTriangle",0,0)
  result = (Analog::Oscillators::BlitTriangle *)new Analog::Oscillators::BlitTriangle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlitTriangle(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BlitTriangle__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BlitTriangle__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BlitTriangle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::BlitTriangle::BlitTriangle(DspFloatType)\n"
    "    Analog::Oscillators::BlitTriangle::BlitTriangle()\n");
  lua_error(L);return 0;
}


static int _wrap_BlitTriangle_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::setFrequency",1,"Analog::Oscillators::BlitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::setFrequency",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_setFrequency",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle_setDuty(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::setDuty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::setDuty",1,"Analog::Oscillators::BlitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::setDuty",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_setDuty",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setDuty(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle_reset(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::reset",1,"Analog::Oscillators::BlitTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_reset",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::setPort",1,"Analog::Oscillators::BlitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_setPort",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::Tick",1,"Analog::Oscillators::BlitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_Tick",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::Tick",1,"Analog::Oscillators::BlitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_Tick",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::Tick",1,"Analog::Oscillators::BlitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_Tick",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::Tick",1,"Analog::Oscillators::BlitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_Tick",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitTriangle::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitTriangle::Tick",1,"Analog::Oscillators::BlitTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle,0))){
    SWIG_fail_ptr("BlitTriangle_Tick",1,SWIGTYPE_p_Analog__Oscillators__BlitTriangle);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitTriangle_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BlitTriangle_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BlitTriangle_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BlitTriangle_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BlitTriangle_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__BlitTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BlitTriangle_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BlitTriangle_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::BlitTriangle::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::BlitTriangle::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::BlitTriangle::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::BlitTriangle::Tick(DspFloatType)\n"
    "    Analog::Oscillators::BlitTriangle::Tick()\n");
  lua_error(L);return 0;
}


static void swig_delete_BlitTriangle(void *obj) {
Analog::Oscillators::BlitTriangle *arg1 = (Analog::Oscillators::BlitTriangle *) obj;
delete arg1;
}
static int _proxy__wrap_new_BlitTriangle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BlitTriangle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BlitTriangle_attributes[] = {
    { "b1", _wrap_BlitTriangle_b1_get, _wrap_BlitTriangle_b1_set },
    { "b2", _wrap_BlitTriangle_b2_get, _wrap_BlitTriangle_b2_set },
    { "s1", _wrap_BlitTriangle_s1_get, _wrap_BlitTriangle_s1_set },
    { "_out", _wrap_BlitTriangle__out_get, _wrap_BlitTriangle__out_set },
    { "sampleRate", _wrap_BlitTriangle_sampleRate_get, _wrap_BlitTriangle_sampleRate_set },
    {0,0,0}
};
static swig_lua_method swig_BlitTriangle_methods[]= {
    { "setFrequency", _wrap_BlitTriangle_setFrequency},
    { "setDuty", _wrap_BlitTriangle_setDuty},
    { "reset", _wrap_BlitTriangle_reset},
    { "setPort", _wrap_BlitTriangle_setPort},
    { "Tick", _wrap_BlitTriangle_Tick},
    {0,0}
};
static swig_lua_method swig_BlitTriangle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BlitTriangle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BlitTriangle_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_FREQ", Analog::Oscillators::BlitTriangle::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("PORT_DUTY", Analog::Oscillators::BlitTriangle::PORT_DUTY)},
    {SWIG_LUA_CONSTTAB_INT("PORT_RESET", Analog::Oscillators::BlitTriangle::PORT_RESET)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BlitTriangle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BlitTriangle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BlitTriangle_Sf_SwigStatic = {
    "BlitTriangle",
    swig_BlitTriangle_Sf_SwigStatic_methods,
    swig_BlitTriangle_Sf_SwigStatic_attributes,
    swig_BlitTriangle_Sf_SwigStatic_constants,
    swig_BlitTriangle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BlitTriangle_bases[] = {0,0};
static const char *swig_BlitTriangle_base_names[] = {"OscillatorProcessor *",0};
static swig_lua_class _wrap_class_BlitTriangle = { "BlitTriangle", "BlitTriangle", &SWIGTYPE_p_Analog__Oscillators__BlitTriangle,_proxy__wrap_new_BlitTriangle, swig_delete_BlitTriangle, swig_BlitTriangle_methods, swig_BlitTriangle_attributes, &swig_BlitTriangle_Sf_SwigStatic, swig_BlitTriangle_meta, swig_BlitTriangle_bases, swig_BlitTriangle_base_names };

static int _wrap_BlitDSF(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::BlitDSF",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Oscillators::BlitDSF",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::BlitDSF",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::BlitDSF",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::BlitDSF",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)Analog::Oscillators::BlitDSF(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_block_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  FX::Filters::OnePole arg2 ;
  FX::Filters::OnePole *argp2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::block",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::block",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::block",2,"FX::Filters::OnePole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_block_set",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_FX__Filters__OnePole,0))){
    SWIG_fail_ptr("blitSaw_block_set",2,SWIGTYPE_p_FX__Filters__OnePole);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->block = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_block_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  FX::Filters::OnePole result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::block",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::block",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_block_get",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  result =  ((arg1)->block);
  {
    FX::Filters::OnePole * resultptr = new FX::Filters::OnePole((const FX::Filters::OnePole &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FX__Filters__OnePole,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_nHarmonics__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::nHarmonics_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::nHarmonics_",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::nHarmonics_",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_nHarmonics__set",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nHarmonics_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_nHarmonics__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::nHarmonics_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::nHarmonics_",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_nHarmonics__get",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  result = (unsigned int) ((arg1)->nHarmonics_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_m__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::m_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::m_",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::m_",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_m__set",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_m__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::m_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::m_",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_m__get",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  result = (unsigned int) ((arg1)->m_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_rate__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::rate_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::rate_",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::rate_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_rate__set",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->rate_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_rate__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::rate_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::rate_",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_rate__get",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  result = (DspFloatType) ((arg1)->rate_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_phase__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::phase_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::phase_",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::phase_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_phase__set",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->phase_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_phase__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::phase_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::phase_",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_phase__get",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  result = (DspFloatType) ((arg1)->phase_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_offset_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::offset",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::offset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_offset_set",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->offset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_offset_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::offset",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_offset_get",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  result = (DspFloatType) ((arg1)->offset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_p__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::p_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::p_",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::p_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_p__set",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->p_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_p__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::p_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::p_",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_p__get",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  result = (DspFloatType) ((arg1)->p_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_C2__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::C2_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::C2_",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::C2_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_C2__set",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->C2_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_C2__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::C2_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::C2_",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_C2__get",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  result = (DspFloatType) ((arg1)->C2_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_a__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::a_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::a_",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::a_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_a__set",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->a_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_a__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::a_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::a_",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_a__get",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  result = (DspFloatType) ((arg1)->a_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_state__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::state_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::state_",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::state_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_state__set",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->state_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_state__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::state_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::state_",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_state__get",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  result = (DspFloatType) ((arg1)->state_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::y",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::y",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_y_set",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::y",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_y_get",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  result = (DspFloatType) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::sampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::sampleRate",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::sampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_sampleRate_set",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::sampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::sampleRate",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_sampleRate_get",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  result = (DspFloatType) ((arg1)->sampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_blitSaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Analog::Oscillators::blitSaw *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::blitSaw",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::blitSaw",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::blitSaw",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Oscillators::blitSaw *)new Analog::Oscillators::blitSaw(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__blitSaw,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_blitSaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Oscillators::blitSaw *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::blitSaw",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::blitSaw",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Oscillators::blitSaw *)new Analog::Oscillators::blitSaw(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__blitSaw,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_blitSaw__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::blitSaw",0,0)
  result = (Analog::Oscillators::blitSaw *)new Analog::Oscillators::blitSaw();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__blitSaw,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_blitSaw(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_blitSaw__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_blitSaw__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_blitSaw__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_blitSaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::blitSaw::blitSaw(DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::blitSaw::blitSaw(DspFloatType)\n"
    "    Analog::Oscillators::blitSaw::blitSaw()\n");
  lua_error(L);return 0;
}


static int _wrap_blitSaw_reset(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::reset",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_reset",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::setFrequency",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::setFrequency",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_setFrequency",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_setHarmonics__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::setHarmonics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::setHarmonics",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::setHarmonics",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_setHarmonics",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setHarmonics(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_setHarmonics__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::setHarmonics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::setHarmonics",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_setHarmonics",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  (arg1)->setHarmonics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_setHarmonics(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_blitSaw_setHarmonics__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_blitSaw_setHarmonics__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'blitSaw_setHarmonics'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::blitSaw::setHarmonics(unsigned int)\n"
    "    Analog::Oscillators::blitSaw::setHarmonics()\n");
  lua_error(L);return 0;
}


static int _wrap_blitSaw_getPhase(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::getPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::getPhase",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_getPhase",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  result = (DspFloatType)(arg1)->getPhase();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_setPhaseOffset(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::setPhaseOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::setPhaseOffset",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::setPhaseOffset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_setPhaseOffset",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setPhaseOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_updateHarmonics(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::updateHarmonics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::updateHarmonics",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_updateHarmonics",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  (arg1)->updateHarmonics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::setPort",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::blitSaw::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_setPort",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::lastOut",1,"Analog::Oscillators::blitSaw const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_lastOut",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  result = (DspFloatType)((Analog::Oscillators::blitSaw const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::Tick",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::blitSaw::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::blitSaw::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Oscillators::blitSaw::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_Tick",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::Tick",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::blitSaw::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::blitSaw::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_Tick",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::Tick",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::blitSaw::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_Tick",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::Tick",1,"Analog::Oscillators::blitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSaw::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_Tick",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::Tick",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw_Tick",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSaw_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_blitSaw_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_blitSaw_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_blitSaw_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_blitSaw_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_blitSaw_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'blitSaw_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::blitSaw::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::blitSaw::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::blitSaw::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::blitSaw::Tick(DspFloatType)\n"
    "    Analog::Oscillators::blitSaw::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_blitSaw___call(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSaw::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSaw::operator ()",1,"Analog::Oscillators::blitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSaw,0))){
    SWIG_fail_ptr("blitSaw___call",1,SWIGTYPE_p_Analog__Oscillators__blitSaw);
  }
  
  result = (DspFloatType)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_blitSaw(void *obj) {
Analog::Oscillators::blitSaw *arg1 = (Analog::Oscillators::blitSaw *) obj;
delete arg1;
}
static int _proxy__wrap_new_blitSaw(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_blitSaw);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_blitSaw_attributes[] = {
    { "block", _wrap_blitSaw_block_get, _wrap_blitSaw_block_set },
    { "nHarmonics_", _wrap_blitSaw_nHarmonics__get, _wrap_blitSaw_nHarmonics__set },
    { "m_", _wrap_blitSaw_m__get, _wrap_blitSaw_m__set },
    { "rate_", _wrap_blitSaw_rate__get, _wrap_blitSaw_rate__set },
    { "phase_", _wrap_blitSaw_phase__get, _wrap_blitSaw_phase__set },
    { "offset", _wrap_blitSaw_offset_get, _wrap_blitSaw_offset_set },
    { "p_", _wrap_blitSaw_p__get, _wrap_blitSaw_p__set },
    { "C2_", _wrap_blitSaw_C2__get, _wrap_blitSaw_C2__set },
    { "a_", _wrap_blitSaw_a__get, _wrap_blitSaw_a__set },
    { "state_", _wrap_blitSaw_state__get, _wrap_blitSaw_state__set },
    { "y", _wrap_blitSaw_y_get, _wrap_blitSaw_y_set },
    { "sampleRate", _wrap_blitSaw_sampleRate_get, _wrap_blitSaw_sampleRate_set },
    {0,0,0}
};
static swig_lua_method swig_blitSaw_methods[]= {
    { "reset", _wrap_blitSaw_reset},
    { "setFrequency", _wrap_blitSaw_setFrequency},
    { "setHarmonics", _wrap_blitSaw_setHarmonics},
    { "getPhase", _wrap_blitSaw_getPhase},
    { "setPhaseOffset", _wrap_blitSaw_setPhaseOffset},
    { "updateHarmonics", _wrap_blitSaw_updateHarmonics},
    { "setPort", _wrap_blitSaw_setPort},
    { "lastOut", _wrap_blitSaw_lastOut},
    { "Tick", _wrap_blitSaw_Tick},
    { "__call", _wrap_blitSaw___call},
    {0,0}
};
static swig_lua_method swig_blitSaw_meta[] = {
    { "__call", _wrap_blitSaw___call},
    {0,0}
};

static swig_lua_attribute swig_blitSaw_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_blitSaw_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_FREQ", Analog::Oscillators::blitSaw::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("PORT_HARMONICS", Analog::Oscillators::blitSaw::PORT_HARMONICS)},
    {SWIG_LUA_CONSTTAB_INT("PORT_PHASE", Analog::Oscillators::blitSaw::PORT_PHASE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_blitSaw_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_blitSaw_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_blitSaw_Sf_SwigStatic = {
    "blitSaw",
    swig_blitSaw_Sf_SwigStatic_methods,
    swig_blitSaw_Sf_SwigStatic_attributes,
    swig_blitSaw_Sf_SwigStatic_constants,
    swig_blitSaw_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_blitSaw_bases[] = {0,0};
static const char *swig_blitSaw_base_names[] = {"OscillatorProcessor *",0};
static swig_lua_class _wrap_class_blitSaw = { "blitSaw", "blitSaw", &SWIGTYPE_p_Analog__Oscillators__blitSaw,_proxy__wrap_new_blitSaw, swig_delete_blitSaw, swig_blitSaw_methods, swig_blitSaw_attributes, &swig_blitSaw_Sf_SwigStatic, swig_blitSaw_meta, swig_blitSaw_bases, swig_blitSaw_base_names };

static int _wrap_blitSquare_block_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  FX::Filters::OnePole arg2 ;
  FX::Filters::OnePole *argp2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::block",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::block",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::block",2,"FX::Filters::OnePole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_block_set",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_FX__Filters__OnePole,0))){
    SWIG_fail_ptr("blitSquare_block_set",2,SWIGTYPE_p_FX__Filters__OnePole);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->block = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_block_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  FX::Filters::OnePole result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::block",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::block",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_block_get",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result =  ((arg1)->block);
  {
    FX::Filters::OnePole * resultptr = new FX::Filters::OnePole((const FX::Filters::OnePole &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FX__Filters__OnePole,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_nHarmonics__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::nHarmonics_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::nHarmonics_",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::nHarmonics_",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_nHarmonics__set",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nHarmonics_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_nHarmonics__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::nHarmonics_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::nHarmonics_",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_nHarmonics__get",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (unsigned int) ((arg1)->nHarmonics_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_m__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::m_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::m_",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::m_",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_m__set",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_m__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::m_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::m_",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_m__get",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (unsigned int) ((arg1)->m_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_f_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::f",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::f",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_f_set",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->f = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_f_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::f",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::f",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_f_get",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (DspFloatType) ((arg1)->f);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_rate__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::rate_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::rate_",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::rate_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_rate__set",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->rate_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_rate__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::rate_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::rate_",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_rate__get",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (DspFloatType) ((arg1)->rate_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_phase__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::phase_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::phase_",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::phase_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_phase__set",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->phase_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_phase__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::phase_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::phase_",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_phase__get",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (DspFloatType) ((arg1)->phase_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_offset_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::offset",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::offset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_offset_set",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->offset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_offset_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::offset",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_offset_get",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (DspFloatType) ((arg1)->offset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_p__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::p_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::p_",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::p_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_p__set",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->p_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_p__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::p_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::p_",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_p__get",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (DspFloatType) ((arg1)->p_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_C2__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::C2_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::C2_",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::C2_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_C2__set",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->C2_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_C2__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::C2_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::C2_",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_C2__get",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (DspFloatType) ((arg1)->C2_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_a__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::a_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::a_",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::a_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_a__set",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->a_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_a__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::a_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::a_",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_a__get",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (DspFloatType) ((arg1)->a_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_state__set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::state_",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::state_",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::state_",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_state__set",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->state_ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_state__get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::state_",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::state_",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_state__get",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (DspFloatType) ((arg1)->state_);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::y",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::y",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_y_set",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::y",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_y_get",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (DspFloatType) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_D_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::D",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::D",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::D",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_D_set",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->D = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_D_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::D",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::D",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_D_get",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (DspFloatType) ((arg1)->D);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::sampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::sampleRate",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::sampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_sampleRate_set",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::sampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::sampleRate",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_sampleRate_get",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (DspFloatType) ((arg1)->sampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_blitSquare__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Analog::Oscillators::blitSquare *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::blitSquare",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::blitSquare",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::blitSquare",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Oscillators::blitSquare *)new Analog::Oscillators::blitSquare(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__blitSquare,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_blitSquare__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Oscillators::blitSquare *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::blitSquare",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::blitSquare",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Oscillators::blitSquare *)new Analog::Oscillators::blitSquare(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__blitSquare,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_blitSquare__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::blitSquare",0,0)
  result = (Analog::Oscillators::blitSquare *)new Analog::Oscillators::blitSquare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__blitSquare,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_blitSquare(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_blitSquare__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_blitSquare__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_blitSquare__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_blitSquare'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::blitSquare::blitSquare(DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::blitSquare::blitSquare(DspFloatType)\n"
    "    Analog::Oscillators::blitSquare::blitSquare()\n");
  lua_error(L);return 0;
}


static int _wrap_blitSquare_reset(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::reset",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_reset",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::setFrequency",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::setFrequency",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_setFrequency",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_setHarmonics__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::setHarmonics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::setHarmonics",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::setHarmonics",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_setHarmonics",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setHarmonics(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_setHarmonics__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::setHarmonics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::setHarmonics",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_setHarmonics",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  (arg1)->setHarmonics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_setHarmonics(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_blitSquare_setHarmonics__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_blitSquare_setHarmonics__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'blitSquare_setHarmonics'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::blitSquare::setHarmonics(unsigned int)\n"
    "    Analog::Oscillators::blitSquare::setHarmonics()\n");
  lua_error(L);return 0;
}


static int _wrap_blitSquare_setDuty(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::setDuty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::setDuty",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::setDuty",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_setDuty",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setDuty(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_getPhase(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::getPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::getPhase",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_getPhase",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (DspFloatType)(arg1)->getPhase();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_setPhaseOffset(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::setPhaseOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::setPhaseOffset",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::setPhaseOffset",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_setPhaseOffset",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setPhaseOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_updateHarmonics(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::updateHarmonics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::updateHarmonics",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_updateHarmonics",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  (arg1)->updateHarmonics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::setPort",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::blitSquare::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_setPort",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::lastOut",1,"Analog::Oscillators::blitSquare const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_lastOut",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (DspFloatType)((Analog::Oscillators::blitSquare const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::Tick",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::blitSquare::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::blitSquare::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Oscillators::blitSquare::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_Tick",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::Tick",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::blitSquare::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::blitSquare::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_Tick",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::Tick",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::blitSquare::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_Tick",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::Tick",1,"Analog::Oscillators::blitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitSquare::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_Tick",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::Tick",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare_Tick",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitSquare_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_blitSquare_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_blitSquare_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_blitSquare_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_blitSquare_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_blitSquare_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'blitSquare_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::blitSquare::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::blitSquare::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::blitSquare::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::blitSquare::Tick(DspFloatType)\n"
    "    Analog::Oscillators::blitSquare::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_blitSquare___call(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitSquare::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitSquare::operator ()",1,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitSquare___call",1,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  result = (DspFloatType)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_blitSquare(void *obj) {
Analog::Oscillators::blitSquare *arg1 = (Analog::Oscillators::blitSquare *) obj;
delete arg1;
}
static int _proxy__wrap_new_blitSquare(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_blitSquare);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_blitSquare_attributes[] = {
    { "block", _wrap_blitSquare_block_get, _wrap_blitSquare_block_set },
    { "nHarmonics_", _wrap_blitSquare_nHarmonics__get, _wrap_blitSquare_nHarmonics__set },
    { "m_", _wrap_blitSquare_m__get, _wrap_blitSquare_m__set },
    { "f", _wrap_blitSquare_f_get, _wrap_blitSquare_f_set },
    { "rate_", _wrap_blitSquare_rate__get, _wrap_blitSquare_rate__set },
    { "phase_", _wrap_blitSquare_phase__get, _wrap_blitSquare_phase__set },
    { "offset", _wrap_blitSquare_offset_get, _wrap_blitSquare_offset_set },
    { "p_", _wrap_blitSquare_p__get, _wrap_blitSquare_p__set },
    { "C2_", _wrap_blitSquare_C2__get, _wrap_blitSquare_C2__set },
    { "a_", _wrap_blitSquare_a__get, _wrap_blitSquare_a__set },
    { "state_", _wrap_blitSquare_state__get, _wrap_blitSquare_state__set },
    { "y", _wrap_blitSquare_y_get, _wrap_blitSquare_y_set },
    { "D", _wrap_blitSquare_D_get, _wrap_blitSquare_D_set },
    { "sampleRate", _wrap_blitSquare_sampleRate_get, _wrap_blitSquare_sampleRate_set },
    {0,0,0}
};
static swig_lua_method swig_blitSquare_methods[]= {
    { "reset", _wrap_blitSquare_reset},
    { "setFrequency", _wrap_blitSquare_setFrequency},
    { "setHarmonics", _wrap_blitSquare_setHarmonics},
    { "setDuty", _wrap_blitSquare_setDuty},
    { "getPhase", _wrap_blitSquare_getPhase},
    { "setPhaseOffset", _wrap_blitSquare_setPhaseOffset},
    { "updateHarmonics", _wrap_blitSquare_updateHarmonics},
    { "setPort", _wrap_blitSquare_setPort},
    { "lastOut", _wrap_blitSquare_lastOut},
    { "Tick", _wrap_blitSquare_Tick},
    { "__call", _wrap_blitSquare___call},
    {0,0}
};
static swig_lua_method swig_blitSquare_meta[] = {
    { "__call", _wrap_blitSquare___call},
    {0,0}
};

static swig_lua_attribute swig_blitSquare_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_blitSquare_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_FREQ", Analog::Oscillators::blitSquare::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("PORT_HARMONICS", Analog::Oscillators::blitSquare::PORT_HARMONICS)},
    {SWIG_LUA_CONSTTAB_INT("PORT_PHASE", Analog::Oscillators::blitSquare::PORT_PHASE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_blitSquare_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_blitSquare_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_blitSquare_Sf_SwigStatic = {
    "blitSquare",
    swig_blitSquare_Sf_SwigStatic_methods,
    swig_blitSquare_Sf_SwigStatic_attributes,
    swig_blitSquare_Sf_SwigStatic_constants,
    swig_blitSquare_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_blitSquare_bases[] = {0,0};
static const char *swig_blitSquare_base_names[] = {"OscillatorProcessor *",0};
static swig_lua_class _wrap_class_blitSquare = { "blitSquare", "blitSquare", &SWIGTYPE_p_Analog__Oscillators__blitSquare,_proxy__wrap_new_blitSquare, swig_delete_blitSquare, swig_blitSquare_methods, swig_blitSquare_attributes, &swig_blitSquare_Sf_SwigStatic, swig_blitSquare_meta, swig_blitSquare_bases, swig_blitSquare_base_names };

static int _wrap_blitTriangle_sqr_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  Analog::Oscillators::blitSquare *arg2 = (Analog::Oscillators::blitSquare *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::sqr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::sqr",1,"Analog::Oscillators::blitTriangle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::sqr",2,"Analog::Oscillators::blitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_sqr_set",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__Oscillators__blitSquare,0))){
    SWIG_fail_ptr("blitTriangle_sqr_set",2,SWIGTYPE_p_Analog__Oscillators__blitSquare);
  }
  
  if (arg1) (arg1)->sqr = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitTriangle_sqr_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  Analog::Oscillators::blitSquare *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::sqr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::sqr",1,"Analog::Oscillators::blitTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_sqr_get",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  result = (Analog::Oscillators::blitSquare *)& ((arg1)->sqr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__blitSquare,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitTriangle_b1_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  FX::Filters::OnePole arg2 ;
  FX::Filters::OnePole *argp2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::b1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::b1",1,"Analog::Oscillators::blitTriangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::b1",2,"FX::Filters::OnePole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_b1_set",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_FX__Filters__OnePole,0))){
    SWIG_fail_ptr("blitTriangle_b1_set",2,SWIGTYPE_p_FX__Filters__OnePole);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->b1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitTriangle_b1_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  FX::Filters::OnePole result;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::b1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::b1",1,"Analog::Oscillators::blitTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_b1_get",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  result =  ((arg1)->b1);
  {
    FX::Filters::OnePole * resultptr = new FX::Filters::OnePole((const FX::Filters::OnePole &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FX__Filters__OnePole,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitTriangle_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::sampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::sampleRate",1,"Analog::Oscillators::blitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::sampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_sampleRate_set",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitTriangle_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::sampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::sampleRate",1,"Analog::Oscillators::blitTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_sampleRate_get",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  result = (DspFloatType) ((arg1)->sampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitTriangle_triangle_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::triangle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::triangle",1,"Analog::Oscillators::blitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::triangle",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_triangle_set",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->triangle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitTriangle_triangle_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::triangle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::triangle",1,"Analog::Oscillators::blitTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_triangle_get",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  result = (DspFloatType) ((arg1)->triangle);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_blitTriangle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Analog::Oscillators::blitTriangle *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::blitTriangle",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::blitTriangle",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::blitTriangle",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Oscillators::blitTriangle *)new Analog::Oscillators::blitTriangle(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__blitTriangle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_blitTriangle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Oscillators::blitTriangle *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::blitTriangle",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::blitTriangle",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Oscillators::blitTriangle *)new Analog::Oscillators::blitTriangle(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__blitTriangle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_blitTriangle__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::blitTriangle",0,0)
  result = (Analog::Oscillators::blitTriangle *)new Analog::Oscillators::blitTriangle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__blitTriangle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_blitTriangle(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_blitTriangle__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_blitTriangle__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_blitTriangle__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_blitTriangle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::blitTriangle::blitTriangle(DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::blitTriangle::blitTriangle(DspFloatType)\n"
    "    Analog::Oscillators::blitTriangle::blitTriangle()\n");
  lua_error(L);return 0;
}


static int _wrap_blitTriangle_reset(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::reset",1,"Analog::Oscillators::blitTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_reset",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitTriangle_setDuty(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::setDuty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::setDuty",1,"Analog::Oscillators::blitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::setDuty",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_setDuty",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setDuty(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitTriangle_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::setFrequency",1,"Analog::Oscillators::blitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::setFrequency",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_setFrequency",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitTriangle_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::setPort",1,"Analog::Oscillators::blitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_setPort",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitTriangle_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::Tick",1,"Analog::Oscillators::blitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_Tick",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitTriangle_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::Tick",1,"Analog::Oscillators::blitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_Tick",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitTriangle_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::Tick",1,"Analog::Oscillators::blitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_Tick",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitTriangle_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::Tick",1,"Analog::Oscillators::blitTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_Tick",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitTriangle_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::Tick",1,"Analog::Oscillators::blitTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle_Tick",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blitTriangle_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_blitTriangle_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_blitTriangle_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_blitTriangle_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_blitTriangle_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__blitTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_blitTriangle_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'blitTriangle_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::blitTriangle::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::blitTriangle::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::blitTriangle::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::blitTriangle::Tick(DspFloatType)\n"
    "    Analog::Oscillators::blitTriangle::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_blitTriangle___call(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::blitTriangle::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::blitTriangle::operator ()",1,"Analog::Oscillators::blitTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__blitTriangle,0))){
    SWIG_fail_ptr("blitTriangle___call",1,SWIGTYPE_p_Analog__Oscillators__blitTriangle);
  }
  
  result = (DspFloatType)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_blitTriangle(void *obj) {
Analog::Oscillators::blitTriangle *arg1 = (Analog::Oscillators::blitTriangle *) obj;
delete arg1;
}
static int _proxy__wrap_new_blitTriangle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_blitTriangle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_blitTriangle_attributes[] = {
    { "sqr", _wrap_blitTriangle_sqr_get, _wrap_blitTriangle_sqr_set },
    { "b1", _wrap_blitTriangle_b1_get, _wrap_blitTriangle_b1_set },
    { "sampleRate", _wrap_blitTriangle_sampleRate_get, _wrap_blitTriangle_sampleRate_set },
    { "triangle", _wrap_blitTriangle_triangle_get, _wrap_blitTriangle_triangle_set },
    {0,0,0}
};
static swig_lua_method swig_blitTriangle_methods[]= {
    { "reset", _wrap_blitTriangle_reset},
    { "setDuty", _wrap_blitTriangle_setDuty},
    { "setFrequency", _wrap_blitTriangle_setFrequency},
    { "setPort", _wrap_blitTriangle_setPort},
    { "Tick", _wrap_blitTriangle_Tick},
    { "__call", _wrap_blitTriangle___call},
    {0,0}
};
static swig_lua_method swig_blitTriangle_meta[] = {
    { "__call", _wrap_blitTriangle___call},
    {0,0}
};

static swig_lua_attribute swig_blitTriangle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_blitTriangle_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_FREQ", Analog::Oscillators::blitTriangle::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("PORT_DUTY", Analog::Oscillators::blitTriangle::PORT_DUTY)},
    {SWIG_LUA_CONSTTAB_INT("PORT_RESET", Analog::Oscillators::blitTriangle::PORT_RESET)},
    {SWIG_LUA_CONSTTAB_INT("PORT_HARMONICS", Analog::Oscillators::blitTriangle::PORT_HARMONICS)},
    {SWIG_LUA_CONSTTAB_INT("PORT_PHASE", Analog::Oscillators::blitTriangle::PORT_PHASE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_blitTriangle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_blitTriangle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_blitTriangle_Sf_SwigStatic = {
    "blitTriangle",
    swig_blitTriangle_Sf_SwigStatic_methods,
    swig_blitTriangle_Sf_SwigStatic_attributes,
    swig_blitTriangle_Sf_SwigStatic_constants,
    swig_blitTriangle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_blitTriangle_bases[] = {0,0};
static const char *swig_blitTriangle_base_names[] = {"OscillatorProcessor *",0};
static swig_lua_class _wrap_class_blitTriangle = { "blitTriangle", "blitTriangle", &SWIGTYPE_p_Analog__Oscillators__blitTriangle,_proxy__wrap_new_blitTriangle, swig_delete_blitTriangle, swig_blitTriangle_methods, swig_blitTriangle_attributes, &swig_blitTriangle_Sf_SwigStatic, swig_blitTriangle_meta, swig_blitTriangle_bases, swig_blitTriangle_base_names };

static int _wrap_DPWSaw_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::freq",1,"Analog::Oscillators::DPWSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::freq",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_freq_set",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::freq",1,"Analog::Oscillators::DPWSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_freq_get",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  result = (DspFloatType) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::fs",1,"Analog::Oscillators::DPWSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_fs_set",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::fs",1,"Analog::Oscillators::DPWSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_fs_get",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  result = (DspFloatType) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_inc_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::inc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::inc",1,"Analog::Oscillators::DPWSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::inc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_inc_set",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->inc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_inc_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::inc",1,"Analog::Oscillators::DPWSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_inc_get",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  result = (DspFloatType) ((arg1)->inc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_phase_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::phase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::phase",1,"Analog::Oscillators::DPWSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::phase",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_phase_set",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->phase = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_phase_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::phase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::phase",1,"Analog::Oscillators::DPWSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_phase_get",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  result = (DspFloatType) ((arg1)->phase);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_lastPhase_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::lastPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::lastPhase",1,"Analog::Oscillators::DPWSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::lastPhase",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_lastPhase_set",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lastPhase = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_lastPhase_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::lastPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::lastPhase",1,"Analog::Oscillators::DPWSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_lastPhase_get",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  result = (DspFloatType) ((arg1)->lastPhase);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_lastValue_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::lastValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::lastValue",1,"Analog::Oscillators::DPWSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::lastValue",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_lastValue_set",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lastValue = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_lastValue_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::lastValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::lastValue",1,"Analog::Oscillators::DPWSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_lastValue_get",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  result = (DspFloatType) ((arg1)->lastValue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_position_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::position",1,"Analog::Oscillators::DPWSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::position",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_position_set",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->position = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_position_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::position",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::position",1,"Analog::Oscillators::DPWSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_position_get",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  result = (DspFloatType) ((arg1)->position);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_scaleFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::scaleFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::scaleFactor",1,"Analog::Oscillators::DPWSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::scaleFactor",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_scaleFactor_set",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->scaleFactor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_scaleFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::scaleFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::scaleFactor",1,"Analog::Oscillators::DPWSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_scaleFactor_get",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  result = (DspFloatType) ((arg1)->scaleFactor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DPWSaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Oscillators::DPWSaw *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::DPWSaw",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::DPWSaw",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Oscillators::DPWSaw *)new Analog::Oscillators::DPWSaw(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__DPWSaw,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DPWSaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::DPWSaw",0,0)
  result = (Analog::Oscillators::DPWSaw *)new Analog::Oscillators::DPWSaw();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__DPWSaw,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DPWSaw(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DPWSaw__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DPWSaw__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DPWSaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::DPWSaw::DPWSaw(DspFloatType)\n"
    "    Analog::Oscillators::DPWSaw::DPWSaw()\n");
  lua_error(L);return 0;
}


static int _wrap_DPWSaw_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::setFrequency",1,"Analog::Oscillators::DPWSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::setFrequency",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_setFrequency",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::setPort",1,"Analog::Oscillators::DPWSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_setPort",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::Tick",1,"Analog::Oscillators::DPWSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_Tick",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::Tick",1,"Analog::Oscillators::DPWSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_Tick",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::Tick",1,"Analog::Oscillators::DPWSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_Tick",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::Tick",1,"Analog::Oscillators::DPWSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_Tick",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWSaw::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWSaw::Tick",1,"Analog::Oscillators::DPWSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWSaw,0))){
    SWIG_fail_ptr("DPWSaw_Tick",1,SWIGTYPE_p_Analog__Oscillators__DPWSaw);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWSaw_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__DPWSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DPWSaw_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__DPWSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DPWSaw_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__DPWSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DPWSaw_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__DPWSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DPWSaw_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__DPWSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DPWSaw_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DPWSaw_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::DPWSaw::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::DPWSaw::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::DPWSaw::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::DPWSaw::Tick(DspFloatType)\n"
    "    Analog::Oscillators::DPWSaw::Tick()\n");
  lua_error(L);return 0;
}


static void swig_delete_DPWSaw(void *obj) {
Analog::Oscillators::DPWSaw *arg1 = (Analog::Oscillators::DPWSaw *) obj;
delete arg1;
}
static int _proxy__wrap_new_DPWSaw(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DPWSaw);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DPWSaw_attributes[] = {
    { "freq", _wrap_DPWSaw_freq_get, _wrap_DPWSaw_freq_set },
    { "fs", _wrap_DPWSaw_fs_get, _wrap_DPWSaw_fs_set },
    { "inc", _wrap_DPWSaw_inc_get, _wrap_DPWSaw_inc_set },
    { "phase", _wrap_DPWSaw_phase_get, _wrap_DPWSaw_phase_set },
    { "lastPhase", _wrap_DPWSaw_lastPhase_get, _wrap_DPWSaw_lastPhase_set },
    { "lastValue", _wrap_DPWSaw_lastValue_get, _wrap_DPWSaw_lastValue_set },
    { "position", _wrap_DPWSaw_position_get, _wrap_DPWSaw_position_set },
    { "scaleFactor", _wrap_DPWSaw_scaleFactor_get, _wrap_DPWSaw_scaleFactor_set },
    {0,0,0}
};
static swig_lua_method swig_DPWSaw_methods[]= {
    { "setFrequency", _wrap_DPWSaw_setFrequency},
    { "setPort", _wrap_DPWSaw_setPort},
    { "Tick", _wrap_DPWSaw_Tick},
    {0,0}
};
static swig_lua_method swig_DPWSaw_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DPWSaw_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DPWSaw_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_FREQ", Analog::Oscillators::DPWSaw::PORT_FREQ)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DPWSaw_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DPWSaw_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DPWSaw_Sf_SwigStatic = {
    "DPWSaw",
    swig_DPWSaw_Sf_SwigStatic_methods,
    swig_DPWSaw_Sf_SwigStatic_attributes,
    swig_DPWSaw_Sf_SwigStatic_constants,
    swig_DPWSaw_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DPWSaw_bases[] = {0,0};
static const char *swig_DPWSaw_base_names[] = {"OscillatorProcessor *",0};
static swig_lua_class _wrap_class_DPWSaw = { "DPWSaw", "DPWSaw", &SWIGTYPE_p_Analog__Oscillators__DPWSaw,_proxy__wrap_new_DPWSaw, swig_delete_DPWSaw, swig_DPWSaw_methods, swig_DPWSaw_attributes, &swig_DPWSaw_Sf_SwigStatic, swig_DPWSaw_meta, swig_DPWSaw_bases, swig_DPWSaw_base_names };

static int _wrap_DPWPulse_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::freq",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::freq",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_freq_set",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::freq",1,"Analog::Oscillators::DPWPulse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_freq_get",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  result = (DspFloatType) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::fs",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_fs_set",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::fs",1,"Analog::Oscillators::DPWPulse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_fs_get",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  result = (DspFloatType) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_inc_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::inc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::inc",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::inc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_inc_set",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->inc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_inc_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::inc",1,"Analog::Oscillators::DPWPulse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_inc_get",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  result = (DspFloatType) ((arg1)->inc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_phase_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::phase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::phase",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::phase",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_phase_set",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->phase = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_phase_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::phase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::phase",1,"Analog::Oscillators::DPWPulse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_phase_get",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  result = (DspFloatType) ((arg1)->phase);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_lastPhase_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::lastPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::lastPhase",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::lastPhase",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_lastPhase_set",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lastPhase = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_lastPhase_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::lastPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::lastPhase",1,"Analog::Oscillators::DPWPulse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_lastPhase_get",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  result = (DspFloatType) ((arg1)->lastPhase);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_lastValueA_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::lastValueA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::lastValueA",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::lastValueA",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_lastValueA_set",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lastValueA = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_lastValueA_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::lastValueA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::lastValueA",1,"Analog::Oscillators::DPWPulse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_lastValueA_get",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  result = (DspFloatType) ((arg1)->lastValueA);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_lastValueB_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::lastValueB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::lastValueB",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::lastValueB",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_lastValueB_set",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lastValueB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_lastValueB_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::lastValueB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::lastValueB",1,"Analog::Oscillators::DPWPulse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_lastValueB_get",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  result = (DspFloatType) ((arg1)->lastValueB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_position_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::position",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::position",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_position_set",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->position = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_position_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::position",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::position",1,"Analog::Oscillators::DPWPulse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_position_get",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  result = (DspFloatType) ((arg1)->position);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_positionA_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::positionA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::positionA",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::positionA",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_positionA_set",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->positionA = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_positionA_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::positionA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::positionA",1,"Analog::Oscillators::DPWPulse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_positionA_get",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  result = (DspFloatType) ((arg1)->positionA);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_positionB_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::positionB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::positionB",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::positionB",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_positionB_set",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->positionB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_positionB_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::positionB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::positionB",1,"Analog::Oscillators::DPWPulse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_positionB_get",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  result = (DspFloatType) ((arg1)->positionB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_scaleFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::scaleFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::scaleFactor",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::scaleFactor",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_scaleFactor_set",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->scaleFactor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_scaleFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::scaleFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::scaleFactor",1,"Analog::Oscillators::DPWPulse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_scaleFactor_get",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  result = (DspFloatType) ((arg1)->scaleFactor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_invSampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::invSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::invSampleRate",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::invSampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_invSampleRate_set",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->invSampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_invSampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::invSampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::invSampleRate",1,"Analog::Oscillators::DPWPulse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_invSampleRate_get",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  result = (DspFloatType) ((arg1)->invSampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DPWPulse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Oscillators::DPWPulse *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::DPWPulse",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::DPWPulse",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Oscillators::DPWPulse *)new Analog::Oscillators::DPWPulse(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__DPWPulse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DPWPulse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::DPWPulse",0,0)
  result = (Analog::Oscillators::DPWPulse *)new Analog::Oscillators::DPWPulse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__DPWPulse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DPWPulse(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DPWPulse__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DPWPulse__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DPWPulse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::DPWPulse::DPWPulse(DspFloatType)\n"
    "    Analog::Oscillators::DPWPulse::DPWPulse()\n");
  lua_error(L);return 0;
}


static int _wrap_DPWPulse_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::setFrequency",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::setFrequency",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_setFrequency",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_setDuty(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::setDuty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::setDuty",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::setDuty",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_setDuty",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setDuty(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::setPort",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_setPort",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::Tick",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_Tick",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::Tick",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_Tick",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::Tick",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_Tick",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::Tick",1,"Analog::Oscillators::DPWPulse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_Tick",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWPulse::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWPulse::Tick",1,"Analog::Oscillators::DPWPulse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWPulse,0))){
    SWIG_fail_ptr("DPWPulse_Tick",1,SWIGTYPE_p_Analog__Oscillators__DPWPulse);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWPulse_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__DPWPulse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DPWPulse_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__DPWPulse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DPWPulse_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__DPWPulse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DPWPulse_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__DPWPulse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DPWPulse_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__DPWPulse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DPWPulse_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DPWPulse_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::DPWPulse::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::DPWPulse::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::DPWPulse::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::DPWPulse::Tick(DspFloatType)\n"
    "    Analog::Oscillators::DPWPulse::Tick()\n");
  lua_error(L);return 0;
}


static void swig_delete_DPWPulse(void *obj) {
Analog::Oscillators::DPWPulse *arg1 = (Analog::Oscillators::DPWPulse *) obj;
delete arg1;
}
static int _proxy__wrap_new_DPWPulse(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DPWPulse);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DPWPulse_attributes[] = {
    { "freq", _wrap_DPWPulse_freq_get, _wrap_DPWPulse_freq_set },
    { "fs", _wrap_DPWPulse_fs_get, _wrap_DPWPulse_fs_set },
    { "inc", _wrap_DPWPulse_inc_get, _wrap_DPWPulse_inc_set },
    { "phase", _wrap_DPWPulse_phase_get, _wrap_DPWPulse_phase_set },
    { "lastPhase", _wrap_DPWPulse_lastPhase_get, _wrap_DPWPulse_lastPhase_set },
    { "lastValueA", _wrap_DPWPulse_lastValueA_get, _wrap_DPWPulse_lastValueA_set },
    { "lastValueB", _wrap_DPWPulse_lastValueB_get, _wrap_DPWPulse_lastValueB_set },
    { "position", _wrap_DPWPulse_position_get, _wrap_DPWPulse_position_set },
    { "positionA", _wrap_DPWPulse_positionA_get, _wrap_DPWPulse_positionA_set },
    { "positionB", _wrap_DPWPulse_positionB_get, _wrap_DPWPulse_positionB_set },
    { "scaleFactor", _wrap_DPWPulse_scaleFactor_get, _wrap_DPWPulse_scaleFactor_set },
    { "invSampleRate", _wrap_DPWPulse_invSampleRate_get, _wrap_DPWPulse_invSampleRate_set },
    {0,0,0}
};
static swig_lua_method swig_DPWPulse_methods[]= {
    { "setFrequency", _wrap_DPWPulse_setFrequency},
    { "setDuty", _wrap_DPWPulse_setDuty},
    { "setPort", _wrap_DPWPulse_setPort},
    { "Tick", _wrap_DPWPulse_Tick},
    {0,0}
};
static swig_lua_method swig_DPWPulse_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DPWPulse_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DPWPulse_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_FREQ", Analog::Oscillators::DPWPulse::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("PORT_DUTY", Analog::Oscillators::DPWPulse::PORT_DUTY)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DPWPulse_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DPWPulse_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DPWPulse_Sf_SwigStatic = {
    "DPWPulse",
    swig_DPWPulse_Sf_SwigStatic_methods,
    swig_DPWPulse_Sf_SwigStatic_attributes,
    swig_DPWPulse_Sf_SwigStatic_constants,
    swig_DPWPulse_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DPWPulse_bases[] = {0};
static const char *swig_DPWPulse_base_names[] = {0};
static swig_lua_class _wrap_class_DPWPulse = { "DPWPulse", "DPWPulse", &SWIGTYPE_p_Analog__Oscillators__DPWPulse,_proxy__wrap_new_DPWPulse, swig_delete_DPWPulse, swig_DPWPulse_methods, swig_DPWPulse_attributes, &swig_DPWPulse_Sf_SwigStatic, swig_DPWPulse_meta, swig_DPWPulse_bases, swig_DPWPulse_base_names };

static int _wrap_DPWTriangle_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::freq",1,"Analog::Oscillators::DPWTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::freq",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_freq_set",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::freq",1,"Analog::Oscillators::DPWTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_freq_get",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  result = (DspFloatType) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::fs",1,"Analog::Oscillators::DPWTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_fs_set",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::fs",1,"Analog::Oscillators::DPWTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_fs_get",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  result = (DspFloatType) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_inc_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::inc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::inc",1,"Analog::Oscillators::DPWTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::inc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_inc_set",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->inc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_inc_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::inc",1,"Analog::Oscillators::DPWTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_inc_get",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  result = (DspFloatType) ((arg1)->inc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_phase_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::phase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::phase",1,"Analog::Oscillators::DPWTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::phase",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_phase_set",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->phase = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_phase_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::phase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::phase",1,"Analog::Oscillators::DPWTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_phase_get",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  result = (DspFloatType) ((arg1)->phase);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_lastPhase_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::lastPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::lastPhase",1,"Analog::Oscillators::DPWTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::lastPhase",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_lastPhase_set",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lastPhase = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_lastPhase_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::lastPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::lastPhase",1,"Analog::Oscillators::DPWTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_lastPhase_get",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  result = (DspFloatType) ((arg1)->lastPhase);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_lastValue_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::lastValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::lastValue",1,"Analog::Oscillators::DPWTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::lastValue",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_lastValue_set",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lastValue = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_lastValue_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::lastValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::lastValue",1,"Analog::Oscillators::DPWTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_lastValue_get",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  result = (DspFloatType) ((arg1)->lastValue);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_position_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::position",1,"Analog::Oscillators::DPWTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::position",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_position_set",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->position = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_position_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::position",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::position",1,"Analog::Oscillators::DPWTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_position_get",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  result = (DspFloatType) ((arg1)->position);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_scaleFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::scaleFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::scaleFactor",1,"Analog::Oscillators::DPWTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::scaleFactor",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_scaleFactor_set",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->scaleFactor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_scaleFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::scaleFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::scaleFactor",1,"Analog::Oscillators::DPWTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_scaleFactor_get",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  result = (DspFloatType) ((arg1)->scaleFactor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_invSampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::invSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::invSampleRate",1,"Analog::Oscillators::DPWTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::invSampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_invSampleRate_set",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->invSampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_invSampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::invSampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::invSampleRate",1,"Analog::Oscillators::DPWTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_invSampleRate_get",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  result = (DspFloatType) ((arg1)->invSampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DPWTriangle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Oscillators::DPWTriangle *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::DPWTriangle",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::DPWTriangle",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Oscillators::DPWTriangle *)new Analog::Oscillators::DPWTriangle(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DPWTriangle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::DPWTriangle",0,0)
  result = (Analog::Oscillators::DPWTriangle *)new Analog::Oscillators::DPWTriangle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DPWTriangle(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DPWTriangle__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DPWTriangle__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DPWTriangle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::DPWTriangle::DPWTriangle(DspFloatType)\n"
    "    Analog::Oscillators::DPWTriangle::DPWTriangle()\n");
  lua_error(L);return 0;
}


static int _wrap_DPWTriangle_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::setFrequency",1,"Analog::Oscillators::DPWTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::setFrequency",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_setFrequency",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_setDuty(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::setDuty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::setDuty",1,"Analog::Oscillators::DPWTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::setDuty",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_setDuty",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setDuty(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::setPort",1,"Analog::Oscillators::DPWTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_setPort",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::Tick",1,"Analog::Oscillators::DPWTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_Tick",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::Tick",1,"Analog::Oscillators::DPWTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_Tick",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::Tick",1,"Analog::Oscillators::DPWTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_Tick",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::Tick",1,"Analog::Oscillators::DPWTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_Tick",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::DPWTriangle::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::DPWTriangle::Tick",1,"Analog::Oscillators::DPWTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle,0))){
    SWIG_fail_ptr("DPWTriangle_Tick",1,SWIGTYPE_p_Analog__Oscillators__DPWTriangle);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DPWTriangle_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__DPWTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DPWTriangle_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__DPWTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DPWTriangle_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__DPWTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DPWTriangle_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__DPWTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DPWTriangle_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__DPWTriangle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DPWTriangle_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DPWTriangle_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::DPWTriangle::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::DPWTriangle::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::DPWTriangle::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::DPWTriangle::Tick(DspFloatType)\n"
    "    Analog::Oscillators::DPWTriangle::Tick()\n");
  lua_error(L);return 0;
}


static void swig_delete_DPWTriangle(void *obj) {
Analog::Oscillators::DPWTriangle *arg1 = (Analog::Oscillators::DPWTriangle *) obj;
delete arg1;
}
static int _proxy__wrap_new_DPWTriangle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DPWTriangle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DPWTriangle_attributes[] = {
    { "freq", _wrap_DPWTriangle_freq_get, _wrap_DPWTriangle_freq_set },
    { "fs", _wrap_DPWTriangle_fs_get, _wrap_DPWTriangle_fs_set },
    { "inc", _wrap_DPWTriangle_inc_get, _wrap_DPWTriangle_inc_set },
    { "phase", _wrap_DPWTriangle_phase_get, _wrap_DPWTriangle_phase_set },
    { "lastPhase", _wrap_DPWTriangle_lastPhase_get, _wrap_DPWTriangle_lastPhase_set },
    { "lastValue", _wrap_DPWTriangle_lastValue_get, _wrap_DPWTriangle_lastValue_set },
    { "position", _wrap_DPWTriangle_position_get, _wrap_DPWTriangle_position_set },
    { "scaleFactor", _wrap_DPWTriangle_scaleFactor_get, _wrap_DPWTriangle_scaleFactor_set },
    { "invSampleRate", _wrap_DPWTriangle_invSampleRate_get, _wrap_DPWTriangle_invSampleRate_set },
    {0,0,0}
};
static swig_lua_method swig_DPWTriangle_methods[]= {
    { "setFrequency", _wrap_DPWTriangle_setFrequency},
    { "setDuty", _wrap_DPWTriangle_setDuty},
    { "setPort", _wrap_DPWTriangle_setPort},
    { "Tick", _wrap_DPWTriangle_Tick},
    {0,0}
};
static swig_lua_method swig_DPWTriangle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DPWTriangle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DPWTriangle_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_FREQ", Analog::Oscillators::DPWTriangle::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("PORT_DUTY", Analog::Oscillators::DPWTriangle::PORT_DUTY)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DPWTriangle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DPWTriangle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DPWTriangle_Sf_SwigStatic = {
    "DPWTriangle",
    swig_DPWTriangle_Sf_SwigStatic_methods,
    swig_DPWTriangle_Sf_SwigStatic_attributes,
    swig_DPWTriangle_Sf_SwigStatic_constants,
    swig_DPWTriangle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DPWTriangle_bases[] = {0};
static const char *swig_DPWTriangle_base_names[] = {0};
static swig_lua_class _wrap_class_DPWTriangle = { "DPWTriangle", "DPWTriangle", &SWIGTYPE_p_Analog__Oscillators__DPWTriangle,_proxy__wrap_new_DPWTriangle, swig_delete_DPWTriangle, swig_DPWTriangle_methods, swig_DPWTriangle_attributes, &swig_DPWTriangle_Sf_SwigStatic, swig_DPWTriangle_meta, swig_DPWTriangle_bases, swig_DPWTriangle_base_names };

static int _wrap_PolyBLEP_waveform_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Waveform arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::waveform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::waveform",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::waveform",2,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Waveform");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_waveform_set",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Waveform)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->waveform = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_waveform_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Waveform result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::waveform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::waveform",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_waveform_get",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Waveform) ((arg1)->waveform);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::sampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::sampleRate",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::sampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_sampleRate_set",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::sampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::sampleRate",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_sampleRate_get",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType) ((arg1)->sampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_freqInSecondsPerSample_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::freqInSecondsPerSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::freqInSecondsPerSample",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::freqInSecondsPerSample",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_freqInSecondsPerSample_set",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->freqInSecondsPerSample = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_freqInSecondsPerSample_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::freqInSecondsPerSample",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::freqInSecondsPerSample",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_freqInSecondsPerSample_get",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType) ((arg1)->freqInSecondsPerSample);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_amplitude_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::amplitude",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::amplitude",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::amplitude",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_amplitude_set",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->amplitude = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_amplitude_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::amplitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::amplitude",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_amplitude_get",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType) ((arg1)->amplitude);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_pulseWidth_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::pulseWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::pulseWidth",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::pulseWidth",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_pulseWidth_set",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->pulseWidth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_pulseWidth_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::pulseWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::pulseWidth",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_pulseWidth_get",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType) ((arg1)->pulseWidth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_t_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::t",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::t",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::t",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_t_set",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->t = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_t_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::t",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_t_get",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType) ((arg1)->t);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PolyBLEP__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Waveform arg2 ;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::PolyBLEP",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::PolyBLEP",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::PolyBLEP",2,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Waveform");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Waveform)(int)lua_tonumber(L, 2);
  result = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *)new Analog::Oscillators::PolyBLEPOsc::PolyBLEP(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PolyBLEP__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *result = 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::PolyBLEP",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::PolyBLEP",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *)new Analog::Oscillators::PolyBLEPOsc::PolyBLEP(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PolyBLEP(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_PolyBLEP__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_PolyBLEP__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PolyBLEP'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::PolyBLEPOsc::PolyBLEP::PolyBLEP(DspFloatType,Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Waveform)\n"
    "    Analog::Oscillators::PolyBLEPOsc::PolyBLEP::PolyBLEP(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_PolyBLEP_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setFrequency",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setFrequency",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_setFrequency",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_setSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setSampleRate",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setSampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_setSampleRate",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setSampleRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_setWaveform(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Waveform arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setWaveform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setWaveform",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setWaveform",2,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Waveform");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_setWaveform",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Waveform)(int)lua_tonumber(L, 2);
  (arg1)->setWaveform(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_setPhase(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setPhase",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setPhase",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_setPhase",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setPhase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_getPhase(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::getPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::getPhase",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_getPhase",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->getPhase();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_setPulseWidth(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setPulseWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setPulseWidth",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setPulseWidth",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_setPulseWidth",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setPulseWidth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setPort",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_setPort",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::get",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_get",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->get();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_Tick",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_Tick",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_Tick",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_Tick",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_Tick",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PolyBLEP_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PolyBLEP_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PolyBLEP_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_PolyBLEP_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_PolyBLEP_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PolyBLEP_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick(DspFloatType)\n"
    "    Analog::Oscillators::PolyBLEPOsc::PolyBLEP::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_PolyBLEP_inc(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::inc",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_inc",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  (arg1)->inc();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_getAndInc(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::getAndInc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::getAndInc",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_getAndInc",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->getAndInc();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_getFreqInHz(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::getFreqInHz",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::getFreqInHz",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_getFreqInHz",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->getFreqInHz();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_sync(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::sync",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::sync",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::sync",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_sync",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->sync(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_setdt(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setdt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setdt",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::setdt",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_setdt",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setdt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_sin(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::sin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::sin",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_sin",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->sin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_cos(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::cos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::cos",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_cos",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->cos();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_half(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::half",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::half",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_half",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->half();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_full(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::full",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::full",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_full",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->full();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_tri(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::tri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::tri",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_tri",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->tri();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_tri2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::tri2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::tri2",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_tri2",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->tri2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_trip(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::trip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::trip",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_trip",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->trip();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_trap(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::trap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::trap",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_trap",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->trap();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_trap2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::trap2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::trap2",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_trap2",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->trap2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_sqr(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::sqr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::sqr",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_sqr",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)((Analog::Oscillators::PolyBLEPOsc::PolyBLEP const *)arg1)->sqr();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_sqr2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::sqr2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::sqr2",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_sqr2",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->sqr2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_rect(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::rect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::rect",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_rect",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->rect();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_saw(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::saw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::saw",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_saw",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->saw();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyBLEP_ramp(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::ramp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Oscillators::PolyBLEPOsc::PolyBLEP::ramp",1,"Analog::Oscillators::PolyBLEPOsc::PolyBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,0))){
    SWIG_fail_ptr("PolyBLEP_ramp",1,SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP);
  }
  
  result = (DspFloatType)(arg1)->ramp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PolyBLEP(void *obj) {
Analog::Oscillators::PolyBLEPOsc::PolyBLEP *arg1 = (Analog::Oscillators::PolyBLEPOsc::PolyBLEP *) obj;
delete arg1;
}
static int _proxy__wrap_new_PolyBLEP(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PolyBLEP);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PolyBLEP_attributes[] = {
    { "waveform", _wrap_PolyBLEP_waveform_get, _wrap_PolyBLEP_waveform_set },
    { "sampleRate", _wrap_PolyBLEP_sampleRate_get, _wrap_PolyBLEP_sampleRate_set },
    { "freqInSecondsPerSample", _wrap_PolyBLEP_freqInSecondsPerSample_get, _wrap_PolyBLEP_freqInSecondsPerSample_set },
    { "amplitude", _wrap_PolyBLEP_amplitude_get, _wrap_PolyBLEP_amplitude_set },
    { "pulseWidth", _wrap_PolyBLEP_pulseWidth_get, _wrap_PolyBLEP_pulseWidth_set },
    { "t", _wrap_PolyBLEP_t_get, _wrap_PolyBLEP_t_set },
    {0,0,0}
};
static swig_lua_method swig_PolyBLEP_methods[]= {
    { "setFrequency", _wrap_PolyBLEP_setFrequency},
    { "setSampleRate", _wrap_PolyBLEP_setSampleRate},
    { "setWaveform", _wrap_PolyBLEP_setWaveform},
    { "setPhase", _wrap_PolyBLEP_setPhase},
    { "getPhase", _wrap_PolyBLEP_getPhase},
    { "setPulseWidth", _wrap_PolyBLEP_setPulseWidth},
    { "setPort", _wrap_PolyBLEP_setPort},
    { "get", _wrap_PolyBLEP_get},
    { "Tick", _wrap_PolyBLEP_Tick},
    { "inc", _wrap_PolyBLEP_inc},
    { "getAndInc", _wrap_PolyBLEP_getAndInc},
    { "getFreqInHz", _wrap_PolyBLEP_getFreqInHz},
    { "sync", _wrap_PolyBLEP_sync},
    { "setdt", _wrap_PolyBLEP_setdt},
    { "sin", _wrap_PolyBLEP_sin},
    { "cos", _wrap_PolyBLEP_cos},
    { "half", _wrap_PolyBLEP_half},
    { "full", _wrap_PolyBLEP_full},
    { "tri", _wrap_PolyBLEP_tri},
    { "tri2", _wrap_PolyBLEP_tri2},
    { "trip", _wrap_PolyBLEP_trip},
    { "trap", _wrap_PolyBLEP_trap},
    { "trap2", _wrap_PolyBLEP_trap2},
    { "sqr", _wrap_PolyBLEP_sqr},
    { "sqr2", _wrap_PolyBLEP_sqr2},
    { "rect", _wrap_PolyBLEP_rect},
    { "saw", _wrap_PolyBLEP_saw},
    { "ramp", _wrap_PolyBLEP_ramp},
    {0,0}
};
static swig_lua_method swig_PolyBLEP_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PolyBLEP_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PolyBLEP_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("SINE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::SINE)},
    {SWIG_LUA_CONSTTAB_INT("COSINE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::COSINE)},
    {SWIG_LUA_CONSTTAB_INT("TRIANGLE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::TRIANGLE)},
    {SWIG_LUA_CONSTTAB_INT("SQUARE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::SQUARE)},
    {SWIG_LUA_CONSTTAB_INT("RECTANGLE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::RECTANGLE)},
    {SWIG_LUA_CONSTTAB_INT("SAWTOOTH", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::SAWTOOTH)},
    {SWIG_LUA_CONSTTAB_INT("RAMP", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::RAMP)},
    {SWIG_LUA_CONSTTAB_INT("MODIFIED_TRIANGLE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::MODIFIED_TRIANGLE)},
    {SWIG_LUA_CONSTTAB_INT("MODIFIED_SQUARE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::MODIFIED_SQUARE)},
    {SWIG_LUA_CONSTTAB_INT("HALF_WAVE_RECTIFIED_SINE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::HALF_WAVE_RECTIFIED_SINE)},
    {SWIG_LUA_CONSTTAB_INT("FULL_WAVE_RECTIFIED_SINE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::FULL_WAVE_RECTIFIED_SINE)},
    {SWIG_LUA_CONSTTAB_INT("TRIANGULAR_PULSE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::TRIANGULAR_PULSE)},
    {SWIG_LUA_CONSTTAB_INT("TRAPEZOID_FIXED", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::TRAPEZOID_FIXED)},
    {SWIG_LUA_CONSTTAB_INT("TRAPEZOID_VARIABLE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::TRAPEZOID_VARIABLE)},
    {SWIG_LUA_CONSTTAB_INT("PORT_FREQ", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("PORT_WAVEFORM", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::PORT_WAVEFORM)},
    {SWIG_LUA_CONSTTAB_INT("PORT_PHASE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::PORT_PHASE)},
    {SWIG_LUA_CONSTTAB_INT("PORT_PULSEWIDTH", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::PORT_PULSEWIDTH)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PolyBLEP_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PolyBLEP_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PolyBLEP_Sf_SwigStatic = {
    "PolyBLEP",
    swig_PolyBLEP_Sf_SwigStatic_methods,
    swig_PolyBLEP_Sf_SwigStatic_attributes,
    swig_PolyBLEP_Sf_SwigStatic_constants,
    swig_PolyBLEP_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PolyBLEP_bases[] = {0};
static const char *swig_PolyBLEP_base_names[] = {0};
static swig_lua_class _wrap_class_PolyBLEP = { "PolyBLEP", "PolyBLEP", &SWIGTYPE_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,_proxy__wrap_new_PolyBLEP, swig_delete_PolyBLEP, swig_PolyBLEP_methods, swig_PolyBLEP_attributes, &swig_PolyBLEP_Sf_SwigStatic, swig_PolyBLEP_meta, swig_PolyBLEP_bases, swig_PolyBLEP_base_names };

static int _wrap_minBlep_Table_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Analog::minBLEP::minBlep_Table",0,0)
  result = (DspFloatType *)(DspFloatType *)Analog::minBLEP::minBlep_Table;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_f_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::f",1,"Analog::minBLEP::osc_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::f",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_f_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->f = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_f_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::f",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::f",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_f_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (DspFloatType) ((arg1)->f);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_p_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::p",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::p",1,"Analog::minBLEP::osc_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::p",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_p_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->p = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_p_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::p",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_p_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (DspFloatType) ((arg1)->p);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::v",1,"Analog::minBLEP::osc_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::v",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_v_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->v = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::v",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_v_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (DspFloatType) ((arg1)->v);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_triangle_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::triangle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::triangle",1,"Analog::minBLEP::osc_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::triangle",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_triangle_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->triangle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_triangle_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::triangle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::triangle",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_triangle_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (DspFloatType) ((arg1)->triangle);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_saw_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::saw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::saw",1,"Analog::minBLEP::osc_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::saw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_saw_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->saw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_saw_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::saw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::saw",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_saw_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (DspFloatType) ((arg1)->saw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_rsaw_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::rsaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::rsaw",1,"Analog::minBLEP::osc_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::rsaw",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_rsaw_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->rsaw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_rsaw_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::rsaw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::rsaw",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_rsaw_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (DspFloatType) ((arg1)->rsaw);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_square_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::square",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::square",1,"Analog::minBLEP::osc_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::square",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_square_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->square = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_square_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::square",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::square",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_square_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (DspFloatType) ((arg1)->square);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_sine_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::sine",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::sine",1,"Analog::minBLEP::osc_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::sine",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_sine_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sine = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_sine_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::sine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::sine",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_sine_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (DspFloatType) ((arg1)->sine);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_bSync_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::bSync",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::bSync",1,"Analog::minBLEP::osc_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::bSync",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_bSync_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->bSync = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_bSync_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::bSync",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::bSync",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_bSync_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (bool) ((arg1)->bSync);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_fSync_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::fSync",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::fSync",1,"Analog::minBLEP::osc_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::fSync",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_fSync_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fSync = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_fSync_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::fSync",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::fSync",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_fSync_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (DspFloatType) ((arg1)->fSync);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_fPWM_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::fPWM",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::fPWM",1,"Analog::minBLEP::osc_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::fPWM",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_fPWM_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fPWM = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_fPWM_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::fPWM",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::fPWM",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_fPWM_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (DspFloatType) ((arg1)->fPWM);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_s_rate_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::s_rate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::s_rate",1,"Analog::minBLEP::osc_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::s_rate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_s_rate_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->s_rate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_s_rate_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::s_rate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::s_rate",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_s_rate_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (DspFloatType) ((arg1)->s_rate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_type_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  Analog::minBLEP::oscwave_t arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::type",1,"Analog::minBLEP::osc_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::type",2,"Analog::minBLEP::oscwave_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_type_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg2 = (Analog::minBLEP::oscwave_t)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_type_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  Analog::minBLEP::oscwave_t result;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::type",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_type_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (Analog::minBLEP::oscwave_t) ((arg1)->type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_buffer_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::buffer",1,"Analog::minBLEP::osc_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::buffer",2,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_buffer_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("osc_t_buffer_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->buffer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_buffer_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::buffer",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_buffer_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (DspFloatType *) ((arg1)->buffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_cBuffer_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::cBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::cBuffer",1,"Analog::minBLEP::osc_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::cBuffer",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_cBuffer_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->cBuffer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_cBuffer_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  int result;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::cBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::cBuffer",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_cBuffer_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (int) ((arg1)->cBuffer);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_iBuffer_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::iBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::iBuffer",1,"Analog::minBLEP::osc_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::iBuffer",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_iBuffer_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->iBuffer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_iBuffer_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  int result;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::iBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::iBuffer",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_iBuffer_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (int) ((arg1)->iBuffer);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_nInit_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::nInit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::nInit",1,"Analog::minBLEP::osc_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::osc_t::nInit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_nInit_set",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nInit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_osc_t_nInit_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) 0 ;
  int result;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::nInit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::osc_t::nInit",1,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("osc_t_nInit_get",1,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (int) ((arg1)->nInit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_osc_t(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::osc_t *result = 0 ;
  
  SWIG_check_num_args("Analog::minBLEP::osc_t::osc_t",0,0)
  result = (Analog::minBLEP::osc_t *)new Analog::minBLEP::osc_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__minBLEP__osc_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_osc_t(void *obj) {
Analog::minBLEP::osc_t *arg1 = (Analog::minBLEP::osc_t *) obj;
delete arg1;
}
static int _proxy__wrap_new_osc_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_osc_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_osc_t_attributes[] = {
    { "f", _wrap_osc_t_f_get, _wrap_osc_t_f_set },
    { "p", _wrap_osc_t_p_get, _wrap_osc_t_p_set },
    { "v", _wrap_osc_t_v_get, _wrap_osc_t_v_set },
    { "triangle", _wrap_osc_t_triangle_get, _wrap_osc_t_triangle_set },
    { "saw", _wrap_osc_t_saw_get, _wrap_osc_t_saw_set },
    { "rsaw", _wrap_osc_t_rsaw_get, _wrap_osc_t_rsaw_set },
    { "square", _wrap_osc_t_square_get, _wrap_osc_t_square_set },
    { "sine", _wrap_osc_t_sine_get, _wrap_osc_t_sine_set },
    { "bSync", _wrap_osc_t_bSync_get, _wrap_osc_t_bSync_set },
    { "fSync", _wrap_osc_t_fSync_get, _wrap_osc_t_fSync_set },
    { "fPWM", _wrap_osc_t_fPWM_get, _wrap_osc_t_fPWM_set },
    { "s_rate", _wrap_osc_t_s_rate_get, _wrap_osc_t_s_rate_set },
    { "type", _wrap_osc_t_type_get, _wrap_osc_t_type_set },
    { "buffer", _wrap_osc_t_buffer_get, _wrap_osc_t_buffer_set },
    { "cBuffer", _wrap_osc_t_cBuffer_get, _wrap_osc_t_cBuffer_set },
    { "iBuffer", _wrap_osc_t_iBuffer_get, _wrap_osc_t_iBuffer_set },
    { "nInit", _wrap_osc_t_nInit_get, _wrap_osc_t_nInit_set },
    {0,0,0}
};
static swig_lua_method swig_osc_t_methods[]= {
    {0,0}
};
static swig_lua_method swig_osc_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_osc_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_osc_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_osc_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_osc_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_osc_t_Sf_SwigStatic = {
    "osc_t",
    swig_osc_t_Sf_SwigStatic_methods,
    swig_osc_t_Sf_SwigStatic_attributes,
    swig_osc_t_Sf_SwigStatic_constants,
    swig_osc_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_osc_t_bases[] = {0};
static const char *swig_osc_t_base_names[] = {0};
static swig_lua_class _wrap_class_osc_t = { "osc_t", "osc_t", &SWIGTYPE_p_Analog__minBLEP__osc_t,_proxy__wrap_new_osc_t, swig_delete_osc_t, swig_osc_t_methods, swig_osc_t_attributes, &swig_osc_t_Sf_SwigStatic, swig_osc_t_meta, swig_osc_t_bases, swig_osc_t_base_names };

static int _wrap_new_minBLEP(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::minBLEP::minBLEP *result = 0 ;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::minBLEP",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::minBLEP",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::minBLEP::minBLEP *)new Analog::minBLEP::minBLEP(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__minBLEP__minBLEP,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::setFrequency",1,"Analog::minBLEP::minBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::setFrequency",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_setFrequency",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_setWaveform(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  Analog::minBLEP::oscwave_t arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::setWaveform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::setWaveform",1,"Analog::minBLEP::minBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::setWaveform",2,"Analog::minBLEP::oscwave_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_setWaveform",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  arg2 = (Analog::minBLEP::oscwave_t)(int)lua_tonumber(L, 2);
  (arg1)->setWaveform(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::Tick",1,"Analog::minBLEP::minBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::minBLEP::minBLEP::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::minBLEP::minBLEP::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::minBLEP::minBLEP::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_Tick",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::Tick",1,"Analog::minBLEP::minBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::minBLEP::minBLEP::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::minBLEP::minBLEP::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_Tick",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::Tick",1,"Analog::minBLEP::minBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::minBLEP::minBLEP::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_Tick",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::Tick",1,"Analog::minBLEP::minBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_Tick",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::Tick",1,"Analog::minBLEP::minBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_Tick",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__minBLEP__minBLEP, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_minBLEP_Tick__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__minBLEP__minBLEP, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_minBLEP_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__minBLEP__minBLEP, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_minBLEP_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__minBLEP__minBLEP, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_minBLEP_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__minBLEP__minBLEP, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_minBLEP_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'minBLEP_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::minBLEP::minBLEP::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::minBLEP::minBLEP::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::minBLEP::minBLEP::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::minBLEP::minBLEP::Tick(DspFloatType)\n"
    "    Analog::minBLEP::minBLEP::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_minBLEP_syncSlave(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::syncSlave",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::syncSlave",1,"Analog::minBLEP::minBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_syncSlave",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  (arg1)->syncSlave();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_setSlave(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  Analog::minBLEP::osc_t *arg2 = (Analog::minBLEP::osc_t *) 0 ;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::setSlave",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::setSlave",1,"Analog::minBLEP::minBLEP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::setSlave",2,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_setSlave",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("minBLEP_setSlave",2,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  (arg1)->setSlave(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_blepInit(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::blepInit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::blepInit",1,"Analog::minBLEP::minBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::blepInit",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_blepInit",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->blepInit(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_block_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  FX::Filters::OnePole arg2 ;
  FX::Filters::OnePole *argp2 ;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::block",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::block",1,"Analog::minBLEP::minBLEP *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::block",2,"FX::Filters::OnePole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_block_set",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_FX__Filters__OnePole,0))){
    SWIG_fail_ptr("minBLEP_block_set",2,SWIGTYPE_p_FX__Filters__OnePole);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->block = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_block_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  FX::Filters::OnePole result;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::block",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::block",1,"Analog::minBLEP::minBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_block_get",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  result =  ((arg1)->block);
  {
    FX::Filters::OnePole * resultptr = new FX::Filters::OnePole((const FX::Filters::OnePole &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FX__Filters__OnePole,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::fc",1,"Analog::minBLEP::minBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_fc_set",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::fc",1,"Analog::minBLEP::minBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_fc_get",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::sr",1,"Analog::minBLEP::minBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_sr_set",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::sr",1,"Analog::minBLEP::minBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_sr_get",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_lpO_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  Analog::minBLEP::osc_t *arg2 = (Analog::minBLEP::osc_t *) 0 ;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::lpO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::lpO",1,"Analog::minBLEP::minBLEP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::lpO",2,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_lpO_set",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__minBLEP__osc_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("minBLEP_lpO_set",2,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  if (arg1) (arg1)->lpO = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_lpO_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  Analog::minBLEP::osc_t *result = 0 ;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::lpO",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::lpO",1,"Analog::minBLEP::minBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_lpO_get",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  result = (Analog::minBLEP::osc_t *) ((arg1)->lpO);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__minBLEP__osc_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_lpS_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  Analog::minBLEP::osc_t *arg2 = (Analog::minBLEP::osc_t *) 0 ;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::lpS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::lpS",1,"Analog::minBLEP::minBLEP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::lpS",2,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_lpS_set",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__minBLEP__osc_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("minBLEP_lpS_set",2,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  if (arg1) (arg1)->lpS = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_lpS_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  Analog::minBLEP::osc_t *result = 0 ;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::lpS",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::lpS",1,"Analog::minBLEP::minBLEP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_lpS_get",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  result = (Analog::minBLEP::osc_t *) ((arg1)->lpS);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__minBLEP__osc_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_osc_Play(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  Analog::minBLEP::osc_t *arg2 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::osc_Play",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::osc_Play",1,"Analog::minBLEP::minBLEP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::osc_Play",2,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_osc_Play",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("minBLEP_osc_Play",2,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  result = (DspFloatType)(arg1)->osc_Play(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_osc_AddBLEP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  Analog::minBLEP::osc_t *arg2 = (Analog::minBLEP::osc_t *) 0 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::osc_AddBLEP",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::osc_AddBLEP",1,"Analog::minBLEP::minBLEP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::osc_AddBLEP",2,"Analog::minBLEP::osc_t *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::minBLEP::minBLEP::osc_AddBLEP",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::minBLEP::minBLEP::osc_AddBLEP",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_osc_AddBLEP",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("minBLEP_osc_AddBLEP",2,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  (arg1)->osc_AddBLEP(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_osc_Create(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  DspFloatType arg2 ;
  Analog::minBLEP::osc_t *result = 0 ;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::osc_Create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::osc_Create",1,"Analog::minBLEP::minBLEP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::osc_Create",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_osc_Create",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::minBLEP::osc_t *)(arg1)->osc_Create(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__minBLEP__osc_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minBLEP_osc_Free(lua_State* L) {
  int SWIG_arg = 0;
  Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) 0 ;
  Analog::minBLEP::osc_t *arg2 = (Analog::minBLEP::osc_t *) 0 ;
  
  SWIG_check_num_args("Analog::minBLEP::minBLEP::osc_Free",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::minBLEP::minBLEP::osc_Free",1,"Analog::minBLEP::minBLEP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::minBLEP::minBLEP::osc_Free",2,"Analog::minBLEP::osc_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__minBLEP__minBLEP,0))){
    SWIG_fail_ptr("minBLEP_osc_Free",1,SWIGTYPE_p_Analog__minBLEP__minBLEP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__minBLEP__osc_t,0))){
    SWIG_fail_ptr("minBLEP_osc_Free",2,SWIGTYPE_p_Analog__minBLEP__osc_t);
  }
  
  (arg1)->osc_Free(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_minBLEP(void *obj) {
Analog::minBLEP::minBLEP *arg1 = (Analog::minBLEP::minBLEP *) obj;
delete arg1;
}
static int _proxy__wrap_new_minBLEP(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_minBLEP);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_minBLEP_attributes[] = {
    { "block", _wrap_minBLEP_block_get, _wrap_minBLEP_block_set },
    { "fc", _wrap_minBLEP_fc_get, _wrap_minBLEP_fc_set },
    { "sr", _wrap_minBLEP_sr_get, _wrap_minBLEP_sr_set },
    { "lpO", _wrap_minBLEP_lpO_get, _wrap_minBLEP_lpO_set },
    { "lpS", _wrap_minBLEP_lpS_get, _wrap_minBLEP_lpS_set },
    {0,0,0}
};
static swig_lua_method swig_minBLEP_methods[]= {
    { "setFrequency", _wrap_minBLEP_setFrequency},
    { "setWaveform", _wrap_minBLEP_setWaveform},
    { "Tick", _wrap_minBLEP_Tick},
    { "syncSlave", _wrap_minBLEP_syncSlave},
    { "setSlave", _wrap_minBLEP_setSlave},
    { "blepInit", _wrap_minBLEP_blepInit},
    { "osc_Play", _wrap_minBLEP_osc_Play},
    { "osc_AddBLEP", _wrap_minBLEP_osc_AddBLEP},
    { "osc_Create", _wrap_minBLEP_osc_Create},
    { "osc_Free", _wrap_minBLEP_osc_Free},
    {0,0}
};
static swig_lua_method swig_minBLEP_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_minBLEP_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_minBLEP_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_minBLEP_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_minBLEP_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_minBLEP_Sf_SwigStatic = {
    "minBLEP",
    swig_minBLEP_Sf_SwigStatic_methods,
    swig_minBLEP_Sf_SwigStatic_attributes,
    swig_minBLEP_Sf_SwigStatic_constants,
    swig_minBLEP_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_minBLEP_bases[] = {0};
static const char *swig_minBLEP_base_names[] = {0};
static swig_lua_class _wrap_class_minBLEP = { "minBLEP", "minBLEP", &SWIGTYPE_p_Analog__minBLEP__minBLEP,_proxy__wrap_new_minBLEP, swig_delete_minBLEP, swig_minBLEP_methods, swig_minBLEP_attributes, &swig_minBLEP_Sf_SwigStatic, swig_minBLEP_meta, swig_minBLEP_bases, swig_minBLEP_base_names };

static int _wrap_new_VAStateVariableFilter(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::VAStateVariableFilter",0,0)
  result = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *)new Analog::Filters::StateVariableFilter::VAStateVariableFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAStateVariableFilter_setFilterType(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setFilterType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setFilterType",1,"Analog::Filters::StateVariableFilter::VAStateVariableFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setFilterType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,0))){
    SWIG_fail_ptr("VAStateVariableFilter_setFilterType",1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setFilterType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAStateVariableFilter_setCutoffFreq(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setCutoffFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setCutoffFreq",1,"Analog::Filters::StateVariableFilter::VAStateVariableFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setCutoffFreq",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,0))){
    SWIG_fail_ptr("VAStateVariableFilter_setCutoffFreq",1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoffFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAStateVariableFilter_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setResonance",1,"Analog::Filters::StateVariableFilter::VAStateVariableFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,0))){
    SWIG_fail_ptr("VAStateVariableFilter_setResonance",1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAStateVariableFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setQ",1,"Analog::Filters::StateVariableFilter::VAStateVariableFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,0))){
    SWIG_fail_ptr("VAStateVariableFilter_setQ",1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAStateVariableFilter_setShelfGain(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setShelfGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setShelfGain",1,"Analog::Filters::StateVariableFilter::VAStateVariableFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setShelfGain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,0))){
    SWIG_fail_ptr("VAStateVariableFilter_setShelfGain",1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setShelfGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAStateVariableFilter_setFilter(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setFilter",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setFilter",1,"Analog::Filters::StateVariableFilter::VAStateVariableFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setFilter",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setFilter",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setFilter",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setFilter",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,0))){
    SWIG_fail_ptr("VAStateVariableFilter_setFilter",1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  (arg1)->setFilter(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAStateVariableFilter_setSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setSampleRate",1,"Analog::Filters::StateVariableFilter::VAStateVariableFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setSampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,0))){
    SWIG_fail_ptr("VAStateVariableFilter_setSampleRate",1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setSampleRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAStateVariableFilter_process(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  unsigned int arg5 ;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::process",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::process",1,"Analog::Filters::StateVariableFilter::VAStateVariableFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::process",2,"DspFloatType");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::process",3,"DspFloatType const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::process",4,"DspFloatType *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::process",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,0))){
    SWIG_fail_ptr("VAStateVariableFilter_process",1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VAStateVariableFilter_process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VAStateVariableFilter_process",4,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  (arg1)->process(arg2,(DspFloatType const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAStateVariableFilter_clear(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::clear",1,"Analog::Filters::StateVariableFilter::VAStateVariableFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,0))){
    SWIG_fail_ptr("VAStateVariableFilter_clear",1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAStateVariableFilter_calcTransfer(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) 0 ;
  DspFloatType arg2 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::calcTransfer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::calcTransfer",1,"Analog::Filters::StateVariableFilter::VAStateVariableFilter const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::calcTransfer",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,0))){
    SWIG_fail_ptr("VAStateVariableFilter_calcTransfer",1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = ((Analog::Filters::StateVariableFilter::VAStateVariableFilter const *)arg1)->calcTransfer(arg2);
  {
    std::complex< DspFloatType > * resultptr = new std::complex< DspFloatType >((const std::complex< DspFloatType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAStateVariableFilter_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setPort",1,"Analog::Filters::StateVariableFilter::VAStateVariableFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,0))){
    SWIG_fail_ptr("VAStateVariableFilter_setPort",1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAStateVariableFilter_getCutoffFreq(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::getCutoffFreq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::getCutoffFreq",1,"Analog::Filters::StateVariableFilter::VAStateVariableFilter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,0))){
    SWIG_fail_ptr("VAStateVariableFilter_getCutoffFreq",1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter);
  }
  
  result = (DspFloatType)((Analog::Filters::StateVariableFilter::VAStateVariableFilter const *)arg1)->getCutoffFreq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAStateVariableFilter_getFilterType(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::getFilterType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::getFilterType",1,"Analog::Filters::StateVariableFilter::VAStateVariableFilter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,0))){
    SWIG_fail_ptr("VAStateVariableFilter_getFilterType",1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter);
  }
  
  result = (DspFloatType)((Analog::Filters::StateVariableFilter::VAStateVariableFilter const *)arg1)->getFilterType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAStateVariableFilter_getQ(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::getQ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::getQ",1,"Analog::Filters::StateVariableFilter::VAStateVariableFilter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,0))){
    SWIG_fail_ptr("VAStateVariableFilter_getQ",1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter);
  }
  
  result = (DspFloatType)((Analog::Filters::StateVariableFilter::VAStateVariableFilter const *)arg1)->getQ();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAStateVariableFilter_getShelfGain(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::getShelfGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::getShelfGain",1,"Analog::Filters::StateVariableFilter::VAStateVariableFilter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,0))){
    SWIG_fail_ptr("VAStateVariableFilter_getShelfGain",1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter);
  }
  
  result = (DspFloatType)((Analog::Filters::StateVariableFilter::VAStateVariableFilter const *)arg1)->getShelfGain();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAStateVariableFilter_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::StateVariableFilter::VAStateVariableFilter::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::ProcessBlock",1,"Analog::Filters::StateVariableFilter::VAStateVariableFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::StateVariableFilter::VAStateVariableFilter::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,0))){
    SWIG_fail_ptr("VAStateVariableFilter_ProcessBlock",1,SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VAStateVariableFilter_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VAStateVariableFilter_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VAStateVariableFilter(void *obj) {
Analog::Filters::StateVariableFilter::VAStateVariableFilter *arg1 = (Analog::Filters::StateVariableFilter::VAStateVariableFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_VAStateVariableFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VAStateVariableFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VAStateVariableFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VAStateVariableFilter_methods[]= {
    { "setFilterType", _wrap_VAStateVariableFilter_setFilterType},
    { "setCutoffFreq", _wrap_VAStateVariableFilter_setCutoffFreq},
    { "setResonance", _wrap_VAStateVariableFilter_setResonance},
    { "setQ", _wrap_VAStateVariableFilter_setQ},
    { "setShelfGain", _wrap_VAStateVariableFilter_setShelfGain},
    { "setFilter", _wrap_VAStateVariableFilter_setFilter},
    { "setSampleRate", _wrap_VAStateVariableFilter_setSampleRate},
    { "process", _wrap_VAStateVariableFilter_process},
    { "clear", _wrap_VAStateVariableFilter_clear},
    { "calcTransfer", _wrap_VAStateVariableFilter_calcTransfer},
    { "setPort", _wrap_VAStateVariableFilter_setPort},
    { "getCutoffFreq", _wrap_VAStateVariableFilter_getCutoffFreq},
    { "getFilterType", _wrap_VAStateVariableFilter_getFilterType},
    { "getQ", _wrap_VAStateVariableFilter_getQ},
    { "getShelfGain", _wrap_VAStateVariableFilter_getShelfGain},
    { "ProcessBlock", _wrap_VAStateVariableFilter_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_VAStateVariableFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VAStateVariableFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VAStateVariableFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Analog::Filters::StateVariableFilter::VAStateVariableFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_FILTERTYPE", Analog::Filters::StateVariableFilter::VAStateVariableFilter::PORT_FILTERTYPE)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Analog::Filters::StateVariableFilter::VAStateVariableFilter::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("PORT_SHELFGAIN", Analog::Filters::StateVariableFilter::VAStateVariableFilter::PORT_SHELFGAIN)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VAStateVariableFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VAStateVariableFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VAStateVariableFilter_Sf_SwigStatic = {
    "VAStateVariableFilter",
    swig_VAStateVariableFilter_Sf_SwigStatic_methods,
    swig_VAStateVariableFilter_Sf_SwigStatic_attributes,
    swig_VAStateVariableFilter_Sf_SwigStatic_constants,
    swig_VAStateVariableFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VAStateVariableFilter_bases[] = {0,0};
static const char *swig_VAStateVariableFilter_base_names[] = {"MonoFXProcessor *",0};
static swig_lua_class _wrap_class_VAStateVariableFilter = { "VAStateVariableFilter", "VAStateVariableFilter", &SWIGTYPE_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,_proxy__wrap_new_VAStateVariableFilter, swig_delete_VAStateVariableFilter, swig_VAStateVariableFilter_methods, swig_VAStateVariableFilter_attributes, &swig_VAStateVariableFilter_Sf_SwigStatic, swig_VAStateVariableFilter_meta, swig_VAStateVariableFilter_bases, swig_VAStateVariableFilter_base_names };

static int _wrap_AnalogSVF_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::fc",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_fc_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::fc",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_fc_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::fs",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_fs_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::fs",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_fs_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_q_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::q",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_q_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_q_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::q",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_q_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_K_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::K",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::K",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::K",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_K_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->K = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_K_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::K",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::K",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_K_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->K);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_lp_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::lp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::lp",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::lp",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_lp_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_lp_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::lp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::lp",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_lp_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->lp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_hp_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::hp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::hp",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::hp",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_hp_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->hp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_hp_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::hp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::hp",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_hp_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->hp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_bp_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::bp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::bp",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::bp",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_bp_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_bp_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::bp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::bp",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_bp_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->bp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_ubp_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::ubp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ubp",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ubp",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_ubp_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->ubp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_ubp_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::ubp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ubp",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_ubp_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->ubp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_shelf_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::shelf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::shelf",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::shelf",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_shelf_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->shelf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_shelf_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::shelf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::shelf",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_shelf_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->shelf);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_notch_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::notch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::notch",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::notch",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_notch_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->notch = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_notch_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::notch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::notch",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_notch_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->notch);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_apf_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::apf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::apf",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::apf",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_apf_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->apf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_apf_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::apf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::apf",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_apf_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->apf);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_peak_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::peak",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::peak",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::peak",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_peak_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->peak = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_peak_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::peak",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::peak",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_peak_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->peak);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_z1_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::z1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::z1",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::z1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_z1_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->z1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_z1_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::z1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::z1",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_z1_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->z1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_z2_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::z2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::z2",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::z2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_z2_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->z2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_z2_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::z2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::z2",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_z2_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->z2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_minC_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::minC",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::minC",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::minC",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_minC_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->minC = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_minC_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::minC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::minC",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_minC_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->minC);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_maxC_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::maxC",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::maxC",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::maxC",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_maxC_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxC = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_maxC_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::maxC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::maxC",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_maxC_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->maxC);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_gain_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::gain",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::gain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_gain_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->gain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_gain_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::gain",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_gain_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (DspFloatType) ((arg1)->gain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_type_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::type",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::type",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_type_set",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_type_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  int result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::type",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_type_get",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  result = (int) ((arg1)->type);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AnalogSVF(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Analog::Filters::AnalogSVF::AnalogSVF *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::AnalogSVF",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::AnalogSVF",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::AnalogSVF",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::AnalogSVF",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Analog::Filters::AnalogSVF::AnalogSVF *)new Analog::Filters::AnalogSVF::AnalogSVF(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::setCutoff",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_setCutoff",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::setQ",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::setQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_setQ",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::setPort",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_setPort",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::Tick",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_Tick",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::Tick",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_Tick",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::Tick",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_Tick",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::Tick",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_Tick",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AnalogSVF_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AnalogSVF_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AnalogSVF_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AnalogSVF_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AnalogSVF_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::AnalogSVF::AnalogSVF::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::AnalogSVF::AnalogSVF::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::AnalogSVF::AnalogSVF::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::AnalogSVF::AnalogSVF::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_AnalogSVF_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  DspFloatType *arg6 = (DspFloatType *) 0 ;
  DspFloatType *arg7 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",4,"DspFloatType *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",5,"DspFloatType *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",6,"DspFloatType *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",7,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",6,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",7,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  DspFloatType *arg6 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",4,"DspFloatType *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",5,"DspFloatType *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",6,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",6,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",4,"DspFloatType *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",5,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",5,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_ProcessBlock(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_AnalogSVF_ProcessBlock__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_AnalogSVF_ProcessBlock__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_AnalogSVF_ProcessBlock__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_AnalogSVF_ProcessBlock__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AnalogSVF_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock(size_t,DspFloatType *,DspFloatType *,DspFloatType *,DspFloatType *,DspFloatType *)\n"
    "    Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock(size_t,DspFloatType *,DspFloatType *,DspFloatType *,DspFloatType *)\n"
    "    Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock(size_t,DspFloatType *,DspFloatType *,DspFloatType *)\n"
    "    Analog::Filters::AnalogSVF::AnalogSVF::ProcessBlock(size_t,DspFloatType *,DspFloatType *)\n");
  lua_error(L);return 0;
}


static int _wrap_AnalogSVF_InplaceProcess__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  DspFloatType *arg6 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",4,"DspFloatType *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",5,"DspFloatType *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",6,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_InplaceProcess",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_InplaceProcess",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_InplaceProcess",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_InplaceProcess",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_InplaceProcess",6,SWIGTYPE_p_float);
  }
  
  (arg1)->InplaceProcess(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_InplaceProcess__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  DspFloatType *arg5 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",4,"DspFloatType *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",5,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_InplaceProcess",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_InplaceProcess",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_InplaceProcess",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_InplaceProcess",5,SWIGTYPE_p_float);
  }
  
  (arg1)->InplaceProcess(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_InplaceProcess__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_InplaceProcess",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_InplaceProcess",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_InplaceProcess",4,SWIGTYPE_p_float);
  }
  
  (arg1)->InplaceProcess(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_InplaceProcess__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",1,"Analog::Filters::AnalogSVF::AnalogSVF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,0))){
    SWIG_fail_ptr("AnalogSVF_InplaceProcess",1,SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("AnalogSVF_InplaceProcess",3,SWIGTYPE_p_float);
  }
  
  (arg1)->InplaceProcess(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSVF_InplaceProcess(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_AnalogSVF_InplaceProcess__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_AnalogSVF_InplaceProcess__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_AnalogSVF_InplaceProcess__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_AnalogSVF_InplaceProcess__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AnalogSVF_InplaceProcess'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess(size_t,DspFloatType *,DspFloatType *,DspFloatType *,DspFloatType *)\n"
    "    Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess(size_t,DspFloatType *,DspFloatType *,DspFloatType *)\n"
    "    Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess(size_t,DspFloatType *,DspFloatType *)\n"
    "    Analog::Filters::AnalogSVF::AnalogSVF::InplaceProcess(size_t,DspFloatType *)\n");
  lua_error(L);return 0;
}


static void swig_delete_AnalogSVF(void *obj) {
Analog::Filters::AnalogSVF::AnalogSVF *arg1 = (Analog::Filters::AnalogSVF::AnalogSVF *) obj;
delete arg1;
}
static int _proxy__wrap_new_AnalogSVF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AnalogSVF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AnalogSVF_attributes[] = {
    { "fc", _wrap_AnalogSVF_fc_get, _wrap_AnalogSVF_fc_set },
    { "fs", _wrap_AnalogSVF_fs_get, _wrap_AnalogSVF_fs_set },
    { "q", _wrap_AnalogSVF_q_get, _wrap_AnalogSVF_q_set },
    { "K", _wrap_AnalogSVF_K_get, _wrap_AnalogSVF_K_set },
    { "lp", _wrap_AnalogSVF_lp_get, _wrap_AnalogSVF_lp_set },
    { "hp", _wrap_AnalogSVF_hp_get, _wrap_AnalogSVF_hp_set },
    { "bp", _wrap_AnalogSVF_bp_get, _wrap_AnalogSVF_bp_set },
    { "ubp", _wrap_AnalogSVF_ubp_get, _wrap_AnalogSVF_ubp_set },
    { "shelf", _wrap_AnalogSVF_shelf_get, _wrap_AnalogSVF_shelf_set },
    { "notch", _wrap_AnalogSVF_notch_get, _wrap_AnalogSVF_notch_set },
    { "apf", _wrap_AnalogSVF_apf_get, _wrap_AnalogSVF_apf_set },
    { "peak", _wrap_AnalogSVF_peak_get, _wrap_AnalogSVF_peak_set },
    { "z1", _wrap_AnalogSVF_z1_get, _wrap_AnalogSVF_z1_set },
    { "z2", _wrap_AnalogSVF_z2_get, _wrap_AnalogSVF_z2_set },
    { "minC", _wrap_AnalogSVF_minC_get, _wrap_AnalogSVF_minC_set },
    { "maxC", _wrap_AnalogSVF_maxC_get, _wrap_AnalogSVF_maxC_set },
    { "gain", _wrap_AnalogSVF_gain_get, _wrap_AnalogSVF_gain_set },
    { "type", _wrap_AnalogSVF_type_get, _wrap_AnalogSVF_type_set },
    {0,0,0}
};
static swig_lua_method swig_AnalogSVF_methods[]= {
    { "setCutoff", _wrap_AnalogSVF_setCutoff},
    { "setQ", _wrap_AnalogSVF_setQ},
    { "setPort", _wrap_AnalogSVF_setPort},
    { "Tick", _wrap_AnalogSVF_Tick},
    { "ProcessBlock", _wrap_AnalogSVF_ProcessBlock},
    { "InplaceProcess", _wrap_AnalogSVF_InplaceProcess},
    {0,0}
};
static swig_lua_method swig_AnalogSVF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AnalogSVF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AnalogSVF_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("LP", Analog::Filters::AnalogSVF::AnalogSVF::LP)},
    {SWIG_LUA_CONSTTAB_INT("HP", Analog::Filters::AnalogSVF::AnalogSVF::HP)},
    {SWIG_LUA_CONSTTAB_INT("BP", Analog::Filters::AnalogSVF::AnalogSVF::BP)},
    {SWIG_LUA_CONSTTAB_INT("UBP", Analog::Filters::AnalogSVF::AnalogSVF::UBP)},
    {SWIG_LUA_CONSTTAB_INT("SHELF", Analog::Filters::AnalogSVF::AnalogSVF::SHELF)},
    {SWIG_LUA_CONSTTAB_INT("NOTCH", Analog::Filters::AnalogSVF::AnalogSVF::NOTCH)},
    {SWIG_LUA_CONSTTAB_INT("APF", Analog::Filters::AnalogSVF::AnalogSVF::APF)},
    {SWIG_LUA_CONSTTAB_INT("PEAK", Analog::Filters::AnalogSVF::AnalogSVF::PEAK)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Analog::Filters::AnalogSVF::AnalogSVF::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_Q", Analog::Filters::AnalogSVF::AnalogSVF::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("PORT_TYPE", Analog::Filters::AnalogSVF::AnalogSVF::PORT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("PORT_GAIN", Analog::Filters::AnalogSVF::AnalogSVF::PORT_GAIN)},
    {SWIG_LUA_CONSTTAB_INT("PORT_MINC", Analog::Filters::AnalogSVF::AnalogSVF::PORT_MINC)},
    {SWIG_LUA_CONSTTAB_INT("PORT_MAXC", Analog::Filters::AnalogSVF::AnalogSVF::PORT_MAXC)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AnalogSVF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AnalogSVF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AnalogSVF_Sf_SwigStatic = {
    "AnalogSVF",
    swig_AnalogSVF_Sf_SwigStatic_methods,
    swig_AnalogSVF_Sf_SwigStatic_attributes,
    swig_AnalogSVF_Sf_SwigStatic_constants,
    swig_AnalogSVF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AnalogSVF_bases[] = {0,0};
static const char *swig_AnalogSVF_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_AnalogSVF = { "AnalogSVF", "AnalogSVF", &SWIGTYPE_p_Analog__Filters__AnalogSVF__AnalogSVF,_proxy__wrap_new_AnalogSVF, swig_delete_AnalogSVF, swig_AnalogSVF_methods, swig_AnalogSVF_attributes, &swig_AnalogSVF_Sf_SwigStatic, swig_AnalogSVF_meta, swig_AnalogSVF_bases, swig_AnalogSVF_base_names };

static int _wrap_moog_lerp(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::moog_lerp",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::moog_lerp",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::moog_lerp",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::moog_lerp",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)Analog::Filters::MoogLadders::moog_lerp(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_moog_min(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::moog_min",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::moog_min",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::moog_min",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)Analog::Filters::MoogLadders::moog_min(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_moog_saturate(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::moog_saturate",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::moog_saturate",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)Analog::Filters::MoogLadders::moog_saturate(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clip(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::clip",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::clip",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::clip",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::clip",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)Analog::Filters::MoogLadders::clip(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fast_tanh(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::fast_tanh",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::fast_tanh",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)Analog::Filters::MoogLadders::fast_tanh(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiQuadBase(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::BiQuadBase *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::BiQuadBase::BiQuadBase",0,0)
  result = (Analog::Filters::MoogLadders::BiQuadBase *)new Analog::Filters::MoogLadders::BiQuadBase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__BiQuadBase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuadBase_Process(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::BiQuadBase *arg1 = (Analog::Filters::MoogLadders::BiQuadBase *) 0 ;
  uint32_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::BiQuadBase::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::BiQuadBase::Process",1,"Analog::Filters::MoogLadders::BiQuadBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::BiQuadBase::Process",2,"uint32_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::BiQuadBase::Process",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__BiQuadBase,0))){
    SWIG_fail_ptr("BiQuadBase_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__BiQuadBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiQuadBase_Process",3,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuadBase_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::BiQuadBase *arg1 = (Analog::Filters::MoogLadders::BiQuadBase *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::BiQuadBase::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::BiQuadBase::Tick",1,"Analog::Filters::MoogLadders::BiQuadBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::BiQuadBase::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__BiQuadBase,0))){
    SWIG_fail_ptr("BiQuadBase_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__BiQuadBase);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuadBase_SetBiquadCoefs(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::BiQuadBase *arg1 = (Analog::Filters::MoogLadders::BiQuadBase *) 0 ;
  std::array< DspFloatType,3 > arg2 ;
  std::array< DspFloatType,2 > arg3 ;
  std::array< DspFloatType,3 > *argp2 ;
  std::array< DspFloatType,2 > *argp3 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::BiQuadBase::SetBiquadCoefs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::BiQuadBase::SetBiquadCoefs",1,"Analog::Filters::MoogLadders::BiQuadBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::BiQuadBase::SetBiquadCoefs",2,"std::array< DspFloatType,3 >");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::BiQuadBase::SetBiquadCoefs",3,"std::array< DspFloatType,2 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__BiQuadBase,0))){
    SWIG_fail_ptr("BiQuadBase_SetBiquadCoefs",1,SWIGTYPE_p_Analog__Filters__MoogLadders__BiQuadBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__arrayT_float_3_t,0))){
    SWIG_fail_ptr("BiQuadBase_SetBiquadCoefs",2,SWIGTYPE_p_std__arrayT_float_3_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__arrayT_float_2_t,0))){
    SWIG_fail_ptr("BiQuadBase_SetBiquadCoefs",3,SWIGTYPE_p_std__arrayT_float_2_t);
  }
  arg3 = *argp3;
  
  (arg1)->SetBiquadCoefs(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BiQuadBase(void *obj) {
Analog::Filters::MoogLadders::BiQuadBase *arg1 = (Analog::Filters::MoogLadders::BiQuadBase *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiQuadBase(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiQuadBase);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiQuadBase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BiQuadBase_methods[]= {
    { "Process", _wrap_BiQuadBase_Process},
    { "Tick", _wrap_BiQuadBase_Tick},
    { "SetBiquadCoefs", _wrap_BiQuadBase_SetBiquadCoefs},
    {0,0}
};
static swig_lua_method swig_BiQuadBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiQuadBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiQuadBase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiQuadBase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiQuadBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiQuadBase_Sf_SwigStatic = {
    "BiQuadBase",
    swig_BiQuadBase_Sf_SwigStatic_methods,
    swig_BiQuadBase_Sf_SwigStatic_attributes,
    swig_BiQuadBase_Sf_SwigStatic_constants,
    swig_BiQuadBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiQuadBase_bases[] = {0};
static const char *swig_BiQuadBase_base_names[] = {0};
static swig_lua_class _wrap_class_BiQuadBase = { "BiQuadBase", "BiQuadBase", &SWIGTYPE_p_Analog__Filters__MoogLadders__BiQuadBase,_proxy__wrap_new_BiQuadBase, swig_delete_BiQuadBase, swig_BiQuadBase_methods, swig_BiQuadBase_attributes, &swig_BiQuadBase_Sf_SwigStatic, swig_BiQuadBase_meta, swig_BiQuadBase_bases, swig_BiQuadBase_base_names };

static int _wrap_new_RBJFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RBJFilter::FilterType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Analog::Filters::MoogLadders::RBJFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJFilter::RBJFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::RBJFilter",1,"Analog::Filters::MoogLadders::RBJFilter::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::RBJFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::RBJFilter",3,"DspFloatType");
  arg1 = (Analog::Filters::MoogLadders::RBJFilter::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Analog::Filters::MoogLadders::RBJFilter *)new Analog::Filters::MoogLadders::RBJFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RBJFilter::FilterType arg1 ;
  DspFloatType arg2 ;
  Analog::Filters::MoogLadders::RBJFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJFilter::RBJFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::RBJFilter",1,"Analog::Filters::MoogLadders::RBJFilter::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::RBJFilter",2,"DspFloatType");
  arg1 = (Analog::Filters::MoogLadders::RBJFilter::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Filters::MoogLadders::RBJFilter *)new Analog::Filters::MoogLadders::RBJFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RBJFilter::FilterType arg1 ;
  Analog::Filters::MoogLadders::RBJFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJFilter::RBJFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::RBJFilter",1,"Analog::Filters::MoogLadders::RBJFilter::FilterType");
  arg1 = (Analog::Filters::MoogLadders::RBJFilter::FilterType)(int)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::RBJFilter *)new Analog::Filters::MoogLadders::RBJFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RBJFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJFilter::RBJFilter",0,0)
  result = (Analog::Filters::MoogLadders::RBJFilter *)new Analog::Filters::MoogLadders::RBJFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJFilter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RBJFilter__SWIG_3(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJFilter__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJFilter__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_RBJFilter__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::RBJFilter::RBJFilter(Analog::Filters::MoogLadders::RBJFilter::FilterType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::RBJFilter::RBJFilter(Analog::Filters::MoogLadders::RBJFilter::FilterType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::RBJFilter::RBJFilter(Analog::Filters::MoogLadders::RBJFilter::FilterType)\n"
    "    Analog::Filters::MoogLadders::RBJFilter::RBJFilter()\n");
  lua_error(L);return 0;
}


static int _wrap_RBJFilter_UpdateCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RBJFilter *arg1 = (Analog::Filters::MoogLadders::RBJFilter *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJFilter::UpdateCoefficients",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::UpdateCoefficients",1,"Analog::Filters::MoogLadders::RBJFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter,0))){
    SWIG_fail_ptr("RBJFilter_UpdateCoefficients",1,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter);
  }
  
  (arg1)->UpdateCoefficients();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilter_SetSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RBJFilter *arg1 = (Analog::Filters::MoogLadders::RBJFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJFilter::SetSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::SetSampleRate",1,"Analog::Filters::MoogLadders::RBJFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::SetSampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter,0))){
    SWIG_fail_ptr("RBJFilter_SetSampleRate",1,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetSampleRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilter_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RBJFilter *arg1 = (Analog::Filters::MoogLadders::RBJFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJFilter::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::SetCutoff",1,"Analog::Filters::MoogLadders::RBJFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::SetCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter,0))){
    SWIG_fail_ptr("RBJFilter_SetCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilter_GetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RBJFilter *arg1 = (Analog::Filters::MoogLadders::RBJFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJFilter::GetCutoff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::GetCutoff",1,"Analog::Filters::MoogLadders::RBJFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter,0))){
    SWIG_fail_ptr("RBJFilter_GetCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter);
  }
  
  result = (DspFloatType)(arg1)->GetCutoff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilter_SetQValue(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RBJFilter *arg1 = (Analog::Filters::MoogLadders::RBJFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJFilter::SetQValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::SetQValue",1,"Analog::Filters::MoogLadders::RBJFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::SetQValue",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter,0))){
    SWIG_fail_ptr("RBJFilter_SetQValue",1,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetQValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilter_GetQValue(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RBJFilter *arg1 = (Analog::Filters::MoogLadders::RBJFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJFilter::GetQValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::GetQValue",1,"Analog::Filters::MoogLadders::RBJFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter,0))){
    SWIG_fail_ptr("RBJFilter_GetQValue",1,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter);
  }
  
  result = (DspFloatType)(arg1)->GetQValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilter_SetType(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RBJFilter *arg1 = (Analog::Filters::MoogLadders::RBJFilter *) 0 ;
  Analog::Filters::MoogLadders::RBJFilter::FilterType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJFilter::SetType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::SetType",1,"Analog::Filters::MoogLadders::RBJFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::SetType",2,"Analog::Filters::MoogLadders::RBJFilter::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter,0))){
    SWIG_fail_ptr("RBJFilter_SetType",1,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter);
  }
  
  arg2 = (Analog::Filters::MoogLadders::RBJFilter::FilterType)(int)lua_tonumber(L, 2);
  (arg1)->SetType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilter_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RBJFilter *arg1 = (Analog::Filters::MoogLadders::RBJFilter *) 0 ;
  Analog::Filters::MoogLadders::RBJFilter::FilterType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJFilter::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJFilter::GetType",1,"Analog::Filters::MoogLadders::RBJFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter,0))){
    SWIG_fail_ptr("RBJFilter_GetType",1,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter);
  }
  
  result = (Analog::Filters::MoogLadders::RBJFilter::FilterType)(arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RBJFilter(void *obj) {
Analog::Filters::MoogLadders::RBJFilter *arg1 = (Analog::Filters::MoogLadders::RBJFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJFilter_methods[]= {
    { "UpdateCoefficients", _wrap_RBJFilter_UpdateCoefficients},
    { "SetSampleRate", _wrap_RBJFilter_SetSampleRate},
    { "SetCutoff", _wrap_RBJFilter_SetCutoff},
    { "GetCutoff", _wrap_RBJFilter_GetCutoff},
    { "SetQValue", _wrap_RBJFilter_SetQValue},
    { "GetQValue", _wrap_RBJFilter_GetQValue},
    { "SetType", _wrap_RBJFilter_SetType},
    { "GetType", _wrap_RBJFilter_GetType},
    {0,0}
};
static swig_lua_method swig_RBJFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("LOWPASS", Analog::Filters::MoogLadders::RBJFilter::LOWPASS)},
    {SWIG_LUA_CONSTTAB_INT("HIGHPASS", Analog::Filters::MoogLadders::RBJFilter::HIGHPASS)},
    {SWIG_LUA_CONSTTAB_INT("BANDPASS", Analog::Filters::MoogLadders::RBJFilter::BANDPASS)},
    {SWIG_LUA_CONSTTAB_INT("ALLPASS", Analog::Filters::MoogLadders::RBJFilter::ALLPASS)},
    {SWIG_LUA_CONSTTAB_INT("NOTCH", Analog::Filters::MoogLadders::RBJFilter::NOTCH)},
    {SWIG_LUA_CONSTTAB_INT("PEAK", Analog::Filters::MoogLadders::RBJFilter::PEAK)},
    {SWIG_LUA_CONSTTAB_INT("LOW_SHELF", Analog::Filters::MoogLadders::RBJFilter::LOW_SHELF)},
    {SWIG_LUA_CONSTTAB_INT("HIGH_SHELF", Analog::Filters::MoogLadders::RBJFilter::HIGH_SHELF)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJFilter_Sf_SwigStatic = {
    "RBJFilter",
    swig_RBJFilter_Sf_SwigStatic_methods,
    swig_RBJFilter_Sf_SwigStatic_attributes,
    swig_RBJFilter_Sf_SwigStatic_constants,
    swig_RBJFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJFilter_bases[] = {0,0};
static const char *swig_RBJFilter_base_names[] = {"Analog::Filters::MoogLadders::BiQuadBase *",0};
static swig_lua_class _wrap_class_RBJFilter = { "RBJFilter", "RBJFilter", &SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter,_proxy__wrap_new_RBJFilter, swig_delete_RBJFilter, swig_RBJFilter_methods, swig_RBJFilter_attributes, &swig_RBJFilter_Sf_SwigStatic, swig_RBJFilter_meta, swig_RBJFilter_bases, swig_RBJFilter_base_names };

static int _wrap_new_PinkingFilter(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::PinkingFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::PinkingFilter::PinkingFilter",0,0)
  result = (Analog::Filters::MoogLadders::PinkingFilter *)new Analog::Filters::MoogLadders::PinkingFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__PinkingFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PinkingFilter_process(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::PinkingFilter *arg1 = (Analog::Filters::MoogLadders::PinkingFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::PinkingFilter::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::PinkingFilter::process",1,"Analog::Filters::MoogLadders::PinkingFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::PinkingFilter::process",2,"DspFloatType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__PinkingFilter,0))){
    SWIG_fail_ptr("PinkingFilter_process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__PinkingFilter);
  }
  
  arg2 = (DspFloatType const)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PinkingFilter(void *obj) {
Analog::Filters::MoogLadders::PinkingFilter *arg1 = (Analog::Filters::MoogLadders::PinkingFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_PinkingFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PinkingFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PinkingFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PinkingFilter_methods[]= {
    { "process", _wrap_PinkingFilter_process},
    {0,0}
};
static swig_lua_method swig_PinkingFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PinkingFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PinkingFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PinkingFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PinkingFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PinkingFilter_Sf_SwigStatic = {
    "PinkingFilter",
    swig_PinkingFilter_Sf_SwigStatic_methods,
    swig_PinkingFilter_Sf_SwigStatic_attributes,
    swig_PinkingFilter_Sf_SwigStatic_constants,
    swig_PinkingFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PinkingFilter_bases[] = {0};
static const char *swig_PinkingFilter_base_names[] = {0};
static swig_lua_class _wrap_class_PinkingFilter = { "PinkingFilter", "PinkingFilter", &SWIGTYPE_p_Analog__Filters__MoogLadders__PinkingFilter,_proxy__wrap_new_PinkingFilter, swig_delete_PinkingFilter, swig_PinkingFilter_methods, swig_PinkingFilter_attributes, &swig_PinkingFilter_Sf_SwigStatic, swig_PinkingFilter_meta, swig_PinkingFilter_bases, swig_PinkingFilter_base_names };

static int _wrap_new_BrowningFilter(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::BrowningFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::BrowningFilter::BrowningFilter",0,0)
  result = (Analog::Filters::MoogLadders::BrowningFilter *)new Analog::Filters::MoogLadders::BrowningFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__BrowningFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrowningFilter_process(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::BrowningFilter *arg1 = (Analog::Filters::MoogLadders::BrowningFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::BrowningFilter::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::BrowningFilter::process",1,"Analog::Filters::MoogLadders::BrowningFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::BrowningFilter::process",2,"DspFloatType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__BrowningFilter,0))){
    SWIG_fail_ptr("BrowningFilter_process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__BrowningFilter);
  }
  
  arg2 = (DspFloatType const)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BrowningFilter(void *obj) {
Analog::Filters::MoogLadders::BrowningFilter *arg1 = (Analog::Filters::MoogLadders::BrowningFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BrowningFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BrowningFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BrowningFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BrowningFilter_methods[]= {
    { "process", _wrap_BrowningFilter_process},
    {0,0}
};
static swig_lua_method swig_BrowningFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BrowningFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BrowningFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BrowningFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BrowningFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BrowningFilter_Sf_SwigStatic = {
    "BrowningFilter",
    swig_BrowningFilter_Sf_SwigStatic_methods,
    swig_BrowningFilter_Sf_SwigStatic_attributes,
    swig_BrowningFilter_Sf_SwigStatic_constants,
    swig_BrowningFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BrowningFilter_bases[] = {0};
static const char *swig_BrowningFilter_base_names[] = {0};
static swig_lua_class _wrap_class_BrowningFilter = { "BrowningFilter", "BrowningFilter", &SWIGTYPE_p_Analog__Filters__MoogLadders__BrowningFilter,_proxy__wrap_new_BrowningFilter, swig_delete_BrowningFilter, swig_BrowningFilter_methods, swig_BrowningFilter_attributes, &swig_BrowningFilter_Sf_SwigStatic, swig_BrowningFilter_meta, swig_BrowningFilter_bases, swig_BrowningFilter_base_names };

static int _wrap_new_WhiteNoiseSource(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::WhiteNoiseSource *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::WhiteNoiseSource::WhiteNoiseSource",0,0)
  result = (Analog::Filters::MoogLadders::WhiteNoiseSource *)new Analog::Filters::MoogLadders::WhiteNoiseSource();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__WhiteNoiseSource,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WhiteNoiseSource_engine_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::WhiteNoiseSource *arg1 = (Analog::Filters::MoogLadders::WhiteNoiseSource *) 0 ;
  std::mt19937 arg2 ;
  std::mt19937 *argp2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::WhiteNoiseSource::engine",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::WhiteNoiseSource::engine",1,"Analog::Filters::MoogLadders::WhiteNoiseSource *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::WhiteNoiseSource::engine",2,"std::mt19937");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__WhiteNoiseSource,0))){
    SWIG_fail_ptr("WhiteNoiseSource_engine_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__WhiteNoiseSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__mt19937,0))){
    SWIG_fail_ptr("WhiteNoiseSource_engine_set",2,SWIGTYPE_p_std__mt19937);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->engine = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WhiteNoiseSource_engine_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::WhiteNoiseSource *arg1 = (Analog::Filters::MoogLadders::WhiteNoiseSource *) 0 ;
  std::mt19937 result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::WhiteNoiseSource::engine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::WhiteNoiseSource::engine",1,"Analog::Filters::MoogLadders::WhiteNoiseSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__WhiteNoiseSource,0))){
    SWIG_fail_ptr("WhiteNoiseSource_engine_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__WhiteNoiseSource);
  }
  
  result =  ((arg1)->engine);
  {
    std::mt19937 * resultptr = new std::mt19937((const std::mt19937 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__mt19937,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WhiteNoiseSource_dist_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::WhiteNoiseSource *arg1 = (Analog::Filters::MoogLadders::WhiteNoiseSource *) 0 ;
  std::uniform_real_distribution< DspFloatType > arg2 ;
  std::uniform_real_distribution< DspFloatType > *argp2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::WhiteNoiseSource::dist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::WhiteNoiseSource::dist",1,"Analog::Filters::MoogLadders::WhiteNoiseSource *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::WhiteNoiseSource::dist",2,"std::uniform_real_distribution< DspFloatType >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__WhiteNoiseSource,0))){
    SWIG_fail_ptr("WhiteNoiseSource_dist_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__WhiteNoiseSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__uniform_real_distributionT_float_t,0))){
    SWIG_fail_ptr("WhiteNoiseSource_dist_set",2,SWIGTYPE_p_std__uniform_real_distributionT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->dist = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WhiteNoiseSource_dist_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::WhiteNoiseSource *arg1 = (Analog::Filters::MoogLadders::WhiteNoiseSource *) 0 ;
  std::uniform_real_distribution< DspFloatType > result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::WhiteNoiseSource::dist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::WhiteNoiseSource::dist",1,"Analog::Filters::MoogLadders::WhiteNoiseSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__WhiteNoiseSource,0))){
    SWIG_fail_ptr("WhiteNoiseSource_dist_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__WhiteNoiseSource);
  }
  
  result =  ((arg1)->dist);
  {
    std::uniform_real_distribution< DspFloatType > * resultptr = new std::uniform_real_distribution< DspFloatType >((const std::uniform_real_distribution< DspFloatType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__uniform_real_distributionT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WhiteNoiseSource(void *obj) {
Analog::Filters::MoogLadders::WhiteNoiseSource *arg1 = (Analog::Filters::MoogLadders::WhiteNoiseSource *) obj;
delete arg1;
}
static int _proxy__wrap_new_WhiteNoiseSource(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WhiteNoiseSource);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WhiteNoiseSource_attributes[] = {
    { "engine", _wrap_WhiteNoiseSource_engine_get, _wrap_WhiteNoiseSource_engine_set },
    { "dist", _wrap_WhiteNoiseSource_dist_get, _wrap_WhiteNoiseSource_dist_set },
    {0,0,0}
};
static swig_lua_method swig_WhiteNoiseSource_methods[]= {
    {0,0}
};
static swig_lua_method swig_WhiteNoiseSource_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WhiteNoiseSource_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WhiteNoiseSource_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WhiteNoiseSource_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WhiteNoiseSource_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WhiteNoiseSource_Sf_SwigStatic = {
    "WhiteNoiseSource",
    swig_WhiteNoiseSource_Sf_SwigStatic_methods,
    swig_WhiteNoiseSource_Sf_SwigStatic_attributes,
    swig_WhiteNoiseSource_Sf_SwigStatic_constants,
    swig_WhiteNoiseSource_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WhiteNoiseSource_bases[] = {0};
static const char *swig_WhiteNoiseSource_base_names[] = {0};
static swig_lua_class _wrap_class_WhiteNoiseSource = { "WhiteNoiseSource", "WhiteNoiseSource", &SWIGTYPE_p_Analog__Filters__MoogLadders__WhiteNoiseSource,_proxy__wrap_new_WhiteNoiseSource, swig_delete_WhiteNoiseSource, swig_WhiteNoiseSource_methods, swig_WhiteNoiseSource_attributes, &swig_WhiteNoiseSource_Sf_SwigStatic, swig_WhiteNoiseSource_meta, swig_WhiteNoiseSource_bases, swig_WhiteNoiseSource_base_names };

static int _wrap_WhiteNoise___call(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::WhiteNoise *arg1 = (Analog::Filters::MoogLadders::WhiteNoise *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::WhiteNoise::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::WhiteNoise::operator ()",1,"Analog::Filters::MoogLadders::WhiteNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__WhiteNoise,0))){
    SWIG_fail_ptr("WhiteNoise___call",1,SWIGTYPE_p_Analog__Filters__MoogLadders__WhiteNoise);
  }
  
  result = (DspFloatType)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WhiteNoise(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::WhiteNoise *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::WhiteNoise::WhiteNoise",0,0)
  result = (Analog::Filters::MoogLadders::WhiteNoise *)new Analog::Filters::MoogLadders::WhiteNoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__WhiteNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WhiteNoise(void *obj) {
Analog::Filters::MoogLadders::WhiteNoise *arg1 = (Analog::Filters::MoogLadders::WhiteNoise *) obj;
delete arg1;
}
static int _proxy__wrap_new_WhiteNoise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WhiteNoise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WhiteNoise_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WhiteNoise_methods[]= {
    { "__call", _wrap_WhiteNoise___call},
    {0,0}
};
static swig_lua_method swig_WhiteNoise_meta[] = {
    { "__call", _wrap_WhiteNoise___call},
    {0,0}
};

static swig_lua_attribute swig_WhiteNoise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WhiteNoise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WhiteNoise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WhiteNoise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WhiteNoise_Sf_SwigStatic = {
    "WhiteNoise",
    swig_WhiteNoise_Sf_SwigStatic_methods,
    swig_WhiteNoise_Sf_SwigStatic_attributes,
    swig_WhiteNoise_Sf_SwigStatic_constants,
    swig_WhiteNoise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WhiteNoise_bases[] = {0,0};
static const char *swig_WhiteNoise_base_names[] = {"Analog::Filters::MoogLadders::WhiteNoiseSource *",0};
static swig_lua_class _wrap_class_WhiteNoise = { "WhiteNoise", "WhiteNoise", &SWIGTYPE_p_Analog__Filters__MoogLadders__WhiteNoise,_proxy__wrap_new_WhiteNoise, swig_delete_WhiteNoise, swig_WhiteNoise_methods, swig_WhiteNoise_attributes, &swig_WhiteNoise_Sf_SwigStatic, swig_WhiteNoise_meta, swig_WhiteNoise_bases, swig_WhiteNoise_base_names };

static int _wrap_PinkNoise___call(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::PinkNoise *arg1 = (Analog::Filters::MoogLadders::PinkNoise *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::PinkNoise::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::PinkNoise::operator ()",1,"Analog::Filters::MoogLadders::PinkNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__PinkNoise,0))){
    SWIG_fail_ptr("PinkNoise___call",1,SWIGTYPE_p_Analog__Filters__MoogLadders__PinkNoise);
  }
  
  result = (DspFloatType)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PinkNoise_f_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::PinkNoise *arg1 = (Analog::Filters::MoogLadders::PinkNoise *) 0 ;
  Analog::Filters::MoogLadders::PinkingFilter *arg2 = (Analog::Filters::MoogLadders::PinkingFilter *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::PinkNoise::f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::PinkNoise::f",1,"Analog::Filters::MoogLadders::PinkNoise *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::PinkNoise::f",2,"Analog::Filters::MoogLadders::PinkingFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__PinkNoise,0))){
    SWIG_fail_ptr("PinkNoise_f_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__PinkNoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__Filters__MoogLadders__PinkingFilter,0))){
    SWIG_fail_ptr("PinkNoise_f_set",2,SWIGTYPE_p_Analog__Filters__MoogLadders__PinkingFilter);
  }
  
  if (arg1) (arg1)->f = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PinkNoise_f_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::PinkNoise *arg1 = (Analog::Filters::MoogLadders::PinkNoise *) 0 ;
  Analog::Filters::MoogLadders::PinkingFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::PinkNoise::f",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::PinkNoise::f",1,"Analog::Filters::MoogLadders::PinkNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__PinkNoise,0))){
    SWIG_fail_ptr("PinkNoise_f_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__PinkNoise);
  }
  
  result = (Analog::Filters::MoogLadders::PinkingFilter *)& ((arg1)->f);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__PinkingFilter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PinkNoise(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::PinkNoise *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::PinkNoise::PinkNoise",0,0)
  result = (Analog::Filters::MoogLadders::PinkNoise *)new Analog::Filters::MoogLadders::PinkNoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__PinkNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PinkNoise(void *obj) {
Analog::Filters::MoogLadders::PinkNoise *arg1 = (Analog::Filters::MoogLadders::PinkNoise *) obj;
delete arg1;
}
static int _proxy__wrap_new_PinkNoise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PinkNoise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PinkNoise_attributes[] = {
    { "f", _wrap_PinkNoise_f_get, _wrap_PinkNoise_f_set },
    {0,0,0}
};
static swig_lua_method swig_PinkNoise_methods[]= {
    { "__call", _wrap_PinkNoise___call},
    {0,0}
};
static swig_lua_method swig_PinkNoise_meta[] = {
    { "__call", _wrap_PinkNoise___call},
    {0,0}
};

static swig_lua_attribute swig_PinkNoise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PinkNoise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PinkNoise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PinkNoise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PinkNoise_Sf_SwigStatic = {
    "PinkNoise",
    swig_PinkNoise_Sf_SwigStatic_methods,
    swig_PinkNoise_Sf_SwigStatic_attributes,
    swig_PinkNoise_Sf_SwigStatic_constants,
    swig_PinkNoise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PinkNoise_bases[] = {0,0};
static const char *swig_PinkNoise_base_names[] = {"Analog::Filters::MoogLadders::WhiteNoiseSource *",0};
static swig_lua_class _wrap_class_PinkNoise = { "PinkNoise", "PinkNoise", &SWIGTYPE_p_Analog__Filters__MoogLadders__PinkNoise,_proxy__wrap_new_PinkNoise, swig_delete_PinkNoise, swig_PinkNoise_methods, swig_PinkNoise_attributes, &swig_PinkNoise_Sf_SwigStatic, swig_PinkNoise_meta, swig_PinkNoise_bases, swig_PinkNoise_base_names };

static int _wrap_BrownNoise___call(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::BrownNoise *arg1 = (Analog::Filters::MoogLadders::BrownNoise *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::BrownNoise::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::BrownNoise::operator ()",1,"Analog::Filters::MoogLadders::BrownNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__BrownNoise,0))){
    SWIG_fail_ptr("BrownNoise___call",1,SWIGTYPE_p_Analog__Filters__MoogLadders__BrownNoise);
  }
  
  result = (DspFloatType)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrownNoise_f_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::BrownNoise *arg1 = (Analog::Filters::MoogLadders::BrownNoise *) 0 ;
  Analog::Filters::MoogLadders::BrowningFilter *arg2 = (Analog::Filters::MoogLadders::BrowningFilter *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::BrownNoise::f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::BrownNoise::f",1,"Analog::Filters::MoogLadders::BrownNoise *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::BrownNoise::f",2,"Analog::Filters::MoogLadders::BrowningFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__BrownNoise,0))){
    SWIG_fail_ptr("BrownNoise_f_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__BrownNoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__Filters__MoogLadders__BrowningFilter,0))){
    SWIG_fail_ptr("BrownNoise_f_set",2,SWIGTYPE_p_Analog__Filters__MoogLadders__BrowningFilter);
  }
  
  if (arg1) (arg1)->f = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrownNoise_f_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::BrownNoise *arg1 = (Analog::Filters::MoogLadders::BrownNoise *) 0 ;
  Analog::Filters::MoogLadders::BrowningFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::BrownNoise::f",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::BrownNoise::f",1,"Analog::Filters::MoogLadders::BrownNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__BrownNoise,0))){
    SWIG_fail_ptr("BrownNoise_f_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__BrownNoise);
  }
  
  result = (Analog::Filters::MoogLadders::BrowningFilter *)& ((arg1)->f);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__BrowningFilter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BrownNoise(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::BrownNoise *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::BrownNoise::BrownNoise",0,0)
  result = (Analog::Filters::MoogLadders::BrownNoise *)new Analog::Filters::MoogLadders::BrownNoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__BrownNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BrownNoise(void *obj) {
Analog::Filters::MoogLadders::BrownNoise *arg1 = (Analog::Filters::MoogLadders::BrownNoise *) obj;
delete arg1;
}
static int _proxy__wrap_new_BrownNoise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BrownNoise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BrownNoise_attributes[] = {
    { "f", _wrap_BrownNoise_f_get, _wrap_BrownNoise_f_set },
    {0,0,0}
};
static swig_lua_method swig_BrownNoise_methods[]= {
    { "__call", _wrap_BrownNoise___call},
    {0,0}
};
static swig_lua_method swig_BrownNoise_meta[] = {
    { "__call", _wrap_BrownNoise___call},
    {0,0}
};

static swig_lua_attribute swig_BrownNoise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BrownNoise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BrownNoise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BrownNoise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BrownNoise_Sf_SwigStatic = {
    "BrownNoise",
    swig_BrownNoise_Sf_SwigStatic_methods,
    swig_BrownNoise_Sf_SwigStatic_attributes,
    swig_BrownNoise_Sf_SwigStatic_constants,
    swig_BrownNoise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BrownNoise_bases[] = {0,0};
static const char *swig_BrownNoise_base_names[] = {"Analog::Filters::MoogLadders::WhiteNoiseSource *",0};
static swig_lua_class _wrap_class_BrownNoise = { "BrownNoise", "BrownNoise", &SWIGTYPE_p_Analog__Filters__MoogLadders__BrownNoise,_proxy__wrap_new_BrownNoise, swig_delete_BrownNoise, swig_BrownNoise_methods, swig_BrownNoise_attributes, &swig_BrownNoise_Sf_SwigStatic, swig_BrownNoise_meta, swig_BrownNoise_bases, swig_BrownNoise_base_names };

static int _wrap_NoiseGenerator_noise_type_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseGenerator *arg1 = (Analog::Filters::MoogLadders::NoiseGenerator *) 0 ;
  enum Analog::Filters::MoogLadders::NoiseGenerator::NoiseType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseGenerator::noise_type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseGenerator::noise_type",1,"Analog::Filters::MoogLadders::NoiseGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseGenerator::noise_type",2,"enum Analog::Filters::MoogLadders::NoiseGenerator::NoiseType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_noise_type_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator);
  }
  
  arg2 = (enum Analog::Filters::MoogLadders::NoiseGenerator::NoiseType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->noise_type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_noise_type_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseGenerator *arg1 = (Analog::Filters::MoogLadders::NoiseGenerator *) 0 ;
  enum Analog::Filters::MoogLadders::NoiseGenerator::NoiseType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseGenerator::noise_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseGenerator::noise_type",1,"Analog::Filters::MoogLadders::NoiseGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_noise_type_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator);
  }
  
  result = (enum Analog::Filters::MoogLadders::NoiseGenerator::NoiseType) ((arg1)->noise_type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_produce(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseGenerator *arg1 = (Analog::Filters::MoogLadders::NoiseGenerator *) 0 ;
  Analog::Filters::MoogLadders::NoiseGenerator::NoiseType arg2 ;
  int arg3 ;
  int arg4 ;
  DspFloatType arg5 ;
  std::vector< DspFloatType,std::allocator< DspFloatType > > result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseGenerator::produce",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseGenerator::produce",1,"Analog::Filters::MoogLadders::NoiseGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseGenerator::produce",2,"Analog::Filters::MoogLadders::NoiseGenerator::NoiseType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseGenerator::produce",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseGenerator::produce",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseGenerator::produce",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_produce",1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator);
  }
  
  arg2 = (Analog::Filters::MoogLadders::NoiseGenerator::NoiseType)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (arg1)->produce(arg2,arg3,arg4,arg5);
  {
    std::vector< DspFloatType,std::allocator< DspFloatType > > * resultptr = new std::vector< DspFloatType,std::allocator< DspFloatType > >((const std::vector< DspFloatType,std::allocator< DspFloatType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseGenerator *arg1 = (Analog::Filters::MoogLadders::NoiseGenerator *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseGenerator::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseGenerator::Tick",1,"Analog::Filters::MoogLadders::NoiseGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseGenerator *arg1 = (Analog::Filters::MoogLadders::NoiseGenerator *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseGenerator::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseGenerator::Process",1,"Analog::Filters::MoogLadders::NoiseGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseGenerator::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseGenerator::Process",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseGenerator::Process",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("NoiseGenerator_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("NoiseGenerator_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseGenerator *arg1 = (Analog::Filters::MoogLadders::NoiseGenerator *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseGenerator::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseGenerator::Process",1,"Analog::Filters::MoogLadders::NoiseGenerator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseGenerator::Process",2,"DspFloatType *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseGenerator::Process",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator,0))){
    SWIG_fail_ptr("NoiseGenerator_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("NoiseGenerator_Process",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseGenerator_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NoiseGenerator_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_NoiseGenerator_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NoiseGenerator_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::NoiseGenerator::Process(size_t,DspFloatType *,DspFloatType *)\n"
    "    Analog::Filters::MoogLadders::NoiseGenerator::Process(DspFloatType *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_new_NoiseGenerator(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseGenerator *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseGenerator::NoiseGenerator",0,0)
  result = (Analog::Filters::MoogLadders::NoiseGenerator *)new Analog::Filters::MoogLadders::NoiseGenerator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NoiseGenerator(void *obj) {
Analog::Filters::MoogLadders::NoiseGenerator *arg1 = (Analog::Filters::MoogLadders::NoiseGenerator *) obj;
delete arg1;
}
static int _proxy__wrap_new_NoiseGenerator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NoiseGenerator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NoiseGenerator_attributes[] = {
    { "noise_type", _wrap_NoiseGenerator_noise_type_get, _wrap_NoiseGenerator_noise_type_set },
    {0,0,0}
};
static swig_lua_method swig_NoiseGenerator_methods[]= {
    { "produce", _wrap_NoiseGenerator_produce},
    { "Tick", _wrap_NoiseGenerator_Tick},
    { "Process", _wrap_NoiseGenerator_Process},
    {0,0}
};
static swig_lua_method swig_NoiseGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NoiseGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NoiseGenerator_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("WHITE", Analog::Filters::MoogLadders::NoiseGenerator::WHITE)},
    {SWIG_LUA_CONSTTAB_INT("PINK", Analog::Filters::MoogLadders::NoiseGenerator::PINK)},
    {SWIG_LUA_CONSTTAB_INT("BROWN", Analog::Filters::MoogLadders::NoiseGenerator::BROWN)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NoiseGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NoiseGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NoiseGenerator_Sf_SwigStatic = {
    "NoiseGenerator",
    swig_NoiseGenerator_Sf_SwigStatic_methods,
    swig_NoiseGenerator_Sf_SwigStatic_attributes,
    swig_NoiseGenerator_Sf_SwigStatic_constants,
    swig_NoiseGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NoiseGenerator_bases[] = {0};
static const char *swig_NoiseGenerator_base_names[] = {0};
static swig_lua_class _wrap_class_NoiseGenerator = { "NoiseGenerator", "NoiseGenerator", &SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator,_proxy__wrap_new_NoiseGenerator, swig_delete_NoiseGenerator, swig_NoiseGenerator_methods, swig_NoiseGenerator_attributes, &swig_NoiseGenerator_Sf_SwigStatic, swig_NoiseGenerator_meta, swig_NoiseGenerator_bases, swig_NoiseGenerator_base_names };

static int _wrap_LadderFilterBase_Process(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::LadderFilterBase *arg1 = (Analog::Filters::MoogLadders::LadderFilterBase *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::LadderFilterBase::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::LadderFilterBase::Process",1,"Analog::Filters::MoogLadders::LadderFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::LadderFilterBase::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::LadderFilterBase::Process",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__LadderFilterBase,0))){
    SWIG_fail_ptr("LadderFilterBase_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__LadderFilterBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LadderFilterBase_Process",3,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LadderFilterBase_SetResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::LadderFilterBase *arg1 = (Analog::Filters::MoogLadders::LadderFilterBase *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::LadderFilterBase::SetResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::LadderFilterBase::SetResonance",1,"Analog::Filters::MoogLadders::LadderFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::LadderFilterBase::SetResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__LadderFilterBase,0))){
    SWIG_fail_ptr("LadderFilterBase_SetResonance",1,SWIGTYPE_p_Analog__Filters__MoogLadders__LadderFilterBase);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LadderFilterBase_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::LadderFilterBase *arg1 = (Analog::Filters::MoogLadders::LadderFilterBase *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::LadderFilterBase::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::LadderFilterBase::SetCutoff",1,"Analog::Filters::MoogLadders::LadderFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::LadderFilterBase::SetCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__LadderFilterBase,0))){
    SWIG_fail_ptr("LadderFilterBase_SetCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__LadderFilterBase);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LadderFilterBase_GetResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::LadderFilterBase *arg1 = (Analog::Filters::MoogLadders::LadderFilterBase *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::LadderFilterBase::GetResonance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::LadderFilterBase::GetResonance",1,"Analog::Filters::MoogLadders::LadderFilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__LadderFilterBase,0))){
    SWIG_fail_ptr("LadderFilterBase_GetResonance",1,SWIGTYPE_p_Analog__Filters__MoogLadders__LadderFilterBase);
  }
  
  result = (DspFloatType)(arg1)->GetResonance();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LadderFilterBase_GetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::LadderFilterBase *arg1 = (Analog::Filters::MoogLadders::LadderFilterBase *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::LadderFilterBase::GetCutoff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::LadderFilterBase::GetCutoff",1,"Analog::Filters::MoogLadders::LadderFilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__LadderFilterBase,0))){
    SWIG_fail_ptr("LadderFilterBase_GetCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__LadderFilterBase);
  }
  
  result = (DspFloatType)(arg1)->GetCutoff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LadderFilterBase(void *obj) {
Analog::Filters::MoogLadders::LadderFilterBase *arg1 = (Analog::Filters::MoogLadders::LadderFilterBase *) obj;
delete arg1;
}
static swig_lua_attribute swig_LadderFilterBase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LadderFilterBase_methods[]= {
    { "Process", _wrap_LadderFilterBase_Process},
    { "SetResonance", _wrap_LadderFilterBase_SetResonance},
    { "SetCutoff", _wrap_LadderFilterBase_SetCutoff},
    { "GetResonance", _wrap_LadderFilterBase_GetResonance},
    { "GetCutoff", _wrap_LadderFilterBase_GetCutoff},
    {0,0}
};
static swig_lua_method swig_LadderFilterBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LadderFilterBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LadderFilterBase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LadderFilterBase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LadderFilterBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LadderFilterBase_Sf_SwigStatic = {
    "LadderFilterBase",
    swig_LadderFilterBase_Sf_SwigStatic_methods,
    swig_LadderFilterBase_Sf_SwigStatic_attributes,
    swig_LadderFilterBase_Sf_SwigStatic_constants,
    swig_LadderFilterBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LadderFilterBase_bases[] = {0};
static const char *swig_LadderFilterBase_base_names[] = {0};
static swig_lua_class _wrap_class_LadderFilterBase = { "LadderFilterBase", "LadderFilterBase", &SWIGTYPE_p_Analog__Filters__MoogLadders__LadderFilterBase,0, swig_delete_LadderFilterBase, swig_LadderFilterBase_methods, swig_LadderFilterBase_attributes, &swig_LadderFilterBase_Sf_SwigStatic, swig_LadderFilterBase_meta, swig_LadderFilterBase_bases, swig_LadderFilterBase_base_names };

static int _wrap_new_HuovilainenMoog(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::HuovilainenMoog *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::HuovilainenMoog::HuovilainenMoog",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::HuovilainenMoog::HuovilainenMoog",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::HuovilainenMoog *)new Analog::Filters::MoogLadders::HuovilainenMoog(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__HuovilainenMoog,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HuovilainenMoog_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::HuovilainenMoog *arg1 = (Analog::Filters::MoogLadders::HuovilainenMoog *) 0 ;
  uint32_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::HuovilainenMoog::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::HuovilainenMoog::Process",1,"Analog::Filters::MoogLadders::HuovilainenMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::HuovilainenMoog::Process",2,"uint32_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::HuovilainenMoog::Process",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::HuovilainenMoog::Process",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__HuovilainenMoog,0))){
    SWIG_fail_ptr("HuovilainenMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__HuovilainenMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("HuovilainenMoog_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("HuovilainenMoog_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HuovilainenMoog_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::HuovilainenMoog *arg1 = (Analog::Filters::MoogLadders::HuovilainenMoog *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::HuovilainenMoog::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::HuovilainenMoog::Process",1,"Analog::Filters::MoogLadders::HuovilainenMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::HuovilainenMoog::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::HuovilainenMoog::Process",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__HuovilainenMoog,0))){
    SWIG_fail_ptr("HuovilainenMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__HuovilainenMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("HuovilainenMoog_Process",3,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HuovilainenMoog_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__HuovilainenMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_HuovilainenMoog_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__HuovilainenMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_HuovilainenMoog_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'HuovilainenMoog_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::HuovilainenMoog::Process(uint32_t,DspFloatType *,DspFloatType *)\n"
    "    Analog::Filters::MoogLadders::HuovilainenMoog::Process(size_t,DspFloatType *)\n");
  lua_error(L);return 0;
}


static int _wrap_HuovilainenMoog_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::HuovilainenMoog *arg1 = (Analog::Filters::MoogLadders::HuovilainenMoog *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::HuovilainenMoog::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::HuovilainenMoog::Tick",1,"Analog::Filters::MoogLadders::HuovilainenMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::HuovilainenMoog::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__HuovilainenMoog,0))){
    SWIG_fail_ptr("HuovilainenMoog_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__HuovilainenMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HuovilainenMoog_SetResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::HuovilainenMoog *arg1 = (Analog::Filters::MoogLadders::HuovilainenMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::HuovilainenMoog::SetResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::HuovilainenMoog::SetResonance",1,"Analog::Filters::MoogLadders::HuovilainenMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::HuovilainenMoog::SetResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__HuovilainenMoog,0))){
    SWIG_fail_ptr("HuovilainenMoog_SetResonance",1,SWIGTYPE_p_Analog__Filters__MoogLadders__HuovilainenMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HuovilainenMoog_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::HuovilainenMoog *arg1 = (Analog::Filters::MoogLadders::HuovilainenMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::HuovilainenMoog::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::HuovilainenMoog::SetCutoff",1,"Analog::Filters::MoogLadders::HuovilainenMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::HuovilainenMoog::SetCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__HuovilainenMoog,0))){
    SWIG_fail_ptr("HuovilainenMoog_SetCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__HuovilainenMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_HuovilainenMoog(void *obj) {
Analog::Filters::MoogLadders::HuovilainenMoog *arg1 = (Analog::Filters::MoogLadders::HuovilainenMoog *) obj;
delete arg1;
}
static int _proxy__wrap_new_HuovilainenMoog(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_HuovilainenMoog);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_HuovilainenMoog_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_HuovilainenMoog_methods[]= {
    { "Process", _wrap_HuovilainenMoog_Process},
    { "Tick", _wrap_HuovilainenMoog_Tick},
    { "SetResonance", _wrap_HuovilainenMoog_SetResonance},
    { "SetCutoff", _wrap_HuovilainenMoog_SetCutoff},
    {0,0}
};
static swig_lua_method swig_HuovilainenMoog_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_HuovilainenMoog_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_HuovilainenMoog_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_HuovilainenMoog_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_HuovilainenMoog_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_HuovilainenMoog_Sf_SwigStatic = {
    "HuovilainenMoog",
    swig_HuovilainenMoog_Sf_SwigStatic_methods,
    swig_HuovilainenMoog_Sf_SwigStatic_attributes,
    swig_HuovilainenMoog_Sf_SwigStatic_constants,
    swig_HuovilainenMoog_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_HuovilainenMoog_bases[] = {0,0};
static const char *swig_HuovilainenMoog_base_names[] = {"Analog::Filters::MoogLadders::LadderFilterBase *",0};
static swig_lua_class _wrap_class_HuovilainenMoog = { "HuovilainenMoog", "HuovilainenMoog", &SWIGTYPE_p_Analog__Filters__MoogLadders__HuovilainenMoog,_proxy__wrap_new_HuovilainenMoog, swig_delete_HuovilainenMoog, swig_HuovilainenMoog_methods, swig_HuovilainenMoog_attributes, &swig_HuovilainenMoog_Sf_SwigStatic, swig_HuovilainenMoog_meta, swig_HuovilainenMoog_bases, swig_HuovilainenMoog_base_names };

static int _wrap_VT_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::VT",0,0)
  result = (DspFloatType)(DspFloatType)Analog::Filters::MoogLadders::VT;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImprovedMoog(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::ImprovedMoog *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::ImprovedMoog::ImprovedMoog",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::ImprovedMoog::ImprovedMoog",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::ImprovedMoog *)new Analog::Filters::MoogLadders::ImprovedMoog(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__ImprovedMoog,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImprovedMoog_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::ImprovedMoog *arg1 = (Analog::Filters::MoogLadders::ImprovedMoog *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::ImprovedMoog::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::ImprovedMoog::Process",1,"Analog::Filters::MoogLadders::ImprovedMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::ImprovedMoog::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::ImprovedMoog::Process",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__ImprovedMoog,0))){
    SWIG_fail_ptr("ImprovedMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__ImprovedMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImprovedMoog_Process",3,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImprovedMoog_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::ImprovedMoog *arg1 = (Analog::Filters::MoogLadders::ImprovedMoog *) 0 ;
  uint32_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::ImprovedMoog::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::ImprovedMoog::Process",1,"Analog::Filters::MoogLadders::ImprovedMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::ImprovedMoog::Process",2,"uint32_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::ImprovedMoog::Process",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::ImprovedMoog::Process",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__ImprovedMoog,0))){
    SWIG_fail_ptr("ImprovedMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__ImprovedMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImprovedMoog_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ImprovedMoog_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImprovedMoog_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__ImprovedMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ImprovedMoog_Process__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__ImprovedMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ImprovedMoog_Process__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ImprovedMoog_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::ImprovedMoog::Process(size_t,DspFloatType *)\n"
    "    Analog::Filters::MoogLadders::ImprovedMoog::Process(uint32_t,DspFloatType *,DspFloatType *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImprovedMoog_SetResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::ImprovedMoog *arg1 = (Analog::Filters::MoogLadders::ImprovedMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::ImprovedMoog::SetResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::ImprovedMoog::SetResonance",1,"Analog::Filters::MoogLadders::ImprovedMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::ImprovedMoog::SetResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__ImprovedMoog,0))){
    SWIG_fail_ptr("ImprovedMoog_SetResonance",1,SWIGTYPE_p_Analog__Filters__MoogLadders__ImprovedMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImprovedMoog_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::ImprovedMoog *arg1 = (Analog::Filters::MoogLadders::ImprovedMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::ImprovedMoog::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::ImprovedMoog::SetCutoff",1,"Analog::Filters::MoogLadders::ImprovedMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::ImprovedMoog::SetCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__ImprovedMoog,0))){
    SWIG_fail_ptr("ImprovedMoog_SetCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__ImprovedMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImprovedMoog_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::ImprovedMoog *arg1 = (Analog::Filters::MoogLadders::ImprovedMoog *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::ImprovedMoog::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::ImprovedMoog::Tick",1,"Analog::Filters::MoogLadders::ImprovedMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::ImprovedMoog::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__ImprovedMoog,0))){
    SWIG_fail_ptr("ImprovedMoog_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__ImprovedMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ImprovedMoog(void *obj) {
Analog::Filters::MoogLadders::ImprovedMoog *arg1 = (Analog::Filters::MoogLadders::ImprovedMoog *) obj;
delete arg1;
}
static int _proxy__wrap_new_ImprovedMoog(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ImprovedMoog);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ImprovedMoog_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ImprovedMoog_methods[]= {
    { "Process", _wrap_ImprovedMoog_Process},
    { "SetResonance", _wrap_ImprovedMoog_SetResonance},
    { "SetCutoff", _wrap_ImprovedMoog_SetCutoff},
    { "Tick", _wrap_ImprovedMoog_Tick},
    {0,0}
};
static swig_lua_method swig_ImprovedMoog_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ImprovedMoog_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ImprovedMoog_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ImprovedMoog_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ImprovedMoog_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ImprovedMoog_Sf_SwigStatic = {
    "ImprovedMoog",
    swig_ImprovedMoog_Sf_SwigStatic_methods,
    swig_ImprovedMoog_Sf_SwigStatic_attributes,
    swig_ImprovedMoog_Sf_SwigStatic_constants,
    swig_ImprovedMoog_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ImprovedMoog_bases[] = {0,0};
static const char *swig_ImprovedMoog_base_names[] = {"Analog::Filters::MoogLadders::LadderFilterBase *",0};
static swig_lua_class _wrap_class_ImprovedMoog = { "ImprovedMoog", "ImprovedMoog", &SWIGTYPE_p_Analog__Filters__MoogLadders__ImprovedMoog,_proxy__wrap_new_ImprovedMoog, swig_delete_ImprovedMoog, swig_ImprovedMoog_methods, swig_ImprovedMoog_attributes, &swig_ImprovedMoog_Sf_SwigStatic, swig_ImprovedMoog_meta, swig_ImprovedMoog_bases, swig_ImprovedMoog_base_names };

static int _wrap_new_KrajeskiMoog(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::KrajeskiMoog *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::KrajeskiMoog::KrajeskiMoog",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::KrajeskiMoog::KrajeskiMoog",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::KrajeskiMoog *)new Analog::Filters::MoogLadders::KrajeskiMoog(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__KrajeskiMoog,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KrajeskiMoog_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::KrajeskiMoog *arg1 = (Analog::Filters::MoogLadders::KrajeskiMoog *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::KrajeskiMoog::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::KrajeskiMoog::Process",1,"Analog::Filters::MoogLadders::KrajeskiMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::KrajeskiMoog::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::KrajeskiMoog::Process",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::KrajeskiMoog::Process",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__KrajeskiMoog,0))){
    SWIG_fail_ptr("KrajeskiMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__KrajeskiMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("KrajeskiMoog_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("KrajeskiMoog_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KrajeskiMoog_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::KrajeskiMoog *arg1 = (Analog::Filters::MoogLadders::KrajeskiMoog *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::KrajeskiMoog::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::KrajeskiMoog::Process",1,"Analog::Filters::MoogLadders::KrajeskiMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::KrajeskiMoog::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::KrajeskiMoog::Process",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__KrajeskiMoog,0))){
    SWIG_fail_ptr("KrajeskiMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__KrajeskiMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("KrajeskiMoog_Process",3,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KrajeskiMoog_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__KrajeskiMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_KrajeskiMoog_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__KrajeskiMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_KrajeskiMoog_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'KrajeskiMoog_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::KrajeskiMoog::Process(size_t,DspFloatType *,DspFloatType *)\n"
    "    Analog::Filters::MoogLadders::KrajeskiMoog::Process(size_t,DspFloatType *)\n");
  lua_error(L);return 0;
}


static int _wrap_KrajeskiMoog_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::KrajeskiMoog *arg1 = (Analog::Filters::MoogLadders::KrajeskiMoog *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::KrajeskiMoog::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::KrajeskiMoog::Tick",1,"Analog::Filters::MoogLadders::KrajeskiMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::KrajeskiMoog::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__KrajeskiMoog,0))){
    SWIG_fail_ptr("KrajeskiMoog_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__KrajeskiMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KrajeskiMoog_SetResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::KrajeskiMoog *arg1 = (Analog::Filters::MoogLadders::KrajeskiMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::KrajeskiMoog::SetResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::KrajeskiMoog::SetResonance",1,"Analog::Filters::MoogLadders::KrajeskiMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::KrajeskiMoog::SetResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__KrajeskiMoog,0))){
    SWIG_fail_ptr("KrajeskiMoog_SetResonance",1,SWIGTYPE_p_Analog__Filters__MoogLadders__KrajeskiMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KrajeskiMoog_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::KrajeskiMoog *arg1 = (Analog::Filters::MoogLadders::KrajeskiMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::KrajeskiMoog::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::KrajeskiMoog::SetCutoff",1,"Analog::Filters::MoogLadders::KrajeskiMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::KrajeskiMoog::SetCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__KrajeskiMoog,0))){
    SWIG_fail_ptr("KrajeskiMoog_SetCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__KrajeskiMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_KrajeskiMoog(void *obj) {
Analog::Filters::MoogLadders::KrajeskiMoog *arg1 = (Analog::Filters::MoogLadders::KrajeskiMoog *) obj;
delete arg1;
}
static int _proxy__wrap_new_KrajeskiMoog(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_KrajeskiMoog);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_KrajeskiMoog_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_KrajeskiMoog_methods[]= {
    { "Process", _wrap_KrajeskiMoog_Process},
    { "Tick", _wrap_KrajeskiMoog_Tick},
    { "SetResonance", _wrap_KrajeskiMoog_SetResonance},
    { "SetCutoff", _wrap_KrajeskiMoog_SetCutoff},
    {0,0}
};
static swig_lua_method swig_KrajeskiMoog_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_KrajeskiMoog_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_KrajeskiMoog_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_KrajeskiMoog_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_KrajeskiMoog_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_KrajeskiMoog_Sf_SwigStatic = {
    "KrajeskiMoog",
    swig_KrajeskiMoog_Sf_SwigStatic_methods,
    swig_KrajeskiMoog_Sf_SwigStatic_attributes,
    swig_KrajeskiMoog_Sf_SwigStatic_constants,
    swig_KrajeskiMoog_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_KrajeskiMoog_bases[] = {0,0};
static const char *swig_KrajeskiMoog_base_names[] = {"Analog::Filters::MoogLadders::LadderFilterBase *",0};
static swig_lua_class _wrap_class_KrajeskiMoog = { "KrajeskiMoog", "KrajeskiMoog", &SWIGTYPE_p_Analog__Filters__MoogLadders__KrajeskiMoog,_proxy__wrap_new_KrajeskiMoog, swig_delete_KrajeskiMoog, swig_KrajeskiMoog_methods, swig_KrajeskiMoog_attributes, &swig_KrajeskiMoog_Sf_SwigStatic, swig_KrajeskiMoog_meta, swig_KrajeskiMoog_bases, swig_KrajeskiMoog_base_names };

static int _wrap_new_MicrotrackerMoog(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::MicrotrackerMoog *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MicrotrackerMoog::MicrotrackerMoog",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::MicrotrackerMoog",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::MicrotrackerMoog *)new Analog::Filters::MoogLadders::MicrotrackerMoog(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MicrotrackerMoog_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MicrotrackerMoog *arg1 = (Analog::Filters::MoogLadders::MicrotrackerMoog *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MicrotrackerMoog::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::Process",1,"Analog::Filters::MoogLadders::MicrotrackerMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::Process",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::Process",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog,0))){
    SWIG_fail_ptr("MicrotrackerMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MicrotrackerMoog_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MicrotrackerMoog_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MicrotrackerMoog_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MicrotrackerMoog *arg1 = (Analog::Filters::MoogLadders::MicrotrackerMoog *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MicrotrackerMoog::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::Process",1,"Analog::Filters::MoogLadders::MicrotrackerMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::Process",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog,0))){
    SWIG_fail_ptr("MicrotrackerMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MicrotrackerMoog_Process",3,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MicrotrackerMoog_Process__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MicrotrackerMoog *arg1 = (Analog::Filters::MoogLadders::MicrotrackerMoog *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  uint32_t arg4 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MicrotrackerMoog::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::Process",1,"Analog::Filters::MoogLadders::MicrotrackerMoog *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::Process",2,"DspFloatType *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::Process",3,"DspFloatType *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::Process",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog,0))){
    SWIG_fail_ptr("MicrotrackerMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MicrotrackerMoog_Process",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MicrotrackerMoog_Process",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (uint32_t)lua_tonumber(L, 4);
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MicrotrackerMoog_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_MicrotrackerMoog_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MicrotrackerMoog_Process__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_MicrotrackerMoog_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MicrotrackerMoog_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::MicrotrackerMoog::Process(size_t,DspFloatType *,DspFloatType *)\n"
    "    Analog::Filters::MoogLadders::MicrotrackerMoog::Process(size_t,DspFloatType *)\n"
    "    Analog::Filters::MoogLadders::MicrotrackerMoog::Process(DspFloatType *,DspFloatType *,uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_MicrotrackerMoog_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MicrotrackerMoog *arg1 = (Analog::Filters::MoogLadders::MicrotrackerMoog *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MicrotrackerMoog::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::Tick",1,"Analog::Filters::MoogLadders::MicrotrackerMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog,0))){
    SWIG_fail_ptr("MicrotrackerMoog_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MicrotrackerMoog_SetResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MicrotrackerMoog *arg1 = (Analog::Filters::MoogLadders::MicrotrackerMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MicrotrackerMoog::SetResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::SetResonance",1,"Analog::Filters::MoogLadders::MicrotrackerMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::SetResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog,0))){
    SWIG_fail_ptr("MicrotrackerMoog_SetResonance",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MicrotrackerMoog_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MicrotrackerMoog *arg1 = (Analog::Filters::MoogLadders::MicrotrackerMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MicrotrackerMoog::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::SetCutoff",1,"Analog::Filters::MoogLadders::MicrotrackerMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MicrotrackerMoog::SetCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog,0))){
    SWIG_fail_ptr("MicrotrackerMoog_SetCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MicrotrackerMoog(void *obj) {
Analog::Filters::MoogLadders::MicrotrackerMoog *arg1 = (Analog::Filters::MoogLadders::MicrotrackerMoog *) obj;
delete arg1;
}
static int _proxy__wrap_new_MicrotrackerMoog(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MicrotrackerMoog);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MicrotrackerMoog_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MicrotrackerMoog_methods[]= {
    { "Process", _wrap_MicrotrackerMoog_Process},
    { "Tick", _wrap_MicrotrackerMoog_Tick},
    { "SetResonance", _wrap_MicrotrackerMoog_SetResonance},
    { "SetCutoff", _wrap_MicrotrackerMoog_SetCutoff},
    {0,0}
};
static swig_lua_method swig_MicrotrackerMoog_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MicrotrackerMoog_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MicrotrackerMoog_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MicrotrackerMoog_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MicrotrackerMoog_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MicrotrackerMoog_Sf_SwigStatic = {
    "MicrotrackerMoog",
    swig_MicrotrackerMoog_Sf_SwigStatic_methods,
    swig_MicrotrackerMoog_Sf_SwigStatic_attributes,
    swig_MicrotrackerMoog_Sf_SwigStatic_constants,
    swig_MicrotrackerMoog_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MicrotrackerMoog_bases[] = {0,0};
static const char *swig_MicrotrackerMoog_base_names[] = {"Analog::Filters::MoogLadders::LadderFilterBase *",0};
static swig_lua_class _wrap_class_MicrotrackerMoog = { "MicrotrackerMoog", "MicrotrackerMoog", &SWIGTYPE_p_Analog__Filters__MoogLadders__MicrotrackerMoog,_proxy__wrap_new_MicrotrackerMoog, swig_delete_MicrotrackerMoog, swig_MicrotrackerMoog_methods, swig_MicrotrackerMoog_attributes, &swig_MicrotrackerMoog_Sf_SwigStatic, swig_MicrotrackerMoog_meta, swig_MicrotrackerMoog_bases, swig_MicrotrackerMoog_base_names };

static int _wrap_new_MusicDSPMoog(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::MusicDSPMoog *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MusicDSPMoog::MusicDSPMoog",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MusicDSPMoog::MusicDSPMoog",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::MusicDSPMoog *)new Analog::Filters::MoogLadders::MusicDSPMoog(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__MusicDSPMoog,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MusicDSPMoog_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MusicDSPMoog *arg1 = (Analog::Filters::MoogLadders::MusicDSPMoog *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MusicDSPMoog::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MusicDSPMoog::Process",1,"Analog::Filters::MoogLadders::MusicDSPMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MusicDSPMoog::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MusicDSPMoog::Process",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::MusicDSPMoog::Process",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MusicDSPMoog,0))){
    SWIG_fail_ptr("MusicDSPMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MusicDSPMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MusicDSPMoog_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MusicDSPMoog_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MusicDSPMoog_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MusicDSPMoog *arg1 = (Analog::Filters::MoogLadders::MusicDSPMoog *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MusicDSPMoog::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MusicDSPMoog::Process",1,"Analog::Filters::MoogLadders::MusicDSPMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MusicDSPMoog::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MusicDSPMoog::Process",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MusicDSPMoog,0))){
    SWIG_fail_ptr("MusicDSPMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MusicDSPMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MusicDSPMoog_Process",3,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MusicDSPMoog_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MusicDSPMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_MusicDSPMoog_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MusicDSPMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_MusicDSPMoog_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MusicDSPMoog_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::MusicDSPMoog::Process(size_t,DspFloatType *,DspFloatType *)\n"
    "    Analog::Filters::MoogLadders::MusicDSPMoog::Process(size_t,DspFloatType *)\n");
  lua_error(L);return 0;
}


static int _wrap_MusicDSPMoog_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MusicDSPMoog *arg1 = (Analog::Filters::MoogLadders::MusicDSPMoog *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MusicDSPMoog::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MusicDSPMoog::Tick",1,"Analog::Filters::MoogLadders::MusicDSPMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MusicDSPMoog::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MusicDSPMoog,0))){
    SWIG_fail_ptr("MusicDSPMoog_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MusicDSPMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MusicDSPMoog_SetResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MusicDSPMoog *arg1 = (Analog::Filters::MoogLadders::MusicDSPMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MusicDSPMoog::SetResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MusicDSPMoog::SetResonance",1,"Analog::Filters::MoogLadders::MusicDSPMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MusicDSPMoog::SetResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MusicDSPMoog,0))){
    SWIG_fail_ptr("MusicDSPMoog_SetResonance",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MusicDSPMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MusicDSPMoog_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MusicDSPMoog *arg1 = (Analog::Filters::MoogLadders::MusicDSPMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MusicDSPMoog::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MusicDSPMoog::SetCutoff",1,"Analog::Filters::MoogLadders::MusicDSPMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MusicDSPMoog::SetCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MusicDSPMoog,0))){
    SWIG_fail_ptr("MusicDSPMoog_SetCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MusicDSPMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MusicDSPMoog(void *obj) {
Analog::Filters::MoogLadders::MusicDSPMoog *arg1 = (Analog::Filters::MoogLadders::MusicDSPMoog *) obj;
delete arg1;
}
static int _proxy__wrap_new_MusicDSPMoog(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MusicDSPMoog);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MusicDSPMoog_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MusicDSPMoog_methods[]= {
    { "Process", _wrap_MusicDSPMoog_Process},
    { "Tick", _wrap_MusicDSPMoog_Tick},
    { "SetResonance", _wrap_MusicDSPMoog_SetResonance},
    { "SetCutoff", _wrap_MusicDSPMoog_SetCutoff},
    {0,0}
};
static swig_lua_method swig_MusicDSPMoog_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MusicDSPMoog_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MusicDSPMoog_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MusicDSPMoog_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MusicDSPMoog_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MusicDSPMoog_Sf_SwigStatic = {
    "MusicDSPMoog",
    swig_MusicDSPMoog_Sf_SwigStatic_methods,
    swig_MusicDSPMoog_Sf_SwigStatic_attributes,
    swig_MusicDSPMoog_Sf_SwigStatic_constants,
    swig_MusicDSPMoog_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MusicDSPMoog_bases[] = {0,0};
static const char *swig_MusicDSPMoog_base_names[] = {"Analog::Filters::MoogLadders::LadderFilterBase *",0};
static swig_lua_class _wrap_class_MusicDSPMoog = { "MusicDSPMoog", "MusicDSPMoog", &SWIGTYPE_p_Analog__Filters__MoogLadders__MusicDSPMoog,_proxy__wrap_new_MusicDSPMoog, swig_delete_MusicDSPMoog, swig_MusicDSPMoog_methods, swig_MusicDSPMoog_attributes, &swig_MusicDSPMoog_Sf_SwigStatic, swig_MusicDSPMoog_meta, swig_MusicDSPMoog_bases, swig_MusicDSPMoog_base_names };

static int _wrap_new_VAOnePole(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::VAOnePole *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::VAOnePole::VAOnePole",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::VAOnePole::VAOnePole",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::VAOnePole *)new Analog::Filters::MoogLadders::VAOnePole(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__VAOnePole,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOnePole_Reset(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::VAOnePole *arg1 = (Analog::Filters::MoogLadders::VAOnePole *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::VAOnePole::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::VAOnePole::Reset",1,"Analog::Filters::MoogLadders::VAOnePole *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__VAOnePole,0))){
    SWIG_fail_ptr("VAOnePole_Reset",1,SWIGTYPE_p_Analog__Filters__MoogLadders__VAOnePole);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOnePole_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::VAOnePole *arg1 = (Analog::Filters::MoogLadders::VAOnePole *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::VAOnePole::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::VAOnePole::Tick",1,"Analog::Filters::MoogLadders::VAOnePole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::VAOnePole::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__VAOnePole,0))){
    SWIG_fail_ptr("VAOnePole_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__VAOnePole);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOnePole_SetFeedback(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::VAOnePole *arg1 = (Analog::Filters::MoogLadders::VAOnePole *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::VAOnePole::SetFeedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::VAOnePole::SetFeedback",1,"Analog::Filters::MoogLadders::VAOnePole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::VAOnePole::SetFeedback",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__VAOnePole,0))){
    SWIG_fail_ptr("VAOnePole_SetFeedback",1,SWIGTYPE_p_Analog__Filters__MoogLadders__VAOnePole);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetFeedback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOnePole_GetFeedbackOutput(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::VAOnePole *arg1 = (Analog::Filters::MoogLadders::VAOnePole *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::VAOnePole::GetFeedbackOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::VAOnePole::GetFeedbackOutput",1,"Analog::Filters::MoogLadders::VAOnePole *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__VAOnePole,0))){
    SWIG_fail_ptr("VAOnePole_GetFeedbackOutput",1,SWIGTYPE_p_Analog__Filters__MoogLadders__VAOnePole);
  }
  
  result = (DspFloatType)(arg1)->GetFeedbackOutput();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOnePole_SetAlpha(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::VAOnePole *arg1 = (Analog::Filters::MoogLadders::VAOnePole *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::VAOnePole::SetAlpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::VAOnePole::SetAlpha",1,"Analog::Filters::MoogLadders::VAOnePole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::VAOnePole::SetAlpha",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__VAOnePole,0))){
    SWIG_fail_ptr("VAOnePole_SetAlpha",1,SWIGTYPE_p_Analog__Filters__MoogLadders__VAOnePole);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetAlpha(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VAOnePole_SetBeta(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::VAOnePole *arg1 = (Analog::Filters::MoogLadders::VAOnePole *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::VAOnePole::SetBeta",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::VAOnePole::SetBeta",1,"Analog::Filters::MoogLadders::VAOnePole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::VAOnePole::SetBeta",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__VAOnePole,0))){
    SWIG_fail_ptr("VAOnePole_SetBeta",1,SWIGTYPE_p_Analog__Filters__MoogLadders__VAOnePole);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetBeta(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VAOnePole(void *obj) {
Analog::Filters::MoogLadders::VAOnePole *arg1 = (Analog::Filters::MoogLadders::VAOnePole *) obj;
delete arg1;
}
static int _proxy__wrap_new_VAOnePole(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VAOnePole);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VAOnePole_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VAOnePole_methods[]= {
    { "Reset", _wrap_VAOnePole_Reset},
    { "Tick", _wrap_VAOnePole_Tick},
    { "SetFeedback", _wrap_VAOnePole_SetFeedback},
    { "GetFeedbackOutput", _wrap_VAOnePole_GetFeedbackOutput},
    { "SetAlpha", _wrap_VAOnePole_SetAlpha},
    { "SetBeta", _wrap_VAOnePole_SetBeta},
    {0,0}
};
static swig_lua_method swig_VAOnePole_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VAOnePole_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VAOnePole_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VAOnePole_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VAOnePole_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VAOnePole_Sf_SwigStatic = {
    "VAOnePole",
    swig_VAOnePole_Sf_SwigStatic_methods,
    swig_VAOnePole_Sf_SwigStatic_attributes,
    swig_VAOnePole_Sf_SwigStatic_constants,
    swig_VAOnePole_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VAOnePole_bases[] = {0};
static const char *swig_VAOnePole_base_names[] = {0};
static swig_lua_class _wrap_class_VAOnePole = { "VAOnePole", "VAOnePole", &SWIGTYPE_p_Analog__Filters__MoogLadders__VAOnePole,_proxy__wrap_new_VAOnePole, swig_delete_VAOnePole, swig_VAOnePole_methods, swig_VAOnePole_attributes, &swig_VAOnePole_Sf_SwigStatic, swig_VAOnePole_meta, swig_VAOnePole_bases, swig_VAOnePole_base_names };

static int _wrap_new_OberheimVariationMoog(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::OberheimVariationMoog *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::OberheimVariationMoog::OberheimVariationMoog",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::OberheimVariationMoog::OberheimVariationMoog",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::OberheimVariationMoog *)new Analog::Filters::MoogLadders::OberheimVariationMoog(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__OberheimVariationMoog,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OberheimVariationMoog_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::OberheimVariationMoog *arg1 = (Analog::Filters::MoogLadders::OberheimVariationMoog *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::OberheimVariationMoog::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::OberheimVariationMoog::Process",1,"Analog::Filters::MoogLadders::OberheimVariationMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::OberheimVariationMoog::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::OberheimVariationMoog::Process",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::OberheimVariationMoog::Process",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__OberheimVariationMoog,0))){
    SWIG_fail_ptr("OberheimVariationMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__OberheimVariationMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OberheimVariationMoog_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OberheimVariationMoog_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OberheimVariationMoog_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::OberheimVariationMoog *arg1 = (Analog::Filters::MoogLadders::OberheimVariationMoog *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::OberheimVariationMoog::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::OberheimVariationMoog::Process",1,"Analog::Filters::MoogLadders::OberheimVariationMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::OberheimVariationMoog::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::OberheimVariationMoog::Process",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__OberheimVariationMoog,0))){
    SWIG_fail_ptr("OberheimVariationMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__OberheimVariationMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OberheimVariationMoog_Process",3,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OberheimVariationMoog_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__OberheimVariationMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OberheimVariationMoog_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__OberheimVariationMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_OberheimVariationMoog_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OberheimVariationMoog_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::OberheimVariationMoog::Process(size_t,DspFloatType *,DspFloatType *)\n"
    "    Analog::Filters::MoogLadders::OberheimVariationMoog::Process(size_t,DspFloatType *)\n");
  lua_error(L);return 0;
}


static int _wrap_OberheimVariationMoog_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::OberheimVariationMoog *arg1 = (Analog::Filters::MoogLadders::OberheimVariationMoog *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::OberheimVariationMoog::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::OberheimVariationMoog::Tick",1,"Analog::Filters::MoogLadders::OberheimVariationMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::OberheimVariationMoog::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__OberheimVariationMoog,0))){
    SWIG_fail_ptr("OberheimVariationMoog_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__OberheimVariationMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OberheimVariationMoog_SetResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::OberheimVariationMoog *arg1 = (Analog::Filters::MoogLadders::OberheimVariationMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::OberheimVariationMoog::SetResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::OberheimVariationMoog::SetResonance",1,"Analog::Filters::MoogLadders::OberheimVariationMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::OberheimVariationMoog::SetResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__OberheimVariationMoog,0))){
    SWIG_fail_ptr("OberheimVariationMoog_SetResonance",1,SWIGTYPE_p_Analog__Filters__MoogLadders__OberheimVariationMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OberheimVariationMoog_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::OberheimVariationMoog *arg1 = (Analog::Filters::MoogLadders::OberheimVariationMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::OberheimVariationMoog::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::OberheimVariationMoog::SetCutoff",1,"Analog::Filters::MoogLadders::OberheimVariationMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::OberheimVariationMoog::SetCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__OberheimVariationMoog,0))){
    SWIG_fail_ptr("OberheimVariationMoog_SetCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__OberheimVariationMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OberheimVariationMoog(void *obj) {
Analog::Filters::MoogLadders::OberheimVariationMoog *arg1 = (Analog::Filters::MoogLadders::OberheimVariationMoog *) obj;
delete arg1;
}
static int _proxy__wrap_new_OberheimVariationMoog(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OberheimVariationMoog);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OberheimVariationMoog_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OberheimVariationMoog_methods[]= {
    { "Process", _wrap_OberheimVariationMoog_Process},
    { "Tick", _wrap_OberheimVariationMoog_Tick},
    { "SetResonance", _wrap_OberheimVariationMoog_SetResonance},
    { "SetCutoff", _wrap_OberheimVariationMoog_SetCutoff},
    {0,0}
};
static swig_lua_method swig_OberheimVariationMoog_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OberheimVariationMoog_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OberheimVariationMoog_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OberheimVariationMoog_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OberheimVariationMoog_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OberheimVariationMoog_Sf_SwigStatic = {
    "OberheimVariationMoog",
    swig_OberheimVariationMoog_Sf_SwigStatic_methods,
    swig_OberheimVariationMoog_Sf_SwigStatic_attributes,
    swig_OberheimVariationMoog_Sf_SwigStatic_constants,
    swig_OberheimVariationMoog_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OberheimVariationMoog_bases[] = {0,0};
static const char *swig_OberheimVariationMoog_base_names[] = {"Analog::Filters::MoogLadders::LadderFilterBase *",0};
static swig_lua_class _wrap_class_OberheimVariationMoog = { "OberheimVariationMoog", "OberheimVariationMoog", &SWIGTYPE_p_Analog__Filters__MoogLadders__OberheimVariationMoog,_proxy__wrap_new_OberheimVariationMoog, swig_delete_OberheimVariationMoog, swig_OberheimVariationMoog_methods, swig_OberheimVariationMoog_attributes, &swig_OberheimVariationMoog_Sf_SwigStatic, swig_OberheimVariationMoog_meta, swig_OberheimVariationMoog_bases, swig_OberheimVariationMoog_base_names };

static int _wrap_new_RKSimulationMoog(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::RKSimulationMoog *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RKSimulationMoog::RKSimulationMoog",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RKSimulationMoog::RKSimulationMoog",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::RKSimulationMoog *)new Analog::Filters::MoogLadders::RKSimulationMoog(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RKSimulationMoog,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RKSimulationMoog_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RKSimulationMoog *arg1 = (Analog::Filters::MoogLadders::RKSimulationMoog *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RKSimulationMoog::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RKSimulationMoog::Process",1,"Analog::Filters::MoogLadders::RKSimulationMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RKSimulationMoog::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::RKSimulationMoog::Process",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::RKSimulationMoog::Process",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__RKSimulationMoog,0))){
    SWIG_fail_ptr("RKSimulationMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__RKSimulationMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RKSimulationMoog_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RKSimulationMoog_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RKSimulationMoog_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RKSimulationMoog *arg1 = (Analog::Filters::MoogLadders::RKSimulationMoog *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RKSimulationMoog::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RKSimulationMoog::Process",1,"Analog::Filters::MoogLadders::RKSimulationMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RKSimulationMoog::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::RKSimulationMoog::Process",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__RKSimulationMoog,0))){
    SWIG_fail_ptr("RKSimulationMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__RKSimulationMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RKSimulationMoog_Process",3,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RKSimulationMoog_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__RKSimulationMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RKSimulationMoog_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__RKSimulationMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RKSimulationMoog_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RKSimulationMoog_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::RKSimulationMoog::Process(size_t,DspFloatType *,DspFloatType *)\n"
    "    Analog::Filters::MoogLadders::RKSimulationMoog::Process(size_t,DspFloatType *)\n");
  lua_error(L);return 0;
}


static int _wrap_RKSimulationMoog_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RKSimulationMoog *arg1 = (Analog::Filters::MoogLadders::RKSimulationMoog *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RKSimulationMoog::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RKSimulationMoog::Tick",1,"Analog::Filters::MoogLadders::RKSimulationMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RKSimulationMoog::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__RKSimulationMoog,0))){
    SWIG_fail_ptr("RKSimulationMoog_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__RKSimulationMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RKSimulationMoog_SetResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RKSimulationMoog *arg1 = (Analog::Filters::MoogLadders::RKSimulationMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RKSimulationMoog::SetResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RKSimulationMoog::SetResonance",1,"Analog::Filters::MoogLadders::RKSimulationMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RKSimulationMoog::SetResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__RKSimulationMoog,0))){
    SWIG_fail_ptr("RKSimulationMoog_SetResonance",1,SWIGTYPE_p_Analog__Filters__MoogLadders__RKSimulationMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RKSimulationMoog_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::RKSimulationMoog *arg1 = (Analog::Filters::MoogLadders::RKSimulationMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RKSimulationMoog::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RKSimulationMoog::SetCutoff",1,"Analog::Filters::MoogLadders::RKSimulationMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RKSimulationMoog::SetCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__RKSimulationMoog,0))){
    SWIG_fail_ptr("RKSimulationMoog_SetCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__RKSimulationMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RKSimulationMoog(void *obj) {
Analog::Filters::MoogLadders::RKSimulationMoog *arg1 = (Analog::Filters::MoogLadders::RKSimulationMoog *) obj;
delete arg1;
}
static int _proxy__wrap_new_RKSimulationMoog(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RKSimulationMoog);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RKSimulationMoog_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RKSimulationMoog_methods[]= {
    { "Process", _wrap_RKSimulationMoog_Process},
    { "Tick", _wrap_RKSimulationMoog_Tick},
    { "SetResonance", _wrap_RKSimulationMoog_SetResonance},
    { "SetCutoff", _wrap_RKSimulationMoog_SetCutoff},
    {0,0}
};
static swig_lua_method swig_RKSimulationMoog_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RKSimulationMoog_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RKSimulationMoog_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RKSimulationMoog_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RKSimulationMoog_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RKSimulationMoog_Sf_SwigStatic = {
    "RKSimulationMoog",
    swig_RKSimulationMoog_Sf_SwigStatic_methods,
    swig_RKSimulationMoog_Sf_SwigStatic_attributes,
    swig_RKSimulationMoog_Sf_SwigStatic_constants,
    swig_RKSimulationMoog_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RKSimulationMoog_bases[] = {0,0};
static const char *swig_RKSimulationMoog_base_names[] = {"Analog::Filters::MoogLadders::LadderFilterBase *",0};
static swig_lua_class _wrap_class_RKSimulationMoog = { "RKSimulationMoog", "RKSimulationMoog", &SWIGTYPE_p_Analog__Filters__MoogLadders__RKSimulationMoog,_proxy__wrap_new_RKSimulationMoog, swig_delete_RKSimulationMoog, swig_RKSimulationMoog_methods, swig_RKSimulationMoog_attributes, &swig_RKSimulationMoog_Sf_SwigStatic, swig_RKSimulationMoog_meta, swig_RKSimulationMoog_bases, swig_RKSimulationMoog_base_names };

static int _wrap_new_SimplifiedMoog(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::SimplifiedMoog *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::SimplifiedMoog::SimplifiedMoog",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::SimplifiedMoog::SimplifiedMoog",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::SimplifiedMoog *)new Analog::Filters::MoogLadders::SimplifiedMoog(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__SimplifiedMoog,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimplifiedMoog_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::SimplifiedMoog *arg1 = (Analog::Filters::MoogLadders::SimplifiedMoog *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::SimplifiedMoog::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::SimplifiedMoog::Process",1,"Analog::Filters::MoogLadders::SimplifiedMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::SimplifiedMoog::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::SimplifiedMoog::Process",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::SimplifiedMoog::Process",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__SimplifiedMoog,0))){
    SWIG_fail_ptr("SimplifiedMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__SimplifiedMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SimplifiedMoog_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SimplifiedMoog_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimplifiedMoog_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::SimplifiedMoog *arg1 = (Analog::Filters::MoogLadders::SimplifiedMoog *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::SimplifiedMoog::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::SimplifiedMoog::Process",1,"Analog::Filters::MoogLadders::SimplifiedMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::SimplifiedMoog::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::SimplifiedMoog::Process",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__SimplifiedMoog,0))){
    SWIG_fail_ptr("SimplifiedMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__SimplifiedMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SimplifiedMoog_Process",3,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimplifiedMoog_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__SimplifiedMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SimplifiedMoog_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__SimplifiedMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_SimplifiedMoog_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SimplifiedMoog_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::SimplifiedMoog::Process(size_t,DspFloatType *,DspFloatType *)\n"
    "    Analog::Filters::MoogLadders::SimplifiedMoog::Process(size_t,DspFloatType *)\n");
  lua_error(L);return 0;
}


static int _wrap_SimplifiedMoog_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::SimplifiedMoog *arg1 = (Analog::Filters::MoogLadders::SimplifiedMoog *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::SimplifiedMoog::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::SimplifiedMoog::Tick",1,"Analog::Filters::MoogLadders::SimplifiedMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::SimplifiedMoog::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__SimplifiedMoog,0))){
    SWIG_fail_ptr("SimplifiedMoog_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__SimplifiedMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimplifiedMoog_SetResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::SimplifiedMoog *arg1 = (Analog::Filters::MoogLadders::SimplifiedMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::SimplifiedMoog::SetResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::SimplifiedMoog::SetResonance",1,"Analog::Filters::MoogLadders::SimplifiedMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::SimplifiedMoog::SetResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__SimplifiedMoog,0))){
    SWIG_fail_ptr("SimplifiedMoog_SetResonance",1,SWIGTYPE_p_Analog__Filters__MoogLadders__SimplifiedMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimplifiedMoog_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::SimplifiedMoog *arg1 = (Analog::Filters::MoogLadders::SimplifiedMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::SimplifiedMoog::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::SimplifiedMoog::SetCutoff",1,"Analog::Filters::MoogLadders::SimplifiedMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::SimplifiedMoog::SetCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__SimplifiedMoog,0))){
    SWIG_fail_ptr("SimplifiedMoog_SetCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__SimplifiedMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SimplifiedMoog(void *obj) {
Analog::Filters::MoogLadders::SimplifiedMoog *arg1 = (Analog::Filters::MoogLadders::SimplifiedMoog *) obj;
delete arg1;
}
static int _proxy__wrap_new_SimplifiedMoog(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SimplifiedMoog);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SimplifiedMoog_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SimplifiedMoog_methods[]= {
    { "Process", _wrap_SimplifiedMoog_Process},
    { "Tick", _wrap_SimplifiedMoog_Tick},
    { "SetResonance", _wrap_SimplifiedMoog_SetResonance},
    { "SetCutoff", _wrap_SimplifiedMoog_SetCutoff},
    {0,0}
};
static swig_lua_method swig_SimplifiedMoog_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SimplifiedMoog_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SimplifiedMoog_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SimplifiedMoog_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SimplifiedMoog_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SimplifiedMoog_Sf_SwigStatic = {
    "SimplifiedMoog",
    swig_SimplifiedMoog_Sf_SwigStatic_methods,
    swig_SimplifiedMoog_Sf_SwigStatic_attributes,
    swig_SimplifiedMoog_Sf_SwigStatic_constants,
    swig_SimplifiedMoog_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SimplifiedMoog_bases[] = {0,0};
static const char *swig_SimplifiedMoog_base_names[] = {"Analog::Filters::MoogLadders::LadderFilterBase *",0};
static swig_lua_class _wrap_class_SimplifiedMoog = { "SimplifiedMoog", "SimplifiedMoog", &SWIGTYPE_p_Analog__Filters__MoogLadders__SimplifiedMoog,_proxy__wrap_new_SimplifiedMoog, swig_delete_SimplifiedMoog, swig_SimplifiedMoog_methods, swig_SimplifiedMoog_attributes, &swig_SimplifiedMoog_Sf_SwigStatic, swig_SimplifiedMoog_meta, swig_SimplifiedMoog_bases, swig_SimplifiedMoog_base_names };

static int _wrap_S_STILSON_GAINTABLE_set(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::S_STILSON_GAINTABLE",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::S_STILSON_GAINTABLE",1,"DspFloatType [199]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("S_STILSON_GAINTABLE_set",1,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) Analog::Filters::MoogLadders::S_STILSON_GAINTABLE;
    for (ii = 0; ii < (size_t)199; ii++) b[ii] = *((DspFloatType *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_S_STILSON_GAINTABLE_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::S_STILSON_GAINTABLE",0,0)
  result = (DspFloatType *)(DspFloatType *)Analog::Filters::MoogLadders::S_STILSON_GAINTABLE;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StilsonMoog(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::StilsonMoog *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog::StilsonMoog",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::StilsonMoog",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::StilsonMoog *)new Analog::Filters::MoogLadders::StilsonMoog(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog *arg1 = (Analog::Filters::MoogLadders::StilsonMoog *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::Process",1,"Analog::Filters::MoogLadders::StilsonMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::Process",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::Process",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog,0))){
    SWIG_fail_ptr("StilsonMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StilsonMoog_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StilsonMoog_Process",4,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog *arg1 = (Analog::Filters::MoogLadders::StilsonMoog *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::Process",1,"Analog::Filters::MoogLadders::StilsonMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::Process",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog,0))){
    SWIG_fail_ptr("StilsonMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StilsonMoog_Process",3,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog_Process__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog *arg1 = (Analog::Filters::MoogLadders::StilsonMoog *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  uint32_t arg4 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::Process",1,"Analog::Filters::MoogLadders::StilsonMoog *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::Process",2,"DspFloatType *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::Process",3,"DspFloatType *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::Process",4,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog,0))){
    SWIG_fail_ptr("StilsonMoog_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StilsonMoog_Process",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StilsonMoog_Process",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (uint32_t)lua_tonumber(L, 4);
  (arg1)->Process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StilsonMoog_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_StilsonMoog_Process__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StilsonMoog_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StilsonMoog_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::StilsonMoog::Process(size_t,DspFloatType *,DspFloatType *)\n"
    "    Analog::Filters::MoogLadders::StilsonMoog::Process(size_t,DspFloatType *)\n"
    "    Analog::Filters::MoogLadders::StilsonMoog::Process(DspFloatType *,DspFloatType *,uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_StilsonMoog_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog *arg1 = (Analog::Filters::MoogLadders::StilsonMoog *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::Tick",1,"Analog::Filters::MoogLadders::StilsonMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog,0))){
    SWIG_fail_ptr("StilsonMoog_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog_SetResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog *arg1 = (Analog::Filters::MoogLadders::StilsonMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog::SetResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::SetResonance",1,"Analog::Filters::MoogLadders::StilsonMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::SetResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog,0))){
    SWIG_fail_ptr("StilsonMoog_SetResonance",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog *arg1 = (Analog::Filters::MoogLadders::StilsonMoog *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::SetCutoff",1,"Analog::Filters::MoogLadders::StilsonMoog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog::SetCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog,0))){
    SWIG_fail_ptr("StilsonMoog_SetCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StilsonMoog(void *obj) {
Analog::Filters::MoogLadders::StilsonMoog *arg1 = (Analog::Filters::MoogLadders::StilsonMoog *) obj;
delete arg1;
}
static int _proxy__wrap_new_StilsonMoog(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StilsonMoog);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StilsonMoog_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StilsonMoog_methods[]= {
    { "Process", _wrap_StilsonMoog_Process},
    { "Tick", _wrap_StilsonMoog_Tick},
    { "SetResonance", _wrap_StilsonMoog_SetResonance},
    { "SetCutoff", _wrap_StilsonMoog_SetCutoff},
    {0,0}
};
static swig_lua_method swig_StilsonMoog_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StilsonMoog_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StilsonMoog_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StilsonMoog_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StilsonMoog_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StilsonMoog_Sf_SwigStatic = {
    "StilsonMoog",
    swig_StilsonMoog_Sf_SwigStatic_methods,
    swig_StilsonMoog_Sf_SwigStatic_attributes,
    swig_StilsonMoog_Sf_SwigStatic_constants,
    swig_StilsonMoog_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StilsonMoog_bases[] = {0,0};
static const char *swig_StilsonMoog_base_names[] = {"Analog::Filters::MoogLadders::LadderFilterBase *",0};
static swig_lua_class _wrap_class_StilsonMoog = { "StilsonMoog", "StilsonMoog", &SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog,_proxy__wrap_new_StilsonMoog, swig_delete_StilsonMoog, swig_StilsonMoog_methods, swig_StilsonMoog_attributes, &swig_StilsonMoog_Sf_SwigStatic, swig_StilsonMoog_meta, swig_StilsonMoog_bases, swig_StilsonMoog_base_names };

static int _wrap_MoogFilter1_f_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::f",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::f",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_f_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->f = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_f_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::f",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::f",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_f_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->f);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::fs",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_fs_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::fs",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_fs_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_k_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::k",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::k",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::k",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_k_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->k = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_k_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::k",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::k",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_k_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->k);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_p_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::p",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::p",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::p",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_p_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->p = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_p_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::p",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_p_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->p);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_scale_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::scale",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::scale",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_scale_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->scale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_scale_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::scale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::scale",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_scale_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->scale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_r_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::r",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::r",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_r_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_r_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::r",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_r_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_y1_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::y1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::y1",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::y1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_y1_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_y1_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::y1",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_y1_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->y1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_y2_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::y2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::y2",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::y2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_y2_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_y2_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::y2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::y2",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_y2_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->y2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_y3_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::y3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::y3",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::y3",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_y3_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y3 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_y3_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::y3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::y3",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_y3_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->y3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_y4_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::y4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::y4",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::y4",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_y4_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y4 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_y4_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::y4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::y4",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_y4_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->y4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_oldx_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::oldx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::oldx",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::oldx",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_oldx_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->oldx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_oldx_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::oldx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::oldx",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_oldx_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->oldx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_oldy1_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::oldy1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::oldy1",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::oldy1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_oldy1_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->oldy1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_oldy1_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::oldy1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::oldy1",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_oldy1_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->oldy1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_oldy2_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::oldy2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::oldy2",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::oldy2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_oldy2_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->oldy2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_oldy2_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::oldy2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::oldy2",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_oldy2_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->oldy2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_oldy3_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::oldy3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::oldy3",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::oldy3",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_oldy3_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->oldy3 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_oldy3_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::oldy3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::oldy3",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_oldy3_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->oldy3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_cutoff_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::cutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::cutoff",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::cutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_cutoff_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->cutoff = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_cutoff_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::cutoff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::cutoff",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_cutoff_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->cutoff);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Q",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_Q_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Q",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_Q_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::x",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::x",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_x_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::x",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_x_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  result = (DspFloatType) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MoogFilter1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Analog::Filters::MoogLadders::MoogFilter1 *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::MoogFilter1",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::MoogFilter1",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::MoogFilter1",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::MoogFilter1",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Analog::Filters::MoogLadders::MoogFilter1 *)new Analog::Filters::MoogLadders::MoogFilter1(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_coefficients(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::coefficients",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::coefficients",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::coefficients",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::coefficients",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::coefficients",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_coefficients",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  (arg1)->coefficients(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::setCutoff",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_setCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::setResonance",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_setResonance",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Tick",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Tick",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Tick",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter1::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Tick",1,"Analog::Filters::MoogLadders::MoogFilter1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter1::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,0))){
    SWIG_fail_ptr("MoogFilter1_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter1_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MoogFilter1_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MoogFilter1_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MoogFilter1_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MoogFilter1_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MoogFilter1_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::MoogFilter1::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::MoogFilter1::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::MoogFilter1::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::MoogFilter1::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_MoogFilter1(void *obj) {
Analog::Filters::MoogLadders::MoogFilter1 *arg1 = (Analog::Filters::MoogLadders::MoogFilter1 *) obj;
delete arg1;
}
static int _proxy__wrap_new_MoogFilter1(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MoogFilter1);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MoogFilter1_attributes[] = {
    { "f", _wrap_MoogFilter1_f_get, _wrap_MoogFilter1_f_set },
    { "fs", _wrap_MoogFilter1_fs_get, _wrap_MoogFilter1_fs_set },
    { "k", _wrap_MoogFilter1_k_get, _wrap_MoogFilter1_k_set },
    { "p", _wrap_MoogFilter1_p_get, _wrap_MoogFilter1_p_set },
    { "scale", _wrap_MoogFilter1_scale_get, _wrap_MoogFilter1_scale_set },
    { "r", _wrap_MoogFilter1_r_get, _wrap_MoogFilter1_r_set },
    { "y1", _wrap_MoogFilter1_y1_get, _wrap_MoogFilter1_y1_set },
    { "y2", _wrap_MoogFilter1_y2_get, _wrap_MoogFilter1_y2_set },
    { "y3", _wrap_MoogFilter1_y3_get, _wrap_MoogFilter1_y3_set },
    { "y4", _wrap_MoogFilter1_y4_get, _wrap_MoogFilter1_y4_set },
    { "oldx", _wrap_MoogFilter1_oldx_get, _wrap_MoogFilter1_oldx_set },
    { "oldy1", _wrap_MoogFilter1_oldy1_get, _wrap_MoogFilter1_oldy1_set },
    { "oldy2", _wrap_MoogFilter1_oldy2_get, _wrap_MoogFilter1_oldy2_set },
    { "oldy3", _wrap_MoogFilter1_oldy3_get, _wrap_MoogFilter1_oldy3_set },
    { "cutoff", _wrap_MoogFilter1_cutoff_get, _wrap_MoogFilter1_cutoff_set },
    { "Q", _wrap_MoogFilter1_Q_get, _wrap_MoogFilter1_Q_set },
    { "x", _wrap_MoogFilter1_x_get, _wrap_MoogFilter1_x_set },
    {0,0,0}
};
static swig_lua_method swig_MoogFilter1_methods[]= {
    { "coefficients", _wrap_MoogFilter1_coefficients},
    { "setCutoff", _wrap_MoogFilter1_setCutoff},
    { "setResonance", _wrap_MoogFilter1_setResonance},
    { "Tick", _wrap_MoogFilter1_Tick},
    {0,0}
};
static swig_lua_method swig_MoogFilter1_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MoogFilter1_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MoogFilter1_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MoogFilter1_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MoogFilter1_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MoogFilter1_Sf_SwigStatic = {
    "MoogFilter1",
    swig_MoogFilter1_Sf_SwigStatic_methods,
    swig_MoogFilter1_Sf_SwigStatic_attributes,
    swig_MoogFilter1_Sf_SwigStatic_constants,
    swig_MoogFilter1_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MoogFilter1_bases[] = {0};
static const char *swig_MoogFilter1_base_names[] = {0};
static swig_lua_class _wrap_class_MoogFilter1 = { "MoogFilter1", "MoogFilter1", &SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter1,_proxy__wrap_new_MoogFilter1, swig_delete_MoogFilter1, swig_MoogFilter1_methods, swig_MoogFilter1_attributes, &swig_MoogFilter1_Sf_SwigStatic, swig_MoogFilter1_meta, swig_MoogFilter1_bases, swig_MoogFilter1_base_names };

static int _wrap_MoogFilter2_f_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::f",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::f",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_f_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->f = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_f_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::f",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::f",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_f_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  result = (DspFloatType) ((arg1)->f);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_p_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::p",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::p",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::p",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_p_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->p = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_p_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::p",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_p_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  result = (DspFloatType) ((arg1)->p);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_q_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::q",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_q_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_q_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::q",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_q_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  result = (DspFloatType) ((arg1)->q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_b0_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::b0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::b0",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::b0",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_b0_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->b0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_b0_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::b0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::b0",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_b0_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  result = (DspFloatType) ((arg1)->b0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_b1_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::b1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::b1",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::b1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_b1_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->b1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_b1_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::b1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::b1",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_b1_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  result = (DspFloatType) ((arg1)->b1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_b2_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::b2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::b2",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::b2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_b2_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->b2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_b2_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::b2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::b2",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_b2_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  result = (DspFloatType) ((arg1)->b2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_b3_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::b3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::b3",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::b3",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_b3_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->b3 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_b3_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::b3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::b3",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_b3_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  result = (DspFloatType) ((arg1)->b3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_b4_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::b4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::b4",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::b4",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_b4_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->b4 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_b4_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::b4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::b4",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_b4_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  result = (DspFloatType) ((arg1)->b4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_t1_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::t1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::t1",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::t1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_t1_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->t1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_t1_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::t1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::t1",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_t1_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  result = (DspFloatType) ((arg1)->t1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_t2_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::t2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::t2",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::t2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_t2_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->t2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_t2_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::t2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::t2",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_t2_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  result = (DspFloatType) ((arg1)->t2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::fs",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_fs_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::fs",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_fs_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  result = (DspFloatType) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::fc",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_fc_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::fc",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_fc_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_res_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::res",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::res",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::res",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_res_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->res = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_res_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::res",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::res",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_res_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  result = (DspFloatType) ((arg1)->res);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MoogFilter2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Analog::Filters::MoogLadders::MoogFilter2 *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::MoogFilter2",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::MoogFilter2",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::MoogFilter2",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::MoogFilter2",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Analog::Filters::MoogLadders::MoogFilter2 *)new Analog::Filters::MoogLadders::MoogFilter2(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_calc(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::calc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::calc",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_calc",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  (arg1)->calc();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::setCutoff",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_setCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::setResonance",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_setResonance",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::Tick",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::Tick",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::Tick",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogFilter2::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::Tick",1,"Analog::Filters::MoogLadders::MoogFilter2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogFilter2::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,0))){
    SWIG_fail_ptr("MoogFilter2_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogFilter2_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MoogFilter2_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MoogFilter2_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MoogFilter2_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MoogFilter2_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MoogFilter2_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::MoogFilter2::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::MoogFilter2::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::MoogFilter2::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::MoogFilter2::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_MoogFilter2(void *obj) {
Analog::Filters::MoogLadders::MoogFilter2 *arg1 = (Analog::Filters::MoogLadders::MoogFilter2 *) obj;
delete arg1;
}
static int _proxy__wrap_new_MoogFilter2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MoogFilter2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MoogFilter2_attributes[] = {
    { "f", _wrap_MoogFilter2_f_get, _wrap_MoogFilter2_f_set },
    { "p", _wrap_MoogFilter2_p_get, _wrap_MoogFilter2_p_set },
    { "q", _wrap_MoogFilter2_q_get, _wrap_MoogFilter2_q_set },
    { "b0", _wrap_MoogFilter2_b0_get, _wrap_MoogFilter2_b0_set },
    { "b1", _wrap_MoogFilter2_b1_get, _wrap_MoogFilter2_b1_set },
    { "b2", _wrap_MoogFilter2_b2_get, _wrap_MoogFilter2_b2_set },
    { "b3", _wrap_MoogFilter2_b3_get, _wrap_MoogFilter2_b3_set },
    { "b4", _wrap_MoogFilter2_b4_get, _wrap_MoogFilter2_b4_set },
    { "t1", _wrap_MoogFilter2_t1_get, _wrap_MoogFilter2_t1_set },
    { "t2", _wrap_MoogFilter2_t2_get, _wrap_MoogFilter2_t2_set },
    { "fs", _wrap_MoogFilter2_fs_get, _wrap_MoogFilter2_fs_set },
    { "fc", _wrap_MoogFilter2_fc_get, _wrap_MoogFilter2_fc_set },
    { "res", _wrap_MoogFilter2_res_get, _wrap_MoogFilter2_res_set },
    {0,0,0}
};
static swig_lua_method swig_MoogFilter2_methods[]= {
    { "calc", _wrap_MoogFilter2_calc},
    { "setCutoff", _wrap_MoogFilter2_setCutoff},
    { "setResonance", _wrap_MoogFilter2_setResonance},
    { "Tick", _wrap_MoogFilter2_Tick},
    {0,0}
};
static swig_lua_method swig_MoogFilter2_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MoogFilter2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MoogFilter2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MoogFilter2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MoogFilter2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MoogFilter2_Sf_SwigStatic = {
    "MoogFilter2",
    swig_MoogFilter2_Sf_SwigStatic_methods,
    swig_MoogFilter2_Sf_SwigStatic_attributes,
    swig_MoogFilter2_Sf_SwigStatic_constants,
    swig_MoogFilter2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MoogFilter2_bases[] = {0};
static const char *swig_MoogFilter2_base_names[] = {0};
static swig_lua_class _wrap_class_MoogFilter2 = { "MoogFilter2", "MoogFilter2", &SWIGTYPE_p_Analog__Filters__MoogLadders__MoogFilter2,_proxy__wrap_new_MoogFilter2, swig_delete_MoogFilter2, swig_MoogFilter2_methods, swig_MoogFilter2_attributes, &swig_MoogFilter2_Sf_SwigStatic, swig_MoogFilter2_meta, swig_MoogFilter2_bases, swig_MoogFilter2_base_names };

static int _wrap_MoogVCF_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::fc",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_fc_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::fc",1,"Analog::Filters::MoogLadders::MoogVCF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_fc_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::fs",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_fs_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::fs",1,"Analog::Filters::MoogLadders::MoogVCF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_fs_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  result = (DspFloatType) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_res_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::res",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::res",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::res",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_res_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->res = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_res_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::res",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::res",1,"Analog::Filters::MoogLadders::MoogVCF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_res_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  result = (DspFloatType) ((arg1)->res);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_out1_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::out1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::out1",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::out1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_out1_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->out1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_out1_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::out1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::out1",1,"Analog::Filters::MoogLadders::MoogVCF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_out1_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  result = (DspFloatType) ((arg1)->out1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_out2_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::out2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::out2",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::out2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_out2_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->out2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_out2_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::out2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::out2",1,"Analog::Filters::MoogLadders::MoogVCF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_out2_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  result = (DspFloatType) ((arg1)->out2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_out3_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::out3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::out3",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::out3",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_out3_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->out3 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_out3_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::out3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::out3",1,"Analog::Filters::MoogLadders::MoogVCF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_out3_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  result = (DspFloatType) ((arg1)->out3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_out4_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::out4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::out4",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::out4",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_out4_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->out4 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_out4_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::out4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::out4",1,"Analog::Filters::MoogLadders::MoogVCF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_out4_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  result = (DspFloatType) ((arg1)->out4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_in1_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::in1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::in1",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::in1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_in1_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->in1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_in1_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::in1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::in1",1,"Analog::Filters::MoogLadders::MoogVCF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_in1_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  result = (DspFloatType) ((arg1)->in1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_in2_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::in2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::in2",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::in2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_in2_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->in2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_in2_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::in2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::in2",1,"Analog::Filters::MoogLadders::MoogVCF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_in2_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  result = (DspFloatType) ((arg1)->in2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_in3_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::in3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::in3",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::in3",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_in3_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->in3 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_in3_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::in3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::in3",1,"Analog::Filters::MoogLadders::MoogVCF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_in3_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  result = (DspFloatType) ((arg1)->in3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_in4_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::in4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::in4",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::in4",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_in4_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->in4 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_in4_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::in4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::in4",1,"Analog::Filters::MoogLadders::MoogVCF *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_in4_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  result = (DspFloatType) ((arg1)->in4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MoogVCF(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Analog::Filters::MoogLadders::MoogVCF *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::MoogVCF",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::MoogVCF",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::MoogVCF",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::MoogVCF",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Analog::Filters::MoogLadders::MoogVCF *)new Analog::Filters::MoogLadders::MoogVCF(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::setCutoff",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_setCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::setResonance",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_setResonance",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::Tick",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::Tick",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::Tick",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogVCF::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::Tick",1,"Analog::Filters::MoogLadders::MoogVCF *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogVCF::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,0))){
    SWIG_fail_ptr("MoogVCF_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogVCF_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MoogVCF_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MoogVCF_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MoogVCF_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MoogVCF_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MoogVCF_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::MoogVCF::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::MoogVCF::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::MoogVCF::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::MoogVCF::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_MoogVCF(void *obj) {
Analog::Filters::MoogLadders::MoogVCF *arg1 = (Analog::Filters::MoogLadders::MoogVCF *) obj;
delete arg1;
}
static int _proxy__wrap_new_MoogVCF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MoogVCF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MoogVCF_attributes[] = {
    { "fc", _wrap_MoogVCF_fc_get, _wrap_MoogVCF_fc_set },
    { "fs", _wrap_MoogVCF_fs_get, _wrap_MoogVCF_fs_set },
    { "res", _wrap_MoogVCF_res_get, _wrap_MoogVCF_res_set },
    { "out1", _wrap_MoogVCF_out1_get, _wrap_MoogVCF_out1_set },
    { "out2", _wrap_MoogVCF_out2_get, _wrap_MoogVCF_out2_set },
    { "out3", _wrap_MoogVCF_out3_get, _wrap_MoogVCF_out3_set },
    { "out4", _wrap_MoogVCF_out4_get, _wrap_MoogVCF_out4_set },
    { "in1", _wrap_MoogVCF_in1_get, _wrap_MoogVCF_in1_set },
    { "in2", _wrap_MoogVCF_in2_get, _wrap_MoogVCF_in2_set },
    { "in3", _wrap_MoogVCF_in3_get, _wrap_MoogVCF_in3_set },
    { "in4", _wrap_MoogVCF_in4_get, _wrap_MoogVCF_in4_set },
    {0,0,0}
};
static swig_lua_method swig_MoogVCF_methods[]= {
    { "setCutoff", _wrap_MoogVCF_setCutoff},
    { "setResonance", _wrap_MoogVCF_setResonance},
    { "Tick", _wrap_MoogVCF_Tick},
    {0,0}
};
static swig_lua_method swig_MoogVCF_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MoogVCF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MoogVCF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MoogVCF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MoogVCF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MoogVCF_Sf_SwigStatic = {
    "MoogVCF",
    swig_MoogVCF_Sf_SwigStatic_methods,
    swig_MoogVCF_Sf_SwigStatic_attributes,
    swig_MoogVCF_Sf_SwigStatic_constants,
    swig_MoogVCF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MoogVCF_bases[] = {0};
static const char *swig_MoogVCF_base_names[] = {0};
static swig_lua_class _wrap_class_MoogVCF = { "MoogVCF", "MoogVCF", &SWIGTYPE_p_Analog__Filters__MoogLadders__MoogVCF,_proxy__wrap_new_MoogVCF, swig_delete_MoogVCF, swig_MoogVCF_methods, swig_MoogVCF_attributes, &swig_MoogVCF_Sf_SwigStatic, swig_MoogVCF_meta, swig_MoogVCF_bases, swig_MoogVCF_base_names };

static int _wrap_gaintable_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::gaintable",0,0)
  result = (DspFloatType *)(DspFloatType *)Analog::Filters::MoogLadders::gaintable;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_crossfade(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::crossfade",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::crossfade",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::crossfade",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::crossfade",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::crossfade",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_crossfade",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->crossfade(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::fc",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_fc_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::fc",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_fc_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  result = (DspFloatType) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::fs",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_fs_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::fs",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_fs_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  result = (DspFloatType) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Q",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_Q_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Q",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_Q_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  result = (DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_p_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::p",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::p",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::p",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_p_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->p = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_p_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::p",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_p_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  result = (DspFloatType) ((arg1)->p);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_cutoff_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::cutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::cutoff",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::cutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_cutoff_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->cutoff = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_cutoff_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::cutoff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::cutoff",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_cutoff_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  result = (DspFloatType) ((arg1)->cutoff);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_resonance_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::resonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::resonance",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::resonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_resonance_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->resonance = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_resonance_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::resonance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::resonance",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_resonance_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  result = (DspFloatType) ((arg1)->resonance);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_lowpass_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::lowpass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::lowpass",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::lowpass",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_lowpass_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lowpass = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_lowpass_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::lowpass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::lowpass",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_lowpass_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  result = (DspFloatType) ((arg1)->lowpass);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_highpass_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::highpass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::highpass",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::highpass",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_highpass_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->highpass = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_highpass_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::highpass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::highpass",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_highpass_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  result = (DspFloatType) ((arg1)->highpass);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_bandpass_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::bandpass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::bandpass",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::bandpass",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_bandpass_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bandpass = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_bandpass_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::bandpass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::bandpass",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_bandpass_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  result = (DspFloatType) ((arg1)->bandpass);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_lastX_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::lastX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::lastX",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::lastX",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_lastX_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->lastX = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_lastX_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::lastX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::lastX",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_lastX_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  result = (DspFloatType) ((arg1)->lastX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_state_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType *arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::state",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::state",2,"DspFloatType [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_state_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StilsonMoog2_state_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) arg1->state;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((DspFloatType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_state_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::state",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_state_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  result = (DspFloatType *)(DspFloatType *) ((arg1)->state);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_output_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::output",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::output",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_output_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->output = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_output_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::output",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::output",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_output_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  result = (DspFloatType) ((arg1)->output);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_pre_gain_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::pre_gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::pre_gain",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::pre_gain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_pre_gain_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->pre_gain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_pre_gain_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::pre_gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::pre_gain",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_pre_gain_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  result = (DspFloatType) ((arg1)->pre_gain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_post_gain_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::post_gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::post_gain",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::post_gain",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_post_gain_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->post_gain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_post_gain_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::post_gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::post_gain",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_post_gain_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  result = (DspFloatType) ((arg1)->post_gain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StilsonMoog2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Analog::Filters::MoogLadders::StilsonMoog2 *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::StilsonMoog2",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::StilsonMoog2",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::StilsonMoog2",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::StilsonMoog2",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Analog::Filters::MoogLadders::StilsonMoog2 *)new Analog::Filters::MoogLadders::StilsonMoog2(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::setResonance",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_setResonance",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::setCutoff",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_setCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Tick",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Tick",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Tick",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::StilsonMoog2::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Tick",1,"Analog::Filters::MoogLadders::StilsonMoog2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::StilsonMoog2::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,0))){
    SWIG_fail_ptr("StilsonMoog2_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StilsonMoog2_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StilsonMoog2_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StilsonMoog2_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_StilsonMoog2_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_StilsonMoog2_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StilsonMoog2_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::StilsonMoog2::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::StilsonMoog2::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::StilsonMoog2::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::StilsonMoog2::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_StilsonMoog2(void *obj) {
Analog::Filters::MoogLadders::StilsonMoog2 *arg1 = (Analog::Filters::MoogLadders::StilsonMoog2 *) obj;
delete arg1;
}
static int _proxy__wrap_new_StilsonMoog2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StilsonMoog2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StilsonMoog2_attributes[] = {
    { "fc", _wrap_StilsonMoog2_fc_get, _wrap_StilsonMoog2_fc_set },
    { "fs", _wrap_StilsonMoog2_fs_get, _wrap_StilsonMoog2_fs_set },
    { "Q", _wrap_StilsonMoog2_Q_get, _wrap_StilsonMoog2_Q_set },
    { "p", _wrap_StilsonMoog2_p_get, _wrap_StilsonMoog2_p_set },
    { "cutoff", _wrap_StilsonMoog2_cutoff_get, _wrap_StilsonMoog2_cutoff_set },
    { "resonance", _wrap_StilsonMoog2_resonance_get, _wrap_StilsonMoog2_resonance_set },
    { "lowpass", _wrap_StilsonMoog2_lowpass_get, _wrap_StilsonMoog2_lowpass_set },
    { "highpass", _wrap_StilsonMoog2_highpass_get, _wrap_StilsonMoog2_highpass_set },
    { "bandpass", _wrap_StilsonMoog2_bandpass_get, _wrap_StilsonMoog2_bandpass_set },
    { "lastX", _wrap_StilsonMoog2_lastX_get, _wrap_StilsonMoog2_lastX_set },
    { "state", _wrap_StilsonMoog2_state_get, _wrap_StilsonMoog2_state_set },
    { "output", _wrap_StilsonMoog2_output_get, _wrap_StilsonMoog2_output_set },
    { "pre_gain", _wrap_StilsonMoog2_pre_gain_get, _wrap_StilsonMoog2_pre_gain_set },
    { "post_gain", _wrap_StilsonMoog2_post_gain_get, _wrap_StilsonMoog2_post_gain_set },
    {0,0,0}
};
static swig_lua_method swig_StilsonMoog2_methods[]= {
    { "crossfade", _wrap_StilsonMoog2_crossfade},
    { "setResonance", _wrap_StilsonMoog2_setResonance},
    { "setCutoff", _wrap_StilsonMoog2_setCutoff},
    { "Tick", _wrap_StilsonMoog2_Tick},
    {0,0}
};
static swig_lua_method swig_StilsonMoog2_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StilsonMoog2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StilsonMoog2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StilsonMoog2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StilsonMoog2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StilsonMoog2_Sf_SwigStatic = {
    "StilsonMoog2",
    swig_StilsonMoog2_Sf_SwigStatic_methods,
    swig_StilsonMoog2_Sf_SwigStatic_attributes,
    swig_StilsonMoog2_Sf_SwigStatic_constants,
    swig_StilsonMoog2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StilsonMoog2_bases[] = {0};
static const char *swig_StilsonMoog2_base_names[] = {0};
static swig_lua_class _wrap_class_StilsonMoog2 = { "StilsonMoog2", "StilsonMoog2", &SWIGTYPE_p_Analog__Filters__MoogLadders__StilsonMoog2,_proxy__wrap_new_StilsonMoog2, swig_delete_StilsonMoog2, swig_StilsonMoog2_methods, swig_StilsonMoog2_attributes, &swig_StilsonMoog2_Sf_SwigStatic, swig_StilsonMoog2_meta, swig_StilsonMoog2_bases, swig_StilsonMoog2_base_names };

static int _wrap_MoogLike_type_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::type",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::type",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_type_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1 && sizeof(int) == sizeof((arg1)->type)) *(int*)(void*)&((arg1)->type) = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_type_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  int result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::type",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_type_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (int) ((arg1)->type);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_coef_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType *arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::coef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::coef",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::coef",2,"DspFloatType [9]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_coef_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MoogLike_coef_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) arg1->coef;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((DspFloatType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_coef_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::coef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::coef",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_coef_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType *)(DspFloatType *) ((arg1)->coef);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType *arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::d",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::d",2,"DspFloatType [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_d_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MoogLike_d_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) arg1->d;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((DspFloatType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::d",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_d_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType *)(DspFloatType *) ((arg1)->d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_omega_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::omega",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::omega",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::omega",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_omega_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->omega = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_omega_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::omega",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::omega",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_omega_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType) ((arg1)->omega);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_g_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::g",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::g",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_g_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_g_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::g",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_g_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::fs",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_fs_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::fs",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_fs_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_res_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::res",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::res",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::res",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_res_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->res = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_res_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::res",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::res",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_res_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType) ((arg1)->res);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_c_in_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::in",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::in",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::in",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_c_in_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->in = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_c_in_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::in",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::in",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_c_in_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType) ((arg1)->in);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_out_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::out",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::out",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::out",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_out_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->out = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_out_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::out",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::out",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_out_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType) ((arg1)->out);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_k_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::k",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::k",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::k",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_k_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->k = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_k_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::k",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::k",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_k_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType) ((arg1)->k);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_p_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::p",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::p",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::p",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_p_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->p = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_p_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::p",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_p_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType) ((arg1)->p);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_q_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::q",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::q",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_q_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_q_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::q",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_q_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType) ((arg1)->q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_a_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_a_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_a_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_a_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType) ((arg1)->a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_a0_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::a0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a0",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a0",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_a0_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->a0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_a0_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::a0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a0",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_a0_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType) ((arg1)->a0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_a1_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::a1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a1",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_a1_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->a1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_a1_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::a1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a1",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_a1_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType) ((arg1)->a1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_a2_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::a2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a2",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_a2_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->a2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_a2_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::a2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a2",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_a2_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType) ((arg1)->a2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_a3_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::a3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a3",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a3",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_a3_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->a3 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_a3_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::a3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a3",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_a3_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType) ((arg1)->a3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_a4_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::a4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a4",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a4",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_a4_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->a4 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_a4_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::a4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::a4",1,"Analog::Filters::MoogLadders::MoogLike *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_a4_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  result = (DspFloatType) ((arg1)->a4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MoogLike(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  Analog::Filters::MoogLadders::MoogLike *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::MoogLike",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::MoogLike",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::MoogLike",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::MoogLike",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::MoogLike",4,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (Analog::Filters::MoogLadders::MoogLike *)new Analog::Filters::MoogLadders::MoogLike(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_SetCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::SetCoefficients",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::SetCoefficients",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::SetCoefficients",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::SetCoefficients",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_SetCoefficients",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->SetCoefficients(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::Tick",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::Tick",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::Tick",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLike::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::Tick",1,"Analog::Filters::MoogLadders::MoogLike *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLike::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,0))){
    SWIG_fail_ptr("MoogLike_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLike_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MoogLike_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MoogLike_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MoogLike_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MoogLike_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MoogLike_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::MoogLike::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::MoogLike::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::MoogLike::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::MoogLike::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_MoogLike(void *obj) {
Analog::Filters::MoogLadders::MoogLike *arg1 = (Analog::Filters::MoogLadders::MoogLike *) obj;
delete arg1;
}
static int _proxy__wrap_new_MoogLike(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MoogLike);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MoogLike_attributes[] = {
    { "type", _wrap_MoogLike_type_get, _wrap_MoogLike_type_set },
    { "coef", _wrap_MoogLike_coef_get, _wrap_MoogLike_coef_set },
    { "d", _wrap_MoogLike_d_get, _wrap_MoogLike_d_set },
    { "omega", _wrap_MoogLike_omega_get, _wrap_MoogLike_omega_set },
    { "g", _wrap_MoogLike_g_get, _wrap_MoogLike_g_set },
    { "fs", _wrap_MoogLike_fs_get, _wrap_MoogLike_fs_set },
    { "res", _wrap_MoogLike_res_get, _wrap_MoogLike_res_set },
    { "c_in", _wrap_MoogLike_c_in_get, _wrap_MoogLike_c_in_set },
    { "out", _wrap_MoogLike_out_get, _wrap_MoogLike_out_set },
    { "k", _wrap_MoogLike_k_get, _wrap_MoogLike_k_set },
    { "p", _wrap_MoogLike_p_get, _wrap_MoogLike_p_set },
    { "q", _wrap_MoogLike_q_get, _wrap_MoogLike_q_set },
    { "a", _wrap_MoogLike_a_get, _wrap_MoogLike_a_set },
    { "a0", _wrap_MoogLike_a0_get, _wrap_MoogLike_a0_set },
    { "a1", _wrap_MoogLike_a1_get, _wrap_MoogLike_a1_set },
    { "a2", _wrap_MoogLike_a2_get, _wrap_MoogLike_a2_set },
    { "a3", _wrap_MoogLike_a3_get, _wrap_MoogLike_a3_set },
    { "a4", _wrap_MoogLike_a4_get, _wrap_MoogLike_a4_set },
    {0,0,0}
};
static swig_lua_method swig_MoogLike_methods[]= {
    { "SetCoefficients", _wrap_MoogLike_SetCoefficients},
    { "Tick", _wrap_MoogLike_Tick},
    {0,0}
};
static swig_lua_method swig_MoogLike_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MoogLike_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MoogLike_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("LOWPASS", Analog::Filters::MoogLadders::MoogLike::LOWPASS)},
    {SWIG_LUA_CONSTTAB_INT("HIGHPASS", Analog::Filters::MoogLadders::MoogLike::HIGHPASS)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MoogLike_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MoogLike_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MoogLike_Sf_SwigStatic = {
    "MoogLike",
    swig_MoogLike_Sf_SwigStatic_methods,
    swig_MoogLike_Sf_SwigStatic_attributes,
    swig_MoogLike_Sf_SwigStatic_constants,
    swig_MoogLike_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MoogLike_bases[] = {0};
static const char *swig_MoogLike_base_names[] = {0};
static swig_lua_class _wrap_class_MoogLike = { "MoogLike", "MoogLike", &SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLike,_proxy__wrap_new_MoogLike, swig_delete_MoogLike, swig_MoogLike_methods, swig_MoogLike_attributes, &swig_MoogLike_Sf_SwigStatic, swig_MoogLike_meta, swig_MoogLike_bases, swig_MoogLike_base_names };

static int _wrap_Filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::Filter *arg1 = (Analog::Filters::MoogLadders::Filter *) 0 ;
  Analog::Filters::MoogLadders::RBJFilter *arg2 = (Analog::Filters::MoogLadders::RBJFilter *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::Filter::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::filter",1,"Analog::Filters::MoogLadders::Filter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::filter",2,"Analog::Filters::MoogLadders::RBJFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter,0))){
    SWIG_fail_ptr("Filter_filter_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Filter_filter_set",2,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::Filter *arg1 = (Analog::Filters::MoogLadders::Filter *) 0 ;
  Analog::Filters::MoogLadders::RBJFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::Filter::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::filter",1,"Analog::Filters::MoogLadders::Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter,0))){
    SWIG_fail_ptr("Filter_filter_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter);
  }
  
  result = (Analog::Filters::MoogLadders::RBJFilter *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJFilter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Filter(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::FilterType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Analog::Filters::MoogLadders::Filter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::Filter::Filter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::Filter",1,"Analog::Filters::MoogLadders::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::Filter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::Filter",3,"DspFloatType");
  arg1 = (Analog::Filters::MoogLadders::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Analog::Filters::MoogLadders::Filter *)new Analog::Filters::MoogLadders::Filter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_UpdateCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::Filter *arg1 = (Analog::Filters::MoogLadders::Filter *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::Filter::UpdateCoefficients",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::UpdateCoefficients",1,"Analog::Filters::MoogLadders::Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter,0))){
    SWIG_fail_ptr("Filter_UpdateCoefficients",1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter);
  }
  
  (arg1)->UpdateCoefficients();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::Filter *arg1 = (Analog::Filters::MoogLadders::Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::Filter::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::SetCutoff",1,"Analog::Filters::MoogLadders::Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::SetCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter,0))){
    SWIG_fail_ptr("Filter_SetCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_SetQ(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::Filter *arg1 = (Analog::Filters::MoogLadders::Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::Filter::SetQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::SetQ",1,"Analog::Filters::MoogLadders::Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::SetQ",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter,0))){
    SWIG_fail_ptr("Filter_SetQ",1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_GetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::Filter *arg1 = (Analog::Filters::MoogLadders::Filter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::Filter::GetCutoff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::GetCutoff",1,"Analog::Filters::MoogLadders::Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter,0))){
    SWIG_fail_ptr("Filter_GetCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter);
  }
  
  result = (DspFloatType)(arg1)->GetCutoff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_GetQ(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::Filter *arg1 = (Analog::Filters::MoogLadders::Filter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::Filter::GetQ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::GetQ",1,"Analog::Filters::MoogLadders::Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter,0))){
    SWIG_fail_ptr("Filter_GetQ",1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter);
  }
  
  result = (DspFloatType)(arg1)->GetQ();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_Process(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::Filter *arg1 = (Analog::Filters::MoogLadders::Filter *) 0 ;
  DspFloatType *arg2 = (DspFloatType *) 0 ;
  uint32_t arg3 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::Filter::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::Process",1,"Analog::Filters::MoogLadders::Filter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::Process",2,"DspFloatType *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::Process",3,"uint32_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter,0))){
    SWIG_fail_ptr("Filter_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Filter_Process",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (uint32_t const)lua_tonumber(L, 3);
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_Tick(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::Filter *arg1 = (Analog::Filters::MoogLadders::Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::Filter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::Tick",1,"Analog::Filters::MoogLadders::Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::Filter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter,0))){
    SWIG_fail_ptr("Filter_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Filter(void *obj) {
Analog::Filters::MoogLadders::Filter *arg1 = (Analog::Filters::MoogLadders::Filter *) obj;
delete arg1;
}
static int _proxy__wrap_new_Filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Filter_attributes[] = {
    { "filter", _wrap_Filter_filter_get, _wrap_Filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_Filter_methods[]= {
    { "UpdateCoefficients", _wrap_Filter_UpdateCoefficients},
    { "SetCutoff", _wrap_Filter_SetCutoff},
    { "SetQ", _wrap_Filter_SetQ},
    { "GetCutoff", _wrap_Filter_GetCutoff},
    { "GetQ", _wrap_Filter_GetQ},
    { "Process", _wrap_Filter_Process},
    { "Tick", _wrap_Filter_Tick},
    {0,0}
};
static swig_lua_method swig_Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Filter_Sf_SwigStatic = {
    "Filter",
    swig_Filter_Sf_SwigStatic_methods,
    swig_Filter_Sf_SwigStatic_attributes,
    swig_Filter_Sf_SwigStatic_constants,
    swig_Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Filter_bases[] = {0};
static const char *swig_Filter_base_names[] = {0};
static swig_lua_class _wrap_class_Filter = { "Filter", "Filter", &SWIGTYPE_p_Analog__Filters__MoogLadders__Filter,_proxy__wrap_new_Filter, swig_delete_Filter, swig_Filter_methods, swig_Filter_attributes, &swig_Filter_Sf_SwigStatic, swig_Filter_meta, swig_Filter_bases, swig_Filter_base_names };

static int _wrap_new_RBJLowPassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Analog::Filters::MoogLadders::RBJLowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJLowPassFilter::RBJLowPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJLowPassFilter::RBJLowPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJLowPassFilter::RBJLowPassFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Filters::MoogLadders::RBJLowPassFilter *)new Analog::Filters::MoogLadders::RBJLowPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJLowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJLowPassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::RBJLowPassFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJLowPassFilter::RBJLowPassFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJLowPassFilter::RBJLowPassFilter",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::RBJLowPassFilter *)new Analog::Filters::MoogLadders::RBJLowPassFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJLowPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJLowPassFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJLowPassFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJLowPassFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJLowPassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::RBJLowPassFilter::RBJLowPassFilter(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::RBJLowPassFilter::RBJLowPassFilter(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJLowPassFilter(void *obj) {
Analog::Filters::MoogLadders::RBJLowPassFilter *arg1 = (Analog::Filters::MoogLadders::RBJLowPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJLowPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJLowPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJLowPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJLowPassFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJLowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJLowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJLowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJLowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJLowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJLowPassFilter_Sf_SwigStatic = {
    "RBJLowPassFilter",
    swig_RBJLowPassFilter_Sf_SwigStatic_methods,
    swig_RBJLowPassFilter_Sf_SwigStatic_attributes,
    swig_RBJLowPassFilter_Sf_SwigStatic_constants,
    swig_RBJLowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJLowPassFilter_bases[] = {0,0};
static const char *swig_RBJLowPassFilter_base_names[] = {"Analog::Filters::MoogLadders::Filter *",0};
static swig_lua_class _wrap_class_RBJLowPassFilter = { "RBJLowPassFilter", "RBJLowPassFilter", &SWIGTYPE_p_Analog__Filters__MoogLadders__RBJLowPassFilter,_proxy__wrap_new_RBJLowPassFilter, swig_delete_RBJLowPassFilter, swig_RBJLowPassFilter_methods, swig_RBJLowPassFilter_attributes, &swig_RBJLowPassFilter_Sf_SwigStatic, swig_RBJLowPassFilter_meta, swig_RBJLowPassFilter_bases, swig_RBJLowPassFilter_base_names };

static int _wrap_new_RBJHighPassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Analog::Filters::MoogLadders::RBJHighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJHighPassFilter::RBJHighPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJHighPassFilter::RBJHighPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJHighPassFilter::RBJHighPassFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Filters::MoogLadders::RBJHighPassFilter *)new Analog::Filters::MoogLadders::RBJHighPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJHighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJHighPassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::RBJHighPassFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJHighPassFilter::RBJHighPassFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJHighPassFilter::RBJHighPassFilter",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::RBJHighPassFilter *)new Analog::Filters::MoogLadders::RBJHighPassFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJHighPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJHighPassFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJHighPassFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJHighPassFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJHighPassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::RBJHighPassFilter::RBJHighPassFilter(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::RBJHighPassFilter::RBJHighPassFilter(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJHighPassFilter(void *obj) {
Analog::Filters::MoogLadders::RBJHighPassFilter *arg1 = (Analog::Filters::MoogLadders::RBJHighPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJHighPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJHighPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJHighPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJHighPassFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJHighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJHighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJHighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJHighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJHighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJHighPassFilter_Sf_SwigStatic = {
    "RBJHighPassFilter",
    swig_RBJHighPassFilter_Sf_SwigStatic_methods,
    swig_RBJHighPassFilter_Sf_SwigStatic_attributes,
    swig_RBJHighPassFilter_Sf_SwigStatic_constants,
    swig_RBJHighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJHighPassFilter_bases[] = {0,0};
static const char *swig_RBJHighPassFilter_base_names[] = {"Analog::Filters::MoogLadders::Filter *",0};
static swig_lua_class _wrap_class_RBJHighPassFilter = { "RBJHighPassFilter", "RBJHighPassFilter", &SWIGTYPE_p_Analog__Filters__MoogLadders__RBJHighPassFilter,_proxy__wrap_new_RBJHighPassFilter, swig_delete_RBJHighPassFilter, swig_RBJHighPassFilter_methods, swig_RBJHighPassFilter_attributes, &swig_RBJHighPassFilter_Sf_SwigStatic, swig_RBJHighPassFilter_meta, swig_RBJHighPassFilter_bases, swig_RBJHighPassFilter_base_names };

static int _wrap_new_RBJBandPassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Analog::Filters::MoogLadders::RBJBandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJBandPassFilter::RBJBandPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJBandPassFilter::RBJBandPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJBandPassFilter::RBJBandPassFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Filters::MoogLadders::RBJBandPassFilter *)new Analog::Filters::MoogLadders::RBJBandPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJBandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJBandPassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::RBJBandPassFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJBandPassFilter::RBJBandPassFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJBandPassFilter::RBJBandPassFilter",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::RBJBandPassFilter *)new Analog::Filters::MoogLadders::RBJBandPassFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJBandPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJBandPassFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJBandPassFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJBandPassFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJBandPassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::RBJBandPassFilter::RBJBandPassFilter(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::RBJBandPassFilter::RBJBandPassFilter(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJBandPassFilter(void *obj) {
Analog::Filters::MoogLadders::RBJBandPassFilter *arg1 = (Analog::Filters::MoogLadders::RBJBandPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJBandPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJBandPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJBandPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJBandPassFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJBandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJBandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJBandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJBandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJBandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJBandPassFilter_Sf_SwigStatic = {
    "RBJBandPassFilter",
    swig_RBJBandPassFilter_Sf_SwigStatic_methods,
    swig_RBJBandPassFilter_Sf_SwigStatic_attributes,
    swig_RBJBandPassFilter_Sf_SwigStatic_constants,
    swig_RBJBandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJBandPassFilter_bases[] = {0,0};
static const char *swig_RBJBandPassFilter_base_names[] = {"Analog::Filters::MoogLadders::Filter *",0};
static swig_lua_class _wrap_class_RBJBandPassFilter = { "RBJBandPassFilter", "RBJBandPassFilter", &SWIGTYPE_p_Analog__Filters__MoogLadders__RBJBandPassFilter,_proxy__wrap_new_RBJBandPassFilter, swig_delete_RBJBandPassFilter, swig_RBJBandPassFilter_methods, swig_RBJBandPassFilter_attributes, &swig_RBJBandPassFilter_Sf_SwigStatic, swig_RBJBandPassFilter_meta, swig_RBJBandPassFilter_bases, swig_RBJBandPassFilter_base_names };

static int _wrap_new_RBJAllPassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Analog::Filters::MoogLadders::RBJAllPassFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJAllPassFilter::RBJAllPassFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJAllPassFilter::RBJAllPassFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJAllPassFilter::RBJAllPassFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Filters::MoogLadders::RBJAllPassFilter *)new Analog::Filters::MoogLadders::RBJAllPassFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJAllPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJAllPassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::RBJAllPassFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJAllPassFilter::RBJAllPassFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJAllPassFilter::RBJAllPassFilter",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::RBJAllPassFilter *)new Analog::Filters::MoogLadders::RBJAllPassFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJAllPassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJAllPassFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJAllPassFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJAllPassFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJAllPassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::RBJAllPassFilter::RBJAllPassFilter(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::RBJAllPassFilter::RBJAllPassFilter(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJAllPassFilter(void *obj) {
Analog::Filters::MoogLadders::RBJAllPassFilter *arg1 = (Analog::Filters::MoogLadders::RBJAllPassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJAllPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJAllPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJAllPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJAllPassFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJAllPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJAllPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJAllPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJAllPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJAllPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJAllPassFilter_Sf_SwigStatic = {
    "RBJAllPassFilter",
    swig_RBJAllPassFilter_Sf_SwigStatic_methods,
    swig_RBJAllPassFilter_Sf_SwigStatic_attributes,
    swig_RBJAllPassFilter_Sf_SwigStatic_constants,
    swig_RBJAllPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJAllPassFilter_bases[] = {0,0};
static const char *swig_RBJAllPassFilter_base_names[] = {"Analog::Filters::MoogLadders::Filter *",0};
static swig_lua_class _wrap_class_RBJAllPassFilter = { "RBJAllPassFilter", "RBJAllPassFilter", &SWIGTYPE_p_Analog__Filters__MoogLadders__RBJAllPassFilter,_proxy__wrap_new_RBJAllPassFilter, swig_delete_RBJAllPassFilter, swig_RBJAllPassFilter_methods, swig_RBJAllPassFilter_attributes, &swig_RBJAllPassFilter_Sf_SwigStatic, swig_RBJAllPassFilter_meta, swig_RBJAllPassFilter_bases, swig_RBJAllPassFilter_base_names };

static int _wrap_new_RBJNotchFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Analog::Filters::MoogLadders::RBJNotchFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJNotchFilter::RBJNotchFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJNotchFilter::RBJNotchFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJNotchFilter::RBJNotchFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Filters::MoogLadders::RBJNotchFilter *)new Analog::Filters::MoogLadders::RBJNotchFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJNotchFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJNotchFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::RBJNotchFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJNotchFilter::RBJNotchFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJNotchFilter::RBJNotchFilter",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::RBJNotchFilter *)new Analog::Filters::MoogLadders::RBJNotchFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJNotchFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJNotchFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJNotchFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJNotchFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJNotchFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::RBJNotchFilter::RBJNotchFilter(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::RBJNotchFilter::RBJNotchFilter(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJNotchFilter(void *obj) {
Analog::Filters::MoogLadders::RBJNotchFilter *arg1 = (Analog::Filters::MoogLadders::RBJNotchFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJNotchFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJNotchFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJNotchFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJNotchFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJNotchFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJNotchFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJNotchFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJNotchFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJNotchFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJNotchFilter_Sf_SwigStatic = {
    "RBJNotchFilter",
    swig_RBJNotchFilter_Sf_SwigStatic_methods,
    swig_RBJNotchFilter_Sf_SwigStatic_attributes,
    swig_RBJNotchFilter_Sf_SwigStatic_constants,
    swig_RBJNotchFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJNotchFilter_bases[] = {0,0};
static const char *swig_RBJNotchFilter_base_names[] = {"Analog::Filters::MoogLadders::Filter *",0};
static swig_lua_class _wrap_class_RBJNotchFilter = { "RBJNotchFilter", "RBJNotchFilter", &SWIGTYPE_p_Analog__Filters__MoogLadders__RBJNotchFilter,_proxy__wrap_new_RBJNotchFilter, swig_delete_RBJNotchFilter, swig_RBJNotchFilter_methods, swig_RBJNotchFilter_attributes, &swig_RBJNotchFilter_Sf_SwigStatic, swig_RBJNotchFilter_meta, swig_RBJNotchFilter_bases, swig_RBJNotchFilter_base_names };

static int _wrap_new_RBJPeakFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Analog::Filters::MoogLadders::RBJPeakFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJPeakFilter::RBJPeakFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJPeakFilter::RBJPeakFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJPeakFilter::RBJPeakFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Filters::MoogLadders::RBJPeakFilter *)new Analog::Filters::MoogLadders::RBJPeakFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJPeakFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJPeakFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::RBJPeakFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJPeakFilter::RBJPeakFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJPeakFilter::RBJPeakFilter",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::RBJPeakFilter *)new Analog::Filters::MoogLadders::RBJPeakFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJPeakFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJPeakFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJPeakFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJPeakFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJPeakFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::RBJPeakFilter::RBJPeakFilter(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::RBJPeakFilter::RBJPeakFilter(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJPeakFilter(void *obj) {
Analog::Filters::MoogLadders::RBJPeakFilter *arg1 = (Analog::Filters::MoogLadders::RBJPeakFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJPeakFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJPeakFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJPeakFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJPeakFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJPeakFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJPeakFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJPeakFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJPeakFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJPeakFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJPeakFilter_Sf_SwigStatic = {
    "RBJPeakFilter",
    swig_RBJPeakFilter_Sf_SwigStatic_methods,
    swig_RBJPeakFilter_Sf_SwigStatic_attributes,
    swig_RBJPeakFilter_Sf_SwigStatic_constants,
    swig_RBJPeakFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJPeakFilter_bases[] = {0,0};
static const char *swig_RBJPeakFilter_base_names[] = {"Analog::Filters::MoogLadders::Filter *",0};
static swig_lua_class _wrap_class_RBJPeakFilter = { "RBJPeakFilter", "RBJPeakFilter", &SWIGTYPE_p_Analog__Filters__MoogLadders__RBJPeakFilter,_proxy__wrap_new_RBJPeakFilter, swig_delete_RBJPeakFilter, swig_RBJPeakFilter_methods, swig_RBJPeakFilter_attributes, &swig_RBJPeakFilter_Sf_SwigStatic, swig_RBJPeakFilter_meta, swig_RBJPeakFilter_bases, swig_RBJPeakFilter_base_names };

static int _wrap_new_RBJLowShelfFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Analog::Filters::MoogLadders::RBJLowShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJLowShelfFilter::RBJLowShelfFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJLowShelfFilter::RBJLowShelfFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJLowShelfFilter::RBJLowShelfFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Filters::MoogLadders::RBJLowShelfFilter *)new Analog::Filters::MoogLadders::RBJLowShelfFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJLowShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJLowShelfFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::RBJLowShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJLowShelfFilter::RBJLowShelfFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJLowShelfFilter::RBJLowShelfFilter",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::RBJLowShelfFilter *)new Analog::Filters::MoogLadders::RBJLowShelfFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJLowShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJLowShelfFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJLowShelfFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJLowShelfFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJLowShelfFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::RBJLowShelfFilter::RBJLowShelfFilter(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::RBJLowShelfFilter::RBJLowShelfFilter(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJLowShelfFilter(void *obj) {
Analog::Filters::MoogLadders::RBJLowShelfFilter *arg1 = (Analog::Filters::MoogLadders::RBJLowShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJLowShelfFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJLowShelfFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJLowShelfFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJLowShelfFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJLowShelfFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJLowShelfFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJLowShelfFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJLowShelfFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJLowShelfFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJLowShelfFilter_Sf_SwigStatic = {
    "RBJLowShelfFilter",
    swig_RBJLowShelfFilter_Sf_SwigStatic_methods,
    swig_RBJLowShelfFilter_Sf_SwigStatic_attributes,
    swig_RBJLowShelfFilter_Sf_SwigStatic_constants,
    swig_RBJLowShelfFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJLowShelfFilter_bases[] = {0,0};
static const char *swig_RBJLowShelfFilter_base_names[] = {"Analog::Filters::MoogLadders::Filter *",0};
static swig_lua_class _wrap_class_RBJLowShelfFilter = { "RBJLowShelfFilter", "RBJLowShelfFilter", &SWIGTYPE_p_Analog__Filters__MoogLadders__RBJLowShelfFilter,_proxy__wrap_new_RBJLowShelfFilter, swig_delete_RBJLowShelfFilter, swig_RBJLowShelfFilter_methods, swig_RBJLowShelfFilter_attributes, &swig_RBJLowShelfFilter_Sf_SwigStatic, swig_RBJLowShelfFilter_meta, swig_RBJLowShelfFilter_bases, swig_RBJLowShelfFilter_base_names };

static int _wrap_new_RBJHighShelfFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Analog::Filters::MoogLadders::RBJHighShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJHighShelfFilter::RBJHighShelfFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJHighShelfFilter::RBJHighShelfFilter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJHighShelfFilter::RBJHighShelfFilter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Filters::MoogLadders::RBJHighShelfFilter *)new Analog::Filters::MoogLadders::RBJHighShelfFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJHighShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJHighShelfFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MoogLadders::RBJHighShelfFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::RBJHighShelfFilter::RBJHighShelfFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::RBJHighShelfFilter::RBJHighShelfFilter",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::RBJHighShelfFilter *)new Analog::Filters::MoogLadders::RBJHighShelfFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__RBJHighShelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RBJHighShelfFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RBJHighShelfFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RBJHighShelfFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RBJHighShelfFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::RBJHighShelfFilter::RBJHighShelfFilter(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::RBJHighShelfFilter::RBJHighShelfFilter(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_RBJHighShelfFilter(void *obj) {
Analog::Filters::MoogLadders::RBJHighShelfFilter *arg1 = (Analog::Filters::MoogLadders::RBJHighShelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RBJHighShelfFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RBJHighShelfFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RBJHighShelfFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RBJHighShelfFilter_methods[]= {
    {0,0}
};
static swig_lua_method swig_RBJHighShelfFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RBJHighShelfFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RBJHighShelfFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RBJHighShelfFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RBJHighShelfFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RBJHighShelfFilter_Sf_SwigStatic = {
    "RBJHighShelfFilter",
    swig_RBJHighShelfFilter_Sf_SwigStatic_methods,
    swig_RBJHighShelfFilter_Sf_SwigStatic_attributes,
    swig_RBJHighShelfFilter_Sf_SwigStatic_constants,
    swig_RBJHighShelfFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RBJHighShelfFilter_bases[] = {0,0};
static const char *swig_RBJHighShelfFilter_base_names[] = {"Analog::Filters::MoogLadders::Filter *",0};
static swig_lua_class _wrap_class_RBJHighShelfFilter = { "RBJHighShelfFilter", "RBJHighShelfFilter", &SWIGTYPE_p_Analog__Filters__MoogLadders__RBJHighShelfFilter,_proxy__wrap_new_RBJHighShelfFilter, swig_delete_RBJHighShelfFilter, swig_RBJHighShelfFilter_methods, swig_RBJHighShelfFilter_attributes, &swig_RBJHighShelfFilter_Sf_SwigStatic, swig_RBJHighShelfFilter_meta, swig_RBJHighShelfFilter_bases, swig_RBJHighShelfFilter_base_names };

static int _wrap_NoiseSamples_noise_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseSamples *arg1 = (Analog::Filters::MoogLadders::NoiseSamples *) 0 ;
  Analog::Filters::MoogLadders::NoiseGenerator *arg2 = (Analog::Filters::MoogLadders::NoiseGenerator *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseSamples::noise",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::noise",1,"Analog::Filters::MoogLadders::NoiseSamples *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::noise",2,"Analog::Filters::MoogLadders::NoiseGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_noise_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("NoiseSamples_noise_set",2,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator);
  }
  
  if (arg1) (arg1)->noise = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseSamples_noise_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseSamples *arg1 = (Analog::Filters::MoogLadders::NoiseSamples *) 0 ;
  Analog::Filters::MoogLadders::NoiseGenerator *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseSamples::noise",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::noise",1,"Analog::Filters::MoogLadders::NoiseSamples *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_noise_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples);
  }
  
  result = (Analog::Filters::MoogLadders::NoiseGenerator *) ((arg1)->noise);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseGenerator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseSamples_type_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseSamples *arg1 = (Analog::Filters::MoogLadders::NoiseSamples *) 0 ;
  Analog::Filters::MoogLadders::NoiseType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseSamples::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::type",1,"Analog::Filters::MoogLadders::NoiseSamples *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::type",2,"Analog::Filters::MoogLadders::NoiseType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_type_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples);
  }
  
  arg2 = (Analog::Filters::MoogLadders::NoiseType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseSamples_type_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseSamples *arg1 = (Analog::Filters::MoogLadders::NoiseSamples *) 0 ;
  Analog::Filters::MoogLadders::NoiseType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseSamples::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::type",1,"Analog::Filters::MoogLadders::NoiseSamples *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_type_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples);
  }
  
  result = (Analog::Filters::MoogLadders::NoiseType) ((arg1)->type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseSamples_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseSamples *arg1 = (Analog::Filters::MoogLadders::NoiseSamples *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseSamples::sampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::sampleRate",1,"Analog::Filters::MoogLadders::NoiseSamples *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::sampleRate",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_sampleRate_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseSamples_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseSamples *arg1 = (Analog::Filters::MoogLadders::NoiseSamples *) 0 ;
  int result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseSamples::sampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::sampleRate",1,"Analog::Filters::MoogLadders::NoiseSamples *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_sampleRate_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples);
  }
  
  result = (int) ((arg1)->sampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseSamples_channels_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseSamples *arg1 = (Analog::Filters::MoogLadders::NoiseSamples *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseSamples::channels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::channels",1,"Analog::Filters::MoogLadders::NoiseSamples *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::channels",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_channels_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->channels = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseSamples_channels_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseSamples *arg1 = (Analog::Filters::MoogLadders::NoiseSamples *) 0 ;
  int result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseSamples::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::channels",1,"Analog::Filters::MoogLadders::NoiseSamples *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_channels_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples);
  }
  
  result = (int) ((arg1)->channels);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseSamples(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseType arg1 ;
  int arg2 ;
  int arg3 ;
  Analog::Filters::MoogLadders::NoiseSamples *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseSamples::NoiseSamples",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::NoiseSamples",1,"Analog::Filters::MoogLadders::NoiseType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::NoiseSamples",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::NoiseSamples",3,"int");
  arg1 = (Analog::Filters::MoogLadders::NoiseType)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (Analog::Filters::MoogLadders::NoiseSamples *)new Analog::Filters::MoogLadders::NoiseSamples(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseSamples_produce(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::NoiseSamples *arg1 = (Analog::Filters::MoogLadders::NoiseSamples *) 0 ;
  DspFloatType arg2 ;
  std::vector< DspFloatType,std::allocator< DspFloatType > > result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::NoiseSamples::produce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::produce",1,"Analog::Filters::MoogLadders::NoiseSamples *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::NoiseSamples::produce",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples,0))){
    SWIG_fail_ptr("NoiseSamples_produce",1,SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (arg1)->produce(arg2);
  {
    std::vector< DspFloatType,std::allocator< DspFloatType > > * resultptr = new std::vector< DspFloatType,std::allocator< DspFloatType > >((const std::vector< DspFloatType,std::allocator< DspFloatType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NoiseSamples(void *obj) {
Analog::Filters::MoogLadders::NoiseSamples *arg1 = (Analog::Filters::MoogLadders::NoiseSamples *) obj;
delete arg1;
}
static int _proxy__wrap_new_NoiseSamples(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NoiseSamples);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NoiseSamples_attributes[] = {
    { "noise", _wrap_NoiseSamples_noise_get, _wrap_NoiseSamples_noise_set },
    { "type", _wrap_NoiseSamples_type_get, _wrap_NoiseSamples_type_set },
    { "sampleRate", _wrap_NoiseSamples_sampleRate_get, _wrap_NoiseSamples_sampleRate_set },
    { "channels", _wrap_NoiseSamples_channels_get, _wrap_NoiseSamples_channels_set },
    {0,0,0}
};
static swig_lua_method swig_NoiseSamples_methods[]= {
    { "produce", _wrap_NoiseSamples_produce},
    {0,0}
};
static swig_lua_method swig_NoiseSamples_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NoiseSamples_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NoiseSamples_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NoiseSamples_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NoiseSamples_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NoiseSamples_Sf_SwigStatic = {
    "NoiseSamples",
    swig_NoiseSamples_Sf_SwigStatic_methods,
    swig_NoiseSamples_Sf_SwigStatic_attributes,
    swig_NoiseSamples_Sf_SwigStatic_constants,
    swig_NoiseSamples_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NoiseSamples_bases[] = {0};
static const char *swig_NoiseSamples_base_names[] = {0};
static swig_lua_class _wrap_class_NoiseSamples = { "NoiseSamples", "NoiseSamples", &SWIGTYPE_p_Analog__Filters__MoogLadders__NoiseSamples,_proxy__wrap_new_NoiseSamples, swig_delete_NoiseSamples, swig_NoiseSamples_methods, swig_NoiseSamples_attributes, &swig_NoiseSamples_Sf_SwigStatic, swig_NoiseSamples_meta, swig_NoiseSamples_bases, swig_NoiseSamples_base_names };

static int _wrap_MoogLadderFilter_moog_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLadderFilter *arg1 = (Analog::Filters::MoogLadders::MoogLadderFilter *) 0 ;
  Analog::Filters::MoogLadders::LadderFilterBase *arg2 = (Analog::Filters::MoogLadders::LadderFilterBase *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLadderFilter::moog",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::moog",1,"Analog::Filters::MoogLadders::MoogLadderFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::moog",2,"Analog::Filters::MoogLadders::LadderFilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_moog_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__Filters__MoogLadders__LadderFilterBase,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("MoogLadderFilter_moog_set",2,SWIGTYPE_p_Analog__Filters__MoogLadders__LadderFilterBase);
  }
  
  if (arg1) (arg1)->moog = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_moog_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLadderFilter *arg1 = (Analog::Filters::MoogLadders::MoogLadderFilter *) 0 ;
  Analog::Filters::MoogLadders::LadderFilterBase *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLadderFilter::moog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::moog",1,"Analog::Filters::MoogLadders::MoogLadderFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_moog_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter);
  }
  
  result = (Analog::Filters::MoogLadders::LadderFilterBase *) ((arg1)->moog);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__LadderFilterBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLadderFilter *arg1 = (Analog::Filters::MoogLadders::MoogLadderFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLadderFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::sr",1,"Analog::Filters::MoogLadders::MoogLadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_sr_set",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLadderFilter *arg1 = (Analog::Filters::MoogLadders::MoogLadderFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLadderFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::sr",1,"Analog::Filters::MoogLadders::MoogLadderFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_sr_get",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MoogLadderFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogModelType arg1 ;
  DspFloatType arg2 ;
  Analog::Filters::MoogLadders::MoogLadderFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLadderFilter::MoogLadderFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::MoogLadderFilter",1,"Analog::Filters::MoogLadders::MoogModelType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::MoogLadderFilter",2,"DspFloatType");
  arg1 = (Analog::Filters::MoogLadders::MoogModelType)(int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Filters::MoogLadders::MoogLadderFilter *)new Analog::Filters::MoogLadders::MoogLadderFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MoogLadderFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogModelType arg1 ;
  Analog::Filters::MoogLadders::MoogLadderFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLadderFilter::MoogLadderFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::MoogLadderFilter",1,"Analog::Filters::MoogLadders::MoogModelType");
  arg1 = (Analog::Filters::MoogLadders::MoogModelType)(int)lua_tonumber(L, 1);
  result = (Analog::Filters::MoogLadders::MoogLadderFilter *)new Analog::Filters::MoogLadders::MoogLadderFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MoogLadderFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_MoogLadderFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_MoogLadderFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MoogLadderFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::MoogLadderFilter::MoogLadderFilter(Analog::Filters::MoogLadders::MoogModelType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::MoogLadderFilter::MoogLadderFilter(Analog::Filters::MoogLadders::MoogModelType)\n");
  lua_error(L);return 0;
}


static int _wrap_MoogLadderFilter_Process(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLadderFilter *arg1 = (Analog::Filters::MoogLadders::MoogLadderFilter *) 0 ;
  uint32_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLadderFilter::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Process",1,"Analog::Filters::MoogLadders::MoogLadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Process",2,"uint32_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Process",3,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_Process",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MoogLadderFilter_Process",3,SWIGTYPE_p_float);
  }
  
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_SetResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLadderFilter *arg1 = (Analog::Filters::MoogLadders::MoogLadderFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLadderFilter::SetResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::SetResonance",1,"Analog::Filters::MoogLadders::MoogLadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::SetResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_SetResonance",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLadderFilter *arg1 = (Analog::Filters::MoogLadders::MoogLadderFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLadderFilter::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::SetCutoff",1,"Analog::Filters::MoogLadders::MoogLadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::SetCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_SetCutoff",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_setType(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLadderFilter *arg1 = (Analog::Filters::MoogLadders::MoogLadderFilter *) 0 ;
  Analog::Filters::MoogLadders::MoogModelType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLadderFilter::setType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::setType",1,"Analog::Filters::MoogLadders::MoogLadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::setType",2,"Analog::Filters::MoogLadders::MoogModelType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_setType",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter);
  }
  
  arg2 = (Analog::Filters::MoogLadders::MoogModelType)(int)lua_tonumber(L, 2);
  (arg1)->setType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLadderFilter *arg1 = (Analog::Filters::MoogLadders::MoogLadderFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",1,"Analog::Filters::MoogLadders::MoogLadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLadderFilter *arg1 = (Analog::Filters::MoogLadders::MoogLadderFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",1,"Analog::Filters::MoogLadders::MoogLadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLadderFilter *arg1 = (Analog::Filters::MoogLadders::MoogLadderFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",1,"Analog::Filters::MoogLadders::MoogLadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MoogLadders::MoogLadderFilter *arg1 = (Analog::Filters::MoogLadders::MoogLadderFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",1,"Analog::Filters::MoogLadders::MoogLadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MoogLadders::MoogLadderFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter,0))){
    SWIG_fail_ptr("MoogLadderFilter_Tick",1,SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadderFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MoogLadderFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MoogLadderFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MoogLadderFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MoogLadderFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MoogLadderFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MoogLadders::MoogLadderFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::MoogLadderFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::MoogLadderFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MoogLadders::MoogLadderFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_MoogLadderFilter(void *obj) {
Analog::Filters::MoogLadders::MoogLadderFilter *arg1 = (Analog::Filters::MoogLadders::MoogLadderFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_MoogLadderFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MoogLadderFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MoogLadderFilter_attributes[] = {
    { "moog", _wrap_MoogLadderFilter_moog_get, _wrap_MoogLadderFilter_moog_set },
    { "sr", _wrap_MoogLadderFilter_sr_get, _wrap_MoogLadderFilter_sr_set },
    {0,0,0}
};
static swig_lua_method swig_MoogLadderFilter_methods[]= {
    { "Process", _wrap_MoogLadderFilter_Process},
    { "SetResonance", _wrap_MoogLadderFilter_SetResonance},
    { "SetCutoff", _wrap_MoogLadderFilter_SetCutoff},
    { "setType", _wrap_MoogLadderFilter_setType},
    { "Tick", _wrap_MoogLadderFilter_Tick},
    {0,0}
};
static swig_lua_method swig_MoogLadderFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MoogLadderFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MoogLadderFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MoogLadderFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MoogLadderFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MoogLadderFilter_Sf_SwigStatic = {
    "MoogLadderFilter",
    swig_MoogLadderFilter_Sf_SwigStatic_methods,
    swig_MoogLadderFilter_Sf_SwigStatic_attributes,
    swig_MoogLadderFilter_Sf_SwigStatic_constants,
    swig_MoogLadderFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MoogLadderFilter_bases[] = {0};
static const char *swig_MoogLadderFilter_base_names[] = {0};
static swig_lua_class _wrap_class_MoogLadderFilter = { "MoogLadderFilter", "MoogLadderFilter", &SWIGTYPE_p_Analog__Filters__MoogLadders__MoogLadderFilter,_proxy__wrap_new_MoogLadderFilter, swig_delete_MoogLadderFilter, swig_MoogLadderFilter_methods, swig_MoogLadderFilter_attributes, &swig_MoogLadderFilter_Sf_SwigStatic, swig_MoogLadderFilter_meta, swig_MoogLadderFilter_bases, swig_MoogLadderFilter_base_names };

static int _wrap_SlewLimiter__delta_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::SlewLimiter *arg1 = (Analog::Calculus::RateLimiters::SlewLimiter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::_delta",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::_delta",1,"Analog::Calculus::RateLimiters::SlewLimiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::_delta",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter__delta_set",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->_delta = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter__delta_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::SlewLimiter *arg1 = (Analog::Calculus::RateLimiters::SlewLimiter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::_delta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::_delta",1,"Analog::Calculus::RateLimiters::SlewLimiter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter__delta_get",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter);
  }
  
  result = (DspFloatType) ((arg1)->_delta);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter__last_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::SlewLimiter *arg1 = (Analog::Calculus::RateLimiters::SlewLimiter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::_last",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::_last",1,"Analog::Calculus::RateLimiters::SlewLimiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::_last",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter__last_set",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->_last = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter__last_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::SlewLimiter *arg1 = (Analog::Calculus::RateLimiters::SlewLimiter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::_last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::_last",1,"Analog::Calculus::RateLimiters::SlewLimiter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter__last_get",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter);
  }
  
  result = (DspFloatType) ((arg1)->_last);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SlewLimiter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Analog::Calculus::RateLimiters::SlewLimiter *result = 0 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::SlewLimiter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::SlewLimiter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::SlewLimiter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::SlewLimiter",3,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Analog::Calculus::RateLimiters::SlewLimiter *)new Analog::Calculus::RateLimiters::SlewLimiter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SlewLimiter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Analog::Calculus::RateLimiters::SlewLimiter *result = 0 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::SlewLimiter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::SlewLimiter",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::SlewLimiter",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Calculus::RateLimiters::SlewLimiter *)new Analog::Calculus::RateLimiters::SlewLimiter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SlewLimiter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Calculus::RateLimiters::SlewLimiter *result = 0 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::SlewLimiter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::SlewLimiter",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Calculus::RateLimiters::SlewLimiter *)new Analog::Calculus::RateLimiters::SlewLimiter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SlewLimiter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::SlewLimiter *result = 0 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::SlewLimiter",0,0)
  result = (Analog::Calculus::RateLimiters::SlewLimiter *)new Analog::Calculus::RateLimiters::SlewLimiter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SlewLimiter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SlewLimiter__SWIG_3(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SlewLimiter__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SlewLimiter__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_SlewLimiter__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SlewLimiter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Calculus::RateLimiters::SlewLimiter::SlewLimiter(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Calculus::RateLimiters::SlewLimiter::SlewLimiter(DspFloatType,DspFloatType)\n"
    "    Analog::Calculus::RateLimiters::SlewLimiter::SlewLimiter(DspFloatType)\n"
    "    Analog::Calculus::RateLimiters::SlewLimiter::SlewLimiter()\n");
  lua_error(L);return 0;
}


static int _wrap_SlewLimiter_setParams__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::SlewLimiter *arg1 = (Analog::Calculus::RateLimiters::SlewLimiter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::setParams",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::setParams",1,"Analog::Calculus::RateLimiters::SlewLimiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::setParams",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::setParams",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::setParams",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter_setParams",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  (arg1)->setParams(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter_setParams__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::SlewLimiter *arg1 = (Analog::Calculus::RateLimiters::SlewLimiter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::setParams",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::setParams",1,"Analog::Calculus::RateLimiters::SlewLimiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::setParams",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::setParams",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter_setParams",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setParams(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter_setParams__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::SlewLimiter *arg1 = (Analog::Calculus::RateLimiters::SlewLimiter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::setParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::setParams",1,"Analog::Calculus::RateLimiters::SlewLimiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::setParams",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter_setParams",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setParams(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter_setParams__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::SlewLimiter *arg1 = (Analog::Calculus::RateLimiters::SlewLimiter *) 0 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::setParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::setParams",1,"Analog::Calculus::RateLimiters::SlewLimiter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter_setParams",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter);
  }
  
  (arg1)->setParams();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter_setParams(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SlewLimiter_setParams__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SlewLimiter_setParams__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SlewLimiter_setParams__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SlewLimiter_setParams__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SlewLimiter_setParams'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Calculus::RateLimiters::SlewLimiter::setParams(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Calculus::RateLimiters::SlewLimiter::setParams(DspFloatType,DspFloatType)\n"
    "    Analog::Calculus::RateLimiters::SlewLimiter::setParams(DspFloatType)\n"
    "    Analog::Calculus::RateLimiters::SlewLimiter::setParams()\n");
  lua_error(L);return 0;
}


static int _wrap_SlewLimiter_setLast(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::SlewLimiter *arg1 = (Analog::Calculus::RateLimiters::SlewLimiter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::setLast",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::setLast",1,"Analog::Calculus::RateLimiters::SlewLimiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::setLast",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter_setLast",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setLast(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter_next__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::SlewLimiter *arg1 = (Analog::Calculus::RateLimiters::SlewLimiter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::next",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::next",1,"Analog::Calculus::RateLimiters::SlewLimiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::next",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter_next",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->next(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter_next__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::SlewLimiter *arg1 = (Analog::Calculus::RateLimiters::SlewLimiter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::next",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::next",1,"Analog::Calculus::RateLimiters::SlewLimiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::next",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::next",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter_next",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->next(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter_next(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SlewLimiter_next__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SlewLimiter_next__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SlewLimiter_next'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Calculus::RateLimiters::SlewLimiter::next(DspFloatType)\n"
    "    Analog::Calculus::RateLimiters::SlewLimiter::next(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_SlewLimiter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::SlewLimiter *arg1 = (Analog::Calculus::RateLimiters::SlewLimiter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::Tick",1,"Analog::Calculus::RateLimiters::SlewLimiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter_Tick",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::SlewLimiter *arg1 = (Analog::Calculus::RateLimiters::SlewLimiter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::Tick",1,"Analog::Calculus::RateLimiters::SlewLimiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter_Tick",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::SlewLimiter *arg1 = (Analog::Calculus::RateLimiters::SlewLimiter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::Tick",1,"Analog::Calculus::RateLimiters::SlewLimiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter_Tick",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::SlewLimiter *arg1 = (Analog::Calculus::RateLimiters::SlewLimiter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::SlewLimiter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::Tick",1,"Analog::Calculus::RateLimiters::SlewLimiter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::SlewLimiter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,0))){
    SWIG_fail_ptr("SlewLimiter_Tick",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlewLimiter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SlewLimiter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SlewLimiter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SlewLimiter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SlewLimiter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SlewLimiter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Calculus::RateLimiters::SlewLimiter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Calculus::RateLimiters::SlewLimiter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Calculus::RateLimiters::SlewLimiter::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Calculus::RateLimiters::SlewLimiter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_SlewLimiter(void *obj) {
Analog::Calculus::RateLimiters::SlewLimiter *arg1 = (Analog::Calculus::RateLimiters::SlewLimiter *) obj;
delete arg1;
}
static int _proxy__wrap_new_SlewLimiter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SlewLimiter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SlewLimiter_attributes[] = {
    { "_delta", _wrap_SlewLimiter__delta_get, _wrap_SlewLimiter__delta_set },
    { "_last", _wrap_SlewLimiter__last_get, _wrap_SlewLimiter__last_set },
    {0,0,0}
};
static swig_lua_method swig_SlewLimiter_methods[]= {
    { "setParams", _wrap_SlewLimiter_setParams},
    { "setLast", _wrap_SlewLimiter_setLast},
    { "next", _wrap_SlewLimiter_next},
    { "Tick", _wrap_SlewLimiter_Tick},
    {0,0}
};
static swig_lua_method swig_SlewLimiter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SlewLimiter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SlewLimiter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SlewLimiter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SlewLimiter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SlewLimiter_Sf_SwigStatic = {
    "SlewLimiter",
    swig_SlewLimiter_Sf_SwigStatic_methods,
    swig_SlewLimiter_Sf_SwigStatic_attributes,
    swig_SlewLimiter_Sf_SwigStatic_constants,
    swig_SlewLimiter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SlewLimiter_bases[] = {0,0};
static const char *swig_SlewLimiter_base_names[] = {"FunctionProcessor *",0};
static swig_lua_class _wrap_class_SlewLimiter = { "SlewLimiter", "SlewLimiter", &SWIGTYPE_p_Analog__Calculus__RateLimiters__SlewLimiter,_proxy__wrap_new_SlewLimiter, swig_delete_SlewLimiter, swig_SlewLimiter_methods, swig_SlewLimiter_attributes, &swig_SlewLimiter_Sf_SwigStatic, swig_SlewLimiter_meta, swig_SlewLimiter_bases, swig_SlewLimiter_base_names };

static int _wrap_Slew_rise_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::rise",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::rise",1,"Analog::Calculus::RateLimiters::Slew *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::rise",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_rise_set",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->rise = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_rise_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::rise",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::rise",1,"Analog::Calculus::RateLimiters::Slew *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_rise_get",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  result = (DspFloatType) ((arg1)->rise);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_fall_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::fall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::fall",1,"Analog::Calculus::RateLimiters::Slew *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::fall",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_fall_set",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->fall = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_fall_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::fall",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::fall",1,"Analog::Calculus::RateLimiters::Slew *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_fall_get",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  result = (DspFloatType) ((arg1)->fall);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_target_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::target",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::target",1,"Analog::Calculus::RateLimiters::Slew *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::target",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_target_set",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->target = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_target_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::target",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::target",1,"Analog::Calculus::RateLimiters::Slew *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_target_get",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  result = (DspFloatType) ((arg1)->target);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_out_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::out",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::out",1,"Analog::Calculus::RateLimiters::Slew *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::out",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_out_set",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->out = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_out_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::out",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::out",1,"Analog::Calculus::RateLimiters::Slew *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_out_get",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  result = (DspFloatType) ((arg1)->out);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::sr",1,"Analog::Calculus::RateLimiters::Slew *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::sr",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_sr_set",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::sr",1,"Analog::Calculus::RateLimiters::Slew *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_sr_get",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  result = (DspFloatType) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Slew(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  Analog::Calculus::RateLimiters::Slew *result = 0 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::Slew",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Slew",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Slew",2,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Calculus::RateLimiters::Slew *)new Analog::Calculus::RateLimiters::Slew(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_setRise(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::setRise",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::setRise",1,"Analog::Calculus::RateLimiters::Slew *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::setRise",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_setRise",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setRise(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_setFall(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::setFall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::setFall",1,"Analog::Calculus::RateLimiters::Slew *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::setFall",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_setFall",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFall(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_setTarget(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::setTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::setTarget",1,"Analog::Calculus::RateLimiters::Slew *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::setTarget",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_setTarget",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::setPort",1,"Analog::Calculus::RateLimiters::Slew *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_setPort",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Tick",1,"Analog::Calculus::RateLimiters::Slew *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_Tick",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  result = (DspFloatType)(arg1)->Tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Tick",1,"Analog::Calculus::RateLimiters::Slew *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_Tick",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Tick",1,"Analog::Calculus::RateLimiters::Slew *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_Tick",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Tick",1,"Analog::Calculus::RateLimiters::Slew *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_Tick",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_Tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Calculus::RateLimiters::Slew::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Tick",1,"Analog::Calculus::RateLimiters::Slew *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Calculus::RateLimiters::Slew::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,0))){
    SWIG_fail_ptr("Slew_Tick",1,SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slew_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Slew_Tick__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Slew_Tick__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Slew_Tick__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Slew_Tick__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Slew_Tick__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Slew_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Calculus::RateLimiters::Slew::Tick()\n"
    "    Analog::Calculus::RateLimiters::Slew::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Calculus::RateLimiters::Slew::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Calculus::RateLimiters::Slew::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Calculus::RateLimiters::Slew::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_Slew(void *obj) {
Analog::Calculus::RateLimiters::Slew *arg1 = (Analog::Calculus::RateLimiters::Slew *) obj;
delete arg1;
}
static int _proxy__wrap_new_Slew(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Slew);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Slew_attributes[] = {
    { "rise", _wrap_Slew_rise_get, _wrap_Slew_rise_set },
    { "fall", _wrap_Slew_fall_get, _wrap_Slew_fall_set },
    { "target", _wrap_Slew_target_get, _wrap_Slew_target_set },
    { "out", _wrap_Slew_out_get, _wrap_Slew_out_set },
    { "sr", _wrap_Slew_sr_get, _wrap_Slew_sr_set },
    {0,0,0}
};
static swig_lua_method swig_Slew_methods[]= {
    { "setRise", _wrap_Slew_setRise},
    { "setFall", _wrap_Slew_setFall},
    { "setTarget", _wrap_Slew_setTarget},
    { "setPort", _wrap_Slew_setPort},
    { "Tick", _wrap_Slew_Tick},
    {0,0}
};
static swig_lua_method swig_Slew_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Slew_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Slew_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_RISE", Analog::Calculus::RateLimiters::Slew::PORT_RISE)},
    {SWIG_LUA_CONSTTAB_INT("PORT_FALL", Analog::Calculus::RateLimiters::Slew::PORT_FALL)},
    {SWIG_LUA_CONSTTAB_INT("PORT_TARGET", Analog::Calculus::RateLimiters::Slew::PORT_TARGET)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Slew_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Slew_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Slew_Sf_SwigStatic = {
    "Slew",
    swig_Slew_Sf_SwigStatic_methods,
    swig_Slew_Sf_SwigStatic_attributes,
    swig_Slew_Sf_SwigStatic_constants,
    swig_Slew_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Slew_bases[] = {0,0};
static const char *swig_Slew_base_names[] = {"FunctionProcessor *",0};
static swig_lua_class _wrap_class_Slew = { "Slew", "Slew", &SWIGTYPE_p_Analog__Calculus__RateLimiters__Slew,_proxy__wrap_new_Slew, swig_delete_Slew, swig_Slew_methods, swig_Slew_attributes, &swig_Slew_Sf_SwigStatic, swig_Slew_meta, swig_Slew_bases, swig_Slew_base_names };

static int _wrap_RCFilter_i_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType *arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::i",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::i",1,"Analog::Filters::RCFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::i",2,"DspFloatType [Analog::Filters::RCFilter::MAX_FILTERS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_i_set",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RCFilter_i_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) arg1->i;
    for (ii = 0; ii < (size_t)Analog::Filters::RCFilter::MAX_FILTERS; ii++) b[ii] = *((DspFloatType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_i_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::i",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::i",1,"Analog::Filters::RCFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_i_get",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  result = (DspFloatType *)(DspFloatType *) ((arg1)->i);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_last_sample_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType *arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::last_sample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::last_sample",1,"Analog::Filters::RCFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::last_sample",2,"DspFloatType [Analog::Filters::RCFilter::MAX_FILTERS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_last_sample_set",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RCFilter_last_sample_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) arg1->last_sample;
    for (ii = 0; ii < (size_t)Analog::Filters::RCFilter::MAX_FILTERS; ii++) b[ii] = *((DspFloatType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_last_sample_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::last_sample",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::last_sample",1,"Analog::Filters::RCFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_last_sample_get",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  result = (DspFloatType *)(DspFloatType *) ((arg1)->last_sample);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_max_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::max",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::max",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_max_set",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_max_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::max",1,"Analog::Filters::RCFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_max_get",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  result = (DspFloatType) ((arg1)->max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_amplify_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::amplify",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::amplify",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::amplify",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_amplify_set",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->amplify = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_amplify_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::amplify",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::amplify",1,"Analog::Filters::RCFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_amplify_get",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  result = (DspFloatType) ((arg1)->amplify);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::R",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_R_set",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::R",1,"Analog::Filters::RCFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_R_get",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_C_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::C",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::C",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::C",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_C_set",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->C = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_C_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::C",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::C",1,"Analog::Filters::RCFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_C_get",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  result = (DspFloatType) ((arg1)->C);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_invR_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::invR",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::invR",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::invR",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_invR_set",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->invR = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_invR_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::invR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::invR",1,"Analog::Filters::RCFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_invR_get",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  result = (DspFloatType) ((arg1)->invR);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_dt_div_C_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::dt_div_C",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::dt_div_C",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::dt_div_C",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_dt_div_C_set",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->dt_div_C = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_dt_div_C_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::dt_div_C",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::dt_div_C",1,"Analog::Filters::RCFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_dt_div_C_get",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  result = (DspFloatType) ((arg1)->dt_div_C);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_di_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType *arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::di",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::di",1,"Analog::Filters::RCFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::di",2,"DspFloatType [Analog::Filters::RCFilter::MAX_FILTERS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_di_set",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RCFilter_di_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    DspFloatType *b = (DspFloatType *) arg1->di;
    for (ii = 0; ii < (size_t)Analog::Filters::RCFilter::MAX_FILTERS; ii++) b[ii] = *((DspFloatType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_di_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::di",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::di",1,"Analog::Filters::RCFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_di_get",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  result = (DspFloatType *)(DspFloatType *) ((arg1)->di);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_out_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::out",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::out",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::out",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_out_set",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->out = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_out_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::out",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::out",1,"Analog::Filters::RCFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_out_get",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  result = (DspFloatType) ((arg1)->out);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::freq",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::freq",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_freq_set",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::freq",1,"Analog::Filters::RCFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_freq_get",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  result = (DspFloatType) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::sampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::sampleRate",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::sampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_sampleRate_set",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::sampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::sampleRate",1,"Analog::Filters::RCFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_sampleRate_get",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  result = (DspFloatType) ((arg1)->sampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_band_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::band",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::band",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::band",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_band_set",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->band = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_band_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  int result;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::band",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::band",1,"Analog::Filters::RCFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_band_get",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  result = (int) ((arg1)->band);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RCFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  Analog::Filters::RCFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::RCFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::RCFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::RCFilter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::RCFilter::RCFilter",3,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (Analog::Filters::RCFilter *)new Analog::Filters::RCFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__RCFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RCFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DspFloatType arg2 ;
  Analog::Filters::RCFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::RCFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::RCFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::RCFilter",2,"DspFloatType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (Analog::Filters::RCFilter *)new Analog::Filters::RCFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__RCFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RCFilter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RCFilter__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_RCFilter__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RCFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::RCFilter::RCFilter(int,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::RCFilter::RCFilter(int,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_RCFilter_LC_filter(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::LC_filter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::LC_filter",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::LC_filter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::RCFilter::LC_filter",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_LC_filter",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->LC_filter(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_other(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::other",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::other",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::other",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::RCFilter::other",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_other",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->other(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_RC_set_freq(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::RC_set_freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::RC_set_freq",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::RC_set_freq",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_RC_set_freq",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->RC_set_freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::setCutoff",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_setCutoff",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_RC_filter(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::RC_filter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::RC_filter",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::RC_filter",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::RCFilter::RC_filter",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::RCFilter::RC_filter",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_RC_filter",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->RC_filter(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_RC_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::RC_bandpass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::RC_bandpass",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::RC_bandpass",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_RC_bandpass",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->RC_bandpass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_RC_highpass(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::RC_highpass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::RC_highpass",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::RC_highpass",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_RC_highpass",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->RC_highpass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_RC_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::RC_lowpass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::RC_lowpass",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::RC_lowpass",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_RC_lowpass",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->RC_lowpass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::setPort",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::RCFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_setPort",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::Tick",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::RCFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::RCFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Filters::RCFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_Tick",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::Tick",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::RCFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::RCFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_Tick",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::Tick",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::RCFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_Tick",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::RCFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::RCFilter::Tick",1,"Analog::Filters::RCFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::RCFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__RCFilter,0))){
    SWIG_fail_ptr("RCFilter_Tick",1,SWIGTYPE_p_Analog__Filters__RCFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RCFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__RCFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RCFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__RCFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RCFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__RCFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_RCFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__RCFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RCFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RCFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::RCFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::RCFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::RCFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::RCFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_RCFilter(void *obj) {
Analog::Filters::RCFilter *arg1 = (Analog::Filters::RCFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RCFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RCFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RCFilter_attributes[] = {
    { "i", _wrap_RCFilter_i_get, _wrap_RCFilter_i_set },
    { "last_sample", _wrap_RCFilter_last_sample_get, _wrap_RCFilter_last_sample_set },
    { "max", _wrap_RCFilter_max_get, _wrap_RCFilter_max_set },
    { "amplify", _wrap_RCFilter_amplify_get, _wrap_RCFilter_amplify_set },
    { "R", _wrap_RCFilter_R_get, _wrap_RCFilter_R_set },
    { "C", _wrap_RCFilter_C_get, _wrap_RCFilter_C_set },
    { "invR", _wrap_RCFilter_invR_get, _wrap_RCFilter_invR_set },
    { "dt_div_C", _wrap_RCFilter_dt_div_C_get, _wrap_RCFilter_dt_div_C_set },
    { "di", _wrap_RCFilter_di_get, _wrap_RCFilter_di_set },
    { "out", _wrap_RCFilter_out_get, _wrap_RCFilter_out_set },
    { "freq", _wrap_RCFilter_freq_get, _wrap_RCFilter_freq_set },
    { "sampleRate", _wrap_RCFilter_sampleRate_get, _wrap_RCFilter_sampleRate_set },
    { "band", _wrap_RCFilter_band_get, _wrap_RCFilter_band_set },
    {0,0,0}
};
static swig_lua_method swig_RCFilter_methods[]= {
    { "LC_filter", _wrap_RCFilter_LC_filter},
    { "other", _wrap_RCFilter_other},
    { "RC_set_freq", _wrap_RCFilter_RC_set_freq},
    { "setCutoff", _wrap_RCFilter_setCutoff},
    { "RC_filter", _wrap_RCFilter_RC_filter},
    { "RC_bandpass", _wrap_RCFilter_RC_bandpass},
    { "RC_highpass", _wrap_RCFilter_RC_highpass},
    { "RC_lowpass", _wrap_RCFilter_RC_lowpass},
    { "setPort", _wrap_RCFilter_setPort},
    { "Tick", _wrap_RCFilter_Tick},
    {0,0}
};
static swig_lua_method swig_RCFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RCFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RCFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("MAX_FILTERS", Analog::Filters::RCFilter::MAX_FILTERS)},
    {SWIG_LUA_CONSTTAB_INT("LOW", Analog::Filters::RCFilter::LOW)},
    {SWIG_LUA_CONSTTAB_INT("HIGH", Analog::Filters::RCFilter::HIGH)},
    {SWIG_LUA_CONSTTAB_INT("BAND", Analog::Filters::RCFilter::BAND)},
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Analog::Filters::RCFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_LP", Analog::Filters::RCFilter::PORT_LP)},
    {SWIG_LUA_CONSTTAB_INT("PORT_HP", Analog::Filters::RCFilter::PORT_HP)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BP", Analog::Filters::RCFilter::PORT_BP)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RCFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RCFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RCFilter_Sf_SwigStatic = {
    "RCFilter",
    swig_RCFilter_Sf_SwigStatic_methods,
    swig_RCFilter_Sf_SwigStatic_attributes,
    swig_RCFilter_Sf_SwigStatic_constants,
    swig_RCFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RCFilter_bases[] = {0,0};
static const char *swig_RCFilter_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_RCFilter = { "RCFilter", "RCFilter", &SWIGTYPE_p_Analog__Filters__RCFilter,_proxy__wrap_new_RCFilter, swig_delete_RCFilter, swig_RCFilter_methods, swig_RCFilter_attributes, &swig_RCFilter_Sf_SwigStatic, swig_RCFilter_meta, swig_RCFilter_bases, swig_RCFilter_base_names };

static int _wrap_new_SstFilterState(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilterState *result = 0 ;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilterState::SstFilterState",0,0)
  result = (Analog::SstFilter::SstFilterState *)new Analog::SstFilter::SstFilterState();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__SstFilter__SstFilterState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SstFilterState_reset(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilterState *arg1 = (Analog::SstFilter::SstFilterState *) 0 ;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilterState::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilterState::reset",1,"Analog::SstFilter::SstFilterState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilterState,0))){
    SWIG_fail_ptr("SstFilterState_reset",1,SWIGTYPE_p_Analog__SstFilter__SstFilterState);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SstFilterState(void *obj) {
Analog::SstFilter::SstFilterState *arg1 = (Analog::SstFilter::SstFilterState *) obj;
delete arg1;
}
static int _proxy__wrap_new_SstFilterState(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SstFilterState);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SstFilterState_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SstFilterState_methods[]= {
    { "reset", _wrap_SstFilterState_reset},
    {0,0}
};
static swig_lua_method swig_SstFilterState_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SstFilterState_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SstFilterState_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SstFilterState_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SstFilterState_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SstFilterState_Sf_SwigStatic = {
    "SstFilterState",
    swig_SstFilterState_Sf_SwigStatic_methods,
    swig_SstFilterState_Sf_SwigStatic_attributes,
    swig_SstFilterState_Sf_SwigStatic_constants,
    swig_SstFilterState_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SstFilterState_bases[] = {0};
static const char *swig_SstFilterState_base_names[] = {0};
static swig_lua_class _wrap_class_SstFilterState = { "SstFilterState", "SstFilterState", &SWIGTYPE_p_Analog__SstFilter__SstFilterState,_proxy__wrap_new_SstFilterState, swig_delete_SstFilterState, swig_SstFilterState_methods, swig_SstFilterState_attributes, &swig_SstFilterState_Sf_SwigStatic, swig_SstFilterState_meta, swig_SstFilterState_bases, swig_SstFilterState_base_names };

static int _wrap_SstFilter_filters_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  Analog::SstFilter::SstFilterState *arg2 ;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::filters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::filters",1,"Analog::SstFilter::SstFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::SstFilter::SstFilter::filters",2,"Analog::SstFilter::SstFilterState [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_filters_set",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__SstFilter__SstFilterState,0))){
    SWIG_fail_ptr("SstFilter_filters_set",2,SWIGTYPE_p_Analog__SstFilter__SstFilterState);
  }
  
  {
    size_t ii;
    Analog::SstFilter::SstFilterState *b = (Analog::SstFilter::SstFilterState *) arg1->filters;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((Analog::SstFilter::SstFilterState *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SstFilter_filters_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  Analog::SstFilter::SstFilterState *result = 0 ;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::filters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::filters",1,"Analog::SstFilter::SstFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_filters_get",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  result = (Analog::SstFilter::SstFilterState *)(Analog::SstFilter::SstFilterState *) ((arg1)->filters);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__SstFilter__SstFilterState,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SstFilter_coeffMaker_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  sst::filters::FilterCoefficientMaker< > arg2 ;
  sst::filters::FilterCoefficientMaker< > *argp2 ;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::coeffMaker",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::coeffMaker",1,"Analog::SstFilter::SstFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Analog::SstFilter::SstFilter::coeffMaker",2,"sst::filters::FilterCoefficientMaker< >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_coeffMaker_set",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_sst__filters__FilterCoefficientMakerT_t,0))){
    SWIG_fail_ptr("SstFilter_coeffMaker_set",2,SWIGTYPE_p_sst__filters__FilterCoefficientMakerT_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->coeffMaker = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SstFilter_coeffMaker_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  sst::filters::FilterCoefficientMaker< > result;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::coeffMaker",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::coeffMaker",1,"Analog::SstFilter::SstFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_coeffMaker_get",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  result =  ((arg1)->coeffMaker);
  {
    sst::filters::FilterCoefficientMaker< > * resultptr = new sst::filters::FilterCoefficientMaker< >((const sst::filters::FilterCoefficientMaker< > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_sst__filters__FilterCoefficientMakerT_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SstFilter_filterType_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::filterType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::filterType",1,"Analog::SstFilter::SstFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::SstFilter::SstFilter::filterType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_filterType_set",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filterType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SstFilter_filterType_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  int result;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::filterType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::filterType",1,"Analog::SstFilter::SstFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_filterType_get",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  result = (int) ((arg1)->filterType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SstFilter_filterSubType_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::filterSubType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::filterSubType",1,"Analog::SstFilter::SstFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::SstFilter::SstFilter::filterSubType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_filterSubType_set",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filterSubType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SstFilter_filterSubType_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  int result;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::filterSubType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::filterSubType",1,"Analog::SstFilter::SstFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_filterSubType_get",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  result = (int) ((arg1)->filterSubType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SstFilter_freqParam_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::freqParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::freqParam",1,"Analog::SstFilter::SstFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::SstFilter::SstFilter::freqParam",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_freqParam_set",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->freqParam = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SstFilter_freqParam_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::freqParam",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::freqParam",1,"Analog::SstFilter::SstFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_freqParam_get",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  result = (double) ((arg1)->freqParam);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SstFilter_resParam_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::resParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::resParam",1,"Analog::SstFilter::SstFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::SstFilter::SstFilter::resParam",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_resParam_set",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->resParam = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SstFilter_resParam_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::resParam",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::resParam",1,"Analog::SstFilter::SstFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_resParam_get",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  result = (double) ((arg1)->resParam);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SstFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  Analog::SstFilter::SstFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::SstFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::SstFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::SstFilter::SstFilter::SstFilter",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (Analog::SstFilter::SstFilter *)new Analog::SstFilter::SstFilter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__SstFilter__SstFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SstFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Analog::SstFilter::SstFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::SstFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::SstFilter",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Analog::SstFilter::SstFilter *)new Analog::SstFilter::SstFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__SstFilter__SstFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SstFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::SstFilter",0,0)
  result = (Analog::SstFilter::SstFilter *)new Analog::SstFilter::SstFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__SstFilter__SstFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SstFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SstFilter__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SstFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SstFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SstFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::SstFilter::SstFilter::SstFilter(int,int)\n"
    "    Analog::SstFilter::SstFilter::SstFilter(int)\n"
    "    Analog::SstFilter::SstFilter::SstFilter()\n");
  lua_error(L);return 0;
}


static int _wrap_SstFilter_freq_hz_to_note_num(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::freq_hz_to_note_num",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::freq_hz_to_note_num",1,"Analog::SstFilter::SstFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::SstFilter::SstFilter::freq_hz_to_note_num",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_freq_hz_to_note_num",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->freq_hz_to_note_num(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SstFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::setCutoff",1,"Analog::SstFilter::SstFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::SstFilter::SstFilter::setCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_setCutoff",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SstFilter_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::setResonance",1,"Analog::SstFilter::SstFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::SstFilter::SstFilter::setResonance",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_setResonance",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SstFilter_ProcessInplace(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::ProcessInplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::ProcessInplace",1,"Analog::SstFilter::SstFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::SstFilter::SstFilter::ProcessInplace",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::SstFilter::SstFilter::ProcessInplace",3,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_ProcessInplace",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("SstFilter_ProcessInplace",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessInplace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SstFilter_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  
  SWIG_check_num_args("Analog::SstFilter::SstFilter::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstFilter::SstFilter::ProcessBlock",1,"Analog::SstFilter::SstFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::SstFilter::SstFilter::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::SstFilter::SstFilter::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Analog::SstFilter::SstFilter::ProcessBlock",4,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstFilter__SstFilter,0))){
    SWIG_fail_ptr("SstFilter_ProcessBlock",1,SWIGTYPE_p_Analog__SstFilter__SstFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("SstFilter_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("SstFilter_ProcessBlock",4,SWIGTYPE_p_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SstFilter(void *obj) {
Analog::SstFilter::SstFilter *arg1 = (Analog::SstFilter::SstFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_SstFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SstFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SstFilter_attributes[] = {
    { "filters", _wrap_SstFilter_filters_get, _wrap_SstFilter_filters_set },
    { "coeffMaker", _wrap_SstFilter_coeffMaker_get, _wrap_SstFilter_coeffMaker_set },
    { "filterType", _wrap_SstFilter_filterType_get, _wrap_SstFilter_filterType_set },
    { "filterSubType", _wrap_SstFilter_filterSubType_get, _wrap_SstFilter_filterSubType_set },
    { "freqParam", _wrap_SstFilter_freqParam_get, _wrap_SstFilter_freqParam_set },
    { "resParam", _wrap_SstFilter_resParam_get, _wrap_SstFilter_resParam_set },
    {0,0,0}
};
static swig_lua_method swig_SstFilter_methods[]= {
    { "freq_hz_to_note_num", _wrap_SstFilter_freq_hz_to_note_num},
    { "setCutoff", _wrap_SstFilter_setCutoff},
    { "setResonance", _wrap_SstFilter_setResonance},
    { "ProcessInplace", _wrap_SstFilter_ProcessInplace},
    { "ProcessBlock", _wrap_SstFilter_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_SstFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SstFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SstFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("fut_none", Analog::SstFilter::SstFilter::fut_none)},
    {SWIG_LUA_CONSTTAB_INT("fut_lp12", Analog::SstFilter::SstFilter::fut_lp12)},
    {SWIG_LUA_CONSTTAB_INT("fut_lp24", Analog::SstFilter::SstFilter::fut_lp24)},
    {SWIG_LUA_CONSTTAB_INT("fut_lpmoog", Analog::SstFilter::SstFilter::fut_lpmoog)},
    {SWIG_LUA_CONSTTAB_INT("fut_hp12", Analog::SstFilter::SstFilter::fut_hp12)},
    {SWIG_LUA_CONSTTAB_INT("fut_hp24", Analog::SstFilter::SstFilter::fut_hp24)},
    {SWIG_LUA_CONSTTAB_INT("fut_bp12", Analog::SstFilter::SstFilter::fut_bp12)},
    {SWIG_LUA_CONSTTAB_INT("fut_notch12", Analog::SstFilter::SstFilter::fut_notch12)},
    {SWIG_LUA_CONSTTAB_INT("fut_comb_pos", Analog::SstFilter::SstFilter::fut_comb_pos)},
    {SWIG_LUA_CONSTTAB_INT("fut_SNH", Analog::SstFilter::SstFilter::fut_SNH)},
    {SWIG_LUA_CONSTTAB_INT("fut_vintageladder", Analog::SstFilter::SstFilter::fut_vintageladder)},
    {SWIG_LUA_CONSTTAB_INT("fut_obxd_2pole_lp", Analog::SstFilter::SstFilter::fut_obxd_2pole_lp)},
    {SWIG_LUA_CONSTTAB_INT("fut_obxd_4pole", Analog::SstFilter::SstFilter::fut_obxd_4pole)},
    {SWIG_LUA_CONSTTAB_INT("fut_k35_lp", Analog::SstFilter::SstFilter::fut_k35_lp)},
    {SWIG_LUA_CONSTTAB_INT("fut_k35_hp", Analog::SstFilter::SstFilter::fut_k35_hp)},
    {SWIG_LUA_CONSTTAB_INT("fut_diode", Analog::SstFilter::SstFilter::fut_diode)},
    {SWIG_LUA_CONSTTAB_INT("fut_cutoffwarp_lp", Analog::SstFilter::SstFilter::fut_cutoffwarp_lp)},
    {SWIG_LUA_CONSTTAB_INT("fut_cutoffwarp_hp", Analog::SstFilter::SstFilter::fut_cutoffwarp_hp)},
    {SWIG_LUA_CONSTTAB_INT("fut_cutoffwarp_n", Analog::SstFilter::SstFilter::fut_cutoffwarp_n)},
    {SWIG_LUA_CONSTTAB_INT("fut_cutoffwarp_bp", Analog::SstFilter::SstFilter::fut_cutoffwarp_bp)},
    {SWIG_LUA_CONSTTAB_INT("fut_obxd_2pole_hp", Analog::SstFilter::SstFilter::fut_obxd_2pole_hp)},
    {SWIG_LUA_CONSTTAB_INT("fut_obxd_2pole_n", Analog::SstFilter::SstFilter::fut_obxd_2pole_n)},
    {SWIG_LUA_CONSTTAB_INT("fut_obxd_2pole_bp", Analog::SstFilter::SstFilter::fut_obxd_2pole_bp)},
    {SWIG_LUA_CONSTTAB_INT("fut_bp24", Analog::SstFilter::SstFilter::fut_bp24)},
    {SWIG_LUA_CONSTTAB_INT("fut_notch24", Analog::SstFilter::SstFilter::fut_notch24)},
    {SWIG_LUA_CONSTTAB_INT("fut_comb_neg", Analog::SstFilter::SstFilter::fut_comb_neg)},
    {SWIG_LUA_CONSTTAB_INT("fut_apf", Analog::SstFilter::SstFilter::fut_apf)},
    {SWIG_LUA_CONSTTAB_INT("fut_cutoffwarp_ap", Analog::SstFilter::SstFilter::fut_cutoffwarp_ap)},
    {SWIG_LUA_CONSTTAB_INT("fut_resonancewarp_lp", Analog::SstFilter::SstFilter::fut_resonancewarp_lp)},
    {SWIG_LUA_CONSTTAB_INT("fut_resonancewarp_hp", Analog::SstFilter::SstFilter::fut_resonancewarp_hp)},
    {SWIG_LUA_CONSTTAB_INT("fut_resonancewarp_n", Analog::SstFilter::SstFilter::fut_resonancewarp_n)},
    {SWIG_LUA_CONSTTAB_INT("fut_resonancewarp_bp", Analog::SstFilter::SstFilter::fut_resonancewarp_bp)},
    {SWIG_LUA_CONSTTAB_INT("fut_resonancewarp_ap", Analog::SstFilter::SstFilter::fut_resonancewarp_ap)},
    {SWIG_LUA_CONSTTAB_INT("fut_tripole", Analog::SstFilter::SstFilter::fut_tripole)},
    {SWIG_LUA_CONSTTAB_INT("num_filter_types", Analog::SstFilter::SstFilter::num_filter_types)},
    {SWIG_LUA_CONSTTAB_INT("st_Standard", Analog::SstFilter::SstFilter::st_Standard)},
    {SWIG_LUA_CONSTTAB_INT("st_Driven", Analog::SstFilter::SstFilter::st_Driven)},
    {SWIG_LUA_CONSTTAB_INT("st_Clean", Analog::SstFilter::SstFilter::st_Clean)},
    {SWIG_LUA_CONSTTAB_INT("st_Medium", Analog::SstFilter::SstFilter::st_Medium)},
    {SWIG_LUA_CONSTTAB_INT("st_Notch", Analog::SstFilter::SstFilter::st_Notch)},
    {SWIG_LUA_CONSTTAB_INT("st_NotchMild", Analog::SstFilter::SstFilter::st_NotchMild)},
    {SWIG_LUA_CONSTTAB_INT("st_lpmoog_6dB", Analog::SstFilter::SstFilter::st_lpmoog_6dB)},
    {SWIG_LUA_CONSTTAB_INT("st_lpmoog_12dB", Analog::SstFilter::SstFilter::st_lpmoog_12dB)},
    {SWIG_LUA_CONSTTAB_INT("st_lpmoog_18dB", Analog::SstFilter::SstFilter::st_lpmoog_18dB)},
    {SWIG_LUA_CONSTTAB_INT("st_lpmoog_24dB", Analog::SstFilter::SstFilter::st_lpmoog_24dB)},
    {SWIG_LUA_CONSTTAB_INT("st_diode_6dB", Analog::SstFilter::SstFilter::st_diode_6dB)},
    {SWIG_LUA_CONSTTAB_INT("st_diode_12dB", Analog::SstFilter::SstFilter::st_diode_12dB)},
    {SWIG_LUA_CONSTTAB_INT("st_diode_18dB", Analog::SstFilter::SstFilter::st_diode_18dB)},
    {SWIG_LUA_CONSTTAB_INT("st_diode_24dB", Analog::SstFilter::SstFilter::st_diode_24dB)},
    {SWIG_LUA_CONSTTAB_INT("st_cutoffwarp_tanh1", Analog::SstFilter::SstFilter::st_cutoffwarp_tanh1)},
    {SWIG_LUA_CONSTTAB_INT("st_cutoffwarp_tanh2", Analog::SstFilter::SstFilter::st_cutoffwarp_tanh2)},
    {SWIG_LUA_CONSTTAB_INT("st_cutoffwarp_tanh3", Analog::SstFilter::SstFilter::st_cutoffwarp_tanh3)},
    {SWIG_LUA_CONSTTAB_INT("st_cutoffwarp_tanh4", Analog::SstFilter::SstFilter::st_cutoffwarp_tanh4)},
    {SWIG_LUA_CONSTTAB_INT("st_cutoffwarp_softclip1", Analog::SstFilter::SstFilter::st_cutoffwarp_softclip1)},
    {SWIG_LUA_CONSTTAB_INT("st_cutoffwarp_softclip2", Analog::SstFilter::SstFilter::st_cutoffwarp_softclip2)},
    {SWIG_LUA_CONSTTAB_INT("st_cutoffwarp_softclip3", Analog::SstFilter::SstFilter::st_cutoffwarp_softclip3)},
    {SWIG_LUA_CONSTTAB_INT("st_cutoffwarp_softclip4", Analog::SstFilter::SstFilter::st_cutoffwarp_softclip4)},
    {SWIG_LUA_CONSTTAB_INT("st_cutoffwarp_ojd1", Analog::SstFilter::SstFilter::st_cutoffwarp_ojd1)},
    {SWIG_LUA_CONSTTAB_INT("st_cutoffwarp_ojd2", Analog::SstFilter::SstFilter::st_cutoffwarp_ojd2)},
    {SWIG_LUA_CONSTTAB_INT("st_cutoffwarp_ojd3", Analog::SstFilter::SstFilter::st_cutoffwarp_ojd3)},
    {SWIG_LUA_CONSTTAB_INT("st_cutoffwarp_ojd4", Analog::SstFilter::SstFilter::st_cutoffwarp_ojd4)},
    {SWIG_LUA_CONSTTAB_INT("st_resonancewarp_tanh1", Analog::SstFilter::SstFilter::st_resonancewarp_tanh1)},
    {SWIG_LUA_CONSTTAB_INT("st_resonancewarp_tanh2", Analog::SstFilter::SstFilter::st_resonancewarp_tanh2)},
    {SWIG_LUA_CONSTTAB_INT("st_resonancewarp_tanh3", Analog::SstFilter::SstFilter::st_resonancewarp_tanh3)},
    {SWIG_LUA_CONSTTAB_INT("st_resonancewarp_tanh4", Analog::SstFilter::SstFilter::st_resonancewarp_tanh4)},
    {SWIG_LUA_CONSTTAB_INT("st_resonancewarp_softclip1", Analog::SstFilter::SstFilter::st_resonancewarp_softclip1)},
    {SWIG_LUA_CONSTTAB_INT("st_resonancewarp_softclip2", Analog::SstFilter::SstFilter::st_resonancewarp_softclip2)},
    {SWIG_LUA_CONSTTAB_INT("st_resonancewarp_softclip3", Analog::SstFilter::SstFilter::st_resonancewarp_softclip3)},
    {SWIG_LUA_CONSTTAB_INT("st_resonancewarp_softclip4", Analog::SstFilter::SstFilter::st_resonancewarp_softclip4)},
    {SWIG_LUA_CONSTTAB_INT("st_tripole_LLL1", Analog::SstFilter::SstFilter::st_tripole_LLL1)},
    {SWIG_LUA_CONSTTAB_INT("st_tripole_LHL1", Analog::SstFilter::SstFilter::st_tripole_LHL1)},
    {SWIG_LUA_CONSTTAB_INT("st_tripole_HLH1", Analog::SstFilter::SstFilter::st_tripole_HLH1)},
    {SWIG_LUA_CONSTTAB_INT("st_tripole_HHH1", Analog::SstFilter::SstFilter::st_tripole_HHH1)},
    {SWIG_LUA_CONSTTAB_INT("st_tripole_LLL2", Analog::SstFilter::SstFilter::st_tripole_LLL2)},
    {SWIG_LUA_CONSTTAB_INT("st_tripole_LHL2", Analog::SstFilter::SstFilter::st_tripole_LHL2)},
    {SWIG_LUA_CONSTTAB_INT("st_tripole_HLH2", Analog::SstFilter::SstFilter::st_tripole_HLH2)},
    {SWIG_LUA_CONSTTAB_INT("st_tripole_HHH2", Analog::SstFilter::SstFilter::st_tripole_HHH2)},
    {SWIG_LUA_CONSTTAB_INT("st_tripole_LLL3", Analog::SstFilter::SstFilter::st_tripole_LLL3)},
    {SWIG_LUA_CONSTTAB_INT("st_tripole_LHL3", Analog::SstFilter::SstFilter::st_tripole_LHL3)},
    {SWIG_LUA_CONSTTAB_INT("st_tripole_HLH3", Analog::SstFilter::SstFilter::st_tripole_HLH3)},
    {SWIG_LUA_CONSTTAB_INT("st_tripole_HHH3", Analog::SstFilter::SstFilter::st_tripole_HHH3)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SstFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SstFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SstFilter_Sf_SwigStatic = {
    "SstFilter",
    swig_SstFilter_Sf_SwigStatic_methods,
    swig_SstFilter_Sf_SwigStatic_attributes,
    swig_SstFilter_Sf_SwigStatic_constants,
    swig_SstFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SstFilter_bases[] = {0};
static const char *swig_SstFilter_base_names[] = {0};
static swig_lua_class _wrap_class_SstFilter = { "SstFilter", "SstFilter", &SWIGTYPE_p_Analog__SstFilter__SstFilter,_proxy__wrap_new_SstFilter, swig_delete_SstFilter, swig_SstFilter_methods, swig_SstFilter_attributes, &swig_SstFilter_Sf_SwigStatic, swig_SstFilter_meta, swig_SstFilter_bases, swig_SstFilter_base_names };

static int _wrap_new_SstWaveshaper__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstWaveshaper::WaveshaperType arg1 ;
  Analog::SstWaveshaper *result = 0 ;
  
  SWIG_check_num_args("Analog::SstWaveshaper::SstWaveshaper",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::SstWaveshaper::SstWaveshaper",1,"Analog::SstWaveshaper::WaveshaperType");
  arg1 = (Analog::SstWaveshaper::WaveshaperType)(int)lua_tonumber(L, 1);
  result = (Analog::SstWaveshaper *)new Analog::SstWaveshaper(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__SstWaveshaper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SstWaveshaper__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstWaveshaper *result = 0 ;
  
  SWIG_check_num_args("Analog::SstWaveshaper::SstWaveshaper",0,0)
  result = (Analog::SstWaveshaper *)new Analog::SstWaveshaper();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__SstWaveshaper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SstWaveshaper(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SstWaveshaper__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SstWaveshaper__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SstWaveshaper'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::SstWaveshaper::SstWaveshaper(Analog::SstWaveshaper::WaveshaperType)\n"
    "    Analog::SstWaveshaper::SstWaveshaper()\n");
  lua_error(L);return 0;
}


static int _wrap_SstWaveshaper_Process(lua_State* L) {
  int SWIG_arg = 0;
  Analog::SstWaveshaper *arg1 = (Analog::SstWaveshaper *) 0 ;
  size_t arg2 ;
  float **arg3 = (float **) 0 ;
  
  SWIG_check_num_args("Analog::SstWaveshaper::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::SstWaveshaper::Process",1,"Analog::SstWaveshaper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::SstWaveshaper::Process",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Analog::SstWaveshaper::Process",3,"float **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__SstWaveshaper,0))){
    SWIG_fail_ptr("SstWaveshaper_Process",1,SWIGTYPE_p_Analog__SstWaveshaper);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("SstWaveshaper_Process",3,SWIGTYPE_p_p_float);
  }
  
  (arg1)->Process(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SstWaveshaper(void *obj) {
Analog::SstWaveshaper *arg1 = (Analog::SstWaveshaper *) obj;
delete arg1;
}
static int _proxy__wrap_new_SstWaveshaper(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SstWaveshaper);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SstWaveshaper_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SstWaveshaper_methods[]= {
    { "Process", _wrap_SstWaveshaper_Process},
    {0,0}
};
static swig_lua_method swig_SstWaveshaper_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SstWaveshaper_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SstWaveshaper_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_none", Analog::SstWaveshaper::WaveshaperType::wst_none)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_soft", Analog::SstWaveshaper::WaveshaperType::wst_soft)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_hard", Analog::SstWaveshaper::WaveshaperType::wst_hard)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_asym", Analog::SstWaveshaper::WaveshaperType::wst_asym)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_sine", Analog::SstWaveshaper::WaveshaperType::wst_sine)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_digital", Analog::SstWaveshaper::WaveshaperType::wst_digital)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_cheby2", Analog::SstWaveshaper::WaveshaperType::wst_cheby2)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_cheby3", Analog::SstWaveshaper::WaveshaperType::wst_cheby3)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_cheby4", Analog::SstWaveshaper::WaveshaperType::wst_cheby4)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_cheby5", Analog::SstWaveshaper::WaveshaperType::wst_cheby5)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_fwrectify", Analog::SstWaveshaper::WaveshaperType::wst_fwrectify)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_poswav", Analog::SstWaveshaper::WaveshaperType::wst_poswav)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_negwav", Analog::SstWaveshaper::WaveshaperType::wst_negwav)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_softrect", Analog::SstWaveshaper::WaveshaperType::wst_softrect)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_singlefold", Analog::SstWaveshaper::WaveshaperType::wst_singlefold)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_dualfold", Analog::SstWaveshaper::WaveshaperType::wst_dualfold)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_westfold", Analog::SstWaveshaper::WaveshaperType::wst_westfold)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_add12", Analog::SstWaveshaper::WaveshaperType::wst_add12)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_add13", Analog::SstWaveshaper::WaveshaperType::wst_add13)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_add14", Analog::SstWaveshaper::WaveshaperType::wst_add14)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_add15", Analog::SstWaveshaper::WaveshaperType::wst_add15)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_add12345", Analog::SstWaveshaper::WaveshaperType::wst_add12345)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_addsaw3", Analog::SstWaveshaper::WaveshaperType::wst_addsaw3)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_addsqr3", Analog::SstWaveshaper::WaveshaperType::wst_addsqr3)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_fuzz", Analog::SstWaveshaper::WaveshaperType::wst_fuzz)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_fuzzsoft", Analog::SstWaveshaper::WaveshaperType::wst_fuzzsoft)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_fuzzheavy", Analog::SstWaveshaper::WaveshaperType::wst_fuzzheavy)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_fuzzctr", Analog::SstWaveshaper::WaveshaperType::wst_fuzzctr)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_fuzzsoftedge", Analog::SstWaveshaper::WaveshaperType::wst_fuzzsoftedge)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_sinpx", Analog::SstWaveshaper::WaveshaperType::wst_sinpx)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_sin2xpb", Analog::SstWaveshaper::WaveshaperType::wst_sin2xpb)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_sin3xpb", Analog::SstWaveshaper::WaveshaperType::wst_sin3xpb)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_sin7xpb", Analog::SstWaveshaper::WaveshaperType::wst_sin7xpb)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_sin10xpb", Analog::SstWaveshaper::WaveshaperType::wst_sin10xpb)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_2cyc", Analog::SstWaveshaper::WaveshaperType::wst_2cyc)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_7cyc", Analog::SstWaveshaper::WaveshaperType::wst_7cyc)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_10cyc", Analog::SstWaveshaper::WaveshaperType::wst_10cyc)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_2cycbound", Analog::SstWaveshaper::WaveshaperType::wst_2cycbound)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_7cycbound", Analog::SstWaveshaper::WaveshaperType::wst_7cycbound)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_10cycbound", Analog::SstWaveshaper::WaveshaperType::wst_10cycbound)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_zamsat", Analog::SstWaveshaper::WaveshaperType::wst_zamsat)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_ojd", Analog::SstWaveshaper::WaveshaperType::wst_ojd)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_wst_softfold", Analog::SstWaveshaper::WaveshaperType::wst_softfold)},
    {SWIG_LUA_CONSTTAB_INT("WaveshaperType_n_ws_types", Analog::SstWaveshaper::WaveshaperType::n_ws_types)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SstWaveshaper_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SstWaveshaper_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SstWaveshaper_Sf_SwigStatic = {
    "SstWaveshaper",
    swig_SstWaveshaper_Sf_SwigStatic_methods,
    swig_SstWaveshaper_Sf_SwigStatic_attributes,
    swig_SstWaveshaper_Sf_SwigStatic_constants,
    swig_SstWaveshaper_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SstWaveshaper_bases[] = {0};
static const char *swig_SstWaveshaper_base_names[] = {0};
static swig_lua_class _wrap_class_SstWaveshaper = { "SstWaveshaper", "SstWaveshaper", &SWIGTYPE_p_Analog__SstWaveshaper,_proxy__wrap_new_SstWaveshaper, swig_delete_SstWaveshaper, swig_SstWaveshaper_methods, swig_SstWaveshaper_attributes, &swig_SstWaveshaper_Sf_SwigStatic, swig_SstWaveshaper_meta, swig_SstWaveshaper_bases, swig_SstWaveshaper_base_names };

static int _wrap_new_MS20Filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::MS20Filter",0,0)
  result = (Analog::Filters::MS20::MS20Filter *)new Analog::Filters::MS20::MS20Filter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MS20Filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  Analog::Filters::MS20::MS20Filter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::MS20Filter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::MS20Filter",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (Analog::Filters::MS20::MS20Filter *)new Analog::Filters::MS20::MS20Filter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MS20Filter(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MS20Filter__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_MS20Filter__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MS20Filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MS20::MS20Filter::MS20Filter()\n"
    "    Analog::Filters::MS20::MS20Filter::MS20Filter(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_MS20Filter_setSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::setSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::setSampleRate",1,"Analog::Filters::MS20::MS20Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::setSampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_setSampleRate",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setSampleRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::reset",1,"Analog::Filters::MS20::MS20Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_reset",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_signum(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::signum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::signum",1,"Analog::Filters::MS20::MS20Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::signum",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_signum",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->signum(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_fx(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::fx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::fx",1,"Analog::Filters::MS20::MS20Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::fx",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_fx",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->fx(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_dfx(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::dfx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::dfx",1,"Analog::Filters::MS20::MS20Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::dfx",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_dfx",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->dfx(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_process(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::process",1,"Analog::Filters::MS20::MS20Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::process",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::process",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::process",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_process",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  (arg1)->process(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_getOutput(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::getOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::getOutput",1,"Analog::Filters::MS20::MS20Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_getOutput",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  result = (DspFloatType)((Analog::Filters::MS20::MS20Filter const *)arg1)->getOutput();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Tick",1,"Analog::Filters::MS20::MS20Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_Tick",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Tick",1,"Analog::Filters::MS20::MS20Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_Tick",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Tick",1,"Analog::Filters::MS20::MS20Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_Tick",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Tick",1,"Analog::Filters::MS20::MS20Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_Tick",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MS20__MS20Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MS20Filter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MS20__MS20Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MS20Filter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MS20__MS20Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MS20Filter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__MS20__MS20Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MS20Filter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MS20Filter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::MS20::MS20Filter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MS20::MS20Filter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MS20::MS20Filter::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::MS20::MS20Filter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_MS20Filter_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Fc",1,"Analog::Filters::MS20::MS20Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Fc",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_Fc_set",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::Fc",1,"Analog::Filters::MS20::MS20Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_Fc_get",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  result = (DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_R_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::R",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::R",1,"Analog::Filters::MS20::MS20Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::R",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_R_set",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->R = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_R_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::R",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::R",1,"Analog::Filters::MS20::MS20Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_R_get",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  result = (DspFloatType) ((arg1)->R);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::setCutoff",1,"Analog::Filters::MS20::MS20Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_setCutoff",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::setResonance",1,"Analog::Filters::MS20::MS20Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_setResonance",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MS20Filter_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Filters::MS20::MS20Filter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::setPort",1,"Analog::Filters::MS20::MS20Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::MS20::MS20Filter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,0))){
    SWIG_fail_ptr("MS20Filter_setPort",1,SWIGTYPE_p_Analog__Filters__MS20__MS20Filter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MS20Filter(void *obj) {
Analog::Filters::MS20::MS20Filter *arg1 = (Analog::Filters::MS20::MS20Filter *) obj;
delete arg1;
}
static int _proxy__wrap_new_MS20Filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MS20Filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MS20Filter_attributes[] = {
    { "Fc", _wrap_MS20Filter_Fc_get, _wrap_MS20Filter_Fc_set },
    { "R", _wrap_MS20Filter_R_get, _wrap_MS20Filter_R_set },
    {0,0,0}
};
static swig_lua_method swig_MS20Filter_methods[]= {
    { "setSampleRate", _wrap_MS20Filter_setSampleRate},
    { "reset", _wrap_MS20Filter_reset},
    { "signum", _wrap_MS20Filter_signum},
    { "fx", _wrap_MS20Filter_fx},
    { "dfx", _wrap_MS20Filter_dfx},
    { "process", _wrap_MS20Filter_process},
    { "getOutput", _wrap_MS20Filter_getOutput},
    { "Tick", _wrap_MS20Filter_Tick},
    { "setCutoff", _wrap_MS20Filter_setCutoff},
    { "setResonance", _wrap_MS20Filter_setResonance},
    { "setPort", _wrap_MS20Filter_setPort},
    {0,0}
};
static swig_lua_method swig_MS20Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MS20Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MS20Filter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Analog::Filters::MS20::MS20Filter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_RESONANCE", Analog::Filters::MS20::MS20Filter::PORT_RESONANCE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MS20Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MS20Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MS20Filter_Sf_SwigStatic = {
    "MS20Filter",
    swig_MS20Filter_Sf_SwigStatic_methods,
    swig_MS20Filter_Sf_SwigStatic_attributes,
    swig_MS20Filter_Sf_SwigStatic_constants,
    swig_MS20Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MS20Filter_bases[] = {0,0};
static const char *swig_MS20Filter_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_MS20Filter = { "MS20Filter", "MS20Filter", &SWIGTYPE_p_Analog__Filters__MS20__MS20Filter,_proxy__wrap_new_MS20Filter, swig_delete_MS20Filter, swig_MS20Filter_methods, swig_MS20Filter_attributes, &swig_MS20Filter_Sf_SwigStatic, swig_MS20Filter_meta, swig_MS20Filter_bases, swig_MS20Filter_base_names };

static int _wrap_sq2_12_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::sq2_12",0,0)
  result = (DspFloatType)(DspFloatType)Analog::Filters::Oberheim::sq2_12;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dc_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::dc",0,0)
  result = (DspFloatType)(DspFloatType)Analog::Filters::Oberheim::dc;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ln2_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::ln2",0,0)
  result = (DspFloatType)(DspFloatType)Analog::Filters::Oberheim::ln2;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mult_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::mult",0,0)
  result = (DspFloatType)(DspFloatType)Analog::Filters::Oberheim::mult;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getPitch(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::getPitch",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::getPitch",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (DspFloatType)Analog::Filters::Oberheim::getPitch(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tptlpupw(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 = 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::tptlpupw",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::tptlpupw",1,"DspFloatType &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::tptlpupw",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::tptlpupw",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::Oberheim::tptlpupw",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("tptlpupw",1,SWIGTYPE_p_float);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)Analog::Filters::Oberheim::tptlpupw(*arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tptlp(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 = 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::tptlp",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::tptlp",1,"DspFloatType &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::tptlp",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::tptlp",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::Oberheim::tptlp",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("tptlp",1,SWIGTYPE_p_float);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)Analog::Filters::Oberheim::tptlp(*arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tptpc(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType *arg1 = 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::tptpc",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::tptpc",1,"DspFloatType &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::tptpc",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::tptpc",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("tptpc",1,SWIGTYPE_p_float);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)Analog::Filters::Oberheim::tptpc(*arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linsc(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::linsc",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::linsc",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::linsc",2,"DspFloatType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::linsc",3,"DspFloatType const");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType const)lua_tonumber(L, 2);
  arg3 = (DspFloatType const)lua_tonumber(L, 3);
  result = (DspFloatType)Analog::Filters::Oberheim::linsc(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logsc__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::logsc",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::logsc",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::logsc",2,"DspFloatType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::logsc",3,"DspFloatType const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::Oberheim::logsc",4,"DspFloatType const");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType const)lua_tonumber(L, 2);
  arg3 = (DspFloatType const)lua_tonumber(L, 3);
  arg4 = (DspFloatType const)lua_tonumber(L, 4);
  result = (DspFloatType)Analog::Filters::Oberheim::logsc(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logsc__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::logsc",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::logsc",1,"DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::logsc",2,"DspFloatType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::logsc",3,"DspFloatType const");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  arg2 = (DspFloatType const)lua_tonumber(L, 2);
  arg3 = (DspFloatType const)lua_tonumber(L, 3);
  result = (DspFloatType)Analog::Filters::Oberheim::logsc(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logsc(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_logsc__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_logsc__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'logsc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::Oberheim::logsc(DspFloatType,DspFloatType const,DspFloatType const,DspFloatType const)\n"
    "    Analog::Filters::Oberheim::logsc(DspFloatType,DspFloatType const,DspFloatType const)\n");
  lua_error(L);return 0;
}


static int _wrap_OBXFilter_SampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::SampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::SampleRate",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::SampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_SampleRate_set",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->SampleRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_SampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::SampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::SampleRate",1,"Analog::Filters::Oberheim::OBXFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_SampleRate_get",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  result = (DspFloatType) ((arg1)->SampleRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_sampleRateInv_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::sampleRateInv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::sampleRateInv",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::sampleRateInv",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_sampleRateInv_set",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->sampleRateInv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_sampleRateInv_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::sampleRateInv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::sampleRateInv",1,"Analog::Filters::Oberheim::OBXFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_sampleRateInv_get",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  result = (DspFloatType) ((arg1)->sampleRateInv);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_bandPassSw_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::bandPassSw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::bandPassSw",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::bandPassSw",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_bandPassSw_set",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->bandPassSw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_bandPassSw_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  bool result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::bandPassSw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::bandPassSw",1,"Analog::Filters::Oberheim::OBXFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_bandPassSw_get",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  result = (bool) ((arg1)->bandPassSw);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_mm_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::mm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::mm",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::mm",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_mm_set",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->mm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_mm_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::mm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::mm",1,"Analog::Filters::Oberheim::OBXFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_mm_get",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  result = (DspFloatType) ((arg1)->mm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_selfOscPush_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::selfOscPush",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::selfOscPush",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::selfOscPush",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_selfOscPush_set",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->selfOscPush = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_selfOscPush_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  bool result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::selfOscPush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::selfOscPush",1,"Analog::Filters::Oberheim::OBXFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_selfOscPush_get",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  result = (bool) ((arg1)->selfOscPush);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OBXFilter(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::OBXFilter",0,0)
  result = (Analog::Filters::Oberheim::OBXFilter *)new Analog::Filters::Oberheim::OBXFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_setSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::setSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::setSampleRate",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::setSampleRate",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_setSampleRate",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setSampleRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_setMultimode(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::setMultimode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::setMultimode",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::setMultimode",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_setMultimode",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setMultimode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::setResonance",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_setResonance",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::setCutoff",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_setCutoff",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_setPort(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::setPort",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_setPort",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_diodePairResistanceApprox(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::diodePairResistanceApprox",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::diodePairResistanceApprox",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::diodePairResistanceApprox",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_diodePairResistanceApprox",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->diodePairResistanceApprox(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_NR(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::NR",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::NR",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::NR",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::NR",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_NR",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->NR(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_Apply(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::Apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_Apply",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Apply(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_NR24(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::NR24",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::NR24",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::NR24",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::NR24",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::NR24",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_NR24",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->NR24(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_Apply4Pole__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType arg6 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",5,"DspFloatType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",6,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_Apply4Pole",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  arg6 = (DspFloatType)lua_tonumber(L, 6);
  result = (DspFloatType)(arg1)->Apply4Pole(arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_Apply4Pole__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_Apply4Pole",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Apply4Pole(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_Apply4Pole__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_Apply4Pole",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Apply4Pole(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_Apply4Pole__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Apply4Pole",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_Apply4Pole",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Apply4Pole(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_Apply4Pole(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_OBXFilter_Apply4Pole__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_OBXFilter_Apply4Pole__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_OBXFilter_Apply4Pole__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_OBXFilter_Apply4Pole__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OBXFilter_Apply4Pole'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::Oberheim::OBXFilter::Apply4Pole(DspFloatType,DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::Oberheim::OBXFilter::Apply4Pole(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::Oberheim::OBXFilter::Apply4Pole(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::Oberheim::OBXFilter::Apply4Pole(DspFloatType,DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_OBXFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Tick",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_Tick",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Tick",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_Tick",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Tick",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_Tick",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::Oberheim::OBXFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Tick",1,"Analog::Filters::Oberheim::OBXFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::Oberheim::OBXFilter::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,0))){
    SWIG_fail_ptr("OBXFilter_Tick",1,SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBXFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OBXFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_OBXFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_OBXFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_OBXFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OBXFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::Oberheim::OBXFilter::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::Oberheim::OBXFilter::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::Oberheim::OBXFilter::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::Oberheim::OBXFilter::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_OBXFilter(void *obj) {
Analog::Filters::Oberheim::OBXFilter *arg1 = (Analog::Filters::Oberheim::OBXFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_OBXFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OBXFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OBXFilter_attributes[] = {
    { "SampleRate", _wrap_OBXFilter_SampleRate_get, _wrap_OBXFilter_SampleRate_set },
    { "sampleRateInv", _wrap_OBXFilter_sampleRateInv_get, _wrap_OBXFilter_sampleRateInv_set },
    { "bandPassSw", _wrap_OBXFilter_bandPassSw_get, _wrap_OBXFilter_bandPassSw_set },
    { "mm", _wrap_OBXFilter_mm_get, _wrap_OBXFilter_mm_set },
    { "selfOscPush", _wrap_OBXFilter_selfOscPush_get, _wrap_OBXFilter_selfOscPush_set },
    {0,0,0}
};
static swig_lua_method swig_OBXFilter_methods[]= {
    { "setSampleRate", _wrap_OBXFilter_setSampleRate},
    { "setMultimode", _wrap_OBXFilter_setMultimode},
    { "setResonance", _wrap_OBXFilter_setResonance},
    { "setCutoff", _wrap_OBXFilter_setCutoff},
    { "setPort", _wrap_OBXFilter_setPort},
    { "diodePairResistanceApprox", _wrap_OBXFilter_diodePairResistanceApprox},
    { "NR", _wrap_OBXFilter_NR},
    { "Apply", _wrap_OBXFilter_Apply},
    { "NR24", _wrap_OBXFilter_NR24},
    { "Apply4Pole", _wrap_OBXFilter_Apply4Pole},
    { "Tick", _wrap_OBXFilter_Tick},
    {0,0}
};
static swig_lua_method swig_OBXFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OBXFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OBXFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", Analog::Filters::Oberheim::OBXFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_RESONANCE", Analog::Filters::Oberheim::OBXFilter::PORT_RESONANCE)},
    {SWIG_LUA_CONSTTAB_INT("PORT_MULTIMODE", Analog::Filters::Oberheim::OBXFilter::PORT_MULTIMODE)},
    {SWIG_LUA_CONSTTAB_INT("PORT_LP24", Analog::Filters::Oberheim::OBXFilter::PORT_LP24)},
    {SWIG_LUA_CONSTTAB_INT("PORT_BANDPASSSW", Analog::Filters::Oberheim::OBXFilter::PORT_BANDPASSSW)},
    {SWIG_LUA_CONSTTAB_INT("PORT_SELFOSCSW", Analog::Filters::Oberheim::OBXFilter::PORT_SELFOSCSW)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OBXFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OBXFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OBXFilter_Sf_SwigStatic = {
    "OBXFilter",
    swig_OBXFilter_Sf_SwigStatic_methods,
    swig_OBXFilter_Sf_SwigStatic_attributes,
    swig_OBXFilter_Sf_SwigStatic_constants,
    swig_OBXFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OBXFilter_bases[] = {0,0};
static const char *swig_OBXFilter_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_OBXFilter = { "OBXFilter", "OBXFilter", &SWIGTYPE_p_Analog__Filters__Oberheim__OBXFilter,_proxy__wrap_new_OBXFilter, swig_delete_OBXFilter, swig_OBXFilter_methods, swig_OBXFilter_attributes, &swig_OBXFilter_Sf_SwigStatic, swig_OBXFilter_meta, swig_OBXFilter_bases, swig_OBXFilter_base_names };

static int _wrap_VCS3DiodeFilter_eta_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::eta",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::eta",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::eta",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_eta_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->eta = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_eta_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::eta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::eta",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_eta_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->eta);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_VT_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::VT",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::VT",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::VT",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_VT_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->VT = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_VT_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::VT",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::VT",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_VT_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->VT);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_gamma_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::gamma",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::gamma",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::gamma",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_gamma_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->gamma = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_gamma_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::gamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::gamma",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_gamma_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->gamma);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_C_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::C",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::C",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::C",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_C_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->C = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_C_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::C",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::C",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_C_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->C);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_Mp_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::Mp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::Mp",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::Mp",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_Mp_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Mp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_Mp_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::Mp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::Mp",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_Mp_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Mp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_biasParameter_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::biasParameter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::biasParameter",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::biasParameter",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_biasParameter_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->biasParameter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_biasParameter_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::biasParameter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::biasParameter",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_biasParameter_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->biasParameter);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_gainParameter_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::gainParameter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::gainParameter",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::gainParameter",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_gainParameter_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->gainParameter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_gainParameter_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::gainParameter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::gainParameter",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_gainParameter_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->gainParameter);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_VC1_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::VC1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::VC1",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::VC1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_VC1_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->VC1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_VC1_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::VC1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::VC1",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_VC1_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->VC1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_VC2_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::VC2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::VC2",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::VC2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_VC2_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->VC2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_VC2_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::VC2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::VC2",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_VC2_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->VC2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_VC3_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::VC3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::VC3",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::VC3",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_VC3_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->VC3 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_VC3_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::VC3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::VC3",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_VC3_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->VC3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_VC4_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::VC4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::VC4",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::VC4",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_VC4_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->VC4 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_VC4_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::VC4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::VC4",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_VC4_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->VC4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_u1_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::u1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::u1",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::u1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_u1_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->u1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_u1_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::u1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::u1",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_u1_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->u1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_u2_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::u2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::u2",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::u2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_u2_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->u2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_u2_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::u2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::u2",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_u2_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->u2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_u3_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::u3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::u3",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::u3",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_u3_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->u3 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_u3_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::u3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::u3",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_u3_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->u3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_u4_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::u4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::u4",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::u4",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_u4_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->u4 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_u4_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::u4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::u4",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_u4_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->u4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_u5_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::u5",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::u5",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::u5",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_u5_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->u5 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_u5_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::u5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::u5",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_u5_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->u5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_s1_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::s1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::s1",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::s1",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_s1_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->s1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_s1_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::s1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::s1",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_s1_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->s1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_s2_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::s2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::s2",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::s2",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_s2_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->s2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_s2_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::s2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::s2",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_s2_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->s2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_s3_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::s3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::s3",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::s3",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_s3_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->s3 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_s3_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::s3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::s3",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_s3_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->s3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_s4_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::s4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::s4",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::s4",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_s4_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->s4 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_s4_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::s4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::s4",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_s4_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->s4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_Vin_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::Vin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::Vin",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::Vin",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_Vin_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Vin = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_Vin_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::Vin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::Vin",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_Vin_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Vin);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_Vout_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::Vout",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::Vout",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::Vout",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_Vout_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Vout = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_Vout_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::Vout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::Vout",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_Vout_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Vout);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_VoutPrev_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::VoutPrev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::VoutPrev",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::VoutPrev",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_VoutPrev_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->VoutPrev = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_VoutPrev_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::VoutPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::VoutPrev",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_VoutPrev_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->VoutPrev);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::Fs",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::Fs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_Fs_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::Fs",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_Fs_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_inputFs_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::inputFs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::inputFs",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::inputFs",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_inputFs_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->inputFs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_inputFs_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("VCS3DiodeFilter::inputFs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::inputFs",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_inputFs_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (DspFloatType) ((arg1)->inputFs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_iteration_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::iteration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::iteration",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::iteration",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_iteration_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->iteration = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_iteration_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  int result;
  
  SWIG_check_num_args("VCS3DiodeFilter::iteration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::iteration",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_iteration_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (int) ((arg1)->iteration);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_maxNrIterations_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::maxNrIterations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::maxNrIterations",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::maxNrIterations",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_maxNrIterations_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxNrIterations = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_maxNrIterations_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  int result;
  
  SWIG_check_num_args("VCS3DiodeFilter::maxNrIterations",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::maxNrIterations",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_maxNrIterations_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (int) ((arg1)->maxNrIterations);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_numChannels_set(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  uint8_t arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::numChannels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::numChannels",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::numChannels",2,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_numChannels_set",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint8_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->numChannels = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_numChannels_get(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  uint8_t result;
  
  SWIG_check_num_args("VCS3DiodeFilter::numChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::numChannels",1,"VCS3DiodeFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_numChannels_get",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  result = (uint8_t) ((arg1)->numChannels);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VCS3DiodeFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType arg1 ;
  VCS3DiodeFilter *result = 0 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::VCS3DiodeFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("VCS3DiodeFilter::VCS3DiodeFilter",1,"DspFloatType");
  arg1 = (DspFloatType)lua_tonumber(L, 1);
  result = (VCS3DiodeFilter *)new VCS3DiodeFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_VCS3DiodeFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VCS3DiodeFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *result = 0 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::VCS3DiodeFilter",0,0)
  result = (VCS3DiodeFilter *)new VCS3DiodeFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_VCS3DiodeFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VCS3DiodeFilter(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_VCS3DiodeFilter__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_VCS3DiodeFilter__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_VCS3DiodeFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    VCS3DiodeFilter::VCS3DiodeFilter(DspFloatType)\n"
    "    VCS3DiodeFilter::VCS3DiodeFilter()\n");
  lua_error(L);return 0;
}


static int _wrap_VCS3DiodeFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::setCutoff",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_setCutoff",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::setResonance",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_setResonance",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_setPort(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  int arg2 ;
  DspFloatType arg3 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::setPort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::setPort",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::setPort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("VCS3DiodeFilter::setPort",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_setPort",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  (arg1)->setPort(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VCS3DiodeFilter_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) 0 ;
  size_t arg2 ;
  DspFloatType *arg3 = (DspFloatType *) 0 ;
  DspFloatType *arg4 = (DspFloatType *) 0 ;
  
  SWIG_check_num_args("VCS3DiodeFilter::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VCS3DiodeFilter::ProcessBlock",1,"VCS3DiodeFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VCS3DiodeFilter::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VCS3DiodeFilter::ProcessBlock",3,"DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("VCS3DiodeFilter::ProcessBlock",4,"DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VCS3DiodeFilter,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_ProcessBlock",1,SWIGTYPE_p_VCS3DiodeFilter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VCS3DiodeFilter_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VCS3DiodeFilter(void *obj) {
VCS3DiodeFilter *arg1 = (VCS3DiodeFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_VCS3DiodeFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VCS3DiodeFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VCS3DiodeFilter_attributes[] = {
    { "eta", _wrap_VCS3DiodeFilter_eta_get, _wrap_VCS3DiodeFilter_eta_set },
    { "VT", _wrap_VCS3DiodeFilter_VT_get, _wrap_VCS3DiodeFilter_VT_set },
    { "gamma", _wrap_VCS3DiodeFilter_gamma_get, _wrap_VCS3DiodeFilter_gamma_set },
    { "C", _wrap_VCS3DiodeFilter_C_get, _wrap_VCS3DiodeFilter_C_set },
    { "Mp", _wrap_VCS3DiodeFilter_Mp_get, _wrap_VCS3DiodeFilter_Mp_set },
    { "biasParameter", _wrap_VCS3DiodeFilter_biasParameter_get, _wrap_VCS3DiodeFilter_biasParameter_set },
    { "gainParameter", _wrap_VCS3DiodeFilter_gainParameter_get, _wrap_VCS3DiodeFilter_gainParameter_set },
    { "VC1", _wrap_VCS3DiodeFilter_VC1_get, _wrap_VCS3DiodeFilter_VC1_set },
    { "VC2", _wrap_VCS3DiodeFilter_VC2_get, _wrap_VCS3DiodeFilter_VC2_set },
    { "VC3", _wrap_VCS3DiodeFilter_VC3_get, _wrap_VCS3DiodeFilter_VC3_set },
    { "VC4", _wrap_VCS3DiodeFilter_VC4_get, _wrap_VCS3DiodeFilter_VC4_set },
    { "u1", _wrap_VCS3DiodeFilter_u1_get, _wrap_VCS3DiodeFilter_u1_set },
    { "u2", _wrap_VCS3DiodeFilter_u2_get, _wrap_VCS3DiodeFilter_u2_set },
    { "u3", _wrap_VCS3DiodeFilter_u3_get, _wrap_VCS3DiodeFilter_u3_set },
    { "u4", _wrap_VCS3DiodeFilter_u4_get, _wrap_VCS3DiodeFilter_u4_set },
    { "u5", _wrap_VCS3DiodeFilter_u5_get, _wrap_VCS3DiodeFilter_u5_set },
    { "s1", _wrap_VCS3DiodeFilter_s1_get, _wrap_VCS3DiodeFilter_s1_set },
    { "s2", _wrap_VCS3DiodeFilter_s2_get, _wrap_VCS3DiodeFilter_s2_set },
    { "s3", _wrap_VCS3DiodeFilter_s3_get, _wrap_VCS3DiodeFilter_s3_set },
    { "s4", _wrap_VCS3DiodeFilter_s4_get, _wrap_VCS3DiodeFilter_s4_set },
    { "Vin", _wrap_VCS3DiodeFilter_Vin_get, _wrap_VCS3DiodeFilter_Vin_set },
    { "Vout", _wrap_VCS3DiodeFilter_Vout_get, _wrap_VCS3DiodeFilter_Vout_set },
    { "VoutPrev", _wrap_VCS3DiodeFilter_VoutPrev_get, _wrap_VCS3DiodeFilter_VoutPrev_set },
    { "Fs", _wrap_VCS3DiodeFilter_Fs_get, _wrap_VCS3DiodeFilter_Fs_set },
    { "inputFs", _wrap_VCS3DiodeFilter_inputFs_get, _wrap_VCS3DiodeFilter_inputFs_set },
    { "iteration", _wrap_VCS3DiodeFilter_iteration_get, _wrap_VCS3DiodeFilter_iteration_set },
    { "maxNrIterations", _wrap_VCS3DiodeFilter_maxNrIterations_get, _wrap_VCS3DiodeFilter_maxNrIterations_set },
    { "numChannels", _wrap_VCS3DiodeFilter_numChannels_get, _wrap_VCS3DiodeFilter_numChannels_set },
    {0,0,0}
};
static swig_lua_method swig_VCS3DiodeFilter_methods[]= {
    { "setCutoff", _wrap_VCS3DiodeFilter_setCutoff},
    { "setResonance", _wrap_VCS3DiodeFilter_setResonance},
    { "setPort", _wrap_VCS3DiodeFilter_setPort},
    { "ProcessBlock", _wrap_VCS3DiodeFilter_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_VCS3DiodeFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VCS3DiodeFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VCS3DiodeFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PORT_CUTOFF", VCS3DiodeFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("PORT_RESONANCE", VCS3DiodeFilter::PORT_RESONANCE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VCS3DiodeFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VCS3DiodeFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VCS3DiodeFilter_Sf_SwigStatic = {
    "VCS3DiodeFilter",
    swig_VCS3DiodeFilter_Sf_SwigStatic_methods,
    swig_VCS3DiodeFilter_Sf_SwigStatic_attributes,
    swig_VCS3DiodeFilter_Sf_SwigStatic_constants,
    swig_VCS3DiodeFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VCS3DiodeFilter_bases[] = {0,0};
static const char *swig_VCS3DiodeFilter_base_names[] = {"MonoFXProcessor *",0};
static swig_lua_class _wrap_class_VCS3DiodeFilter = { "VCS3DiodeFilter", "VCS3DiodeFilter", &SWIGTYPE_p_VCS3DiodeFilter,_proxy__wrap_new_VCS3DiodeFilter, swig_delete_VCS3DiodeFilter, swig_VCS3DiodeFilter_methods, swig_VCS3DiodeFilter_attributes, &swig_VCS3DiodeFilter_Sf_SwigStatic, swig_VCS3DiodeFilter_meta, swig_VCS3DiodeFilter_bases, swig_VCS3DiodeFilter_base_names };

static void swig_delete_VCS3Filter(void *obj) {
Analog::Filters::VCS3Filter::VCS3Filter *arg1 = (Analog::Filters::VCS3Filter::VCS3Filter *) obj;
delete arg1;
}
static swig_lua_attribute swig_VCS3Filter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VCS3Filter_methods[]= {
    {0,0}
};
static swig_lua_method swig_VCS3Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VCS3Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VCS3Filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VCS3Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VCS3Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VCS3Filter_Sf_SwigStatic = {
    "VCS3Filter",
    swig_VCS3Filter_Sf_SwigStatic_methods,
    swig_VCS3Filter_Sf_SwigStatic_attributes,
    swig_VCS3Filter_Sf_SwigStatic_constants,
    swig_VCS3Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VCS3Filter_bases[] = {0,0};
static const char *swig_VCS3Filter_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_VCS3Filter = { "VCS3Filter", "VCS3Filter", &SWIGTYPE_p_Analog__Filters__VCS3Filter__VCS3Filter,0, swig_delete_VCS3Filter, swig_VCS3Filter_methods, swig_VCS3Filter_attributes, &swig_VCS3Filter_Sf_SwigStatic, swig_VCS3Filter_meta, swig_VCS3Filter_bases, swig_VCS3Filter_base_names };

static int _wrap_onePoleTPTFB_LP_initialize_LP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPTFB_LP *arg1 = (Analog::Filters::XOD::onePoleTPTFB_LP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPTFB_LP::initialize_LP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPTFB_LP::initialize_LP",1,"Analog::Filters::XOD::onePoleTPTFB_LP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPTFB_LP::initialize_LP",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP,0))){
    SWIG_fail_ptr("onePoleTPTFB_LP_initialize_LP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->initialize_LP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPTFB_LP_setAlpha_LP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPTFB_LP *arg1 = (Analog::Filters::XOD::onePoleTPTFB_LP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPTFB_LP::setAlpha_LP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPTFB_LP::setAlpha_LP",1,"Analog::Filters::XOD::onePoleTPTFB_LP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPTFB_LP::setAlpha_LP",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP,0))){
    SWIG_fail_ptr("onePoleTPTFB_LP_setAlpha_LP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setAlpha_LP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPTFB_LP_doFilterStage_LP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPTFB_LP *arg1 = (Analog::Filters::XOD::onePoleTPTFB_LP *) 0 ;
  DspFloatType arg2 ;
  DspFloatType *arg3 = 0 ;
  DspFloatType *arg4 = 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPTFB_LP::doFilterStage_LP",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPTFB_LP::doFilterStage_LP",1,"Analog::Filters::XOD::onePoleTPTFB_LP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPTFB_LP::doFilterStage_LP",2,"DspFloatType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPTFB_LP::doFilterStage_LP",3,"DspFloatType &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPTFB_LP::doFilterStage_LP",4,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP,0))){
    SWIG_fail_ptr("onePoleTPTFB_LP_doFilterStage_LP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("onePoleTPTFB_LP_doFilterStage_LP",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("onePoleTPTFB_LP_doFilterStage_LP",4,SWIGTYPE_p_float);
  }
  
  (arg1)->doFilterStage_LP(arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_onePoleTPTFB_LP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPTFB_LP *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPTFB_LP::onePoleTPTFB_LP",0,0)
  result = (Analog::Filters::XOD::onePoleTPTFB_LP *)new Analog::Filters::XOD::onePoleTPTFB_LP();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_onePoleTPTFB_LP(void *obj) {
Analog::Filters::XOD::onePoleTPTFB_LP *arg1 = (Analog::Filters::XOD::onePoleTPTFB_LP *) obj;
delete arg1;
}
static int _proxy__wrap_new_onePoleTPTFB_LP(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_onePoleTPTFB_LP);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_onePoleTPTFB_LP_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_onePoleTPTFB_LP_methods[]= {
    { "initialize_LP", _wrap_onePoleTPTFB_LP_initialize_LP},
    { "setAlpha_LP", _wrap_onePoleTPTFB_LP_setAlpha_LP},
    { "doFilterStage_LP", _wrap_onePoleTPTFB_LP_doFilterStage_LP},
    {0,0}
};
static swig_lua_method swig_onePoleTPTFB_LP_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_onePoleTPTFB_LP_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_onePoleTPTFB_LP_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_onePoleTPTFB_LP_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_onePoleTPTFB_LP_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_onePoleTPTFB_LP_Sf_SwigStatic = {
    "onePoleTPTFB_LP",
    swig_onePoleTPTFB_LP_Sf_SwigStatic_methods,
    swig_onePoleTPTFB_LP_Sf_SwigStatic_attributes,
    swig_onePoleTPTFB_LP_Sf_SwigStatic_constants,
    swig_onePoleTPTFB_LP_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_onePoleTPTFB_LP_bases[] = {0};
static const char *swig_onePoleTPTFB_LP_base_names[] = {0};
static swig_lua_class _wrap_class_onePoleTPTFB_LP = { "onePoleTPTFB_LP", "onePoleTPTFB_LP", &SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP,_proxy__wrap_new_onePoleTPTFB_LP, swig_delete_onePoleTPTFB_LP, swig_onePoleTPTFB_LP_methods, swig_onePoleTPTFB_LP_attributes, &swig_onePoleTPTFB_LP_Sf_SwigStatic, swig_onePoleTPTFB_LP_meta, swig_onePoleTPTFB_LP_bases, swig_onePoleTPTFB_LP_base_names };

static int _wrap_pi_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::XOD::pi",0,0)
  result = (DspFloatType)(DspFloatType)Analog::Filters::XOD::pi;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::XOD::Fs",0,0)
  result = (DspFloatType)(DspFloatType)Analog::Filters::XOD::Fs;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_LP_initialize_LP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_LP *arg1 = (Analog::Filters::XOD::onePoleTPT_LP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_LP::initialize_LP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LP::initialize_LP",1,"Analog::Filters::XOD::onePoleTPT_LP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LP::initialize_LP",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LP,0))){
    SWIG_fail_ptr("onePoleTPT_LP_initialize_LP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->initialize_LP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_LP_getSampleRate_LP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_LP *arg1 = (Analog::Filters::XOD::onePoleTPT_LP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_LP::getSampleRate_LP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LP::getSampleRate_LP",1,"Analog::Filters::XOD::onePoleTPT_LP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LP,0))){
    SWIG_fail_ptr("onePoleTPT_LP_getSampleRate_LP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LP);
  }
  
  result = (DspFloatType)(arg1)->getSampleRate_LP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_LP_getZ1regValue_LP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_LP *arg1 = (Analog::Filters::XOD::onePoleTPT_LP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_LP::getZ1regValue_LP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LP::getZ1regValue_LP",1,"Analog::Filters::XOD::onePoleTPT_LP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LP,0))){
    SWIG_fail_ptr("onePoleTPT_LP_getZ1regValue_LP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LP);
  }
  
  result = (DspFloatType)(arg1)->getZ1regValue_LP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_LP_setFc_LP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_LP *arg1 = (Analog::Filters::XOD::onePoleTPT_LP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_LP::setFc_LP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LP::setFc_LP",1,"Analog::Filters::XOD::onePoleTPT_LP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LP::setFc_LP",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LP,0))){
    SWIG_fail_ptr("onePoleTPT_LP_setFc_LP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFc_LP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_LP_doFilterStage_LP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_LP *arg1 = (Analog::Filters::XOD::onePoleTPT_LP *) 0 ;
  DspFloatType arg2 ;
  DspFloatType *arg3 = 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_LP::doFilterStage_LP",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LP::doFilterStage_LP",1,"Analog::Filters::XOD::onePoleTPT_LP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LP::doFilterStage_LP",2,"DspFloatType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LP::doFilterStage_LP",3,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LP,0))){
    SWIG_fail_ptr("onePoleTPT_LP_doFilterStage_LP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("onePoleTPT_LP_doFilterStage_LP",3,SWIGTYPE_p_float);
  }
  
  (arg1)->doFilterStage_LP(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_onePoleTPT_LP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_LP *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_LP::onePoleTPT_LP",0,0)
  result = (Analog::Filters::XOD::onePoleTPT_LP *)new Analog::Filters::XOD::onePoleTPT_LP();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LP,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_onePoleTPT_LP(void *obj) {
Analog::Filters::XOD::onePoleTPT_LP *arg1 = (Analog::Filters::XOD::onePoleTPT_LP *) obj;
delete arg1;
}
static int _proxy__wrap_new_onePoleTPT_LP(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_onePoleTPT_LP);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_onePoleTPT_LP_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_onePoleTPT_LP_methods[]= {
    { "initialize_LP", _wrap_onePoleTPT_LP_initialize_LP},
    { "getSampleRate_LP", _wrap_onePoleTPT_LP_getSampleRate_LP},
    { "getZ1regValue_LP", _wrap_onePoleTPT_LP_getZ1regValue_LP},
    { "setFc_LP", _wrap_onePoleTPT_LP_setFc_LP},
    { "doFilterStage_LP", _wrap_onePoleTPT_LP_doFilterStage_LP},
    {0,0}
};
static swig_lua_method swig_onePoleTPT_LP_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_onePoleTPT_LP_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_onePoleTPT_LP_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_onePoleTPT_LP_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_onePoleTPT_LP_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_onePoleTPT_LP_Sf_SwigStatic = {
    "onePoleTPT_LP",
    swig_onePoleTPT_LP_Sf_SwigStatic_methods,
    swig_onePoleTPT_LP_Sf_SwigStatic_attributes,
    swig_onePoleTPT_LP_Sf_SwigStatic_constants,
    swig_onePoleTPT_LP_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_onePoleTPT_LP_bases[] = {0};
static const char *swig_onePoleTPT_LP_base_names[] = {0};
static swig_lua_class _wrap_class_onePoleTPT_LP = { "onePoleTPT_LP", "onePoleTPT_LP", &SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LP,_proxy__wrap_new_onePoleTPT_LP, swig_delete_onePoleTPT_LP, swig_onePoleTPT_LP_methods, swig_onePoleTPT_LP_attributes, &swig_onePoleTPT_LP_Sf_SwigStatic, swig_onePoleTPT_LP_meta, swig_onePoleTPT_LP_bases, swig_onePoleTPT_LP_base_names };

static int _wrap_onePoleTPT_HP_initialize_HP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_HP *arg1 = (Analog::Filters::XOD::onePoleTPT_HP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_HP::initialize_HP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_HP::initialize_HP",1,"Analog::Filters::XOD::onePoleTPT_HP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_HP::initialize_HP",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_HP,0))){
    SWIG_fail_ptr("onePoleTPT_HP_initialize_HP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_HP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->initialize_HP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_HP_getSampleRate_HP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_HP *arg1 = (Analog::Filters::XOD::onePoleTPT_HP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_HP::getSampleRate_HP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_HP::getSampleRate_HP",1,"Analog::Filters::XOD::onePoleTPT_HP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_HP,0))){
    SWIG_fail_ptr("onePoleTPT_HP_getSampleRate_HP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_HP);
  }
  
  result = (DspFloatType)(arg1)->getSampleRate_HP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_HP_getZ1regValue_HP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_HP *arg1 = (Analog::Filters::XOD::onePoleTPT_HP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_HP::getZ1regValue_HP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_HP::getZ1regValue_HP",1,"Analog::Filters::XOD::onePoleTPT_HP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_HP,0))){
    SWIG_fail_ptr("onePoleTPT_HP_getZ1regValue_HP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_HP);
  }
  
  result = (DspFloatType)(arg1)->getZ1regValue_HP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_HP_setFc_HP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_HP *arg1 = (Analog::Filters::XOD::onePoleTPT_HP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_HP::setFc_HP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_HP::setFc_HP",1,"Analog::Filters::XOD::onePoleTPT_HP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_HP::setFc_HP",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_HP,0))){
    SWIG_fail_ptr("onePoleTPT_HP_setFc_HP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_HP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFc_HP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_HP_doFilterStage_HP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_HP *arg1 = (Analog::Filters::XOD::onePoleTPT_HP *) 0 ;
  DspFloatType arg2 ;
  DspFloatType *arg3 = 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_HP::doFilterStage_HP",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_HP::doFilterStage_HP",1,"Analog::Filters::XOD::onePoleTPT_HP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_HP::doFilterStage_HP",2,"DspFloatType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_HP::doFilterStage_HP",3,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_HP,0))){
    SWIG_fail_ptr("onePoleTPT_HP_doFilterStage_HP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_HP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("onePoleTPT_HP_doFilterStage_HP",3,SWIGTYPE_p_float);
  }
  
  (arg1)->doFilterStage_HP(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_onePoleTPT_HP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_HP *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_HP::onePoleTPT_HP",0,0)
  result = (Analog::Filters::XOD::onePoleTPT_HP *)new Analog::Filters::XOD::onePoleTPT_HP();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_HP,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_onePoleTPT_HP(void *obj) {
Analog::Filters::XOD::onePoleTPT_HP *arg1 = (Analog::Filters::XOD::onePoleTPT_HP *) obj;
delete arg1;
}
static int _proxy__wrap_new_onePoleTPT_HP(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_onePoleTPT_HP);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_onePoleTPT_HP_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_onePoleTPT_HP_methods[]= {
    { "initialize_HP", _wrap_onePoleTPT_HP_initialize_HP},
    { "getSampleRate_HP", _wrap_onePoleTPT_HP_getSampleRate_HP},
    { "getZ1regValue_HP", _wrap_onePoleTPT_HP_getZ1regValue_HP},
    { "setFc_HP", _wrap_onePoleTPT_HP_setFc_HP},
    { "doFilterStage_HP", _wrap_onePoleTPT_HP_doFilterStage_HP},
    {0,0}
};
static swig_lua_method swig_onePoleTPT_HP_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_onePoleTPT_HP_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_onePoleTPT_HP_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_onePoleTPT_HP_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_onePoleTPT_HP_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_onePoleTPT_HP_Sf_SwigStatic = {
    "onePoleTPT_HP",
    swig_onePoleTPT_HP_Sf_SwigStatic_methods,
    swig_onePoleTPT_HP_Sf_SwigStatic_attributes,
    swig_onePoleTPT_HP_Sf_SwigStatic_constants,
    swig_onePoleTPT_HP_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_onePoleTPT_HP_bases[] = {0};
static const char *swig_onePoleTPT_HP_base_names[] = {0};
static swig_lua_class _wrap_class_onePoleTPT_HP = { "onePoleTPT_HP", "onePoleTPT_HP", &SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_HP,_proxy__wrap_new_onePoleTPT_HP, swig_delete_onePoleTPT_HP, swig_onePoleTPT_HP_methods, swig_onePoleTPT_HP_attributes, &swig_onePoleTPT_HP_Sf_SwigStatic, swig_onePoleTPT_HP_meta, swig_onePoleTPT_HP_bases, swig_onePoleTPT_HP_base_names };

static int _wrap_onePoleTPT_LPHP_initialize_LPHP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_LPHP *arg1 = (Analog::Filters::XOD::onePoleTPT_LPHP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_LPHP::initialize_LPHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LPHP::initialize_LPHP",1,"Analog::Filters::XOD::onePoleTPT_LPHP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LPHP::initialize_LPHP",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LPHP,0))){
    SWIG_fail_ptr("onePoleTPT_LPHP_initialize_LPHP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LPHP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->initialize_LPHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_LPHP_getSampleRate_LPHP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_LPHP *arg1 = (Analog::Filters::XOD::onePoleTPT_LPHP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_LPHP::getSampleRate_LPHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LPHP::getSampleRate_LPHP",1,"Analog::Filters::XOD::onePoleTPT_LPHP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LPHP,0))){
    SWIG_fail_ptr("onePoleTPT_LPHP_getSampleRate_LPHP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LPHP);
  }
  
  result = (DspFloatType)(arg1)->getSampleRate_LPHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_LPHP_getZ1regValue_LPHP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_LPHP *arg1 = (Analog::Filters::XOD::onePoleTPT_LPHP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_LPHP::getZ1regValue_LPHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LPHP::getZ1regValue_LPHP",1,"Analog::Filters::XOD::onePoleTPT_LPHP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LPHP,0))){
    SWIG_fail_ptr("onePoleTPT_LPHP_getZ1regValue_LPHP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LPHP);
  }
  
  result = (DspFloatType)(arg1)->getZ1regValue_LPHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_LPHP_setFc_LPHP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_LPHP *arg1 = (Analog::Filters::XOD::onePoleTPT_LPHP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_LPHP::setFc_LPHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LPHP::setFc_LPHP",1,"Analog::Filters::XOD::onePoleTPT_LPHP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LPHP::setFc_LPHP",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LPHP,0))){
    SWIG_fail_ptr("onePoleTPT_LPHP_setFc_LPHP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LPHP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFc_LPHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_LPHP_doFilterStage_LPHP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_LPHP *arg1 = (Analog::Filters::XOD::onePoleTPT_LPHP *) 0 ;
  DspFloatType arg2 ;
  DspFloatType *arg3 = 0 ;
  DspFloatType *arg4 = 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_LPHP::doFilterStage_LPHP",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LPHP::doFilterStage_LPHP",1,"Analog::Filters::XOD::onePoleTPT_LPHP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LPHP::doFilterStage_LPHP",2,"DspFloatType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LPHP::doFilterStage_LPHP",3,"DspFloatType &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_LPHP::doFilterStage_LPHP",4,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LPHP,0))){
    SWIG_fail_ptr("onePoleTPT_LPHP_doFilterStage_LPHP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LPHP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("onePoleTPT_LPHP_doFilterStage_LPHP",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("onePoleTPT_LPHP_doFilterStage_LPHP",4,SWIGTYPE_p_float);
  }
  
  (arg1)->doFilterStage_LPHP(arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_onePoleTPT_LPHP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_LPHP *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_LPHP::onePoleTPT_LPHP",0,0)
  result = (Analog::Filters::XOD::onePoleTPT_LPHP *)new Analog::Filters::XOD::onePoleTPT_LPHP();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LPHP,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_onePoleTPT_LPHP(void *obj) {
Analog::Filters::XOD::onePoleTPT_LPHP *arg1 = (Analog::Filters::XOD::onePoleTPT_LPHP *) obj;
delete arg1;
}
static int _proxy__wrap_new_onePoleTPT_LPHP(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_onePoleTPT_LPHP);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_onePoleTPT_LPHP_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_onePoleTPT_LPHP_methods[]= {
    { "initialize_LPHP", _wrap_onePoleTPT_LPHP_initialize_LPHP},
    { "getSampleRate_LPHP", _wrap_onePoleTPT_LPHP_getSampleRate_LPHP},
    { "getZ1regValue_LPHP", _wrap_onePoleTPT_LPHP_getZ1regValue_LPHP},
    { "setFc_LPHP", _wrap_onePoleTPT_LPHP_setFc_LPHP},
    { "doFilterStage_LPHP", _wrap_onePoleTPT_LPHP_doFilterStage_LPHP},
    {0,0}
};
static swig_lua_method swig_onePoleTPT_LPHP_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_onePoleTPT_LPHP_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_onePoleTPT_LPHP_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_onePoleTPT_LPHP_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_onePoleTPT_LPHP_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_onePoleTPT_LPHP_Sf_SwigStatic = {
    "onePoleTPT_LPHP",
    swig_onePoleTPT_LPHP_Sf_SwigStatic_methods,
    swig_onePoleTPT_LPHP_Sf_SwigStatic_attributes,
    swig_onePoleTPT_LPHP_Sf_SwigStatic_constants,
    swig_onePoleTPT_LPHP_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_onePoleTPT_LPHP_bases[] = {0};
static const char *swig_onePoleTPT_LPHP_base_names[] = {0};
static swig_lua_class _wrap_class_onePoleTPT_LPHP = { "onePoleTPT_LPHP", "onePoleTPT_LPHP", &SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_LPHP,_proxy__wrap_new_onePoleTPT_LPHP, swig_delete_onePoleTPT_LPHP, swig_onePoleTPT_LPHP_methods, swig_onePoleTPT_LPHP_attributes, &swig_onePoleTPT_LPHP_Sf_SwigStatic, swig_onePoleTPT_LPHP_meta, swig_onePoleTPT_LPHP_bases, swig_onePoleTPT_LPHP_base_names };

static int _wrap_onePoleTPT_AP_initialize_AP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_AP *arg1 = (Analog::Filters::XOD::onePoleTPT_AP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_AP::initialize_AP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_AP::initialize_AP",1,"Analog::Filters::XOD::onePoleTPT_AP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_AP::initialize_AP",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_AP,0))){
    SWIG_fail_ptr("onePoleTPT_AP_initialize_AP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_AP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->initialize_AP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_AP_getSampleRate_AP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_AP *arg1 = (Analog::Filters::XOD::onePoleTPT_AP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_AP::getSampleRate_AP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_AP::getSampleRate_AP",1,"Analog::Filters::XOD::onePoleTPT_AP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_AP,0))){
    SWIG_fail_ptr("onePoleTPT_AP_getSampleRate_AP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_AP);
  }
  
  result = (DspFloatType)(arg1)->getSampleRate_AP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_AP_getZ1regValue_AP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_AP *arg1 = (Analog::Filters::XOD::onePoleTPT_AP *) 0 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_AP::getZ1regValue_AP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_AP::getZ1regValue_AP",1,"Analog::Filters::XOD::onePoleTPT_AP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_AP,0))){
    SWIG_fail_ptr("onePoleTPT_AP_getZ1regValue_AP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_AP);
  }
  
  result = (DspFloatType)(arg1)->getZ1regValue_AP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_AP_setFc_AP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_AP *arg1 = (Analog::Filters::XOD::onePoleTPT_AP *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_AP::setFc_AP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_AP::setFc_AP",1,"Analog::Filters::XOD::onePoleTPT_AP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_AP::setFc_AP",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_AP,0))){
    SWIG_fail_ptr("onePoleTPT_AP_setFc_AP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_AP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setFc_AP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_onePoleTPT_AP_doFilterStage_AP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_AP *arg1 = (Analog::Filters::XOD::onePoleTPT_AP *) 0 ;
  DspFloatType arg2 ;
  DspFloatType *arg3 = 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_AP::doFilterStage_AP",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_AP::doFilterStage_AP",1,"Analog::Filters::XOD::onePoleTPT_AP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_AP::doFilterStage_AP",2,"DspFloatType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Analog::Filters::XOD::onePoleTPT_AP::doFilterStage_AP",3,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_AP,0))){
    SWIG_fail_ptr("onePoleTPT_AP_doFilterStage_AP",1,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_AP);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("onePoleTPT_AP_doFilterStage_AP",3,SWIGTYPE_p_float);
  }
  
  (arg1)->doFilterStage_AP(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_onePoleTPT_AP(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::onePoleTPT_AP *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::onePoleTPT_AP::onePoleTPT_AP",0,0)
  result = (Analog::Filters::XOD::onePoleTPT_AP *)new Analog::Filters::XOD::onePoleTPT_AP();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_AP,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_onePoleTPT_AP(void *obj) {
Analog::Filters::XOD::onePoleTPT_AP *arg1 = (Analog::Filters::XOD::onePoleTPT_AP *) obj;
delete arg1;
}
static int _proxy__wrap_new_onePoleTPT_AP(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_onePoleTPT_AP);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_onePoleTPT_AP_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_onePoleTPT_AP_methods[]= {
    { "initialize_AP", _wrap_onePoleTPT_AP_initialize_AP},
    { "getSampleRate_AP", _wrap_onePoleTPT_AP_getSampleRate_AP},
    { "getZ1regValue_AP", _wrap_onePoleTPT_AP_getZ1regValue_AP},
    { "setFc_AP", _wrap_onePoleTPT_AP_setFc_AP},
    { "doFilterStage_AP", _wrap_onePoleTPT_AP_doFilterStage_AP},
    {0,0}
};
static swig_lua_method swig_onePoleTPT_AP_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_onePoleTPT_AP_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_onePoleTPT_AP_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_onePoleTPT_AP_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_onePoleTPT_AP_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_onePoleTPT_AP_Sf_SwigStatic = {
    "onePoleTPT_AP",
    swig_onePoleTPT_AP_Sf_SwigStatic_methods,
    swig_onePoleTPT_AP_Sf_SwigStatic_attributes,
    swig_onePoleTPT_AP_Sf_SwigStatic_constants,
    swig_onePoleTPT_AP_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_onePoleTPT_AP_bases[] = {0};
static const char *swig_onePoleTPT_AP_base_names[] = {0};
static swig_lua_class _wrap_class_onePoleTPT_AP = { "onePoleTPT_AP", "onePoleTPT_AP", &SWIGTYPE_p_Analog__Filters__XOD__onePoleTPT_AP,_proxy__wrap_new_onePoleTPT_AP, swig_delete_onePoleTPT_AP, swig_onePoleTPT_AP_methods, swig_onePoleTPT_AP_attributes, &swig_onePoleTPT_AP_Sf_SwigStatic, swig_onePoleTPT_AP_meta, swig_onePoleTPT_AP_bases, swig_onePoleTPT_AP_base_names };

static int _wrap_new_xodMoogLadder4P(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::xodMoogLadder4P",0,0)
  result = (Analog::Filters::XOD::xodMoogLadder4P *)new Analog::Filters::XOD::xodMoogLadder4P();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_LPF1_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  Analog::Filters::XOD::onePoleTPTFB_LP *arg2 = (Analog::Filters::XOD::onePoleTPTFB_LP *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::LPF1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::LPF1",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::LPF1",2,"Analog::Filters::XOD::onePoleTPTFB_LP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_LPF1_set",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP,0))){
    SWIG_fail_ptr("xodMoogLadder4P_LPF1_set",2,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP);
  }
  
  if (arg1) (arg1)->LPF1 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_LPF1_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  Analog::Filters::XOD::onePoleTPTFB_LP *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::LPF1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::LPF1",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_LPF1_get",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  result = (Analog::Filters::XOD::onePoleTPTFB_LP *)& ((arg1)->LPF1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_LPF2_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  Analog::Filters::XOD::onePoleTPTFB_LP *arg2 = (Analog::Filters::XOD::onePoleTPTFB_LP *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::LPF2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::LPF2",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::LPF2",2,"Analog::Filters::XOD::onePoleTPTFB_LP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_LPF2_set",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP,0))){
    SWIG_fail_ptr("xodMoogLadder4P_LPF2_set",2,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP);
  }
  
  if (arg1) (arg1)->LPF2 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_LPF2_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  Analog::Filters::XOD::onePoleTPTFB_LP *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::LPF2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::LPF2",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_LPF2_get",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  result = (Analog::Filters::XOD::onePoleTPTFB_LP *)& ((arg1)->LPF2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_LPF3_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  Analog::Filters::XOD::onePoleTPTFB_LP *arg2 = (Analog::Filters::XOD::onePoleTPTFB_LP *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::LPF3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::LPF3",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::LPF3",2,"Analog::Filters::XOD::onePoleTPTFB_LP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_LPF3_set",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP,0))){
    SWIG_fail_ptr("xodMoogLadder4P_LPF3_set",2,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP);
  }
  
  if (arg1) (arg1)->LPF3 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_LPF3_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  Analog::Filters::XOD::onePoleTPTFB_LP *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::LPF3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::LPF3",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_LPF3_get",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  result = (Analog::Filters::XOD::onePoleTPTFB_LP *)& ((arg1)->LPF3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_LPF4_set(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  Analog::Filters::XOD::onePoleTPTFB_LP *arg2 = (Analog::Filters::XOD::onePoleTPTFB_LP *) 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::LPF4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::LPF4",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::LPF4",2,"Analog::Filters::XOD::onePoleTPTFB_LP *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_LPF4_set",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP,0))){
    SWIG_fail_ptr("xodMoogLadder4P_LPF4_set",2,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP);
  }
  
  if (arg1) (arg1)->LPF4 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_LPF4_get(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  Analog::Filters::XOD::onePoleTPTFB_LP *result = 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::LPF4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::LPF4",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_LPF4_get",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  result = (Analog::Filters::XOD::onePoleTPTFB_LP *)& ((arg1)->LPF4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Analog__Filters__XOD__onePoleTPTFB_LP,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_initialize(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::initialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::initialize",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::initialize",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_initialize",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->initialize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_setFcAndRes(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::setFcAndRes",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::setFcAndRes",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::setFcAndRes",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::setFcAndRes",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::setFcAndRes",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_setFcAndRes",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  (arg1)->setFcAndRes(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_advance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  DspFloatType arg2 ;
  DspFloatType *arg3 = 0 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::advance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::advance",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::advance",2,"DspFloatType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::advance",3,"DspFloatType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_advance",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("xodMoogLadder4P_advance",3,SWIGTYPE_p_float);
  }
  
  (arg1)->advance(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::setCutoff",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::setCutoff",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_setCutoff",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  DspFloatType arg2 ;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::setResonance",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::setResonance",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_setResonance",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType arg5 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::Tick",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::Tick",4,"DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::Tick",5,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_Tick",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  arg5 = (DspFloatType)lua_tonumber(L, 5);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType arg4 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::Tick",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::Tick",3,"DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::Tick",4,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_Tick",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  arg4 = (DspFloatType)lua_tonumber(L, 4);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  DspFloatType arg2 ;
  DspFloatType arg3 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::Tick",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::Tick",2,"DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::Tick",3,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_Tick",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  arg3 = (DspFloatType)lua_tonumber(L, 3);
  result = (DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) 0 ;
  DspFloatType arg2 ;
  DspFloatType result;
  
  SWIG_check_num_args("Analog::Filters::XOD::xodMoogLadder4P::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::Tick",1,"Analog::Filters::XOD::xodMoogLadder4P *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Analog::Filters::XOD::xodMoogLadder4P::Tick",2,"DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,0))){
    SWIG_fail_ptr("xodMoogLadder4P_Tick",1,SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P);
  }
  
  arg2 = (DspFloatType)lua_tonumber(L, 2);
  result = (DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xodMoogLadder4P_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_xodMoogLadder4P_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_xodMoogLadder4P_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_xodMoogLadder4P_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_xodMoogLadder4P_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'xodMoogLadder4P_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Analog::Filters::XOD::xodMoogLadder4P::Tick(DspFloatType,DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::XOD::xodMoogLadder4P::Tick(DspFloatType,DspFloatType,DspFloatType)\n"
    "    Analog::Filters::XOD::xodMoogLadder4P::Tick(DspFloatType,DspFloatType)\n"
    "    Analog::Filters::XOD::xodMoogLadder4P::Tick(DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_xodMoogLadder4P(void *obj) {
Analog::Filters::XOD::xodMoogLadder4P *arg1 = (Analog::Filters::XOD::xodMoogLadder4P *) obj;
delete arg1;
}
static int _proxy__wrap_new_xodMoogLadder4P(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_xodMoogLadder4P);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_xodMoogLadder4P_attributes[] = {
    { "LPF1", _wrap_xodMoogLadder4P_LPF1_get, _wrap_xodMoogLadder4P_LPF1_set },
    { "LPF2", _wrap_xodMoogLadder4P_LPF2_get, _wrap_xodMoogLadder4P_LPF2_set },
    { "LPF3", _wrap_xodMoogLadder4P_LPF3_get, _wrap_xodMoogLadder4P_LPF3_set },
    { "LPF4", _wrap_xodMoogLadder4P_LPF4_get, _wrap_xodMoogLadder4P_LPF4_set },
    {0,0,0}
};
static swig_lua_method swig_xodMoogLadder4P_methods[]= {
    { "initialize", _wrap_xodMoogLadder4P_initialize},
    { "setFcAndRes", _wrap_xodMoogLadder4P_setFcAndRes},
    { "advance", _wrap_xodMoogLadder4P_advance},
    { "setCutoff", _wrap_xodMoogLadder4P_setCutoff},
    { "setResonance", _wrap_xodMoogLadder4P_setResonance},
    { "Tick", _wrap_xodMoogLadder4P_Tick},
    {0,0}
};
static swig_lua_method swig_xodMoogLadder4P_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_xodMoogLadder4P_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_xodMoogLadder4P_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_xodMoogLadder4P_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_xodMoogLadder4P_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_xodMoogLadder4P_Sf_SwigStatic = {
    "xodMoogLadder4P",
    swig_xodMoogLadder4P_Sf_SwigStatic_methods,
    swig_xodMoogLadder4P_Sf_SwigStatic_attributes,
    swig_xodMoogLadder4P_Sf_SwigStatic_constants,
    swig_xodMoogLadder4P_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_xodMoogLadder4P_bases[] = {0,0};
static const char *swig_xodMoogLadder4P_base_names[] = {"FilterProcessor *",0};
static swig_lua_class _wrap_class_xodMoogLadder4P = { "xodMoogLadder4P", "xodMoogLadder4P", &SWIGTYPE_p_Analog__Filters__XOD__xodMoogLadder4P,_proxy__wrap_new_xodMoogLadder4P, swig_delete_xodMoogLadder4P, swig_xodMoogLadder4P_methods, swig_xodMoogLadder4P_attributes, &swig_xodMoogLadder4P_Sf_SwigStatic, swig_xodMoogLadder4P_meta, swig_xodMoogLadder4P_bases, swig_xodMoogLadder4P_base_names };

static int _wrap_new_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",0,0)
  result = (std::vector< float > *)new std::vector< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::vector",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< float > *)new std::vector< float >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,std::allocator< float > > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"std::vector< float,std::allocator< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("new_float_vector",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (std::vector< float > *)new std::vector< float >((std::vector< float,std::allocator< float > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::vector()\n"
    "    std::vector< float >::vector(size_t,float const &)\n"
    "    std::vector< float >::vector(size_t)\n"
    "    std::vector< float >::vector(std::vector< float,std::allocator< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::vector< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__getitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector___getitem",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_vector_Sl_float_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::vector< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__setitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::__setitem",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector___setitem",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float,std::allocator< float > > > result;
  
  SWIG_check_num_args("std::vector< float >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::ibegin",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_ibegin",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = std_vector_Sl_float_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< float,std::allocator< float > > * resultptr = new std::vector_iterator< float,std::allocator< float > >((const std::vector_iterator< float,std::allocator< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_std__allocatorT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float,std::allocator< float > > > result;
  
  SWIG_check_num_args("std::vector< float >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::iend",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_iend",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = std_vector_Sl_float_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< float,std::allocator< float > > * resultptr = new std::vector_iterator< float,std::allocator< float > >((const std::vector_iterator< float,std::allocator< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_std__allocatorT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_float_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< float >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::erase(size_t)\n"
    "    std::vector< float >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::front",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_front",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (float *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_back",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (float *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("std::vector< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::push_back",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::push_back",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_push_back",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::pop_back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::at",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_at",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::vector< float >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::assign",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::assign",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_assign",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::data",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_data",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_size",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::empty",1,"std::vector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_empty",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (bool)((std::vector< float > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::resize",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_resize",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::clear",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_clear",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< float >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::swap",1,"std::vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< float >::swap",2,"std::vector< float,std::allocator< float > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_swap",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_swap",2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::shrink_to_fit",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::reserve",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_reserve",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::max_size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_max_size",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::capacity",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_capacity",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_vector(void *obj) {
std::vector< float > *arg1 = (std::vector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_vector_methods[]= {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    { "ibegin", _wrap_float_vector_ibegin},
    { "iend", _wrap_float_vector_iend},
    { "erase", _wrap_float_vector_erase},
    { "front", _wrap_float_vector_front},
    { "back", _wrap_float_vector_back},
    { "push_back", _wrap_float_vector_push_back},
    { "pop_back", _wrap_float_vector_pop_back},
    { "at", _wrap_float_vector_at},
    { "assign", _wrap_float_vector_assign},
    { "data", _wrap_float_vector_data},
    { "size", _wrap_float_vector_size},
    { "empty", _wrap_float_vector_empty},
    { "resize", _wrap_float_vector_resize},
    { "clear", _wrap_float_vector_clear},
    { "swap", _wrap_float_vector_swap},
    { "shrink_to_fit", _wrap_float_vector_shrink_to_fit},
    { "reserve", _wrap_float_vector_reserve},
    { "max_size", _wrap_float_vector_max_size},
    { "capacity", _wrap_float_vector_capacity},
    {0,0}
};
static swig_lua_method swig_float_vector_meta[] = {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_vector_Sf_SwigStatic = {
    "float_vector",
    swig_float_vector_Sf_SwigStatic_methods,
    swig_float_vector_Sf_SwigStatic_attributes,
    swig_float_vector_Sf_SwigStatic_constants,
    swig_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_vector_bases[] = {0};
static const char *swig_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_float_vector = { "float_vector", "float_vector", &SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,_proxy__wrap_new_float_vector, swig_delete_float_vector, swig_float_vector_methods, swig_float_vector_attributes, &swig_float_vector_Sf_SwigStatic, swig_float_vector_meta, swig_float_vector_bases, swig_float_vector_base_names };

static int _wrap_new_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",0,0)
  result = (std::vector< double > *)new std::vector< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::vector",2,"double const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"std::vector< double,std::allocator< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("new_double_vector",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (std::vector< double > *)new std::vector< double >((std::vector< double,std::allocator< double > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(size_t,double const &)\n"
    "    std::vector< double >::vector(size_t)\n"
    "    std::vector< double >::vector(std::vector< double,std::allocator< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__getitem",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector___getitem",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)std_vector_Sl_double_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("std::vector< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__setitem",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::__setitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector___setitem",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  std_vector_Sl_double_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double,std::allocator< double > > > result;
  
  SWIG_check_num_args("std::vector< double >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::ibegin",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_ibegin",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = std_vector_Sl_double_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< double,std::allocator< double > > * resultptr = new std::vector_iterator< double,std::allocator< double > >((const std::vector_iterator< double,std::allocator< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_std__allocatorT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double,std::allocator< double > > > result;
  
  SWIG_check_num_args("std::vector< double >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::iend",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_iend",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = std_vector_Sl_double_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< double,std::allocator< double > > * resultptr = new std::vector_iterator< double,std::allocator< double > >((const std::vector_iterator< double,std::allocator< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_std__allocatorT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::erase",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< double >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::erase",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_double_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(size_t)\n"
    "    std::vector< double >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::front",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_front",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_back",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("std::vector< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::push_back",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::push_back",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_push_back",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::pop_back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::at",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_at",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("std::vector< double >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::assign",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::assign",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_assign",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::data",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_data",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::size",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_size",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::empty",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_empty",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (bool)((std::vector< double > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::resize",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_resize",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::clear",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_clear",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< double >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::swap",1,"std::vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< double >::swap",2,"std::vector< double,std::allocator< double > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_swap",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_swap",2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::shrink_to_fit",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::reserve",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_reserve",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::max_size",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_max_size",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::capacity",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_capacity",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_vector(void *obj) {
std::vector< double > *arg1 = (std::vector< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_vector_methods[]= {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    { "ibegin", _wrap_double_vector_ibegin},
    { "iend", _wrap_double_vector_iend},
    { "erase", _wrap_double_vector_erase},
    { "front", _wrap_double_vector_front},
    { "back", _wrap_double_vector_back},
    { "push_back", _wrap_double_vector_push_back},
    { "pop_back", _wrap_double_vector_pop_back},
    { "at", _wrap_double_vector_at},
    { "assign", _wrap_double_vector_assign},
    { "data", _wrap_double_vector_data},
    { "size", _wrap_double_vector_size},
    { "empty", _wrap_double_vector_empty},
    { "resize", _wrap_double_vector_resize},
    { "clear", _wrap_double_vector_clear},
    { "swap", _wrap_double_vector_swap},
    { "shrink_to_fit", _wrap_double_vector_shrink_to_fit},
    { "reserve", _wrap_double_vector_reserve},
    { "max_size", _wrap_double_vector_max_size},
    { "capacity", _wrap_double_vector_capacity},
    {0,0}
};
static swig_lua_method swig_double_vector_meta[] = {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_vector_Sf_SwigStatic = {
    "double_vector",
    swig_double_vector_Sf_SwigStatic_methods,
    swig_double_vector_Sf_SwigStatic_attributes,
    swig_double_vector_Sf_SwigStatic_constants,
    swig_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_vector_bases[] = {0};
static const char *swig_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_double_vector = { "double_vector", "double_vector", &SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,_proxy__wrap_new_double_vector, swig_delete_double_vector, swig_double_vector_methods, swig_double_vector_attributes, &swig_double_vector_Sf_SwigStatic, swig_double_vector_meta, swig_double_vector_bases, swig_double_vector_base_names };

static int _wrap_new_complex_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",0,0)
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::complex< float > *arg2 = 0 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",2,"std::complex< float > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_complex_float_vector",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >(arg1,(std::complex< float > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float >,std::allocator< std::complex< float > > > *arg1 = 0 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"std::vector< std::complex< float >,std::allocator< std::complex< float > > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("new_complex_float_vector",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >((std::vector< std::complex< float >,std::allocator< std::complex< float > > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_complex_float_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_complex_float_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_complex_float_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_complex_float_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::vector()\n"
    "    std::vector< std::complex< float > >::vector(size_t,std::complex< float > const &)\n"
    "    std::vector< std::complex< float > >::vector(size_t)\n"
    "    std::vector< std::complex< float > >::vector(std::vector< std::complex< float >,std::allocator< std::complex< float > > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::__getitem",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector___getitem",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::complex< float > > arg3 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem",3,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector___setitem",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_float_vector___setitem",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< float >,std::allocator< std::complex< float > > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::ibegin",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_ibegin",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< std::complex< float >,std::allocator< std::complex< float > > > * resultptr = new std::vector_iterator< std::complex< float >,std::allocator< std::complex< float > > >((const std::vector_iterator< std::complex< float >,std::allocator< std::complex< float > > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< float >,std::allocator< std::complex< float > > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::iend",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_iend",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_float_Sg__Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< std::complex< float >,std::allocator< std::complex< float > > > * resultptr = new std::vector_iterator< std::complex< float >,std::allocator< std::complex< float > > >((const std::vector_iterator< std::complex< float >,std::allocator< std::complex< float > > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::complex< float > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_complex_Sl_float_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_float_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_float_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_float_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::erase(size_t)\n"
    "    std::vector< std::complex< float > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::front",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_front",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  result = (std::complex< float > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::back",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  result = (std::complex< float > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::push_back",1,"std::vector< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::push_back",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_push_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_float_vector_push_back",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->push_back((std::complex< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::pop_back",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::at",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_at",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< float > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  std::complex< float > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::assign",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< float > >::assign",3,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_assign",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("complex_float_vector_assign",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->assign(arg2,(std::complex< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::data",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_data",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  result = (std::complex< float > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::size",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_size",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::empty",1,"std::vector< std::complex< float > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_empty",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  result = (bool)((std::vector< std::complex< float > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::resize",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_resize",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::clear",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_clear",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float >,std::allocator< std::complex< float > > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::swap",1,"std::vector< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::swap",2,"std::vector< std::complex< float >,std::allocator< std::complex< float > > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_swap",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_swap",2,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::shrink_to_fit",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::reserve",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_reserve",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::max_size",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_max_size",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_float_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::capacity",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,0))){
    SWIG_fail_ptr("complex_float_vector_capacity",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_complex_float_vector(void *obj) {
std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_complex_float_vector_methods[]= {
    { "__getitem", _wrap_complex_float_vector___getitem},
    { "__setitem", _wrap_complex_float_vector___setitem},
    { "ibegin", _wrap_complex_float_vector_ibegin},
    { "iend", _wrap_complex_float_vector_iend},
    { "erase", _wrap_complex_float_vector_erase},
    { "front", _wrap_complex_float_vector_front},
    { "back", _wrap_complex_float_vector_back},
    { "push_back", _wrap_complex_float_vector_push_back},
    { "pop_back", _wrap_complex_float_vector_pop_back},
    { "at", _wrap_complex_float_vector_at},
    { "assign", _wrap_complex_float_vector_assign},
    { "data", _wrap_complex_float_vector_data},
    { "size", _wrap_complex_float_vector_size},
    { "empty", _wrap_complex_float_vector_empty},
    { "resize", _wrap_complex_float_vector_resize},
    { "clear", _wrap_complex_float_vector_clear},
    { "swap", _wrap_complex_float_vector_swap},
    { "shrink_to_fit", _wrap_complex_float_vector_shrink_to_fit},
    { "reserve", _wrap_complex_float_vector_reserve},
    { "max_size", _wrap_complex_float_vector_max_size},
    { "capacity", _wrap_complex_float_vector_capacity},
    {0,0}
};
static swig_lua_method swig_complex_float_vector_meta[] = {
    { "__getitem", _wrap_complex_float_vector___getitem},
    { "__setitem", _wrap_complex_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_complex_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex_float_vector_Sf_SwigStatic = {
    "complex_float_vector",
    swig_complex_float_vector_Sf_SwigStatic_methods,
    swig_complex_float_vector_Sf_SwigStatic_attributes,
    swig_complex_float_vector_Sf_SwigStatic_constants,
    swig_complex_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex_float_vector_bases[] = {0};
static const char *swig_complex_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_complex_float_vector = { "complex_float_vector", "complex_float_vector", &SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,_proxy__wrap_new_complex_float_vector, swig_delete_complex_float_vector, swig_complex_float_vector_methods, swig_complex_float_vector_attributes, &swig_complex_float_vector_Sf_SwigStatic, swig_complex_float_vector_meta, swig_complex_float_vector_bases, swig_complex_float_vector_base_names };

static int _wrap_new_complex_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",0,0)
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::complex< double > *arg2 = 0 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",2,"std::complex< double > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_complex_double_vector",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >(arg1,(std::complex< double > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double >,std::allocator< std::complex< double > > > *arg1 = 0 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("new_complex_double_vector",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >((std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_complex_double_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_complex_double_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_complex_double_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_complex_double_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::vector()\n"
    "    std::vector< std::complex< double > >::vector(size_t,std::complex< double > const &)\n"
    "    std::vector< std::complex< double > >::vector(size_t)\n"
    "    std::vector< std::complex< double > >::vector(std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::complex< double > > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::__getitem",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector___getitem",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::complex< double > > arg3 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem",3,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector___setitem",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_double_vector___setitem",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< double >,std::allocator< std::complex< double > > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::ibegin",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_ibegin",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< std::complex< double >,std::allocator< std::complex< double > > > * resultptr = new std::vector_iterator< std::complex< double >,std::allocator< std::complex< double > > >((const std::vector_iterator< std::complex< double >,std::allocator< std::complex< double > > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< std::complex< double >,std::allocator< std::complex< double > > > > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::iend",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_iend",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  result = std_vector_Sl_std_complex_Sl_double_Sg__Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< std::complex< double >,std::allocator< std::complex< double > > > * resultptr = new std::vector_iterator< std::complex< double >,std::allocator< std::complex< double > > >((const std::vector_iterator< std::complex< double >,std::allocator< std::complex< double > > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< std::complex< double > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_erase",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_std_complex_Sl_double_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex_double_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_double_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_double_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::erase(size_t)\n"
    "    std::vector< std::complex< double > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::front",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_front",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  result = (std::complex< double > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::back",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  result = (std::complex< double > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::push_back",1,"std::vector< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::push_back",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_push_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_double_vector_push_back",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->push_back((std::complex< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::pop_back",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::at",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_at",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::complex< double > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  std::complex< double > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::assign",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< double > >::assign",3,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_assign",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("complex_double_vector_assign",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->assign(arg2,(std::complex< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::data",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_data",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  result = (std::complex< double > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::size",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_size",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::empty",1,"std::vector< std::complex< double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_empty",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  result = (bool)((std::vector< std::complex< double > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::resize",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_resize",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::clear",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_clear",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double >,std::allocator< std::complex< double > > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::swap",1,"std::vector< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::swap",2,"std::vector< std::complex< double >,std::allocator< std::complex< double > > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_swap",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_swap",2,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::shrink_to_fit",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::reserve",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_reserve",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::max_size",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_max_size",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_double_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::capacity",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,0))){
    SWIG_fail_ptr("complex_double_vector_capacity",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_complex_double_vector(void *obj) {
std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_complex_double_vector_methods[]= {
    { "__getitem", _wrap_complex_double_vector___getitem},
    { "__setitem", _wrap_complex_double_vector___setitem},
    { "ibegin", _wrap_complex_double_vector_ibegin},
    { "iend", _wrap_complex_double_vector_iend},
    { "erase", _wrap_complex_double_vector_erase},
    { "front", _wrap_complex_double_vector_front},
    { "back", _wrap_complex_double_vector_back},
    { "push_back", _wrap_complex_double_vector_push_back},
    { "pop_back", _wrap_complex_double_vector_pop_back},
    { "at", _wrap_complex_double_vector_at},
    { "assign", _wrap_complex_double_vector_assign},
    { "data", _wrap_complex_double_vector_data},
    { "size", _wrap_complex_double_vector_size},
    { "empty", _wrap_complex_double_vector_empty},
    { "resize", _wrap_complex_double_vector_resize},
    { "clear", _wrap_complex_double_vector_clear},
    { "swap", _wrap_complex_double_vector_swap},
    { "shrink_to_fit", _wrap_complex_double_vector_shrink_to_fit},
    { "reserve", _wrap_complex_double_vector_reserve},
    { "max_size", _wrap_complex_double_vector_max_size},
    { "capacity", _wrap_complex_double_vector_capacity},
    {0,0}
};
static swig_lua_method swig_complex_double_vector_meta[] = {
    { "__getitem", _wrap_complex_double_vector___getitem},
    { "__setitem", _wrap_complex_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_complex_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex_double_vector_Sf_SwigStatic = {
    "complex_double_vector",
    swig_complex_double_vector_Sf_SwigStatic_methods,
    swig_complex_double_vector_Sf_SwigStatic_attributes,
    swig_complex_double_vector_Sf_SwigStatic_constants,
    swig_complex_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex_double_vector_bases[] = {0};
static const char *swig_complex_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_complex_double_vector = { "complex_double_vector", "complex_double_vector", &SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,_proxy__wrap_new_complex_double_vector, swig_delete_complex_double_vector, swig_complex_double_vector_methods, swig_complex_double_vector_attributes, &swig_complex_double_vector_Sf_SwigStatic, swig_complex_double_vector_meta, swig_complex_double_vector_bases, swig_complex_double_vector_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "minBlep_Table", _wrap_minBlep_Table_get, SWIG_Lua_set_immutable },
    { "VT", _wrap_VT_get, SWIG_Lua_set_immutable },
    { "S_STILSON_GAINTABLE", _wrap_S_STILSON_GAINTABLE_get, _wrap_S_STILSON_GAINTABLE_set },
    { "gaintable", _wrap_gaintable_get, SWIG_Lua_set_immutable },
    { "sq2_12", _wrap_sq2_12_get, SWIG_Lua_set_immutable },
    { "dc", _wrap_dc_get, SWIG_Lua_set_immutable },
    { "ln2", _wrap_ln2_get, SWIG_Lua_set_immutable },
    { "mult", _wrap_mult_get, SWIG_Lua_set_immutable },
    { "pi", _wrap_pi_get, SWIG_Lua_set_immutable },
    { "Fs", _wrap_Fs_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("char_bit", CHAR_BIT)},
    {SWIG_LUA_CONSTTAB_INT("schar_min", SCHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("schar_max", SCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uchar_max", UCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("char_min", CHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("char_max", CHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("mb_len_max", MB_LEN_MAX)},
    {SWIG_LUA_CONSTTAB_INT("shrt_min", SHRT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("shrt_max", SHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ushrt_max", USHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("int_min", INT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("int_max", INT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uint_max", UINT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("long_min", LONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("long_max", LONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ulong_max", ULONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("llong_min", LLONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("llong_max", LLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ullong_max", ULLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("PARAMETER2_PROCESSOR", PARAMETER2_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREOSPLITTER_PROCESSOR", STEREOSPLITTER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_GENERATOR_PROCESSOR", MONO_GENERATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_FUNCTION_PROCESSOR", MONO_FUNCTION_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_OSCILLATOR_PROCESSOR", MONO_OSCILLATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_FILTER_PROCESSOR", MONO_FILTER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_AMPLIFIER_PROCESSOR", MONO_AMPLIFIER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_FX_PROCESSOR", MONO_FX_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_CASCADE_PROCESSOR", MONO_CASCADE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_MIXER_PROCESSOR", MONO_MIXER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_MORPHER_PROCESSOR", MONO_MORPHER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_OPERATOR_PROCESSOR", MONO_OPERATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_OVERSAMPLE_PROCESSOR", MONO_OVERSAMPLE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_UPSAMPLE_PROCESSOR", MONO_UPSAMPLE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_DOWNSAMPLE_PROCESSOR", MONO_DOWNSAMPLE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_FX_PROCESSOR", STEREO_FX_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_OVERSAMPLER_PROCESSOR", STEREO_OVERSAMPLER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_UPSAMPLER_PROCESSOR", STEREO_UPSAMPLER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_DOWNSAMPLER_PROCESSOR", STEREO_DOWNSAMPLER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_GENERATOR_PROCESSOR", STEREO_GENERATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_FUNCTION_PROCESSOR", STEREO_FUNCTION_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_PARAMETER2_PROCESSOR", STEREO_PARAMETER2_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_OSCILLATOR_PROCESSOR", STEREO_OSCILLATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_FILTER_PROCESSOR", STEREO_FILTER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_AMPLIFIER_PROCESSOR", STEREO_AMPLIFIER_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_CASCADE_PROCESSOR", STEREO_CASCADE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_OPERATOR_PROCESSOR", STEREO_OPERATOR_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_SIGNAL_SOURCE_PROCESSOR", MONO_SIGNAL_SOURCE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_SIGNAL_SOURCE_PROCESSOR", STEREO_SIGNAL_SOURCE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("MONO_SIGNAL_SINK_PROCESSOR", MONO_SIGNAL_SINK_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("STEREO_SIGNAL_SINK_PROCESSOR", STEREO_SIGNAL_SINK_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("INTERLEAVE_PROCESSOR", INTERLEAVE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("DEINERLEAVE_PROCESSOR", DEINERLEAVE_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("FILTER_BANK_PROCESSOR", FILTER_BANK_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("SPECTRUM_PROCESSOR", SPECTRUM_PROCESSOR)},
    {SWIG_LUA_CONSTTAB_INT("BlitSaw_PORT_FREQ", Analog::Oscillators::BlitSaw::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("BlitSaw_PORT_HARMONICS", Analog::Oscillators::BlitSaw::PORT_HARMONICS)},
    {SWIG_LUA_CONSTTAB_INT("BlitSaw_PORT_GAIN", Analog::Oscillators::BlitSaw::PORT_GAIN)},
    {SWIG_LUA_CONSTTAB_INT("BlitSaw_PORT_PHASE", Analog::Oscillators::BlitSaw::PORT_PHASE)},
    {SWIG_LUA_CONSTTAB_INT("BlitSquare_PORT_FREQ", Analog::Oscillators::BlitSquare::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("BlitSquare_PORT_DUTY", Analog::Oscillators::BlitSquare::PORT_DUTY)},
    {SWIG_LUA_CONSTTAB_INT("BlitSquare_PORT_RESET", Analog::Oscillators::BlitSquare::PORT_RESET)},
    {SWIG_LUA_CONSTTAB_INT("BlitTriangle_PORT_FREQ", Analog::Oscillators::BlitTriangle::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("BlitTriangle_PORT_DUTY", Analog::Oscillators::BlitTriangle::PORT_DUTY)},
    {SWIG_LUA_CONSTTAB_INT("BlitTriangle_PORT_RESET", Analog::Oscillators::BlitTriangle::PORT_RESET)},
    {SWIG_LUA_CONSTTAB_INT("blitSaw_PORT_FREQ", Analog::Oscillators::blitSaw::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("blitSaw_PORT_HARMONICS", Analog::Oscillators::blitSaw::PORT_HARMONICS)},
    {SWIG_LUA_CONSTTAB_INT("blitSaw_PORT_PHASE", Analog::Oscillators::blitSaw::PORT_PHASE)},
    {SWIG_LUA_CONSTTAB_INT("blitSquare_PORT_FREQ", Analog::Oscillators::blitSquare::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("blitSquare_PORT_HARMONICS", Analog::Oscillators::blitSquare::PORT_HARMONICS)},
    {SWIG_LUA_CONSTTAB_INT("blitSquare_PORT_PHASE", Analog::Oscillators::blitSquare::PORT_PHASE)},
    {SWIG_LUA_CONSTTAB_INT("blitTriangle_PORT_FREQ", Analog::Oscillators::blitTriangle::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("blitTriangle_PORT_DUTY", Analog::Oscillators::blitTriangle::PORT_DUTY)},
    {SWIG_LUA_CONSTTAB_INT("blitTriangle_PORT_RESET", Analog::Oscillators::blitTriangle::PORT_RESET)},
    {SWIG_LUA_CONSTTAB_INT("blitTriangle_PORT_HARMONICS", Analog::Oscillators::blitTriangle::PORT_HARMONICS)},
    {SWIG_LUA_CONSTTAB_INT("blitTriangle_PORT_PHASE", Analog::Oscillators::blitTriangle::PORT_PHASE)},
    {SWIG_LUA_CONSTTAB_INT("DPWSaw_PORT_FREQ", Analog::Oscillators::DPWSaw::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("DPWPulse_PORT_FREQ", Analog::Oscillators::DPWPulse::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("DPWPulse_PORT_DUTY", Analog::Oscillators::DPWPulse::PORT_DUTY)},
    {SWIG_LUA_CONSTTAB_INT("DPWTriangle_PORT_FREQ", Analog::Oscillators::DPWTriangle::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("DPWTriangle_PORT_DUTY", Analog::Oscillators::DPWTriangle::PORT_DUTY)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_SINE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::SINE)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_COSINE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::COSINE)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_TRIANGLE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::TRIANGLE)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_SQUARE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::SQUARE)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_RECTANGLE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::RECTANGLE)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_SAWTOOTH", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::SAWTOOTH)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_RAMP", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::RAMP)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_MODIFIED_TRIANGLE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::MODIFIED_TRIANGLE)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_MODIFIED_SQUARE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::MODIFIED_SQUARE)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_HALF_WAVE_RECTIFIED_SINE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::HALF_WAVE_RECTIFIED_SINE)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_FULL_WAVE_RECTIFIED_SINE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::FULL_WAVE_RECTIFIED_SINE)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_TRIANGULAR_PULSE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::TRIANGULAR_PULSE)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_TRAPEZOID_FIXED", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::TRAPEZOID_FIXED)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_TRAPEZOID_VARIABLE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::TRAPEZOID_VARIABLE)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_PORT_FREQ", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::PORT_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_PORT_WAVEFORM", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::PORT_WAVEFORM)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_PORT_PHASE", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::PORT_PHASE)},
    {SWIG_LUA_CONSTTAB_INT("PolyBLEP_PORT_PULSEWIDTH", Analog::Oscillators::PolyBLEPOsc::PolyBLEP::PORT_PULSEWIDTH)},
    {SWIG_LUA_CONSTTAB_INT("KTABLE", 64)},
    {SWIG_LUA_CONSTTAB_INT("OT_SAW", Analog::minBLEP::OT_SAW)},
    {SWIG_LUA_CONSTTAB_INT("OT_RSAW", Analog::minBLEP::OT_RSAW)},
    {SWIG_LUA_CONSTTAB_INT("OT_SQUARE", Analog::minBLEP::OT_SQUARE)},
    {SWIG_LUA_CONSTTAB_INT("OT_TRIANGLE", Analog::minBLEP::OT_TRIANGLE)},
    {SWIG_LUA_CONSTTAB_INT("VASVFLowPassFilter", Analog::Filters::StateVariableFilter::SVFLowpass)},
    {SWIG_LUA_CONSTTAB_INT("VASVFBandPassFilter", Analog::Filters::StateVariableFilter::SVFBandpass)},
    {SWIG_LUA_CONSTTAB_INT("VASVFHighPassFilter", Analog::Filters::StateVariableFilter::SVFHighpass)},
    {SWIG_LUA_CONSTTAB_INT("VASVFUnitGainBandpassFilter", Analog::Filters::StateVariableFilter::SVFUnitGainBandpass)},
    {SWIG_LUA_CONSTTAB_INT("VASVFBandShelvingFilter", Analog::Filters::StateVariableFilter::SVFBandShelving)},
    {SWIG_LUA_CONSTTAB_INT("VASVFNotchFilter", Analog::Filters::StateVariableFilter::SVFNotch)},
    {SWIG_LUA_CONSTTAB_INT("VASVFAllpassFilter", Analog::Filters::StateVariableFilter::SVFAllpass)},
    {SWIG_LUA_CONSTTAB_INT("VASVFPeakFilter", Analog::Filters::StateVariableFilter::SVFPeak)},
    {SWIG_LUA_CONSTTAB_INT("VAStateVariableFilter_PORT_CUTOFF", Analog::Filters::StateVariableFilter::VAStateVariableFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("VAStateVariableFilter_PORT_FILTERTYPE", Analog::Filters::StateVariableFilter::VAStateVariableFilter::PORT_FILTERTYPE)},
    {SWIG_LUA_CONSTTAB_INT("VAStateVariableFilter_PORT_Q", Analog::Filters::StateVariableFilter::VAStateVariableFilter::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("VAStateVariableFilter_PORT_SHELFGAIN", Analog::Filters::StateVariableFilter::VAStateVariableFilter::PORT_SHELFGAIN)},
    {SWIG_LUA_CONSTTAB_INT("AnalogSVF_LP", Analog::Filters::AnalogSVF::AnalogSVF::LP)},
    {SWIG_LUA_CONSTTAB_INT("AnalogSVF_HP", Analog::Filters::AnalogSVF::AnalogSVF::HP)},
    {SWIG_LUA_CONSTTAB_INT("AnalogSVF_BP", Analog::Filters::AnalogSVF::AnalogSVF::BP)},
    {SWIG_LUA_CONSTTAB_INT("AnalogSVF_UBP", Analog::Filters::AnalogSVF::AnalogSVF::UBP)},
    {SWIG_LUA_CONSTTAB_INT("AnalogSVF_SHELF", Analog::Filters::AnalogSVF::AnalogSVF::SHELF)},
    {SWIG_LUA_CONSTTAB_INT("AnalogSVF_NOTCH", Analog::Filters::AnalogSVF::AnalogSVF::NOTCH)},
    {SWIG_LUA_CONSTTAB_INT("AnalogSVF_APF", Analog::Filters::AnalogSVF::AnalogSVF::APF)},
    {SWIG_LUA_CONSTTAB_INT("AnalogSVF_PEAK", Analog::Filters::AnalogSVF::AnalogSVF::PEAK)},
    {SWIG_LUA_CONSTTAB_INT("AnalogSVF_PORT_CUTOFF", Analog::Filters::AnalogSVF::AnalogSVF::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("AnalogSVF_PORT_Q", Analog::Filters::AnalogSVF::AnalogSVF::PORT_Q)},
    {SWIG_LUA_CONSTTAB_INT("AnalogSVF_PORT_TYPE", Analog::Filters::AnalogSVF::AnalogSVF::PORT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("AnalogSVF_PORT_GAIN", Analog::Filters::AnalogSVF::AnalogSVF::PORT_GAIN)},
    {SWIG_LUA_CONSTTAB_INT("AnalogSVF_PORT_MINC", Analog::Filters::AnalogSVF::AnalogSVF::PORT_MINC)},
    {SWIG_LUA_CONSTTAB_INT("AnalogSVF_PORT_MAXC", Analog::Filters::AnalogSVF::AnalogSVF::PORT_MAXC)},
    {SWIG_LUA_CONSTTAB_FLOAT("MOOG_E", 2.71828182845904523536028747135266250)},
    {SWIG_LUA_CONSTTAB_FLOAT("MOOG_LOG2E", 1.44269504088896340735992468100189214)},
    {SWIG_LUA_CONSTTAB_FLOAT("MOOG_LOG10E", 0.434294481903251827651128918916605082)},
    {SWIG_LUA_CONSTTAB_FLOAT("MOOG_LN2", 0.693147180559945309417232121458176568)},
    {SWIG_LUA_CONSTTAB_FLOAT("MOOG_LN10", 2.30258509299404568401799145468436421)},
    {SWIG_LUA_CONSTTAB_FLOAT("MOOG_PI", 3.14159265358979323846264338327950288)},
    {SWIG_LUA_CONSTTAB_FLOAT("MOOG_PI_2", 1.57079632679489661923132169163975144)},
    {SWIG_LUA_CONSTTAB_FLOAT("MOOG_PI_4", 0.785398163397448309615660845819875721)},
    {SWIG_LUA_CONSTTAB_FLOAT("MOOG_1_PI", 0.318309886183790671537767526745028724)},
    {SWIG_LUA_CONSTTAB_FLOAT("MOOG_2_PI", 0.636619772367581343075535053490057448)},
    {SWIG_LUA_CONSTTAB_FLOAT("MOOG_2_SQRTPI", 1.12837916709551257389615890312154517)},
    {SWIG_LUA_CONSTTAB_FLOAT("MOOG_SQRT2", 1.41421356237309504880168872420969808)},
    {SWIG_LUA_CONSTTAB_FLOAT("MOOG_SQRT1_2", 0.707106781186547524400844362104849039)},
    {SWIG_LUA_CONSTTAB_FLOAT("MOOG_INV_PI_2", 0.159154943091895)},
    {SWIG_LUA_CONSTTAB_INT("RBJFilter_LOWPASS", Analog::Filters::MoogLadders::RBJFilter::LOWPASS)},
    {SWIG_LUA_CONSTTAB_INT("RBJFilter_HIGHPASS", Analog::Filters::MoogLadders::RBJFilter::HIGHPASS)},
    {SWIG_LUA_CONSTTAB_INT("RBJFilter_BANDPASS", Analog::Filters::MoogLadders::RBJFilter::BANDPASS)},
    {SWIG_LUA_CONSTTAB_INT("RBJFilter_ALLPASS", Analog::Filters::MoogLadders::RBJFilter::ALLPASS)},
    {SWIG_LUA_CONSTTAB_INT("RBJFilter_NOTCH", Analog::Filters::MoogLadders::RBJFilter::NOTCH)},
    {SWIG_LUA_CONSTTAB_INT("RBJFilter_PEAK", Analog::Filters::MoogLadders::RBJFilter::PEAK)},
    {SWIG_LUA_CONSTTAB_INT("RBJFilter_LOW_SHELF", Analog::Filters::MoogLadders::RBJFilter::LOW_SHELF)},
    {SWIG_LUA_CONSTTAB_INT("RBJFilter_HIGH_SHELF", Analog::Filters::MoogLadders::RBJFilter::HIGH_SHELF)},
    {SWIG_LUA_CONSTTAB_INT("NoiseGenerator_WHITE", Analog::Filters::MoogLadders::NoiseGenerator::WHITE)},
    {SWIG_LUA_CONSTTAB_INT("NoiseGenerator_PINK", Analog::Filters::MoogLadders::NoiseGenerator::PINK)},
    {SWIG_LUA_CONSTTAB_INT("NoiseGenerator_BROWN", Analog::Filters::MoogLadders::NoiseGenerator::BROWN)},
    {SWIG_LUA_CONSTTAB_INT("MoogLike_LOWPASS", Analog::Filters::MoogLadders::MoogLike::LOWPASS)},
    {SWIG_LUA_CONSTTAB_INT("MoogLike_HIGHPASS", Analog::Filters::MoogLadders::MoogLike::HIGHPASS)},
    {SWIG_LUA_CONSTTAB_INT("LOWPASS", Analog::Filters::MoogLadders::LOWPASS)},
    {SWIG_LUA_CONSTTAB_INT("HIGHPASS", Analog::Filters::MoogLadders::HIGHPASS)},
    {SWIG_LUA_CONSTTAB_INT("BANDPASS", Analog::Filters::MoogLadders::BANDPASS)},
    {SWIG_LUA_CONSTTAB_INT("ALLPASS", Analog::Filters::MoogLadders::ALLPASS)},
    {SWIG_LUA_CONSTTAB_INT("NOTCH", Analog::Filters::MoogLadders::NOTCH)},
    {SWIG_LUA_CONSTTAB_INT("PEAK", Analog::Filters::MoogLadders::PEAK)},
    {SWIG_LUA_CONSTTAB_INT("LOW_SHELF", Analog::Filters::MoogLadders::LOW_SHELF)},
    {SWIG_LUA_CONSTTAB_INT("HIGH_SHELF", Analog::Filters::MoogLadders::HIGH_SHELF)},
    {SWIG_LUA_CONSTTAB_INT("WHITE", Analog::Filters::MoogLadders::WHITE)},
    {SWIG_LUA_CONSTTAB_INT("PINK", Analog::Filters::MoogLadders::PINK)},
    {SWIG_LUA_CONSTTAB_INT("BROWN", Analog::Filters::MoogLadders::BROWN)},
    {SWIG_LUA_CONSTTAB_INT("FINN_MOOG", Analog::Filters::MoogLadders::FINN_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("IMPROVED_MOOG", Analog::Filters::MoogLadders::IMPROVED_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("POLISH_MOOG", Analog::Filters::MoogLadders::POLISH_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("MICROTRACKER_MOOG", Analog::Filters::MoogLadders::MICROTRACKER_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("MUSICDSP_MOOG", Analog::Filters::MoogLadders::MUSICDSP_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("OBERHEIM_MOOG", Analog::Filters::MoogLadders::OBERHEIM_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("RK_MOOG", Analog::Filters::MoogLadders::RK_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("SIMPLIFIED_MOOG", Analog::Filters::MoogLadders::SIMPLIFIED_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("STILSON_MOOG", Analog::Filters::MoogLadders::STILSON_MOOG)},
    {SWIG_LUA_CONSTTAB_INT("Slew_PORT_RISE", Analog::Calculus::RateLimiters::Slew::PORT_RISE)},
    {SWIG_LUA_CONSTTAB_INT("Slew_PORT_FALL", Analog::Calculus::RateLimiters::Slew::PORT_FALL)},
    {SWIG_LUA_CONSTTAB_INT("Slew_PORT_TARGET", Analog::Calculus::RateLimiters::Slew::PORT_TARGET)},
    {SWIG_LUA_CONSTTAB_INT("RCFilter_MAX_FILTERS", Analog::Filters::RCFilter::MAX_FILTERS)},
    {SWIG_LUA_CONSTTAB_INT("RCFilter_LOW", Analog::Filters::RCFilter::LOW)},
    {SWIG_LUA_CONSTTAB_INT("RCFilter_HIGH", Analog::Filters::RCFilter::HIGH)},
    {SWIG_LUA_CONSTTAB_INT("RCFilter_BAND", Analog::Filters::RCFilter::BAND)},
    {SWIG_LUA_CONSTTAB_INT("RCFilter_PORT_CUTOFF", Analog::Filters::RCFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("RCFilter_PORT_LP", Analog::Filters::RCFilter::PORT_LP)},
    {SWIG_LUA_CONSTTAB_INT("RCFilter_PORT_HP", Analog::Filters::RCFilter::PORT_HP)},
    {SWIG_LUA_CONSTTAB_INT("RCFilter_PORT_BP", Analog::Filters::RCFilter::PORT_BP)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_none", Analog::SstFilter::SstFilter::fut_none)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_lp12", Analog::SstFilter::SstFilter::fut_lp12)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_lp24", Analog::SstFilter::SstFilter::fut_lp24)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_lpmoog", Analog::SstFilter::SstFilter::fut_lpmoog)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_hp12", Analog::SstFilter::SstFilter::fut_hp12)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_hp24", Analog::SstFilter::SstFilter::fut_hp24)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_bp12", Analog::SstFilter::SstFilter::fut_bp12)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_notch12", Analog::SstFilter::SstFilter::fut_notch12)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_comb_pos", Analog::SstFilter::SstFilter::fut_comb_pos)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_SNH", Analog::SstFilter::SstFilter::fut_SNH)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_vintageladder", Analog::SstFilter::SstFilter::fut_vintageladder)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_obxd_2pole_lp", Analog::SstFilter::SstFilter::fut_obxd_2pole_lp)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_obxd_4pole", Analog::SstFilter::SstFilter::fut_obxd_4pole)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_k35_lp", Analog::SstFilter::SstFilter::fut_k35_lp)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_k35_hp", Analog::SstFilter::SstFilter::fut_k35_hp)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_diode", Analog::SstFilter::SstFilter::fut_diode)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_cutoffwarp_lp", Analog::SstFilter::SstFilter::fut_cutoffwarp_lp)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_cutoffwarp_hp", Analog::SstFilter::SstFilter::fut_cutoffwarp_hp)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_cutoffwarp_n", Analog::SstFilter::SstFilter::fut_cutoffwarp_n)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_cutoffwarp_bp", Analog::SstFilter::SstFilter::fut_cutoffwarp_bp)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_obxd_2pole_hp", Analog::SstFilter::SstFilter::fut_obxd_2pole_hp)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_obxd_2pole_n", Analog::SstFilter::SstFilter::fut_obxd_2pole_n)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_obxd_2pole_bp", Analog::SstFilter::SstFilter::fut_obxd_2pole_bp)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_bp24", Analog::SstFilter::SstFilter::fut_bp24)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_notch24", Analog::SstFilter::SstFilter::fut_notch24)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_comb_neg", Analog::SstFilter::SstFilter::fut_comb_neg)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_apf", Analog::SstFilter::SstFilter::fut_apf)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_cutoffwarp_ap", Analog::SstFilter::SstFilter::fut_cutoffwarp_ap)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_resonancewarp_lp", Analog::SstFilter::SstFilter::fut_resonancewarp_lp)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_resonancewarp_hp", Analog::SstFilter::SstFilter::fut_resonancewarp_hp)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_resonancewarp_n", Analog::SstFilter::SstFilter::fut_resonancewarp_n)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_resonancewarp_bp", Analog::SstFilter::SstFilter::fut_resonancewarp_bp)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_resonancewarp_ap", Analog::SstFilter::SstFilter::fut_resonancewarp_ap)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_fut_tripole", Analog::SstFilter::SstFilter::fut_tripole)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_num_filter_types", Analog::SstFilter::SstFilter::num_filter_types)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_Standard", Analog::SstFilter::SstFilter::st_Standard)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_Driven", Analog::SstFilter::SstFilter::st_Driven)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_Clean", Analog::SstFilter::SstFilter::st_Clean)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_Medium", Analog::SstFilter::SstFilter::st_Medium)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_Notch", Analog::SstFilter::SstFilter::st_Notch)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_NotchMild", Analog::SstFilter::SstFilter::st_NotchMild)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_lpmoog_6dB", Analog::SstFilter::SstFilter::st_lpmoog_6dB)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_lpmoog_12dB", Analog::SstFilter::SstFilter::st_lpmoog_12dB)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_lpmoog_18dB", Analog::SstFilter::SstFilter::st_lpmoog_18dB)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_lpmoog_24dB", Analog::SstFilter::SstFilter::st_lpmoog_24dB)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_diode_6dB", Analog::SstFilter::SstFilter::st_diode_6dB)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_diode_12dB", Analog::SstFilter::SstFilter::st_diode_12dB)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_diode_18dB", Analog::SstFilter::SstFilter::st_diode_18dB)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_diode_24dB", Analog::SstFilter::SstFilter::st_diode_24dB)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_cutoffwarp_tanh1", Analog::SstFilter::SstFilter::st_cutoffwarp_tanh1)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_cutoffwarp_tanh2", Analog::SstFilter::SstFilter::st_cutoffwarp_tanh2)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_cutoffwarp_tanh3", Analog::SstFilter::SstFilter::st_cutoffwarp_tanh3)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_cutoffwarp_tanh4", Analog::SstFilter::SstFilter::st_cutoffwarp_tanh4)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_cutoffwarp_softclip1", Analog::SstFilter::SstFilter::st_cutoffwarp_softclip1)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_cutoffwarp_softclip2", Analog::SstFilter::SstFilter::st_cutoffwarp_softclip2)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_cutoffwarp_softclip3", Analog::SstFilter::SstFilter::st_cutoffwarp_softclip3)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_cutoffwarp_softclip4", Analog::SstFilter::SstFilter::st_cutoffwarp_softclip4)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_cutoffwarp_ojd1", Analog::SstFilter::SstFilter::st_cutoffwarp_ojd1)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_cutoffwarp_ojd2", Analog::SstFilter::SstFilter::st_cutoffwarp_ojd2)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_cutoffwarp_ojd3", Analog::SstFilter::SstFilter::st_cutoffwarp_ojd3)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_cutoffwarp_ojd4", Analog::SstFilter::SstFilter::st_cutoffwarp_ojd4)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_resonancewarp_tanh1", Analog::SstFilter::SstFilter::st_resonancewarp_tanh1)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_resonancewarp_tanh2", Analog::SstFilter::SstFilter::st_resonancewarp_tanh2)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_resonancewarp_tanh3", Analog::SstFilter::SstFilter::st_resonancewarp_tanh3)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_resonancewarp_tanh4", Analog::SstFilter::SstFilter::st_resonancewarp_tanh4)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_resonancewarp_softclip1", Analog::SstFilter::SstFilter::st_resonancewarp_softclip1)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_resonancewarp_softclip2", Analog::SstFilter::SstFilter::st_resonancewarp_softclip2)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_resonancewarp_softclip3", Analog::SstFilter::SstFilter::st_resonancewarp_softclip3)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_resonancewarp_softclip4", Analog::SstFilter::SstFilter::st_resonancewarp_softclip4)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_tripole_LLL1", Analog::SstFilter::SstFilter::st_tripole_LLL1)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_tripole_LHL1", Analog::SstFilter::SstFilter::st_tripole_LHL1)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_tripole_HLH1", Analog::SstFilter::SstFilter::st_tripole_HLH1)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_tripole_HHH1", Analog::SstFilter::SstFilter::st_tripole_HHH1)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_tripole_LLL2", Analog::SstFilter::SstFilter::st_tripole_LLL2)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_tripole_LHL2", Analog::SstFilter::SstFilter::st_tripole_LHL2)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_tripole_HLH2", Analog::SstFilter::SstFilter::st_tripole_HLH2)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_tripole_HHH2", Analog::SstFilter::SstFilter::st_tripole_HHH2)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_tripole_LLL3", Analog::SstFilter::SstFilter::st_tripole_LLL3)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_tripole_LHL3", Analog::SstFilter::SstFilter::st_tripole_LHL3)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_tripole_HLH3", Analog::SstFilter::SstFilter::st_tripole_HLH3)},
    {SWIG_LUA_CONSTTAB_INT("SstFilter_st_tripole_HHH3", Analog::SstFilter::SstFilter::st_tripole_HHH3)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_none", Analog::SstWaveshaper::WaveshaperType::wst_none)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_soft", Analog::SstWaveshaper::WaveshaperType::wst_soft)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_hard", Analog::SstWaveshaper::WaveshaperType::wst_hard)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_asym", Analog::SstWaveshaper::WaveshaperType::wst_asym)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_sine", Analog::SstWaveshaper::WaveshaperType::wst_sine)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_digital", Analog::SstWaveshaper::WaveshaperType::wst_digital)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_cheby2", Analog::SstWaveshaper::WaveshaperType::wst_cheby2)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_cheby3", Analog::SstWaveshaper::WaveshaperType::wst_cheby3)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_cheby4", Analog::SstWaveshaper::WaveshaperType::wst_cheby4)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_cheby5", Analog::SstWaveshaper::WaveshaperType::wst_cheby5)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_fwrectify", Analog::SstWaveshaper::WaveshaperType::wst_fwrectify)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_poswav", Analog::SstWaveshaper::WaveshaperType::wst_poswav)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_negwav", Analog::SstWaveshaper::WaveshaperType::wst_negwav)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_softrect", Analog::SstWaveshaper::WaveshaperType::wst_softrect)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_singlefold", Analog::SstWaveshaper::WaveshaperType::wst_singlefold)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_dualfold", Analog::SstWaveshaper::WaveshaperType::wst_dualfold)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_westfold", Analog::SstWaveshaper::WaveshaperType::wst_westfold)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_add12", Analog::SstWaveshaper::WaveshaperType::wst_add12)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_add13", Analog::SstWaveshaper::WaveshaperType::wst_add13)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_add14", Analog::SstWaveshaper::WaveshaperType::wst_add14)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_add15", Analog::SstWaveshaper::WaveshaperType::wst_add15)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_add12345", Analog::SstWaveshaper::WaveshaperType::wst_add12345)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_addsaw3", Analog::SstWaveshaper::WaveshaperType::wst_addsaw3)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_addsqr3", Analog::SstWaveshaper::WaveshaperType::wst_addsqr3)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_fuzz", Analog::SstWaveshaper::WaveshaperType::wst_fuzz)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_fuzzsoft", Analog::SstWaveshaper::WaveshaperType::wst_fuzzsoft)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_fuzzheavy", Analog::SstWaveshaper::WaveshaperType::wst_fuzzheavy)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_fuzzctr", Analog::SstWaveshaper::WaveshaperType::wst_fuzzctr)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_fuzzsoftedge", Analog::SstWaveshaper::WaveshaperType::wst_fuzzsoftedge)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_sinpx", Analog::SstWaveshaper::WaveshaperType::wst_sinpx)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_sin2xpb", Analog::SstWaveshaper::WaveshaperType::wst_sin2xpb)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_sin3xpb", Analog::SstWaveshaper::WaveshaperType::wst_sin3xpb)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_sin7xpb", Analog::SstWaveshaper::WaveshaperType::wst_sin7xpb)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_sin10xpb", Analog::SstWaveshaper::WaveshaperType::wst_sin10xpb)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_2cyc", Analog::SstWaveshaper::WaveshaperType::wst_2cyc)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_7cyc", Analog::SstWaveshaper::WaveshaperType::wst_7cyc)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_10cyc", Analog::SstWaveshaper::WaveshaperType::wst_10cyc)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_2cycbound", Analog::SstWaveshaper::WaveshaperType::wst_2cycbound)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_7cycbound", Analog::SstWaveshaper::WaveshaperType::wst_7cycbound)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_10cycbound", Analog::SstWaveshaper::WaveshaperType::wst_10cycbound)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_zamsat", Analog::SstWaveshaper::WaveshaperType::wst_zamsat)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_ojd", Analog::SstWaveshaper::WaveshaperType::wst_ojd)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_wst_softfold", Analog::SstWaveshaper::WaveshaperType::wst_softfold)},
    {SWIG_LUA_CONSTTAB_INT("SstWaveshaper_WaveshaperType_n_ws_types", Analog::SstWaveshaper::WaveshaperType::n_ws_types)},
    {SWIG_LUA_CONSTTAB_INT("MS20Filter_PORT_CUTOFF", Analog::Filters::MS20::MS20Filter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("MS20Filter_PORT_RESONANCE", Analog::Filters::MS20::MS20Filter::PORT_RESONANCE)},
    {SWIG_LUA_CONSTTAB_INT("OBXFilter_PORT_CUTOFF", Analog::Filters::Oberheim::OBXFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("OBXFilter_PORT_RESONANCE", Analog::Filters::Oberheim::OBXFilter::PORT_RESONANCE)},
    {SWIG_LUA_CONSTTAB_INT("OBXFilter_PORT_MULTIMODE", Analog::Filters::Oberheim::OBXFilter::PORT_MULTIMODE)},
    {SWIG_LUA_CONSTTAB_INT("OBXFilter_PORT_LP24", Analog::Filters::Oberheim::OBXFilter::PORT_LP24)},
    {SWIG_LUA_CONSTTAB_INT("OBXFilter_PORT_BANDPASSSW", Analog::Filters::Oberheim::OBXFilter::PORT_BANDPASSSW)},
    {SWIG_LUA_CONSTTAB_INT("OBXFilter_PORT_SELFOSCSW", Analog::Filters::Oberheim::OBXFilter::PORT_SELFOSCSW)},
    {SWIG_LUA_CONSTTAB_INT("VCS3DiodeFilter_PORT_CUTOFF", VCS3DiodeFilter::PORT_CUTOFF)},
    {SWIG_LUA_CONSTTAB_INT("VCS3DiodeFilter_PORT_RESONANCE", VCS3DiodeFilter::PORT_RESONANCE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "crealf", _wrap_crealf},
    { "cimagf", _wrap_cimagf},
    { "cabsf", _wrap_cabsf},
    { "cargf", _wrap_cargf},
    { "cnormf", _wrap_cnormf},
    { "cprojf", _wrap_cprojf},
    { "cpolarf", _wrap_cpolarf},
    { "csinf", _wrap_csinf},
    { "ccosf", _wrap_ccosf},
    { "ctanf", _wrap_ctanf},
    { "casinf", _wrap_casinf},
    { "cacosf", _wrap_cacosf},
    { "catanf", _wrap_catanf},
    { "csinhf", _wrap_csinhf},
    { "ccoshf", _wrap_ccoshf},
    { "ctanhf", _wrap_ctanhf},
    { "casinhf", _wrap_casinhf},
    { "cacoshf", _wrap_cacoshf},
    { "catanhf", _wrap_catanhf},
    { "Huge", _wrap_Huge},
    { "Hugef", _wrap_Hugef},
    { "Infinity", _wrap_Infinity},
    { "NaN", _wrap_NaN},
    { "absf", _wrap_absf},
    { "cubef", _wrap_cubef},
    { "sqrtf", _wrap_sqrtf},
    { "expf", _wrap_expf},
    { "exp2f", _wrap_exp2f},
    { "logf", _wrap_logf},
    { "log10f", _wrap_log10f},
    { "log2f", _wrap_log2f},
    { "logbf", _wrap_logbf},
    { "powf", _wrap_powf},
    { "floorf", _wrap_floorf},
    { "acosf", _wrap_acosf},
    { "asinf", _wrap_asinf},
    { "atanf", _wrap_atanf},
    { "atan2f", _wrap_atan2f},
    { "cosf", _wrap_cosf},
    { "sinf", _wrap_sinf},
    { "tanf", _wrap_tanf},
    { "coshf", _wrap_coshf},
    { "sinhf", _wrap_sinhf},
    { "tanhf", _wrap_tanhf},
    { "lgammaf", _wrap_lgammaf},
    { "acoshf", _wrap_acoshf},
    { "asinhf", _wrap_asinhf},
    { "atanhf", _wrap_atanhf},
    { "cbrtf", _wrap_cbrtf},
    { "ceilf", _wrap_ceilf},
    { "copysignf", _wrap_copysignf},
    { "erff", _wrap_erff},
    { "erfcf", _wrap_erfcf},
    { "expm1f", _wrap_expm1f},
    { "fdimf", _wrap_fdimf},
    { "fmaf", _wrap_fmaf},
    { "fmaxf", _wrap_fmaxf},
    { "fminf", _wrap_fminf},
    { "fmodf", _wrap_fmodf},
    { "fpclassifyf", _wrap_fpclassifyf},
    { "hypotf", _wrap_hypotf},
    { "ilogbf", _wrap_ilogbf},
    { "isfinitef", _wrap_isfinitef},
    { "isgreaterf", _wrap_isgreaterf},
    { "isgreaterequalf", _wrap_isgreaterequalf},
    { "isinff", _wrap_isinff},
    { "islessf", _wrap_islessf},
    { "islessequalf", _wrap_islessequalf},
    { "isnanf", _wrap_isnanf},
    { "isnormalf", _wrap_isnormalf},
    { "isunorderedf", _wrap_isunorderedf},
    { "ldexpf", _wrap_ldexpf},
    { "llrintf", _wrap_llrintf},
    { "llroundf", _wrap_llroundf},
    { "log1pf", _wrap_log1pf},
    { "lrintf", _wrap_lrintf},
    { "lroundf", _wrap_lroundf},
    { "nanf", _wrap_nanf},
    { "nanff", _wrap_nanff},
    { "nanlf", _wrap_nanlf},
    { "nearbyintf", _wrap_nearbyintf},
    { "nextafterf", _wrap_nextafterf},
    { "nexttowardf", _wrap_nexttowardf},
    { "remainderf", _wrap_remainderf},
    { "rintf", _wrap_rintf},
    { "roundf", _wrap_roundf},
    { "scalblnf", _wrap_scalblnf},
    { "scalbnf", _wrap_scalbnf},
    { "squaref", _wrap_squaref},
    { "tgammaf", _wrap_tgammaf},
    { "truncf", _wrap_truncf},
    { "absd", _wrap_absd},
    { "sqrtd", _wrap_sqrtd},
    { "expd", _wrap_expd},
    { "exp2d", _wrap_exp2d},
    { "logd", _wrap_logd},
    { "log10d", _wrap_log10d},
    { "log2d", _wrap_log2d},
    { "logbd", _wrap_logbd},
    { "powd", _wrap_powd},
    { "floord", _wrap_floord},
    { "acosd", _wrap_acosd},
    { "asind", _wrap_asind},
    { "atand", _wrap_atand},
    { "atan2d", _wrap_atan2d},
    { "cosd", _wrap_cosd},
    { "sind", _wrap_sind},
    { "tand", _wrap_tand},
    { "coshd", _wrap_coshd},
    { "sinhd", _wrap_sinhd},
    { "tanhd", _wrap_tanhd},
    { "lgammad", _wrap_lgammad},
    { "acoshd", _wrap_acoshd},
    { "asinhd", _wrap_asinhd},
    { "atanhd", _wrap_atanhd},
    { "cbrtd", _wrap_cbrtd},
    { "ceild", _wrap_ceild},
    { "copysignd", _wrap_copysignd},
    { "erfd", _wrap_erfd},
    { "erfcd", _wrap_erfcd},
    { "expm1d", _wrap_expm1d},
    { "fdimd", _wrap_fdimd},
    { "fmad", _wrap_fmad},
    { "fmaxd", _wrap_fmaxd},
    { "fmind", _wrap_fmind},
    { "fmodd", _wrap_fmodd},
    { "fpclassifyd", _wrap_fpclassifyd},
    { "hypotd", _wrap_hypotd},
    { "ilogbd", _wrap_ilogbd},
    { "isfinited", _wrap_isfinited},
    { "isgreaterd", _wrap_isgreaterd},
    { "isgreaterequald", _wrap_isgreaterequald},
    { "isinfd", _wrap_isinfd},
    { "islessd", _wrap_islessd},
    { "islessequald", _wrap_islessequald},
    { "isnand", _wrap_isnand},
    { "isnormald", _wrap_isnormald},
    { "isunorderedd", _wrap_isunorderedd},
    { "ldexpd", _wrap_ldexpd},
    { "llrintd", _wrap_llrintd},
    { "llroundd", _wrap_llroundd},
    { "log1pd", _wrap_log1pd},
    { "lrintd", _wrap_lrintd},
    { "lroundd", _wrap_lroundd},
    { "nand", _wrap_nand},
    { "nanfd", _wrap_nanfd},
    { "nanld", _wrap_nanld},
    { "nearbyintd", _wrap_nearbyintd},
    { "nextafterd", _wrap_nextafterd},
    { "nexttowardd", _wrap_nexttowardd},
    { "remainderd", _wrap_remainderd},
    { "rintd", _wrap_rintd},
    { "roundd", _wrap_roundd},
    { "scalblnd", _wrap_scalblnd},
    { "scalbnd", _wrap_scalbnd},
    { "squared", _wrap_squared},
    { "tgammad", _wrap_tgammad},
    { "truncd", _wrap_truncd},
    { "Random_seed", _wrap_Random_seed},
    { "BlitDSF", _wrap_BlitDSF},
    { "moog_lerp", _wrap_moog_lerp},
    { "moog_min", _wrap_moog_min},
    { "moog_saturate", _wrap_moog_saturate},
    { "clip", _wrap_clip},
    { "fast_tanh", _wrap_fast_tanh},
    { "getPitch", _wrap_getPitch},
    { "tptlpupw", _wrap_tptlpupw},
    { "tptlp", _wrap_tptlp},
    { "tptpc", _wrap_tptpc},
    { "linsc", _wrap_linsc},
    { "logsc", _wrap_logsc},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_float_numeric_limits,
&_wrap_class_double_numeric_limits,
&_wrap_class_int_numeric_limits,
&_wrap_class_uint_numeric_limits,
&_wrap_class_short_numeric_limits,
&_wrap_class_ushort_numeric_limits,
&_wrap_class_long_numeric_limits,
&_wrap_class_ulong_numeric_limits,
&_wrap_class_llong_numeric_limits,
&_wrap_class_ullong_numeric_limits,
&_wrap_class_Random,
&_wrap_class_SoundProcessor,
&_wrap_class_Port,
&_wrap_class_Ports,
&_wrap_class_MonoProcessor,
&_wrap_class_MonoCascadeProcessor,
&_wrap_class_StereoProcessor,
&_wrap_class_StereoCascadeProcessor,
&_wrap_class_MonoFXProcessor,
&_wrap_class_StereoFXProcessor,
&_wrap_class_GeneratorProcessor,
&_wrap_class_MixerProcessor,
&_wrap_class_FunctionProcessor,
&_wrap_class_Parameter2Processor,
&_wrap_class_StereoSplitterProcessor,
&_wrap_class_OscillatorProcessor,
&_wrap_class_FilterProcessor,
&_wrap_class_AmplifierProcessor,
&_wrap_class_StereoOscillatorProcessor,
&_wrap_class_StereoGeneratorProcessor,
&_wrap_class_StereoFunctionProcessor,
&_wrap_class_StereoFilterProcessor,
&_wrap_class_StereoAmplifierProcessor,
&_wrap_class_SpectrumProcessor,
&_wrap_class_SignalSourceProcessor,
&_wrap_class_SignalSinkProcessor,
&_wrap_class_MonoOversampleProcessor,
&_wrap_class_MonoUpsampleProcessor,
&_wrap_class_MonoDownsampleProcessor,
&_wrap_class_OperatorProcessor,
&_wrap_class_MonoOperatorProcessor,
&_wrap_class_MonoCascadeOperatorProcessor,
&_wrap_class_MonoMultiplierOperatorProcessor,
&_wrap_class_MonoAdderOperatorProcessor,
&_wrap_class_MonoSubtractorOperatorProcessor,
&_wrap_class_MonoModulatorOperatorProcessor,
&_wrap_class_MonoBlendOperatorProcessor,
&_wrap_class_BlitSaw,
&_wrap_class_BlitSquare,
&_wrap_class_BlitTriangle,
&_wrap_class_blitSaw,
&_wrap_class_blitSquare,
&_wrap_class_blitTriangle,
&_wrap_class_DPWSaw,
&_wrap_class_DPWPulse,
&_wrap_class_DPWTriangle,
&_wrap_class_PolyBLEP,
&_wrap_class_osc_t,
&_wrap_class_minBLEP,
&_wrap_class_VAStateVariableFilter,
&_wrap_class_AnalogSVF,
&_wrap_class_BiQuadBase,
&_wrap_class_RBJFilter,
&_wrap_class_PinkingFilter,
&_wrap_class_BrowningFilter,
&_wrap_class_WhiteNoiseSource,
&_wrap_class_WhiteNoise,
&_wrap_class_PinkNoise,
&_wrap_class_BrownNoise,
&_wrap_class_NoiseGenerator,
&_wrap_class_LadderFilterBase,
&_wrap_class_HuovilainenMoog,
&_wrap_class_ImprovedMoog,
&_wrap_class_KrajeskiMoog,
&_wrap_class_MicrotrackerMoog,
&_wrap_class_MusicDSPMoog,
&_wrap_class_VAOnePole,
&_wrap_class_OberheimVariationMoog,
&_wrap_class_RKSimulationMoog,
&_wrap_class_SimplifiedMoog,
&_wrap_class_StilsonMoog,
&_wrap_class_MoogFilter1,
&_wrap_class_MoogFilter2,
&_wrap_class_MoogVCF,
&_wrap_class_StilsonMoog2,
&_wrap_class_MoogLike,
&_wrap_class_Filter,
&_wrap_class_RBJLowPassFilter,
&_wrap_class_RBJHighPassFilter,
&_wrap_class_RBJBandPassFilter,
&_wrap_class_RBJAllPassFilter,
&_wrap_class_RBJNotchFilter,
&_wrap_class_RBJPeakFilter,
&_wrap_class_RBJLowShelfFilter,
&_wrap_class_RBJHighShelfFilter,
&_wrap_class_NoiseSamples,
&_wrap_class_MoogLadderFilter,
&_wrap_class_SlewLimiter,
&_wrap_class_Slew,
&_wrap_class_RCFilter,
&_wrap_class_SstFilterState,
&_wrap_class_SstFilter,
&_wrap_class_SstWaveshaper,
&_wrap_class_MS20Filter,
&_wrap_class_OBXFilter,
&_wrap_class_VCS3DiodeFilter,
&_wrap_class_VCS3Filter,
&_wrap_class_onePoleTPTFB_LP,
&_wrap_class_onePoleTPT_LP,
&_wrap_class_onePoleTPT_HP,
&_wrap_class_onePoleTPT_LPHP,
&_wrap_class_onePoleTPT_AP,
&_wrap_class_xodMoogLadder4P,
&_wrap_class_float_vector,
&_wrap_class_double_vector,
&_wrap_class_complex_float_vector,
&_wrap_class_complex_double_vector,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "Analog",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Analog__Filters__MoogLadders__RBJNotchFilterTo_p_Analog__Filters__MoogLadders__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::Filter *)  ((Analog::Filters::MoogLadders::RBJNotchFilter *) x));
}
static void *_p_Analog__Filters__MoogLadders__RBJLowShelfFilterTo_p_Analog__Filters__MoogLadders__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::Filter *)  ((Analog::Filters::MoogLadders::RBJLowShelfFilter *) x));
}
static void *_p_Analog__Filters__MoogLadders__RBJHighShelfFilterTo_p_Analog__Filters__MoogLadders__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::Filter *)  ((Analog::Filters::MoogLadders::RBJHighShelfFilter *) x));
}
static void *_p_Analog__Filters__MoogLadders__RBJLowPassFilterTo_p_Analog__Filters__MoogLadders__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::Filter *)  ((Analog::Filters::MoogLadders::RBJLowPassFilter *) x));
}
static void *_p_Analog__Filters__MoogLadders__RBJHighPassFilterTo_p_Analog__Filters__MoogLadders__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::Filter *)  ((Analog::Filters::MoogLadders::RBJHighPassFilter *) x));
}
static void *_p_Analog__Filters__MoogLadders__RBJBandPassFilterTo_p_Analog__Filters__MoogLadders__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::Filter *)  ((Analog::Filters::MoogLadders::RBJBandPassFilter *) x));
}
static void *_p_Analog__Filters__MoogLadders__RBJAllPassFilterTo_p_Analog__Filters__MoogLadders__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::Filter *)  ((Analog::Filters::MoogLadders::RBJAllPassFilter *) x));
}
static void *_p_Analog__Filters__MoogLadders__RBJPeakFilterTo_p_Analog__Filters__MoogLadders__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::Filter *)  ((Analog::Filters::MoogLadders::RBJPeakFilter *) x));
}
static void *_p_Analog__Filters__MoogLadders__RBJFilterTo_p_Analog__Filters__MoogLadders__BiQuadBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::BiQuadBase *)  ((Analog::Filters::MoogLadders::RBJFilter *) x));
}
static void *_p_Analog__Filters__MoogLadders__KrajeskiMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::LadderFilterBase *)  ((Analog::Filters::MoogLadders::KrajeskiMoog *) x));
}
static void *_p_Analog__Filters__MoogLadders__MusicDSPMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::LadderFilterBase *)  ((Analog::Filters::MoogLadders::MusicDSPMoog *) x));
}
static void *_p_Analog__Filters__MoogLadders__RKSimulationMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::LadderFilterBase *)  ((Analog::Filters::MoogLadders::RKSimulationMoog *) x));
}
static void *_p_Analog__Filters__MoogLadders__StilsonMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::LadderFilterBase *)  ((Analog::Filters::MoogLadders::StilsonMoog *) x));
}
static void *_p_Analog__Filters__MoogLadders__OberheimVariationMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::LadderFilterBase *)  ((Analog::Filters::MoogLadders::OberheimVariationMoog *) x));
}
static void *_p_Analog__Filters__MoogLadders__HuovilainenMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::LadderFilterBase *)  ((Analog::Filters::MoogLadders::HuovilainenMoog *) x));
}
static void *_p_Analog__Filters__MoogLadders__MicrotrackerMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::LadderFilterBase *)  ((Analog::Filters::MoogLadders::MicrotrackerMoog *) x));
}
static void *_p_Analog__Filters__MoogLadders__SimplifiedMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::LadderFilterBase *)  ((Analog::Filters::MoogLadders::SimplifiedMoog *) x));
}
static void *_p_Analog__Filters__MoogLadders__ImprovedMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::LadderFilterBase *)  ((Analog::Filters::MoogLadders::ImprovedMoog *) x));
}
static void *_p_Analog__Filters__MoogLadders__WhiteNoiseTo_p_Analog__Filters__MoogLadders__WhiteNoiseSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::WhiteNoiseSource *)  ((Analog::Filters::MoogLadders::WhiteNoise *) x));
}
static void *_p_Analog__Filters__MoogLadders__BrownNoiseTo_p_Analog__Filters__MoogLadders__WhiteNoiseSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::WhiteNoiseSource *)  ((Analog::Filters::MoogLadders::BrownNoise *) x));
}
static void *_p_Analog__Filters__MoogLadders__PinkNoiseTo_p_Analog__Filters__MoogLadders__WhiteNoiseSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Analog::Filters::MoogLadders::WhiteNoiseSource *)  ((Analog::Filters::MoogLadders::PinkNoise *) x));
}
static void *_p_Analog__Filters__RCFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Analog::Filters::RCFilter *) x));
}
static void *_p_VCS3DiodeFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(MonoFXProcessor *) ((VCS3DiodeFilter *) x));
}
static void *_p_Analog__Filters__VCS3Filter__VCS3FilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Analog::Filters::VCS3Filter::VCS3Filter *) x));
}
static void *_p_Analog__Filters__XOD__xodMoogLadder4PTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Analog::Filters::XOD::xodMoogLadder4P *) x));
}
static void *_p_Analog__Filters__StateVariableFilter__VAStateVariableFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(MonoFXProcessor *) ((Analog::Filters::StateVariableFilter::VAStateVariableFilter *) x));
}
static void *_p_Analog__Calculus__RateLimiters__SlewLimiterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FunctionProcessor *) ((Analog::Calculus::RateLimiters::SlewLimiter *) x));
}
static void *_p_Analog__Oscillators__BlitSquareTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(OscillatorProcessor *) ((Analog::Oscillators::BlitSquare *) x));
}
static void *_p_Analog__Oscillators__blitSquareTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(OscillatorProcessor *) ((Analog::Oscillators::blitSquare *) x));
}
static void *_p_Analog__Oscillators__BlitSawTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(OscillatorProcessor *) ((Analog::Oscillators::BlitSaw *) x));
}
static void *_p_Analog__Oscillators__blitSawTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(OscillatorProcessor *) ((Analog::Oscillators::blitSaw *) x));
}
static void *_p_Analog__Oscillators__BlitTriangleTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(OscillatorProcessor *) ((Analog::Oscillators::BlitTriangle *) x));
}
static void *_p_Analog__Oscillators__blitTriangleTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(OscillatorProcessor *) ((Analog::Oscillators::blitTriangle *) x));
}
static void *_p_Analog__Oscillators__DPWSawTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(OscillatorProcessor *) ((Analog::Oscillators::DPWSaw *) x));
}
static void *_p_Analog__Filters__MS20__MS20FilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Analog::Filters::MS20::MS20Filter *) x));
}
static void *_p_Analog__Filters__Oberheim__OBXFilterTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Analog::Filters::Oberheim::OBXFilter *) x));
}
static void *_p_Analog__Filters__AnalogSVF__AnalogSVFTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FilterProcessor *) ((Analog::Filters::AnalogSVF::AnalogSVF *) x));
}
static void *_p_Analog__Calculus__RateLimiters__SlewTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *)(FunctionProcessor *) ((Analog::Calculus::RateLimiters::Slew *) x));
}
static void *_p_MonoBlendOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoBlendOperatorProcessor *) x));
}
static void *_p_MonoModulatorOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoModulatorOperatorProcessor *) x));
}
static void *_p_MonoSubtractorOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoSubtractorOperatorProcessor *) x));
}
static void *_p_MonoAdderOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoAdderOperatorProcessor *) x));
}
static void *_p_MonoMultiplierOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoMultiplierOperatorProcessor *) x));
}
static void *_p_MonoCascadeOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoOperatorProcessor *) ((MonoCascadeOperatorProcessor *) x));
}
static void *_p_MonoOperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MonoOperatorProcessor *) x));
}
static void *_p_OperatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((OperatorProcessor *) x));
}
static void *_p_MonoDownsampleProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MonoDownsampleProcessor *) x));
}
static void *_p_MonoUpsampleProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MonoUpsampleProcessor *) x));
}
static void *_p_MonoOversampleProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MonoOversampleProcessor *) x));
}
static void *_p_SignalSinkProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((SignalSinkProcessor *) x));
}
static void *_p_SignalSourceProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((SignalSourceProcessor *) x));
}
static void *_p_SpectrumProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((SpectrumProcessor *) x));
}
static void *_p_StereoAmplifierProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoAmplifierProcessor *) x));
}
static void *_p_StereoFilterProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoFilterProcessor *) x));
}
static void *_p_StereoFunctionProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoFunctionProcessor *) x));
}
static void *_p_StereoGeneratorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoGeneratorProcessor *) x));
}
static void *_p_StereoOscillatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoOscillatorProcessor *) x));
}
static void *_p_MonoProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MonoProcessor *) x));
}
static void *_p_MonoCascadeProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((MonoCascadeProcessor *) x));
}
static void *_p_StereoProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((StereoProcessor *) x));
}
static void *_p_StereoCascadeProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoCascadeProcessor *) x));
}
static void *_p_MonoFXProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((MonoFXProcessor *) x));
}
static void *_p_StereoFXProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (StereoProcessor *) ((StereoFXProcessor *) x));
}
static void *_p_GeneratorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((GeneratorProcessor *) x));
}
static void *_p_MixerProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((MixerProcessor *) x));
}
static void *_p_FunctionProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((FunctionProcessor *) x));
}
static void *_p_Parameter2ProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((Parameter2Processor *) x));
}
static void *_p_StereoSplitterProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *)  ((StereoSplitterProcessor *) x));
}
static void *_p_OscillatorProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((OscillatorProcessor *) x));
}
static void *_p_FilterProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((FilterProcessor *) x));
}
static void *_p_AmplifierProcessorTo_p_SoundProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundProcessor *) (MonoProcessor *) ((AmplifierProcessor *) x));
}
static void *_p_AmplifierProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((AmplifierProcessor *) x));
}
static void *_p_FilterProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((FilterProcessor *) x));
}
static void *_p_OscillatorProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((OscillatorProcessor *) x));
}
static void *_p_FunctionProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((FunctionProcessor *) x));
}
static void *_p_GeneratorProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((GeneratorProcessor *) x));
}
static void *_p_MonoFXProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((MonoFXProcessor *) x));
}
static void *_p_MonoCascadeProcessorTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *)  ((MonoCascadeProcessor *) x));
}
static void *_p_Analog__Calculus__RateLimiters__SlewLimiterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FunctionProcessor *) ((Analog::Calculus::RateLimiters::SlewLimiter *) x));
}
static void *_p_Analog__Calculus__RateLimiters__SlewTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FunctionProcessor *) ((Analog::Calculus::RateLimiters::Slew *) x));
}
static void *_p_Analog__Filters__XOD__xodMoogLadder4PTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Analog::Filters::XOD::xodMoogLadder4P *) x));
}
static void *_p_Analog__Oscillators__blitSawTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (OscillatorProcessor *) ((Analog::Oscillators::blitSaw *) x));
}
static void *_p_Analog__Oscillators__BlitSawTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (OscillatorProcessor *) ((Analog::Oscillators::BlitSaw *) x));
}
static void *_p_Analog__Filters__RCFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Analog::Filters::RCFilter *) x));
}
static void *_p_VCS3DiodeFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (MonoFXProcessor *) ((VCS3DiodeFilter *) x));
}
static void *_p_Analog__Filters__VCS3Filter__VCS3FilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Analog::Filters::VCS3Filter::VCS3Filter *) x));
}
static void *_p_Analog__Oscillators__blitTriangleTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (OscillatorProcessor *) ((Analog::Oscillators::blitTriangle *) x));
}
static void *_p_Analog__Oscillators__BlitTriangleTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (OscillatorProcessor *) ((Analog::Oscillators::BlitTriangle *) x));
}
static void *_p_Analog__Filters__StateVariableFilter__VAStateVariableFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (MonoFXProcessor *) ((Analog::Filters::StateVariableFilter::VAStateVariableFilter *) x));
}
static void *_p_Analog__Filters__MS20__MS20FilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Analog::Filters::MS20::MS20Filter *) x));
}
static void *_p_Analog__Filters__Oberheim__OBXFilterTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Analog::Filters::Oberheim::OBXFilter *) x));
}
static void *_p_Analog__Oscillators__blitSquareTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (OscillatorProcessor *) ((Analog::Oscillators::blitSquare *) x));
}
static void *_p_Analog__Oscillators__BlitSquareTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (OscillatorProcessor *) ((Analog::Oscillators::BlitSquare *) x));
}
static void *_p_Analog__Oscillators__DPWSawTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (OscillatorProcessor *) ((Analog::Oscillators::DPWSaw *) x));
}
static void *_p_Analog__Filters__AnalogSVF__AnalogSVFTo_p_MonoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoProcessor *) (FilterProcessor *) ((Analog::Filters::AnalogSVF::AnalogSVF *) x));
}
static void *_p_StereoCascadeProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoCascadeProcessor *) x));
}
static void *_p_StereoFXProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoFXProcessor *) x));
}
static void *_p_StereoOscillatorProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoOscillatorProcessor *) x));
}
static void *_p_StereoGeneratorProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoGeneratorProcessor *) x));
}
static void *_p_StereoFunctionProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoFunctionProcessor *) x));
}
static void *_p_StereoFilterProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoFilterProcessor *) x));
}
static void *_p_StereoAmplifierProcessorTo_p_StereoProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((StereoProcessor *)  ((StereoAmplifierProcessor *) x));
}
static void *_p_MonoCascadeOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoCascadeOperatorProcessor *) x));
}
static void *_p_MonoMultiplierOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoMultiplierOperatorProcessor *) x));
}
static void *_p_MonoAdderOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoAdderOperatorProcessor *) x));
}
static void *_p_MonoSubtractorOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoSubtractorOperatorProcessor *) x));
}
static void *_p_MonoModulatorOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoModulatorOperatorProcessor *) x));
}
static void *_p_MonoBlendOperatorProcessorTo_p_MonoOperatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoOperatorProcessor *)  ((MonoBlendOperatorProcessor *) x));
}
static void *_p_Analog__Oscillators__BlitSquareTo_p_OscillatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OscillatorProcessor *)  ((Analog::Oscillators::BlitSquare *) x));
}
static void *_p_Analog__Oscillators__blitSquareTo_p_OscillatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OscillatorProcessor *)  ((Analog::Oscillators::blitSquare *) x));
}
static void *_p_Analog__Oscillators__BlitSawTo_p_OscillatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OscillatorProcessor *)  ((Analog::Oscillators::BlitSaw *) x));
}
static void *_p_Analog__Oscillators__blitSawTo_p_OscillatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OscillatorProcessor *)  ((Analog::Oscillators::blitSaw *) x));
}
static void *_p_Analog__Oscillators__BlitTriangleTo_p_OscillatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OscillatorProcessor *)  ((Analog::Oscillators::BlitTriangle *) x));
}
static void *_p_Analog__Oscillators__blitTriangleTo_p_OscillatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OscillatorProcessor *)  ((Analog::Oscillators::blitTriangle *) x));
}
static void *_p_Analog__Oscillators__DPWSawTo_p_OscillatorProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OscillatorProcessor *)  ((Analog::Oscillators::DPWSaw *) x));
}
static void *_p_Analog__Filters__StateVariableFilter__VAStateVariableFilterTo_p_MonoFXProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoFXProcessor *)  ((Analog::Filters::StateVariableFilter::VAStateVariableFilter *) x));
}
static void *_p_VCS3DiodeFilterTo_p_MonoFXProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MonoFXProcessor *)  ((VCS3DiodeFilter *) x));
}
static void *_p_Analog__Filters__MS20__MS20FilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Analog::Filters::MS20::MS20Filter *) x));
}
static void *_p_Analog__Filters__Oberheim__OBXFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Analog::Filters::Oberheim::OBXFilter *) x));
}
static void *_p_Analog__Filters__AnalogSVF__AnalogSVFTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Analog::Filters::AnalogSVF::AnalogSVF *) x));
}
static void *_p_Analog__Filters__RCFilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Analog::Filters::RCFilter *) x));
}
static void *_p_Analog__Filters__VCS3Filter__VCS3FilterTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Analog::Filters::VCS3Filter::VCS3Filter *) x));
}
static void *_p_Analog__Filters__XOD__xodMoogLadder4PTo_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor *)  ((Analog::Filters::XOD::xodMoogLadder4P *) x));
}
static void *_p_Analog__Calculus__RateLimiters__SlewTo_p_FunctionProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FunctionProcessor *)  ((Analog::Calculus::RateLimiters::Slew *) x));
}
static void *_p_Analog__Calculus__RateLimiters__SlewLimiterTo_p_FunctionProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FunctionProcessor *)  ((Analog::Calculus::RateLimiters::SlewLimiter *) x));
}
static void *_p_p_Analog__Calculus__RateLimiters__SlewTo_p_p_FunctionProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FunctionProcessor **)  ((Analog::Calculus::RateLimiters::Slew **) x));
}
static void *_p_p_Analog__Calculus__RateLimiters__SlewLimiterTo_p_p_FunctionProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FunctionProcessor **)  ((Analog::Calculus::RateLimiters::SlewLimiter **) x));
}
static void *_p_p_Analog__Filters__MS20__MS20FilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Analog::Filters::MS20::MS20Filter **) x));
}
static void *_p_p_Analog__Filters__Oberheim__OBXFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Analog::Filters::Oberheim::OBXFilter **) x));
}
static void *_p_p_Analog__Filters__AnalogSVF__AnalogSVFTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Analog::Filters::AnalogSVF::AnalogSVF **) x));
}
static void *_p_p_Analog__Filters__RCFilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Analog::Filters::RCFilter **) x));
}
static void *_p_p_Analog__Filters__VCS3Filter__VCS3FilterTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Analog::Filters::VCS3Filter::VCS3Filter **) x));
}
static void *_p_p_Analog__Filters__XOD__xodMoogLadder4PTo_p_p_FilterProcessor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FilterProcessor **)  ((Analog::Filters::XOD::xodMoogLadder4P **) x));
}
static swig_type_info _swigt__p_AmplifierProcessor = {"_p_AmplifierProcessor", "AmplifierProcessor *", 0, 0, (void*)&_wrap_class_AmplifierProcessor, 0};
static swig_type_info _swigt__p_Analog__Calculus__RateLimiters__Slew = {"_p_Analog__Calculus__RateLimiters__Slew", "Analog::Calculus::RateLimiters::Slew *", 0, 0, (void*)&_wrap_class_Slew, 0};
static swig_type_info _swigt__p_Analog__Calculus__RateLimiters__SlewLimiter = {"_p_Analog__Calculus__RateLimiters__SlewLimiter", "Analog::Calculus::RateLimiters::SlewLimiter *", 0, 0, (void*)&_wrap_class_SlewLimiter, 0};
static swig_type_info _swigt__p_Analog__Filters__AnalogSVF__AnalogSVF = {"_p_Analog__Filters__AnalogSVF__AnalogSVF", "Analog::Filters::AnalogSVF::AnalogSVF *", 0, 0, (void*)&_wrap_class_AnalogSVF, 0};
static swig_type_info _swigt__p_Analog__Filters__MS20__MS20Filter = {"_p_Analog__Filters__MS20__MS20Filter", "Analog::Filters::MS20::MS20Filter *", 0, 0, (void*)&_wrap_class_MS20Filter, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__BiQuadBase = {"_p_Analog__Filters__MoogLadders__BiQuadBase", "Analog::Filters::MoogLadders::BiQuadBase *", 0, 0, (void*)&_wrap_class_BiQuadBase, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__BrownNoise = {"_p_Analog__Filters__MoogLadders__BrownNoise", "Analog::Filters::MoogLadders::BrownNoise *", 0, 0, (void*)&_wrap_class_BrownNoise, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__BrowningFilter = {"_p_Analog__Filters__MoogLadders__BrowningFilter", "Analog::Filters::MoogLadders::BrowningFilter *", 0, 0, (void*)&_wrap_class_BrowningFilter, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__Filter = {"_p_Analog__Filters__MoogLadders__Filter", "Analog::Filters::MoogLadders::Filter *", 0, 0, (void*)&_wrap_class_Filter, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__HuovilainenMoog = {"_p_Analog__Filters__MoogLadders__HuovilainenMoog", "Analog::Filters::MoogLadders::HuovilainenMoog *", 0, 0, (void*)&_wrap_class_HuovilainenMoog, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__ImprovedMoog = {"_p_Analog__Filters__MoogLadders__ImprovedMoog", "Analog::Filters::MoogLadders::ImprovedMoog *", 0, 0, (void*)&_wrap_class_ImprovedMoog, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__KrajeskiMoog = {"_p_Analog__Filters__MoogLadders__KrajeskiMoog", "Analog::Filters::MoogLadders::KrajeskiMoog *", 0, 0, (void*)&_wrap_class_KrajeskiMoog, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__LadderFilterBase = {"_p_Analog__Filters__MoogLadders__LadderFilterBase", "Analog::Filters::MoogLadders::LadderFilterBase *", 0, 0, (void*)&_wrap_class_LadderFilterBase, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__MicrotrackerMoog = {"_p_Analog__Filters__MoogLadders__MicrotrackerMoog", "Analog::Filters::MoogLadders::MicrotrackerMoog *", 0, 0, (void*)&_wrap_class_MicrotrackerMoog, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__MoogFilter1 = {"_p_Analog__Filters__MoogLadders__MoogFilter1", "Analog::Filters::MoogLadders::MoogFilter1 *", 0, 0, (void*)&_wrap_class_MoogFilter1, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__MoogFilter2 = {"_p_Analog__Filters__MoogLadders__MoogFilter2", "Analog::Filters::MoogLadders::MoogFilter2 *", 0, 0, (void*)&_wrap_class_MoogFilter2, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__MoogLadderFilter = {"_p_Analog__Filters__MoogLadders__MoogLadderFilter", "Analog::Filters::MoogLadders::MoogLadderFilter *", 0, 0, (void*)&_wrap_class_MoogLadderFilter, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__MoogLike = {"_p_Analog__Filters__MoogLadders__MoogLike", "Analog::Filters::MoogLadders::MoogLike *", 0, 0, (void*)&_wrap_class_MoogLike, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__MoogVCF = {"_p_Analog__Filters__MoogLadders__MoogVCF", "Analog::Filters::MoogLadders::MoogVCF *", 0, 0, (void*)&_wrap_class_MoogVCF, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__MusicDSPMoog = {"_p_Analog__Filters__MoogLadders__MusicDSPMoog", "Analog::Filters::MoogLadders::MusicDSPMoog *", 0, 0, (void*)&_wrap_class_MusicDSPMoog, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__NoiseGenerator = {"_p_Analog__Filters__MoogLadders__NoiseGenerator", "Analog::Filters::MoogLadders::NoiseGenerator *", 0, 0, (void*)&_wrap_class_NoiseGenerator, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__NoiseSamples = {"_p_Analog__Filters__MoogLadders__NoiseSamples", "Analog::Filters::MoogLadders::NoiseSamples *", 0, 0, (void*)&_wrap_class_NoiseSamples, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__OberheimVariationMoog = {"_p_Analog__Filters__MoogLadders__OberheimVariationMoog", "Analog::Filters::MoogLadders::OberheimVariationMoog *", 0, 0, (void*)&_wrap_class_OberheimVariationMoog, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__PinkNoise = {"_p_Analog__Filters__MoogLadders__PinkNoise", "Analog::Filters::MoogLadders::PinkNoise *", 0, 0, (void*)&_wrap_class_PinkNoise, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__PinkingFilter = {"_p_Analog__Filters__MoogLadders__PinkingFilter", "Analog::Filters::MoogLadders::PinkingFilter *", 0, 0, (void*)&_wrap_class_PinkingFilter, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__RBJAllPassFilter = {"_p_Analog__Filters__MoogLadders__RBJAllPassFilter", "Analog::Filters::MoogLadders::RBJAllPassFilter *", 0, 0, (void*)&_wrap_class_RBJAllPassFilter, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__RBJBandPassFilter = {"_p_Analog__Filters__MoogLadders__RBJBandPassFilter", "Analog::Filters::MoogLadders::RBJBandPassFilter *", 0, 0, (void*)&_wrap_class_RBJBandPassFilter, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__RBJFilter = {"_p_Analog__Filters__MoogLadders__RBJFilter", "Analog::Filters::MoogLadders::RBJFilter *", 0, 0, (void*)&_wrap_class_RBJFilter, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__RBJHighPassFilter = {"_p_Analog__Filters__MoogLadders__RBJHighPassFilter", "Analog::Filters::MoogLadders::RBJHighPassFilter *", 0, 0, (void*)&_wrap_class_RBJHighPassFilter, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__RBJHighShelfFilter = {"_p_Analog__Filters__MoogLadders__RBJHighShelfFilter", "Analog::Filters::MoogLadders::RBJHighShelfFilter *", 0, 0, (void*)&_wrap_class_RBJHighShelfFilter, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__RBJLowPassFilter = {"_p_Analog__Filters__MoogLadders__RBJLowPassFilter", "Analog::Filters::MoogLadders::RBJLowPassFilter *", 0, 0, (void*)&_wrap_class_RBJLowPassFilter, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__RBJLowShelfFilter = {"_p_Analog__Filters__MoogLadders__RBJLowShelfFilter", "Analog::Filters::MoogLadders::RBJLowShelfFilter *", 0, 0, (void*)&_wrap_class_RBJLowShelfFilter, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__RBJNotchFilter = {"_p_Analog__Filters__MoogLadders__RBJNotchFilter", "Analog::Filters::MoogLadders::RBJNotchFilter *", 0, 0, (void*)&_wrap_class_RBJNotchFilter, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__RBJPeakFilter = {"_p_Analog__Filters__MoogLadders__RBJPeakFilter", "Analog::Filters::MoogLadders::RBJPeakFilter *", 0, 0, (void*)&_wrap_class_RBJPeakFilter, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__RKSimulationMoog = {"_p_Analog__Filters__MoogLadders__RKSimulationMoog", "Analog::Filters::MoogLadders::RKSimulationMoog *", 0, 0, (void*)&_wrap_class_RKSimulationMoog, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__SimplifiedMoog = {"_p_Analog__Filters__MoogLadders__SimplifiedMoog", "Analog::Filters::MoogLadders::SimplifiedMoog *", 0, 0, (void*)&_wrap_class_SimplifiedMoog, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__StilsonMoog = {"_p_Analog__Filters__MoogLadders__StilsonMoog", "Analog::Filters::MoogLadders::StilsonMoog *", 0, 0, (void*)&_wrap_class_StilsonMoog, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__StilsonMoog2 = {"_p_Analog__Filters__MoogLadders__StilsonMoog2", "Analog::Filters::MoogLadders::StilsonMoog2 *", 0, 0, (void*)&_wrap_class_StilsonMoog2, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__VAOnePole = {"_p_Analog__Filters__MoogLadders__VAOnePole", "Analog::Filters::MoogLadders::VAOnePole *", 0, 0, (void*)&_wrap_class_VAOnePole, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__WhiteNoise = {"_p_Analog__Filters__MoogLadders__WhiteNoise", "Analog::Filters::MoogLadders::WhiteNoise *", 0, 0, (void*)&_wrap_class_WhiteNoise, 0};
static swig_type_info _swigt__p_Analog__Filters__MoogLadders__WhiteNoiseSource = {"_p_Analog__Filters__MoogLadders__WhiteNoiseSource", "Analog::Filters::MoogLadders::WhiteNoiseSource *", 0, 0, (void*)&_wrap_class_WhiteNoiseSource, 0};
static swig_type_info _swigt__p_Analog__Filters__Oberheim__OBXFilter = {"_p_Analog__Filters__Oberheim__OBXFilter", "Analog::Filters::Oberheim::OBXFilter *", 0, 0, (void*)&_wrap_class_OBXFilter, 0};
static swig_type_info _swigt__p_Analog__Filters__RCFilter = {"_p_Analog__Filters__RCFilter", "Analog::Filters::RCFilter *", 0, 0, (void*)&_wrap_class_RCFilter, 0};
static swig_type_info _swigt__p_Analog__Filters__StateVariableFilter__VAStateVariableFilter = {"_p_Analog__Filters__StateVariableFilter__VAStateVariableFilter", "Analog::Filters::StateVariableFilter::VAStateVariableFilter *", 0, 0, (void*)&_wrap_class_VAStateVariableFilter, 0};
static swig_type_info _swigt__p_Analog__Filters__VCS3Filter__VCS3Filter = {"_p_Analog__Filters__VCS3Filter__VCS3Filter", "Analog::Filters::VCS3Filter::VCS3Filter *", 0, 0, (void*)&_wrap_class_VCS3Filter, 0};
static swig_type_info _swigt__p_Analog__Filters__XOD__onePoleTPTFB_LP = {"_p_Analog__Filters__XOD__onePoleTPTFB_LP", "Analog::Filters::XOD::onePoleTPTFB_LP *", 0, 0, (void*)&_wrap_class_onePoleTPTFB_LP, 0};
static swig_type_info _swigt__p_Analog__Filters__XOD__onePoleTPT_AP = {"_p_Analog__Filters__XOD__onePoleTPT_AP", "Analog::Filters::XOD::onePoleTPT_AP *", 0, 0, (void*)&_wrap_class_onePoleTPT_AP, 0};
static swig_type_info _swigt__p_Analog__Filters__XOD__onePoleTPT_HP = {"_p_Analog__Filters__XOD__onePoleTPT_HP", "Analog::Filters::XOD::onePoleTPT_HP *", 0, 0, (void*)&_wrap_class_onePoleTPT_HP, 0};
static swig_type_info _swigt__p_Analog__Filters__XOD__onePoleTPT_LP = {"_p_Analog__Filters__XOD__onePoleTPT_LP", "Analog::Filters::XOD::onePoleTPT_LP *", 0, 0, (void*)&_wrap_class_onePoleTPT_LP, 0};
static swig_type_info _swigt__p_Analog__Filters__XOD__onePoleTPT_LPHP = {"_p_Analog__Filters__XOD__onePoleTPT_LPHP", "Analog::Filters::XOD::onePoleTPT_LPHP *", 0, 0, (void*)&_wrap_class_onePoleTPT_LPHP, 0};
static swig_type_info _swigt__p_Analog__Filters__XOD__xodMoogLadder4P = {"_p_Analog__Filters__XOD__xodMoogLadder4P", "Analog::Filters::XOD::xodMoogLadder4P *", 0, 0, (void*)&_wrap_class_xodMoogLadder4P, 0};
static swig_type_info _swigt__p_Analog__Oscillators__BlitSaw = {"_p_Analog__Oscillators__BlitSaw", "Analog::Oscillators::BlitSaw *", 0, 0, (void*)&_wrap_class_BlitSaw, 0};
static swig_type_info _swigt__p_Analog__Oscillators__BlitSquare = {"_p_Analog__Oscillators__BlitSquare", "Analog::Oscillators::BlitSquare *", 0, 0, (void*)&_wrap_class_BlitSquare, 0};
static swig_type_info _swigt__p_Analog__Oscillators__BlitTriangle = {"_p_Analog__Oscillators__BlitTriangle", "Analog::Oscillators::BlitTriangle *", 0, 0, (void*)&_wrap_class_BlitTriangle, 0};
static swig_type_info _swigt__p_Analog__Oscillators__DPWPulse = {"_p_Analog__Oscillators__DPWPulse", "Analog::Oscillators::DPWPulse *", 0, 0, (void*)&_wrap_class_DPWPulse, 0};
static swig_type_info _swigt__p_Analog__Oscillators__DPWSaw = {"_p_Analog__Oscillators__DPWSaw", "Analog::Oscillators::DPWSaw *", 0, 0, (void*)&_wrap_class_DPWSaw, 0};
static swig_type_info _swigt__p_Analog__Oscillators__DPWTriangle = {"_p_Analog__Oscillators__DPWTriangle", "Analog::Oscillators::DPWTriangle *", 0, 0, (void*)&_wrap_class_DPWTriangle, 0};
static swig_type_info _swigt__p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP = {"_p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP", "Analog::Oscillators::PolyBLEPOsc::PolyBLEP *", 0, 0, (void*)&_wrap_class_PolyBLEP, 0};
static swig_type_info _swigt__p_Analog__Oscillators__blitSaw = {"_p_Analog__Oscillators__blitSaw", "Analog::Oscillators::blitSaw *", 0, 0, (void*)&_wrap_class_blitSaw, 0};
static swig_type_info _swigt__p_Analog__Oscillators__blitSquare = {"_p_Analog__Oscillators__blitSquare", "Analog::Oscillators::blitSquare *", 0, 0, (void*)&_wrap_class_blitSquare, 0};
static swig_type_info _swigt__p_Analog__Oscillators__blitTriangle = {"_p_Analog__Oscillators__blitTriangle", "Analog::Oscillators::blitTriangle *", 0, 0, (void*)&_wrap_class_blitTriangle, 0};
static swig_type_info _swigt__p_Analog__SstFilter__SstFilter = {"_p_Analog__SstFilter__SstFilter", "Analog::SstFilter::SstFilter *", 0, 0, (void*)&_wrap_class_SstFilter, 0};
static swig_type_info _swigt__p_Analog__SstFilter__SstFilterState = {"_p_Analog__SstFilter__SstFilterState", "Analog::SstFilter::SstFilterState *", 0, 0, (void*)&_wrap_class_SstFilterState, 0};
static swig_type_info _swigt__p_Analog__SstWaveshaper = {"_p_Analog__SstWaveshaper", "Analog::SstWaveshaper *", 0, 0, (void*)&_wrap_class_SstWaveshaper, 0};
static swig_type_info _swigt__p_Analog__minBLEP__minBLEP = {"_p_Analog__minBLEP__minBLEP", "Analog::minBLEP::minBLEP *", 0, 0, (void*)&_wrap_class_minBLEP, 0};
static swig_type_info _swigt__p_Analog__minBLEP__osc_t = {"_p_Analog__minBLEP__osc_t", "Analog::minBLEP::osc_t *", 0, 0, (void*)&_wrap_class_osc_t, 0};
static swig_type_info _swigt__p_Analog__minBLEP__oscwave_t = {"_p_Analog__minBLEP__oscwave_t", "enum Analog::minBLEP::oscwave_t *|Analog::minBLEP::oscwave_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FX__Filters__OnePole = {"_p_FX__Filters__OnePole", "FX::Filters::OnePole *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FilterProcessor = {"_p_FilterProcessor", "FilterProcessor *", 0, 0, (void*)&_wrap_class_FilterProcessor, 0};
static swig_type_info _swigt__p_FunctionProcessor = {"_p_FunctionProcessor", "FunctionProcessor *", 0, 0, (void*)&_wrap_class_FunctionProcessor, 0};
static swig_type_info _swigt__p_GeneratorProcessor = {"_p_GeneratorProcessor", "GeneratorProcessor *", 0, 0, (void*)&_wrap_class_GeneratorProcessor, 0};
static swig_type_info _swigt__p_MixerProcessor = {"_p_MixerProcessor", "MixerProcessor *", 0, 0, (void*)&_wrap_class_MixerProcessor, 0};
static swig_type_info _swigt__p_MonoAdderOperatorProcessor = {"_p_MonoAdderOperatorProcessor", "MonoAdderOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoAdderOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoBlendOperatorProcessor = {"_p_MonoBlendOperatorProcessor", "MonoBlendOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoBlendOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoCascadeOperatorProcessor = {"_p_MonoCascadeOperatorProcessor", "MonoCascadeOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoCascadeOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoCascadeProcessor = {"_p_MonoCascadeProcessor", "MonoCascadeProcessor *", 0, 0, (void*)&_wrap_class_MonoCascadeProcessor, 0};
static swig_type_info _swigt__p_MonoDownsampleProcessor = {"_p_MonoDownsampleProcessor", "MonoDownsampleProcessor *", 0, 0, (void*)&_wrap_class_MonoDownsampleProcessor, 0};
static swig_type_info _swigt__p_MonoFXProcessor = {"_p_MonoFXProcessor", "MonoFXProcessor *", 0, 0, (void*)&_wrap_class_MonoFXProcessor, 0};
static swig_type_info _swigt__p_MonoModulatorOperatorProcessor = {"_p_MonoModulatorOperatorProcessor", "MonoModulatorOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoModulatorOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoMultiplierOperatorProcessor = {"_p_MonoMultiplierOperatorProcessor", "MonoMultiplierOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoMultiplierOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoOperatorProcessor = {"_p_MonoOperatorProcessor", "MonoOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoOversampleProcessor = {"_p_MonoOversampleProcessor", "MonoOversampleProcessor *", 0, 0, (void*)&_wrap_class_MonoOversampleProcessor, 0};
static swig_type_info _swigt__p_MonoProcessor = {"_p_MonoProcessor", "MonoProcessor *", 0, 0, (void*)&_wrap_class_MonoProcessor, 0};
static swig_type_info _swigt__p_MonoSubtractorOperatorProcessor = {"_p_MonoSubtractorOperatorProcessor", "MonoSubtractorOperatorProcessor *", 0, 0, (void*)&_wrap_class_MonoSubtractorOperatorProcessor, 0};
static swig_type_info _swigt__p_MonoUpsampleProcessor = {"_p_MonoUpsampleProcessor", "MonoUpsampleProcessor *", 0, 0, (void*)&_wrap_class_MonoUpsampleProcessor, 0};
static swig_type_info _swigt__p_OperatorProcessor = {"_p_OperatorProcessor", "OperatorProcessor *", 0, 0, (void*)&_wrap_class_OperatorProcessor, 0};
static swig_type_info _swigt__p_OscillatorProcessor = {"_p_OscillatorProcessor", "OscillatorProcessor *", 0, 0, (void*)&_wrap_class_OscillatorProcessor, 0};
static swig_type_info _swigt__p_Parameter2Processor = {"_p_Parameter2Processor", "Parameter2Processor *", 0, 0, (void*)&_wrap_class_Parameter2Processor, 0};
static swig_type_info _swigt__p_Port = {"_p_Port", "Port *", 0, 0, (void*)&_wrap_class_Port, 0};
static swig_type_info _swigt__p_PortMap = {"_p_PortMap", "PortMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ports = {"_p_Ports", "Ports *", 0, 0, (void*)&_wrap_class_Ports, 0};
static swig_type_info _swigt__p_Random = {"_p_Random", "Random *", 0, 0, (void*)&_wrap_class_Random, 0};
static swig_type_info _swigt__p_SignalSinkProcessor = {"_p_SignalSinkProcessor", "SignalSinkProcessor *", 0, 0, (void*)&_wrap_class_SignalSinkProcessor, 0};
static swig_type_info _swigt__p_SignalSourceProcessor = {"_p_SignalSourceProcessor", "SignalSourceProcessor *", 0, 0, (void*)&_wrap_class_SignalSourceProcessor, 0};
static swig_type_info _swigt__p_SoundProcessor = {"_p_SoundProcessor", "SoundProcessor *", 0, 0, (void*)&_wrap_class_SoundProcessor, 0};
static swig_type_info _swigt__p_SpectrumProcessor = {"_p_SpectrumProcessor", "SpectrumProcessor *", 0, 0, (void*)&_wrap_class_SpectrumProcessor, 0};
static swig_type_info _swigt__p_StereoAmplifierProcessor = {"_p_StereoAmplifierProcessor", "StereoAmplifierProcessor *", 0, 0, (void*)&_wrap_class_StereoAmplifierProcessor, 0};
static swig_type_info _swigt__p_StereoCascadeProcessor = {"_p_StereoCascadeProcessor", "StereoCascadeProcessor *", 0, 0, (void*)&_wrap_class_StereoCascadeProcessor, 0};
static swig_type_info _swigt__p_StereoFXProcessor = {"_p_StereoFXProcessor", "StereoFXProcessor *", 0, 0, (void*)&_wrap_class_StereoFXProcessor, 0};
static swig_type_info _swigt__p_StereoFilterProcessor = {"_p_StereoFilterProcessor", "StereoFilterProcessor *", 0, 0, (void*)&_wrap_class_StereoFilterProcessor, 0};
static swig_type_info _swigt__p_StereoFunctionProcessor = {"_p_StereoFunctionProcessor", "StereoFunctionProcessor *", 0, 0, (void*)&_wrap_class_StereoFunctionProcessor, 0};
static swig_type_info _swigt__p_StereoGeneratorProcessor = {"_p_StereoGeneratorProcessor", "StereoGeneratorProcessor *", 0, 0, (void*)&_wrap_class_StereoGeneratorProcessor, 0};
static swig_type_info _swigt__p_StereoOscillatorProcessor = {"_p_StereoOscillatorProcessor", "StereoOscillatorProcessor *", 0, 0, (void*)&_wrap_class_StereoOscillatorProcessor, 0};
static swig_type_info _swigt__p_StereoProcessor = {"_p_StereoProcessor", "StereoProcessor *", 0, 0, (void*)&_wrap_class_StereoProcessor, 0};
static swig_type_info _swigt__p_StereoSplitterProcessor = {"_p_StereoSplitterProcessor", "StereoSplitterProcessor *", 0, 0, (void*)&_wrap_class_StereoSplitterProcessor, 0};
static swig_type_info _swigt__p_VCS3DiodeFilter = {"_p_VCS3DiodeFilter", "VCS3DiodeFilter *", 0, 0, (void*)&_wrap_class_VCS3DiodeFilter, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "DspFloatType *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_AmplifierProcessor = {"_p_p_AmplifierProcessor", "AmplifierProcessor **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_FilterProcessor = {"_p_p_FilterProcessor", "FilterProcessor **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_Analog__Filters__MS20__MS20Filter = {"_p_p_Analog__Filters__MS20__MS20Filter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Analog__Filters__Oberheim__OBXFilter = {"_p_p_Analog__Filters__Oberheim__OBXFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Analog__Filters__AnalogSVF__AnalogSVF = {"_p_p_Analog__Filters__AnalogSVF__AnalogSVF", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Analog__Filters__RCFilter = {"_p_p_Analog__Filters__RCFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Analog__Filters__VCS3Filter__VCS3Filter = {"_p_p_Analog__Filters__VCS3Filter__VCS3Filter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Analog__Filters__XOD__xodMoogLadder4P = {"_p_p_Analog__Filters__XOD__xodMoogLadder4P", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_FunctionProcessor = {"_p_p_FunctionProcessor", "FunctionProcessor **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_Analog__Calculus__RateLimiters__SlewLimiter = {"_p_p_Analog__Calculus__RateLimiters__SlewLimiter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_Analog__Calculus__RateLimiters__Slew = {"_p_p_Analog__Calculus__RateLimiters__Slew", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_float = {"_p_p_float", "float **|DspFloatType **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sst__filters__FilterCoefficientMakerT_t = {"_p_sst__filters__FilterCoefficientMakerT_t", "sst::filters::FilterCoefficientMaker< > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__arrayT_float_2_t = {"_p_std__arrayT_float_2_t", "std::array< DspFloatType,2 > *|std::array< float,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__arrayT_float_3_t = {"_p_std__arrayT_float_3_t", "std::array< DspFloatType,3 > *|std::array< float,3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *|std::complex< DspFloatType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_MonoProcessor_p_t = {"_p_std__listT_MonoProcessor_p_t", "MonoProcessorList *|std::list< MonoProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_SoundProcessor_p_t = {"_p_std__listT_SoundProcessor_p_t", "SoundProcessorList *|std::list< SoundProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_StereoProcessor_p_t = {"_p_std__listT_StereoProcessor_p_t", "StereoProcessorList *|std::list< StereoProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__shared_ptrT_Port_t_t = {"_p_std__listT_std__shared_ptrT_Port_t_t", "std::list< std::shared_ptr< Port > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_MonoProcessor_p_t = {"_p_std__mapT_std__string_MonoProcessor_p_t", "MonoProcessorNameMap *|std::map< std::string,MonoProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_Port_p_t = {"_p_std__mapT_std__string_Port_p_t", "Ports::PortMap *|std::map< std::string,Port * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_SoundProcessor_p_t = {"_p_std__mapT_std__string_SoundProcessor_p_t", "SoundProcessorNameMap *|std::map< std::string,SoundProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_StereoProcessor_p_t = {"_p_std__mapT_std__string_StereoProcessor_p_t", "StereoProcessorNameMap *|std::map< std::string,StereoProcessor * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mt19937 = {"_p_std__mt19937", "std::mt19937 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_double_t = {"_p_std__numeric_limitsT_double_t", "std::numeric_limits< double > *", 0, 0, (void*)&_wrap_class_double_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_float_t = {"_p_std__numeric_limitsT_float_t", "std::numeric_limits< float > *", 0, 0, (void*)&_wrap_class_float_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_int_t = {"_p_std__numeric_limitsT_int_t", "std::numeric_limits< int > *", 0, 0, (void*)&_wrap_class_int_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_long_t = {"_p_std__numeric_limitsT_long_long_t", "std::numeric_limits< long long > *", 0, 0, (void*)&_wrap_class_llong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_t = {"_p_std__numeric_limitsT_long_t", "std::numeric_limits< long > *", 0, 0, (void*)&_wrap_class_long_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_short_t = {"_p_std__numeric_limitsT_short_t", "std::numeric_limits< short > *", 0, 0, (void*)&_wrap_class_short_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_int_t = {"_p_std__numeric_limitsT_unsigned_int_t", "std::numeric_limits< unsigned int > *", 0, 0, (void*)&_wrap_class_uint_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_long_t = {"_p_std__numeric_limitsT_unsigned_long_long_t", "std::numeric_limits< unsigned long long > *", 0, 0, (void*)&_wrap_class_ullong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_t = {"_p_std__numeric_limitsT_unsigned_long_t", "std::numeric_limits< unsigned long > *", 0, 0, (void*)&_wrap_class_ulong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_short_t = {"_p_std__numeric_limitsT_unsigned_short_t", "std::numeric_limits< unsigned short > *", 0, 0, (void*)&_wrap_class_ushort_numeric_limits, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__uniform_real_distributionT_float_t = {"_p_std__uniform_real_distributionT_float_t", "std::uniform_real_distribution< float > *|std::uniform_real_distribution< DspFloatType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_MonoProcessor_p_std__allocatorT_MonoProcessor_p_t_t = {"_p_std__vectorT_MonoProcessor_p_std__allocatorT_MonoProcessor_p_t_t", "std::vector< MonoProcessor *,std::allocator< MonoProcessor * > > *|MonoProcessorVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t = {"_p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t", "std::vector< OscillatorProcessor *,std::allocator< OscillatorProcessor * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_SoundProcessor_p_std__allocatorT_SoundProcessor_p_t_t = {"_p_std__vectorT_SoundProcessor_p_std__allocatorT_SoundProcessor_p_t_t", "std::vector< SoundProcessor *,std::allocator< SoundProcessor * > > *|SoundProcessorVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_StereoProcessor_p_std__allocatorT_StereoProcessor_p_t_t = {"_p_std__vectorT_StereoProcessor_p_std__allocatorT_StereoProcessor_p_t_t", "std::vector< StereoProcessor *,std::allocator< StereoProcessor * > > *|StereoProcessorVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)&_wrap_class_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t = {"_p_std__vectorT_float_std__allocatorT_float_t_t", "std::vector< float,std::allocator< float > > *|std::vector< float > *|std::vector< DspFloatType,std::allocator< DspFloatType > > *", 0, 0, (void*)&_wrap_class_float_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t = {"_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t", "std::vector< std::complex< double > > *|std::vector< std::complex< double >,std::allocator< std::complex< double > > > *", 0, 0, (void*)&_wrap_class_complex_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t = {"_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t", "std::vector< std::complex< float > > *|std::vector< std::complex< float >,std::allocator< std::complex< float > > > *", 0, 0, (void*)&_wrap_class_complex_float_vector, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_double_std__allocatorT_double_t_t = {"_p_std__vector_iteratorT_double_std__allocatorT_double_t_t", "std::vector_iterator< double,std::allocator< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_float_std__allocatorT_float_t_t = {"_p_std__vector_iteratorT_float_std__allocatorT_float_t_t", "std::vector_iterator< float,std::allocator< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t = {"_p_std__vector_iteratorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t", "std::vector_iterator< std::complex< double >,std::allocator< std::complex< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t = {"_p_std__vector_iteratorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t", "std::vector_iterator< std::complex< float >,std::allocator< std::complex< float > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AmplifierProcessor,
  &_swigt__p_Analog__Calculus__RateLimiters__Slew,
  &_swigt__p_Analog__Calculus__RateLimiters__SlewLimiter,
  &_swigt__p_Analog__Filters__AnalogSVF__AnalogSVF,
  &_swigt__p_Analog__Filters__MS20__MS20Filter,
  &_swigt__p_Analog__Filters__MoogLadders__BiQuadBase,
  &_swigt__p_Analog__Filters__MoogLadders__BrownNoise,
  &_swigt__p_Analog__Filters__MoogLadders__BrowningFilter,
  &_swigt__p_Analog__Filters__MoogLadders__Filter,
  &_swigt__p_Analog__Filters__MoogLadders__HuovilainenMoog,
  &_swigt__p_Analog__Filters__MoogLadders__ImprovedMoog,
  &_swigt__p_Analog__Filters__MoogLadders__KrajeskiMoog,
  &_swigt__p_Analog__Filters__MoogLadders__LadderFilterBase,
  &_swigt__p_Analog__Filters__MoogLadders__MicrotrackerMoog,
  &_swigt__p_Analog__Filters__MoogLadders__MoogFilter1,
  &_swigt__p_Analog__Filters__MoogLadders__MoogFilter2,
  &_swigt__p_Analog__Filters__MoogLadders__MoogLadderFilter,
  &_swigt__p_Analog__Filters__MoogLadders__MoogLike,
  &_swigt__p_Analog__Filters__MoogLadders__MoogVCF,
  &_swigt__p_Analog__Filters__MoogLadders__MusicDSPMoog,
  &_swigt__p_Analog__Filters__MoogLadders__NoiseGenerator,
  &_swigt__p_Analog__Filters__MoogLadders__NoiseSamples,
  &_swigt__p_Analog__Filters__MoogLadders__OberheimVariationMoog,
  &_swigt__p_Analog__Filters__MoogLadders__PinkNoise,
  &_swigt__p_Analog__Filters__MoogLadders__PinkingFilter,
  &_swigt__p_Analog__Filters__MoogLadders__RBJAllPassFilter,
  &_swigt__p_Analog__Filters__MoogLadders__RBJBandPassFilter,
  &_swigt__p_Analog__Filters__MoogLadders__RBJFilter,
  &_swigt__p_Analog__Filters__MoogLadders__RBJHighPassFilter,
  &_swigt__p_Analog__Filters__MoogLadders__RBJHighShelfFilter,
  &_swigt__p_Analog__Filters__MoogLadders__RBJLowPassFilter,
  &_swigt__p_Analog__Filters__MoogLadders__RBJLowShelfFilter,
  &_swigt__p_Analog__Filters__MoogLadders__RBJNotchFilter,
  &_swigt__p_Analog__Filters__MoogLadders__RBJPeakFilter,
  &_swigt__p_Analog__Filters__MoogLadders__RKSimulationMoog,
  &_swigt__p_Analog__Filters__MoogLadders__SimplifiedMoog,
  &_swigt__p_Analog__Filters__MoogLadders__StilsonMoog,
  &_swigt__p_Analog__Filters__MoogLadders__StilsonMoog2,
  &_swigt__p_Analog__Filters__MoogLadders__VAOnePole,
  &_swigt__p_Analog__Filters__MoogLadders__WhiteNoise,
  &_swigt__p_Analog__Filters__MoogLadders__WhiteNoiseSource,
  &_swigt__p_Analog__Filters__Oberheim__OBXFilter,
  &_swigt__p_Analog__Filters__RCFilter,
  &_swigt__p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,
  &_swigt__p_Analog__Filters__VCS3Filter__VCS3Filter,
  &_swigt__p_Analog__Filters__XOD__onePoleTPTFB_LP,
  &_swigt__p_Analog__Filters__XOD__onePoleTPT_AP,
  &_swigt__p_Analog__Filters__XOD__onePoleTPT_HP,
  &_swigt__p_Analog__Filters__XOD__onePoleTPT_LP,
  &_swigt__p_Analog__Filters__XOD__onePoleTPT_LPHP,
  &_swigt__p_Analog__Filters__XOD__xodMoogLadder4P,
  &_swigt__p_Analog__Oscillators__BlitSaw,
  &_swigt__p_Analog__Oscillators__BlitSquare,
  &_swigt__p_Analog__Oscillators__BlitTriangle,
  &_swigt__p_Analog__Oscillators__DPWPulse,
  &_swigt__p_Analog__Oscillators__DPWSaw,
  &_swigt__p_Analog__Oscillators__DPWTriangle,
  &_swigt__p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,
  &_swigt__p_Analog__Oscillators__blitSaw,
  &_swigt__p_Analog__Oscillators__blitSquare,
  &_swigt__p_Analog__Oscillators__blitTriangle,
  &_swigt__p_Analog__SstFilter__SstFilter,
  &_swigt__p_Analog__SstFilter__SstFilterState,
  &_swigt__p_Analog__SstWaveshaper,
  &_swigt__p_Analog__minBLEP__minBLEP,
  &_swigt__p_Analog__minBLEP__osc_t,
  &_swigt__p_Analog__minBLEP__oscwave_t,
  &_swigt__p_FX__Filters__OnePole,
  &_swigt__p_FilterProcessor,
  &_swigt__p_FunctionProcessor,
  &_swigt__p_GeneratorProcessor,
  &_swigt__p_MixerProcessor,
  &_swigt__p_MonoAdderOperatorProcessor,
  &_swigt__p_MonoBlendOperatorProcessor,
  &_swigt__p_MonoCascadeOperatorProcessor,
  &_swigt__p_MonoCascadeProcessor,
  &_swigt__p_MonoDownsampleProcessor,
  &_swigt__p_MonoFXProcessor,
  &_swigt__p_MonoModulatorOperatorProcessor,
  &_swigt__p_MonoMultiplierOperatorProcessor,
  &_swigt__p_MonoOperatorProcessor,
  &_swigt__p_MonoOversampleProcessor,
  &_swigt__p_MonoProcessor,
  &_swigt__p_MonoSubtractorOperatorProcessor,
  &_swigt__p_MonoUpsampleProcessor,
  &_swigt__p_OperatorProcessor,
  &_swigt__p_OscillatorProcessor,
  &_swigt__p_Parameter2Processor,
  &_swigt__p_Port,
  &_swigt__p_PortMap,
  &_swigt__p_Ports,
  &_swigt__p_Random,
  &_swigt__p_SignalSinkProcessor,
  &_swigt__p_SignalSourceProcessor,
  &_swigt__p_SoundProcessor,
  &_swigt__p_SpectrumProcessor,
  &_swigt__p_StereoAmplifierProcessor,
  &_swigt__p_StereoCascadeProcessor,
  &_swigt__p_StereoFXProcessor,
  &_swigt__p_StereoFilterProcessor,
  &_swigt__p_StereoFunctionProcessor,
  &_swigt__p_StereoGeneratorProcessor,
  &_swigt__p_StereoOscillatorProcessor,
  &_swigt__p_StereoProcessor,
  &_swigt__p_StereoSplitterProcessor,
  &_swigt__p_VCS3DiodeFilter,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_p_AmplifierProcessor,
  &_swigt__p_p_Analog__Calculus__RateLimiters__Slew,
  &_swigt__p_p_Analog__Calculus__RateLimiters__SlewLimiter,
  &_swigt__p_p_Analog__Filters__AnalogSVF__AnalogSVF,
  &_swigt__p_p_Analog__Filters__MS20__MS20Filter,
  &_swigt__p_p_Analog__Filters__Oberheim__OBXFilter,
  &_swigt__p_p_Analog__Filters__RCFilter,
  &_swigt__p_p_Analog__Filters__VCS3Filter__VCS3Filter,
  &_swigt__p_p_Analog__Filters__XOD__xodMoogLadder4P,
  &_swigt__p_p_FilterProcessor,
  &_swigt__p_p_FunctionProcessor,
  &_swigt__p_p_float,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_sst__filters__FilterCoefficientMakerT_t,
  &_swigt__p_std__arrayT_float_2_t,
  &_swigt__p_std__arrayT_float_3_t,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__listT_MonoProcessor_p_t,
  &_swigt__p_std__listT_SoundProcessor_p_t,
  &_swigt__p_std__listT_StereoProcessor_p_t,
  &_swigt__p_std__listT_std__shared_ptrT_Port_t_t,
  &_swigt__p_std__mapT_std__string_MonoProcessor_p_t,
  &_swigt__p_std__mapT_std__string_Port_p_t,
  &_swigt__p_std__mapT_std__string_SoundProcessor_p_t,
  &_swigt__p_std__mapT_std__string_StereoProcessor_p_t,
  &_swigt__p_std__mt19937,
  &_swigt__p_std__numeric_limitsT_double_t,
  &_swigt__p_std__numeric_limitsT_float_t,
  &_swigt__p_std__numeric_limitsT_int_t,
  &_swigt__p_std__numeric_limitsT_long_long_t,
  &_swigt__p_std__numeric_limitsT_long_t,
  &_swigt__p_std__numeric_limitsT_short_t,
  &_swigt__p_std__numeric_limitsT_unsigned_int_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_short_t,
  &_swigt__p_std__string,
  &_swigt__p_std__uniform_real_distributionT_float_t,
  &_swigt__p_std__vectorT_MonoProcessor_p_std__allocatorT_MonoProcessor_p_t_t,
  &_swigt__p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t,
  &_swigt__p_std__vectorT_SoundProcessor_p_std__allocatorT_SoundProcessor_p_t_t,
  &_swigt__p_std__vectorT_StereoProcessor_p_std__allocatorT_StereoProcessor_p_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t,
  &_swigt__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,
  &_swigt__p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,
  &_swigt__p_std__vector_iteratorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vector_iteratorT_float_std__allocatorT_float_t_t,
  &_swigt__p_std__vector_iteratorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,
  &_swigt__p_std__vector_iteratorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_AmplifierProcessor[] = {  {&_swigt__p_AmplifierProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Calculus__RateLimiters__Slew[] = {  {&_swigt__p_Analog__Calculus__RateLimiters__Slew, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Calculus__RateLimiters__SlewLimiter[] = {  {&_swigt__p_Analog__Calculus__RateLimiters__SlewLimiter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__AnalogSVF__AnalogSVF[] = {  {&_swigt__p_Analog__Filters__AnalogSVF__AnalogSVF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MS20__MS20Filter[] = {  {&_swigt__p_Analog__Filters__MS20__MS20Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__BiQuadBase[] = {  {&_swigt__p_Analog__Filters__MoogLadders__RBJFilter, _p_Analog__Filters__MoogLadders__RBJFilterTo_p_Analog__Filters__MoogLadders__BiQuadBase, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__BiQuadBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__BrownNoise[] = {  {&_swigt__p_Analog__Filters__MoogLadders__BrownNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__BrowningFilter[] = {  {&_swigt__p_Analog__Filters__MoogLadders__BrowningFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__Filter[] = {  {&_swigt__p_Analog__Filters__MoogLadders__RBJNotchFilter, _p_Analog__Filters__MoogLadders__RBJNotchFilterTo_p_Analog__Filters__MoogLadders__Filter, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__RBJLowShelfFilter, _p_Analog__Filters__MoogLadders__RBJLowShelfFilterTo_p_Analog__Filters__MoogLadders__Filter, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__Filter, 0, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__RBJHighShelfFilter, _p_Analog__Filters__MoogLadders__RBJHighShelfFilterTo_p_Analog__Filters__MoogLadders__Filter, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__RBJLowPassFilter, _p_Analog__Filters__MoogLadders__RBJLowPassFilterTo_p_Analog__Filters__MoogLadders__Filter, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__RBJHighPassFilter, _p_Analog__Filters__MoogLadders__RBJHighPassFilterTo_p_Analog__Filters__MoogLadders__Filter, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__RBJBandPassFilter, _p_Analog__Filters__MoogLadders__RBJBandPassFilterTo_p_Analog__Filters__MoogLadders__Filter, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__RBJAllPassFilter, _p_Analog__Filters__MoogLadders__RBJAllPassFilterTo_p_Analog__Filters__MoogLadders__Filter, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__RBJPeakFilter, _p_Analog__Filters__MoogLadders__RBJPeakFilterTo_p_Analog__Filters__MoogLadders__Filter, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__HuovilainenMoog[] = {  {&_swigt__p_Analog__Filters__MoogLadders__HuovilainenMoog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__ImprovedMoog[] = {  {&_swigt__p_Analog__Filters__MoogLadders__ImprovedMoog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__KrajeskiMoog[] = {  {&_swigt__p_Analog__Filters__MoogLadders__KrajeskiMoog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__LadderFilterBase[] = {  {&_swigt__p_Analog__Filters__MoogLadders__LadderFilterBase, 0, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__KrajeskiMoog, _p_Analog__Filters__MoogLadders__KrajeskiMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__MusicDSPMoog, _p_Analog__Filters__MoogLadders__MusicDSPMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__RKSimulationMoog, _p_Analog__Filters__MoogLadders__RKSimulationMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__StilsonMoog, _p_Analog__Filters__MoogLadders__StilsonMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__HuovilainenMoog, _p_Analog__Filters__MoogLadders__HuovilainenMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__MicrotrackerMoog, _p_Analog__Filters__MoogLadders__MicrotrackerMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__SimplifiedMoog, _p_Analog__Filters__MoogLadders__SimplifiedMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__ImprovedMoog, _p_Analog__Filters__MoogLadders__ImprovedMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__OberheimVariationMoog, _p_Analog__Filters__MoogLadders__OberheimVariationMoogTo_p_Analog__Filters__MoogLadders__LadderFilterBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__MicrotrackerMoog[] = {  {&_swigt__p_Analog__Filters__MoogLadders__MicrotrackerMoog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__MoogFilter1[] = {  {&_swigt__p_Analog__Filters__MoogLadders__MoogFilter1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__MoogFilter2[] = {  {&_swigt__p_Analog__Filters__MoogLadders__MoogFilter2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__MoogLadderFilter[] = {  {&_swigt__p_Analog__Filters__MoogLadders__MoogLadderFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__MoogLike[] = {  {&_swigt__p_Analog__Filters__MoogLadders__MoogLike, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__MoogVCF[] = {  {&_swigt__p_Analog__Filters__MoogLadders__MoogVCF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__MusicDSPMoog[] = {  {&_swigt__p_Analog__Filters__MoogLadders__MusicDSPMoog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__NoiseGenerator[] = {  {&_swigt__p_Analog__Filters__MoogLadders__NoiseGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__NoiseSamples[] = {  {&_swigt__p_Analog__Filters__MoogLadders__NoiseSamples, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__OberheimVariationMoog[] = {  {&_swigt__p_Analog__Filters__MoogLadders__OberheimVariationMoog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__PinkNoise[] = {  {&_swigt__p_Analog__Filters__MoogLadders__PinkNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__PinkingFilter[] = {  {&_swigt__p_Analog__Filters__MoogLadders__PinkingFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__RBJAllPassFilter[] = {  {&_swigt__p_Analog__Filters__MoogLadders__RBJAllPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__RBJBandPassFilter[] = {  {&_swigt__p_Analog__Filters__MoogLadders__RBJBandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__RBJFilter[] = {  {&_swigt__p_Analog__Filters__MoogLadders__RBJFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__RBJHighPassFilter[] = {  {&_swigt__p_Analog__Filters__MoogLadders__RBJHighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__RBJHighShelfFilter[] = {  {&_swigt__p_Analog__Filters__MoogLadders__RBJHighShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__RBJLowPassFilter[] = {  {&_swigt__p_Analog__Filters__MoogLadders__RBJLowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__RBJLowShelfFilter[] = {  {&_swigt__p_Analog__Filters__MoogLadders__RBJLowShelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__RBJNotchFilter[] = {  {&_swigt__p_Analog__Filters__MoogLadders__RBJNotchFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__RBJPeakFilter[] = {  {&_swigt__p_Analog__Filters__MoogLadders__RBJPeakFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__RKSimulationMoog[] = {  {&_swigt__p_Analog__Filters__MoogLadders__RKSimulationMoog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__SimplifiedMoog[] = {  {&_swigt__p_Analog__Filters__MoogLadders__SimplifiedMoog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__StilsonMoog[] = {  {&_swigt__p_Analog__Filters__MoogLadders__StilsonMoog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__StilsonMoog2[] = {  {&_swigt__p_Analog__Filters__MoogLadders__StilsonMoog2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__VAOnePole[] = {  {&_swigt__p_Analog__Filters__MoogLadders__VAOnePole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__WhiteNoise[] = {  {&_swigt__p_Analog__Filters__MoogLadders__WhiteNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__MoogLadders__WhiteNoiseSource[] = {  {&_swigt__p_Analog__Filters__MoogLadders__WhiteNoise, _p_Analog__Filters__MoogLadders__WhiteNoiseTo_p_Analog__Filters__MoogLadders__WhiteNoiseSource, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__WhiteNoiseSource, 0, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__BrownNoise, _p_Analog__Filters__MoogLadders__BrownNoiseTo_p_Analog__Filters__MoogLadders__WhiteNoiseSource, 0, 0},  {&_swigt__p_Analog__Filters__MoogLadders__PinkNoise, _p_Analog__Filters__MoogLadders__PinkNoiseTo_p_Analog__Filters__MoogLadders__WhiteNoiseSource, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__Oberheim__OBXFilter[] = {  {&_swigt__p_Analog__Filters__Oberheim__OBXFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__RCFilter[] = {  {&_swigt__p_Analog__Filters__RCFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__StateVariableFilter__VAStateVariableFilter[] = {  {&_swigt__p_Analog__Filters__StateVariableFilter__VAStateVariableFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__VCS3Filter__VCS3Filter[] = {  {&_swigt__p_Analog__Filters__VCS3Filter__VCS3Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__XOD__onePoleTPTFB_LP[] = {  {&_swigt__p_Analog__Filters__XOD__onePoleTPTFB_LP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__XOD__onePoleTPT_AP[] = {  {&_swigt__p_Analog__Filters__XOD__onePoleTPT_AP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__XOD__onePoleTPT_HP[] = {  {&_swigt__p_Analog__Filters__XOD__onePoleTPT_HP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__XOD__onePoleTPT_LP[] = {  {&_swigt__p_Analog__Filters__XOD__onePoleTPT_LP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__XOD__onePoleTPT_LPHP[] = {  {&_swigt__p_Analog__Filters__XOD__onePoleTPT_LPHP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Filters__XOD__xodMoogLadder4P[] = {  {&_swigt__p_Analog__Filters__XOD__xodMoogLadder4P, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Oscillators__BlitSaw[] = {  {&_swigt__p_Analog__Oscillators__BlitSaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Oscillators__BlitSquare[] = {  {&_swigt__p_Analog__Oscillators__BlitSquare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Oscillators__BlitTriangle[] = {  {&_swigt__p_Analog__Oscillators__BlitTriangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Oscillators__DPWPulse[] = {  {&_swigt__p_Analog__Oscillators__DPWPulse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Oscillators__DPWSaw[] = {  {&_swigt__p_Analog__Oscillators__DPWSaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Oscillators__DPWTriangle[] = {  {&_swigt__p_Analog__Oscillators__DPWTriangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP[] = {  {&_swigt__p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Oscillators__blitSaw[] = {  {&_swigt__p_Analog__Oscillators__blitSaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Oscillators__blitSquare[] = {  {&_swigt__p_Analog__Oscillators__blitSquare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__Oscillators__blitTriangle[] = {  {&_swigt__p_Analog__Oscillators__blitTriangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__SstFilter__SstFilter[] = {  {&_swigt__p_Analog__SstFilter__SstFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__SstFilter__SstFilterState[] = {  {&_swigt__p_Analog__SstFilter__SstFilterState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__SstWaveshaper[] = {  {&_swigt__p_Analog__SstWaveshaper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__minBLEP__minBLEP[] = {  {&_swigt__p_Analog__minBLEP__minBLEP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__minBLEP__osc_t[] = {  {&_swigt__p_Analog__minBLEP__osc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Analog__minBLEP__oscwave_t[] = {  {&_swigt__p_Analog__minBLEP__oscwave_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FX__Filters__OnePole[] = {  {&_swigt__p_FX__Filters__OnePole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FilterProcessor[] = {  {&_swigt__p_Analog__Filters__MS20__MS20Filter, _p_Analog__Filters__MS20__MS20FilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Analog__Filters__Oberheim__OBXFilter, _p_Analog__Filters__Oberheim__OBXFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Analog__Filters__AnalogSVF__AnalogSVF, _p_Analog__Filters__AnalogSVF__AnalogSVFTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Analog__Filters__RCFilter, _p_Analog__Filters__RCFilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Analog__Filters__VCS3Filter__VCS3Filter, _p_Analog__Filters__VCS3Filter__VCS3FilterTo_p_FilterProcessor, 0, 0},  {&_swigt__p_Analog__Filters__XOD__xodMoogLadder4P, _p_Analog__Filters__XOD__xodMoogLadder4PTo_p_FilterProcessor, 0, 0},  {&_swigt__p_FilterProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FunctionProcessor[] = {  {&_swigt__p_Analog__Calculus__RateLimiters__SlewLimiter, _p_Analog__Calculus__RateLimiters__SlewLimiterTo_p_FunctionProcessor, 0, 0},  {&_swigt__p_Analog__Calculus__RateLimiters__Slew, _p_Analog__Calculus__RateLimiters__SlewTo_p_FunctionProcessor, 0, 0},  {&_swigt__p_FunctionProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeneratorProcessor[] = {  {&_swigt__p_GeneratorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MixerProcessor[] = {  {&_swigt__p_MixerProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoAdderOperatorProcessor[] = {  {&_swigt__p_MonoAdderOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoBlendOperatorProcessor[] = {  {&_swigt__p_MonoBlendOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoCascadeOperatorProcessor[] = {  {&_swigt__p_MonoCascadeOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoCascadeProcessor[] = {  {&_swigt__p_MonoCascadeProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoDownsampleProcessor[] = {  {&_swigt__p_MonoDownsampleProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoFXProcessor[] = {  {&_swigt__p_VCS3DiodeFilter, _p_VCS3DiodeFilterTo_p_MonoFXProcessor, 0, 0},  {&_swigt__p_MonoFXProcessor, 0, 0, 0},  {&_swigt__p_Analog__Filters__StateVariableFilter__VAStateVariableFilter, _p_Analog__Filters__StateVariableFilter__VAStateVariableFilterTo_p_MonoFXProcessor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoModulatorOperatorProcessor[] = {  {&_swigt__p_MonoModulatorOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoMultiplierOperatorProcessor[] = {  {&_swigt__p_MonoMultiplierOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoOperatorProcessor[] = {  {&_swigt__p_MonoOperatorProcessor, 0, 0, 0},  {&_swigt__p_MonoCascadeOperatorProcessor, _p_MonoCascadeOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},  {&_swigt__p_MonoMultiplierOperatorProcessor, _p_MonoMultiplierOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},  {&_swigt__p_MonoAdderOperatorProcessor, _p_MonoAdderOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},  {&_swigt__p_MonoSubtractorOperatorProcessor, _p_MonoSubtractorOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},  {&_swigt__p_MonoModulatorOperatorProcessor, _p_MonoModulatorOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},  {&_swigt__p_MonoBlendOperatorProcessor, _p_MonoBlendOperatorProcessorTo_p_MonoOperatorProcessor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoOversampleProcessor[] = {  {&_swigt__p_MonoOversampleProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoProcessor[] = {  {&_swigt__p_OscillatorProcessor, _p_OscillatorProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_FunctionProcessor, _p_FunctionProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_GeneratorProcessor, _p_GeneratorProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_MonoFXProcessor, _p_MonoFXProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_MonoCascadeProcessor, _p_MonoCascadeProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_MonoProcessor, 0, 0, 0},  {&_swigt__p_FilterProcessor, _p_FilterProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_AmplifierProcessor, _p_AmplifierProcessorTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Analog__Calculus__RateLimiters__SlewLimiter, _p_Analog__Calculus__RateLimiters__SlewLimiterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Analog__Filters__StateVariableFilter__VAStateVariableFilter, _p_Analog__Filters__StateVariableFilter__VAStateVariableFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Analog__Filters__XOD__xodMoogLadder4P, _p_Analog__Filters__XOD__xodMoogLadder4PTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__blitSaw, _p_Analog__Oscillators__blitSawTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__BlitSaw, _p_Analog__Oscillators__BlitSawTo_p_MonoProcessor, 0, 0},  {&_swigt__p_VCS3DiodeFilter, _p_VCS3DiodeFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Analog__Filters__RCFilter, _p_Analog__Filters__RCFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Analog__Filters__VCS3Filter__VCS3Filter, _p_Analog__Filters__VCS3Filter__VCS3FilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__DPWSaw, _p_Analog__Oscillators__DPWSawTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Analog__Calculus__RateLimiters__Slew, _p_Analog__Calculus__RateLimiters__SlewTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__BlitTriangle, _p_Analog__Oscillators__BlitTriangleTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__blitTriangle, _p_Analog__Oscillators__blitTriangleTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Analog__Filters__MS20__MS20Filter, _p_Analog__Filters__MS20__MS20FilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Analog__Filters__Oberheim__OBXFilter, _p_Analog__Filters__Oberheim__OBXFilterTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__blitSquare, _p_Analog__Oscillators__blitSquareTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__BlitSquare, _p_Analog__Oscillators__BlitSquareTo_p_MonoProcessor, 0, 0},  {&_swigt__p_Analog__Filters__AnalogSVF__AnalogSVF, _p_Analog__Filters__AnalogSVF__AnalogSVFTo_p_MonoProcessor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoSubtractorOperatorProcessor[] = {  {&_swigt__p_MonoSubtractorOperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MonoUpsampleProcessor[] = {  {&_swigt__p_MonoUpsampleProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OperatorProcessor[] = {  {&_swigt__p_OperatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OscillatorProcessor[] = {  {&_swigt__p_Analog__Oscillators__BlitSquare, _p_Analog__Oscillators__BlitSquareTo_p_OscillatorProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__blitSquare, _p_Analog__Oscillators__blitSquareTo_p_OscillatorProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__BlitSaw, _p_Analog__Oscillators__BlitSawTo_p_OscillatorProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__blitSaw, _p_Analog__Oscillators__blitSawTo_p_OscillatorProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__BlitTriangle, _p_Analog__Oscillators__BlitTriangleTo_p_OscillatorProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__blitTriangle, _p_Analog__Oscillators__blitTriangleTo_p_OscillatorProcessor, 0, 0},  {&_swigt__p_OscillatorProcessor, 0, 0, 0},  {&_swigt__p_Analog__Oscillators__DPWSaw, _p_Analog__Oscillators__DPWSawTo_p_OscillatorProcessor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Parameter2Processor[] = {  {&_swigt__p_Parameter2Processor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Port[] = {  {&_swigt__p_Port, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PortMap[] = {  {&_swigt__p_PortMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ports[] = {  {&_swigt__p_Ports, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Random[] = {  {&_swigt__p_Random, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalSinkProcessor[] = {  {&_swigt__p_SignalSinkProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalSourceProcessor[] = {  {&_swigt__p_SignalSourceProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundProcessor[] = {  {&_swigt__p_Analog__Oscillators__DPWSaw, _p_Analog__Oscillators__DPWSawTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Analog__Filters__RCFilter, _p_Analog__Filters__RCFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_VCS3DiodeFilter, _p_VCS3DiodeFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Analog__Filters__VCS3Filter__VCS3Filter, _p_Analog__Filters__VCS3Filter__VCS3FilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Analog__Filters__XOD__xodMoogLadder4P, _p_Analog__Filters__XOD__xodMoogLadder4PTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Analog__Calculus__RateLimiters__Slew, _p_Analog__Calculus__RateLimiters__SlewTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Analog__Calculus__RateLimiters__SlewLimiter, _p_Analog__Calculus__RateLimiters__SlewLimiterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__BlitSquare, _p_Analog__Oscillators__BlitSquareTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__blitSquare, _p_Analog__Oscillators__blitSquareTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Analog__Filters__StateVariableFilter__VAStateVariableFilter, _p_Analog__Filters__StateVariableFilter__VAStateVariableFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__BlitSaw, _p_Analog__Oscillators__BlitSawTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__blitSaw, _p_Analog__Oscillators__blitSawTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__blitTriangle, _p_Analog__Oscillators__blitTriangleTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Analog__Oscillators__BlitTriangle, _p_Analog__Oscillators__BlitTriangleTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Analog__Filters__MS20__MS20Filter, _p_Analog__Filters__MS20__MS20FilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Analog__Filters__Oberheim__OBXFilter, _p_Analog__Filters__Oberheim__OBXFilterTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Analog__Filters__AnalogSVF__AnalogSVF, _p_Analog__Filters__AnalogSVF__AnalogSVFTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoBlendOperatorProcessor, _p_MonoBlendOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoModulatorOperatorProcessor, _p_MonoModulatorOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoSubtractorOperatorProcessor, _p_MonoSubtractorOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoAdderOperatorProcessor, _p_MonoAdderOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoMultiplierOperatorProcessor, _p_MonoMultiplierOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoCascadeOperatorProcessor, _p_MonoCascadeOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoOperatorProcessor, _p_MonoOperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_OperatorProcessor, _p_OperatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoDownsampleProcessor, _p_MonoDownsampleProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoUpsampleProcessor, _p_MonoUpsampleProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoOversampleProcessor, _p_MonoOversampleProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_SignalSinkProcessor, _p_SignalSinkProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_SignalSourceProcessor, _p_SignalSourceProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_SpectrumProcessor, _p_SpectrumProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoAmplifierProcessor, _p_StereoAmplifierProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoFilterProcessor, _p_StereoFilterProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_SoundProcessor, 0, 0, 0},  {&_swigt__p_StereoFunctionProcessor, _p_StereoFunctionProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoGeneratorProcessor, _p_StereoGeneratorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoOscillatorProcessor, _p_StereoOscillatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoProcessor, _p_MonoProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoCascadeProcessor, _p_MonoCascadeProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MonoFXProcessor, _p_MonoFXProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_GeneratorProcessor, _p_GeneratorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_FunctionProcessor, _p_FunctionProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_OscillatorProcessor, _p_OscillatorProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_FilterProcessor, _p_FilterProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_AmplifierProcessor, _p_AmplifierProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoProcessor, _p_StereoProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoCascadeProcessor, _p_StereoCascadeProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoFXProcessor, _p_StereoFXProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_MixerProcessor, _p_MixerProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_Parameter2Processor, _p_Parameter2ProcessorTo_p_SoundProcessor, 0, 0},  {&_swigt__p_StereoSplitterProcessor, _p_StereoSplitterProcessorTo_p_SoundProcessor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectrumProcessor[] = {  {&_swigt__p_SpectrumProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoAmplifierProcessor[] = {  {&_swigt__p_StereoAmplifierProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoCascadeProcessor[] = {  {&_swigt__p_StereoCascadeProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoFXProcessor[] = {  {&_swigt__p_StereoFXProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoFilterProcessor[] = {  {&_swigt__p_StereoFilterProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoFunctionProcessor[] = {  {&_swigt__p_StereoFunctionProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoGeneratorProcessor[] = {  {&_swigt__p_StereoGeneratorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoOscillatorProcessor[] = {  {&_swigt__p_StereoOscillatorProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoProcessor[] = {  {&_swigt__p_StereoProcessor, 0, 0, 0},  {&_swigt__p_StereoCascadeProcessor, _p_StereoCascadeProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoFXProcessor, _p_StereoFXProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoOscillatorProcessor, _p_StereoOscillatorProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoGeneratorProcessor, _p_StereoGeneratorProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoFunctionProcessor, _p_StereoFunctionProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoFilterProcessor, _p_StereoFilterProcessorTo_p_StereoProcessor, 0, 0},  {&_swigt__p_StereoAmplifierProcessor, _p_StereoAmplifierProcessorTo_p_StereoProcessor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StereoSplitterProcessor[] = {  {&_swigt__p_StereoSplitterProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VCS3DiodeFilter[] = {  {&_swigt__p_VCS3DiodeFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_AmplifierProcessor[] = {  {&_swigt__p_p_AmplifierProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Analog__Filters__MS20__MS20Filter[] = {{&_swigt__p_p_Analog__Filters__MS20__MS20Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Analog__Filters__Oberheim__OBXFilter[] = {{&_swigt__p_p_Analog__Filters__Oberheim__OBXFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Analog__Filters__AnalogSVF__AnalogSVF[] = {{&_swigt__p_p_Analog__Filters__AnalogSVF__AnalogSVF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Analog__Filters__RCFilter[] = {{&_swigt__p_p_Analog__Filters__RCFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Analog__Filters__VCS3Filter__VCS3Filter[] = {{&_swigt__p_p_Analog__Filters__VCS3Filter__VCS3Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Analog__Filters__XOD__xodMoogLadder4P[] = {{&_swigt__p_p_Analog__Filters__XOD__xodMoogLadder4P, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_FilterProcessor[] = {  {&_swigt__p_p_Analog__Filters__MS20__MS20Filter, _p_p_Analog__Filters__MS20__MS20FilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Analog__Filters__Oberheim__OBXFilter, _p_p_Analog__Filters__Oberheim__OBXFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Analog__Filters__AnalogSVF__AnalogSVF, _p_p_Analog__Filters__AnalogSVF__AnalogSVFTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Analog__Filters__RCFilter, _p_p_Analog__Filters__RCFilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Analog__Filters__VCS3Filter__VCS3Filter, _p_p_Analog__Filters__VCS3Filter__VCS3FilterTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_Analog__Filters__XOD__xodMoogLadder4P, _p_p_Analog__Filters__XOD__xodMoogLadder4PTo_p_p_FilterProcessor, 0, 0},  {&_swigt__p_p_FilterProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Analog__Calculus__RateLimiters__SlewLimiter[] = {{&_swigt__p_p_Analog__Calculus__RateLimiters__SlewLimiter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Analog__Calculus__RateLimiters__Slew[] = {{&_swigt__p_p_Analog__Calculus__RateLimiters__Slew, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_FunctionProcessor[] = {  {&_swigt__p_p_Analog__Calculus__RateLimiters__SlewLimiter, _p_p_Analog__Calculus__RateLimiters__SlewLimiterTo_p_p_FunctionProcessor, 0, 0},  {&_swigt__p_p_Analog__Calculus__RateLimiters__Slew, _p_p_Analog__Calculus__RateLimiters__SlewTo_p_p_FunctionProcessor, 0, 0},  {&_swigt__p_p_FunctionProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_float[] = {  {&_swigt__p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sst__filters__FilterCoefficientMakerT_t[] = {  {&_swigt__p_sst__filters__FilterCoefficientMakerT_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__arrayT_float_2_t[] = {  {&_swigt__p_std__arrayT_float_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__arrayT_float_3_t[] = {  {&_swigt__p_std__arrayT_float_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_MonoProcessor_p_t[] = {  {&_swigt__p_std__listT_MonoProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_SoundProcessor_p_t[] = {  {&_swigt__p_std__listT_SoundProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_StereoProcessor_p_t[] = {  {&_swigt__p_std__listT_StereoProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__shared_ptrT_Port_t_t[] = {  {&_swigt__p_std__listT_std__shared_ptrT_Port_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_MonoProcessor_p_t[] = {  {&_swigt__p_std__mapT_std__string_MonoProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_Port_p_t[] = {  {&_swigt__p_std__mapT_std__string_Port_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_SoundProcessor_p_t[] = {  {&_swigt__p_std__mapT_std__string_SoundProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_StereoProcessor_p_t[] = {  {&_swigt__p_std__mapT_std__string_StereoProcessor_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mt19937[] = {  {&_swigt__p_std__mt19937, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_double_t[] = {  {&_swigt__p_std__numeric_limitsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_float_t[] = {  {&_swigt__p_std__numeric_limitsT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_int_t[] = {  {&_swigt__p_std__numeric_limitsT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_short_t[] = {  {&_swigt__p_std__numeric_limitsT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_int_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_short_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__uniform_real_distributionT_float_t[] = {  {&_swigt__p_std__uniform_real_distributionT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_MonoProcessor_p_std__allocatorT_MonoProcessor_p_t_t[] = {  {&_swigt__p_std__vectorT_MonoProcessor_p_std__allocatorT_MonoProcessor_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t[] = {  {&_swigt__p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_SoundProcessor_p_std__allocatorT_SoundProcessor_p_t_t[] = {  {&_swigt__p_std__vectorT_SoundProcessor_p_std__allocatorT_SoundProcessor_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_StereoProcessor_p_std__allocatorT_StereoProcessor_p_t_t[] = {  {&_swigt__p_std__vectorT_StereoProcessor_p_std__allocatorT_StereoProcessor_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vector_iteratorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vector_iteratorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t[] = {  {&_swigt__p_std__vector_iteratorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AmplifierProcessor,
  _swigc__p_Analog__Calculus__RateLimiters__Slew,
  _swigc__p_Analog__Calculus__RateLimiters__SlewLimiter,
  _swigc__p_Analog__Filters__AnalogSVF__AnalogSVF,
  _swigc__p_Analog__Filters__MS20__MS20Filter,
  _swigc__p_Analog__Filters__MoogLadders__BiQuadBase,
  _swigc__p_Analog__Filters__MoogLadders__BrownNoise,
  _swigc__p_Analog__Filters__MoogLadders__BrowningFilter,
  _swigc__p_Analog__Filters__MoogLadders__Filter,
  _swigc__p_Analog__Filters__MoogLadders__HuovilainenMoog,
  _swigc__p_Analog__Filters__MoogLadders__ImprovedMoog,
  _swigc__p_Analog__Filters__MoogLadders__KrajeskiMoog,
  _swigc__p_Analog__Filters__MoogLadders__LadderFilterBase,
  _swigc__p_Analog__Filters__MoogLadders__MicrotrackerMoog,
  _swigc__p_Analog__Filters__MoogLadders__MoogFilter1,
  _swigc__p_Analog__Filters__MoogLadders__MoogFilter2,
  _swigc__p_Analog__Filters__MoogLadders__MoogLadderFilter,
  _swigc__p_Analog__Filters__MoogLadders__MoogLike,
  _swigc__p_Analog__Filters__MoogLadders__MoogVCF,
  _swigc__p_Analog__Filters__MoogLadders__MusicDSPMoog,
  _swigc__p_Analog__Filters__MoogLadders__NoiseGenerator,
  _swigc__p_Analog__Filters__MoogLadders__NoiseSamples,
  _swigc__p_Analog__Filters__MoogLadders__OberheimVariationMoog,
  _swigc__p_Analog__Filters__MoogLadders__PinkNoise,
  _swigc__p_Analog__Filters__MoogLadders__PinkingFilter,
  _swigc__p_Analog__Filters__MoogLadders__RBJAllPassFilter,
  _swigc__p_Analog__Filters__MoogLadders__RBJBandPassFilter,
  _swigc__p_Analog__Filters__MoogLadders__RBJFilter,
  _swigc__p_Analog__Filters__MoogLadders__RBJHighPassFilter,
  _swigc__p_Analog__Filters__MoogLadders__RBJHighShelfFilter,
  _swigc__p_Analog__Filters__MoogLadders__RBJLowPassFilter,
  _swigc__p_Analog__Filters__MoogLadders__RBJLowShelfFilter,
  _swigc__p_Analog__Filters__MoogLadders__RBJNotchFilter,
  _swigc__p_Analog__Filters__MoogLadders__RBJPeakFilter,
  _swigc__p_Analog__Filters__MoogLadders__RKSimulationMoog,
  _swigc__p_Analog__Filters__MoogLadders__SimplifiedMoog,
  _swigc__p_Analog__Filters__MoogLadders__StilsonMoog,
  _swigc__p_Analog__Filters__MoogLadders__StilsonMoog2,
  _swigc__p_Analog__Filters__MoogLadders__VAOnePole,
  _swigc__p_Analog__Filters__MoogLadders__WhiteNoise,
  _swigc__p_Analog__Filters__MoogLadders__WhiteNoiseSource,
  _swigc__p_Analog__Filters__Oberheim__OBXFilter,
  _swigc__p_Analog__Filters__RCFilter,
  _swigc__p_Analog__Filters__StateVariableFilter__VAStateVariableFilter,
  _swigc__p_Analog__Filters__VCS3Filter__VCS3Filter,
  _swigc__p_Analog__Filters__XOD__onePoleTPTFB_LP,
  _swigc__p_Analog__Filters__XOD__onePoleTPT_AP,
  _swigc__p_Analog__Filters__XOD__onePoleTPT_HP,
  _swigc__p_Analog__Filters__XOD__onePoleTPT_LP,
  _swigc__p_Analog__Filters__XOD__onePoleTPT_LPHP,
  _swigc__p_Analog__Filters__XOD__xodMoogLadder4P,
  _swigc__p_Analog__Oscillators__BlitSaw,
  _swigc__p_Analog__Oscillators__BlitSquare,
  _swigc__p_Analog__Oscillators__BlitTriangle,
  _swigc__p_Analog__Oscillators__DPWPulse,
  _swigc__p_Analog__Oscillators__DPWSaw,
  _swigc__p_Analog__Oscillators__DPWTriangle,
  _swigc__p_Analog__Oscillators__PolyBLEPOsc__PolyBLEP,
  _swigc__p_Analog__Oscillators__blitSaw,
  _swigc__p_Analog__Oscillators__blitSquare,
  _swigc__p_Analog__Oscillators__blitTriangle,
  _swigc__p_Analog__SstFilter__SstFilter,
  _swigc__p_Analog__SstFilter__SstFilterState,
  _swigc__p_Analog__SstWaveshaper,
  _swigc__p_Analog__minBLEP__minBLEP,
  _swigc__p_Analog__minBLEP__osc_t,
  _swigc__p_Analog__minBLEP__oscwave_t,
  _swigc__p_FX__Filters__OnePole,
  _swigc__p_FilterProcessor,
  _swigc__p_FunctionProcessor,
  _swigc__p_GeneratorProcessor,
  _swigc__p_MixerProcessor,
  _swigc__p_MonoAdderOperatorProcessor,
  _swigc__p_MonoBlendOperatorProcessor,
  _swigc__p_MonoCascadeOperatorProcessor,
  _swigc__p_MonoCascadeProcessor,
  _swigc__p_MonoDownsampleProcessor,
  _swigc__p_MonoFXProcessor,
  _swigc__p_MonoModulatorOperatorProcessor,
  _swigc__p_MonoMultiplierOperatorProcessor,
  _swigc__p_MonoOperatorProcessor,
  _swigc__p_MonoOversampleProcessor,
  _swigc__p_MonoProcessor,
  _swigc__p_MonoSubtractorOperatorProcessor,
  _swigc__p_MonoUpsampleProcessor,
  _swigc__p_OperatorProcessor,
  _swigc__p_OscillatorProcessor,
  _swigc__p_Parameter2Processor,
  _swigc__p_Port,
  _swigc__p_PortMap,
  _swigc__p_Ports,
  _swigc__p_Random,
  _swigc__p_SignalSinkProcessor,
  _swigc__p_SignalSourceProcessor,
  _swigc__p_SoundProcessor,
  _swigc__p_SpectrumProcessor,
  _swigc__p_StereoAmplifierProcessor,
  _swigc__p_StereoCascadeProcessor,
  _swigc__p_StereoFXProcessor,
  _swigc__p_StereoFilterProcessor,
  _swigc__p_StereoFunctionProcessor,
  _swigc__p_StereoGeneratorProcessor,
  _swigc__p_StereoOscillatorProcessor,
  _swigc__p_StereoProcessor,
  _swigc__p_StereoSplitterProcessor,
  _swigc__p_VCS3DiodeFilter,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_p_AmplifierProcessor,
  _swigc__p_p_Analog__Calculus__RateLimiters__Slew,
  _swigc__p_p_Analog__Calculus__RateLimiters__SlewLimiter,
  _swigc__p_p_Analog__Filters__AnalogSVF__AnalogSVF,
  _swigc__p_p_Analog__Filters__MS20__MS20Filter,
  _swigc__p_p_Analog__Filters__Oberheim__OBXFilter,
  _swigc__p_p_Analog__Filters__RCFilter,
  _swigc__p_p_Analog__Filters__VCS3Filter__VCS3Filter,
  _swigc__p_p_Analog__Filters__XOD__xodMoogLadder4P,
  _swigc__p_p_FilterProcessor,
  _swigc__p_p_FunctionProcessor,
  _swigc__p_p_float,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_sst__filters__FilterCoefficientMakerT_t,
  _swigc__p_std__arrayT_float_2_t,
  _swigc__p_std__arrayT_float_3_t,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__listT_MonoProcessor_p_t,
  _swigc__p_std__listT_SoundProcessor_p_t,
  _swigc__p_std__listT_StereoProcessor_p_t,
  _swigc__p_std__listT_std__shared_ptrT_Port_t_t,
  _swigc__p_std__mapT_std__string_MonoProcessor_p_t,
  _swigc__p_std__mapT_std__string_Port_p_t,
  _swigc__p_std__mapT_std__string_SoundProcessor_p_t,
  _swigc__p_std__mapT_std__string_StereoProcessor_p_t,
  _swigc__p_std__mt19937,
  _swigc__p_std__numeric_limitsT_double_t,
  _swigc__p_std__numeric_limitsT_float_t,
  _swigc__p_std__numeric_limitsT_int_t,
  _swigc__p_std__numeric_limitsT_long_long_t,
  _swigc__p_std__numeric_limitsT_long_t,
  _swigc__p_std__numeric_limitsT_short_t,
  _swigc__p_std__numeric_limitsT_unsigned_int_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_short_t,
  _swigc__p_std__string,
  _swigc__p_std__uniform_real_distributionT_float_t,
  _swigc__p_std__vectorT_MonoProcessor_p_std__allocatorT_MonoProcessor_p_t_t,
  _swigc__p_std__vectorT_OscillatorProcessor_p_std__allocatorT_OscillatorProcessor_p_t_t,
  _swigc__p_std__vectorT_SoundProcessor_p_std__allocatorT_SoundProcessor_p_t_t,
  _swigc__p_std__vectorT_StereoProcessor_p_std__allocatorT_StereoProcessor_p_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t,
  _swigc__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,
  _swigc__p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,
  _swigc__p_std__vector_iteratorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vector_iteratorT_float_std__allocatorT_float_t_t,
  _swigc__p_std__vector_iteratorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,
  _swigc__p_std__vector_iteratorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

