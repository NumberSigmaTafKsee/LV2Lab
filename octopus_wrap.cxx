/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ArrayT_double_t swig_types[0]
#define SWIGTYPE_p_ArrayT_float_t swig_types[1]
#define SWIGTYPE_p_ArrayT_std__complexT_double_t_t swig_types[2]
#define SWIGTYPE_p_ArrayT_std__complexT_float_t_t swig_types[3]
#define SWIGTYPE_p_ColumnVector swig_types[4]
#define SWIGTYPE_p_ComplexColumnVector swig_types[5]
#define SWIGTYPE_p_ComplexMatrix swig_types[6]
#define SWIGTYPE_p_ComplexRowVector swig_types[7]
#define SWIGTYPE_p_FloatColumnVector swig_types[8]
#define SWIGTYPE_p_FloatComplexColumnVector swig_types[9]
#define SWIGTYPE_p_FloatComplexMatrix swig_types[10]
#define SWIGTYPE_p_FloatComplexRowVector swig_types[11]
#define SWIGTYPE_p_FloatMatrix swig_types[12]
#define SWIGTYPE_p_FloatRowVector swig_types[13]
#define SWIGTYPE_p_Matrix swig_types[14]
#define SWIGTYPE_p_Octopus__Function swig_types[15]
#define SWIGTYPE_p_Octopus__MatrixViewXcd swig_types[16]
#define SWIGTYPE_p_Octopus__MatrixViewXcf swig_types[17]
#define SWIGTYPE_p_Octopus__MatrixViewXd swig_types[18]
#define SWIGTYPE_p_Octopus__MatrixViewXf swig_types[19]
#define SWIGTYPE_p_Octopus__OctaveInterpreter swig_types[20]
#define SWIGTYPE_p_Octopus__OctopusColVectorXcd swig_types[21]
#define SWIGTYPE_p_Octopus__OctopusColVectorXcf swig_types[22]
#define SWIGTYPE_p_Octopus__OctopusColVectorXd swig_types[23]
#define SWIGTYPE_p_Octopus__OctopusColVectorXf swig_types[24]
#define SWIGTYPE_p_Octopus__OctopusFunction swig_types[25]
#define SWIGTYPE_p_Octopus__OctopusMatrixXcd swig_types[26]
#define SWIGTYPE_p_Octopus__OctopusMatrixXcf swig_types[27]
#define SWIGTYPE_p_Octopus__OctopusMatrixXd swig_types[28]
#define SWIGTYPE_p_Octopus__OctopusMatrixXf swig_types[29]
#define SWIGTYPE_p_Octopus__OctopusRowVectorXcd swig_types[30]
#define SWIGTYPE_p_Octopus__OctopusRowVectorXcf swig_types[31]
#define SWIGTYPE_p_Octopus__OctopusRowVectorXd swig_types[32]
#define SWIGTYPE_p_Octopus__OctopusRowVectorXf swig_types[33]
#define SWIGTYPE_p_Octopus__OctopusValue swig_types[34]
#define SWIGTYPE_p_Octopus__OctopusValueList swig_types[35]
#define SWIGTYPE_p_Octopus__OctopusVar swig_types[36]
#define SWIGTYPE_p_RowVector swig_types[37]
#define SWIGTYPE_p_double swig_types[38]
#define SWIGTYPE_p_float swig_types[39]
#define SWIGTYPE_p_int32_t swig_types[40]
#define SWIGTYPE_p_int64_t swig_types[41]
#define SWIGTYPE_p_lua_State swig_types[42]
#define SWIGTYPE_p_octave__interpreter swig_types[43]
#define SWIGTYPE_p_octave_value swig_types[44]
#define SWIGTYPE_p_octave_value_list swig_types[45]
#define SWIGTYPE_p_std__complexT_double_t swig_types[46]
#define SWIGTYPE_p_std__complexT_float_t swig_types[47]
#define SWIGTYPE_p_std__numeric_limitsT_double_t swig_types[48]
#define SWIGTYPE_p_std__numeric_limitsT_float_t swig_types[49]
#define SWIGTYPE_p_std__numeric_limitsT_int_t swig_types[50]
#define SWIGTYPE_p_std__numeric_limitsT_long_long_t swig_types[51]
#define SWIGTYPE_p_std__numeric_limitsT_long_t swig_types[52]
#define SWIGTYPE_p_std__numeric_limitsT_short_t swig_types[53]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t swig_types[54]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t swig_types[55]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t swig_types[56]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t swig_types[57]
#define SWIGTYPE_p_std__string swig_types[58]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[59]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[60]
#define SWIGTYPE_p_std__vector_iteratorT_double_std__allocatorT_double_t_t swig_types[61]
#define SWIGTYPE_p_std__vector_iteratorT_float_std__allocatorT_float_t_t swig_types[62]
static swig_type_info *swig_types[64];
static swig_module_info swig_module = {swig_types, 63, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "octopus"
#define SWIG_init      luaopen_octopus
#define SWIG_init_user luaopen_octopus_user

#define SWIG_LUACODE   luaopen_octopus_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "octopus.hpp"
//#include "octopus_functions.hpp"
//#include "audiodsp_std_samples.hpp"
//#include "octopus_octavate.hpp"
using namespace Octopus;


#include <complex>
#include <valarray>
#include <fenv.h>


#include <complex>


#include <limits>


  /*
    typedef float f32;
    typedef double f64;
    typedef signed char i8;
    typedef unsigned char u8;
    typedef signed short i16;
    typedef unsigned short u16;
    typedef signed int i32;
    typedef unsigned int u32;
    typedef signed long ilong;
    typedef unsigned long ulong;
    typedef signed long long i64;
    typedef unsigned long long u64;
  */
    
    namespace Ops
    {
    
      template<typename T> T abs(const T& x) { return std::abs(x); }
      template<typename T> T fabs(const T& x) { return std::fabs(x); }
      template<typename T> T acos(const T& x) { return std::acos(x); }
      template<typename T> T acosh(const T& x) { return std::acosh(x); }
      template<typename T> T asinh(const T& x) { return std::asinh(x); }
      template<typename T> T asin(const T& x) { return std::asinh(x); }
      template<typename T> T atan(const T& x) { return std::atan(x); }
      template<typename T> T atan2(const T& x,const T& y) { return std::atan2(x,y); }
      template<typename T> T atanh(const T& x) { return std::atanh(x); }
      template<typename T> T cbrt(const T& x) { return std::cbrt(x); }
      template<typename T> T ceil(const T& x) { return std::ceil(x); }    
      template<typename T> T copysign(const T& x, const T& y) { return std::copysign(x,y); }
      template<typename T> T cos(const T& x) { return std::cos(x); }
      template<typename T> T cosh(const T& x) { return std::cosh(x); }
      template<typename T> T erf(const T& x) { return std::erf(x); }
      template<typename T> T erfc(const T& x) { return std::erfc(x); }
      template<typename T> T exp(const T& x) { return std::exp(x); }
      template<typename T> T exp2(const T& x) { return std::exp2(x); }
      template<typename T> T expm1(const T& x) { return std::expm1(x); }
      template<typename T> T fdim(const T & x, const T & y) { return std::fdim(x,y); }
      template<typename T> T floor(const T & x) { return std::floor(x); }
      template<typename T> T fma(const T & x, const T & y, const T& z) { return std::fma(x,y,z); }
      template<typename T> T fmax(const T & x, const T & y) { return std::fmax(x,y); }
      template<typename T> T fmin(const T & x, const T & y) { return std::fmax(x,y); }
      template<typename T> T fmod(const T & x, const T & y) { return std::fmod(x,y); }
      template<typename T> int fpclassify(const T & x) { return std::fpclassify(x); }
      template<typename T> T hypot(const T & x, const T & y) { return std::hypot(x,y); }
      template<typename T> int ilogb(const T & x) { return std::ilogb(x); }
      template<typename T> bool isfinite(const T & x) { return std::isfinite(x); }
      template<typename T> bool isgreater(const T & x, const T & y) { return std::isgreater(x,y); }
      template<typename T> bool isgreaterequal(const T & x, const T & y) { return std::isgreaterequal(x,y); }
      template<typename T> bool isinf(const T & x) { return std::isinf(x); }
      template<typename T> bool isless(const T & x, const T & y) { return std::isless(x,y); }
      template<typename T> bool islessequal(const T & x, const T & y) { return std::islessequal(x,y); }
      template<typename T> bool islessgreater(const T & x, const T & y) { return std::islessgreater(x,y); }
      template<typename T> bool isnan(const T & x) { return std::isnan(x); }
      template<typename T> bool isnormal(const T & x) { return std::isnormal(x); }
      template<typename T> bool isunordered(const T & x, const T& y) { return std::isunordered(x,y); }
      template<typename T> T ldexp(const T & x, int exp) { return std::ldexp(x,exp); }
      template<typename T> T lgamma(const T & x) { return std::lgamma(x); }
      template<typename T> T llrint(const T & x) { return std::llrint(x); }
      template<typename T> T llround(const T & x) { return std::llround(x); }
      template<typename T> T log(const T & x) { return std::log(x); }
      template<typename T> T log10(const T & x) { return std::log10(x); }
      template<typename T> T log1p(const T & x) { return std::log1p(x); }
      template<typename T> T log2(const T & x) { return std::log2(x); }
      template<typename T> T logb(const T & x) { return std::logb(x); }
      template<typename T> T lrint(const T & x) { return std::lrint(x); }
      template<typename T> T lround(const T & x) { return std::lround(x); }
      template<typename T> T nan(const char *tagp) { return std::nan(tagp);}
      template<typename T> T nanf(const char *tagp) { return std::nanf(tagp);}
      template<typename T> T nanl(const char *tagp) { return std::nanl(tagp);}
      template<typename T> T nearbyint(const T &x) { return std::nearbyint(x); }
      template<typename T> T nextafter(const T & x, const T & y) { return std::nextafter(x,y); }
      template<typename T> T nexttoward(const T & x, const T & y) { return std::nexttoward(x,y); }
      template<typename T> T pow(const T & b, const T & e) { return std::pow(b,e); }
      template<typename T> T remainder(const T & n, const T & d) { return std::remainder(n,d); }
      template<typename T> T rint(const T& x) { return std::rint(x); }
      template<typename T> T round(const T& x) { return std::round(x); }
      template<typename T> T scalbln(const T& x, long int n) { return std::scalbln(x,n);}
      template<typename T> T scalbn(const T& x, int n) { return std::scalbln(x,n);}
      template<typename T> bool signbit(const T & x) { return signbit(x); }
      template<typename T> T sin(const T& x) { return std::sin(x); }
      template<typename T> T sinh(const T& x) { return std::sinh(x); }    
      template<typename T> T sqrt(const T& x) { return std::sqrt(x); }
      template<typename T> T square(const T& x) { return x*x; }
      template<typename T> T cube(const T& x) { return x*x*x; }
      template<typename T> T tan(const T& x) { return std::tan(x); }
      template<typename T> T tanh(const T& x) { return std::tanh(x); }        
      template<typename T> T tgamma(const T& x) { return std::tgamma(x); }    
      template<typename T> T trunc(const T& x) { return std::trunc(x); }
      double Huge() { return HUGE_VAL; }
      float Hugef() { return HUGE_VALF; }
      double Infinity() { return INFINITY; }
      double NaN() { return NAN; }
    }    


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <string>
#include <algorithm>
#include <iostream>

SWIGINTERN char std_string___getitem____SWIG(std::string *self,size_t i){ return (*self)[i]; }
SWIGINTERN void std_string___setitem____SWIG(std::string *self,size_t i,char c){ (*self)[i] = c; }
SWIGINTERN char const *std_string___str____SWIG(std::string *self){ return self->c_str(); }
SWIGINTERN int32_t std_string_to_int32__SWIG_0(std::string *self,int base=10){ return std::stoi(self->c_str(),nullptr,base); }
SWIGINTERN int64_t std_string_to_int64__SWIG_0(std::string *self,int base=10){ return std::stoll(self->c_str(),nullptr,base); }
SWIGINTERN float std_string_to_float__SWIG(std::string *self){ return std::stof(*self); }
SWIGINTERN double std_string_to_double__SWIG(std::string *self){ return std::stod(*self); }
SWIGINTERN void std_string_reverse__SWIG(std::string *self){ std::reverse(self->begin(),self->end()); }
SWIGINTERN void std_string_sort__SWIG(std::string *self){ std::sort(self->begin(),self->end()); }
SWIGINTERN void std_string_shuffle__SWIG(std::string *self){ std::random_shuffle(self->begin(),self->end()); }
SWIGINTERN void std_string_getline__SWIG(std::string *self){
                std::getline(std::cin, *self);
            }
SWIGINTERN void std_string_fill__SWIG(std::string *self,size_t i,char c){
                self->resize(i);
                for(size_t n = 0; n < i; n++) (*self)[i] = c;
            }

#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T, class Alloc = std::allocator<T>>
    struct vector_iterator
    {
        typename std::vector<T,Alloc>::iterator iter;
        std::vector<T,Alloc> v;

        vector_iterator(const std::vector<T,Alloc> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T,Alloc> & vec, const typename std::vector<T,Alloc>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T,Alloc>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T,Alloc>& operator = (const vector_iterator<T,Alloc>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}
SWIGINTERN float std_vector_Sl_float_Sg____getitem__SWIG(std::vector< float > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_float_Sg____setitem__SWIG(std::vector< float > *self,size_t i,float val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< float,std::allocator< float > > std_vector_Sl_float_Sg__ibegin__SWIG(std::vector< float > *self){
                std::vector_iterator<float,std::allocator< float >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< float,std::allocator< float > > std_vector_Sl_float_Sg__iend__SWIG(std::vector< float > *self){
                std::vector_iterator<float,std::allocator< float >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_0(std::vector< float > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_float_Sg__erase__SWIG_1(std::vector< float > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN double std_vector_Sl_double_Sg____getitem__SWIG(std::vector< double > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_double_Sg____setitem__SWIG(std::vector< double > *self,size_t i,double val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< double,std::allocator< double > > std_vector_Sl_double_Sg__ibegin__SWIG(std::vector< double > *self){
                std::vector_iterator<double,std::allocator< double >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< double,std::allocator< double > > std_vector_Sl_double_Sg__iend__SWIG(std::vector< double > *self){
                std::vector_iterator<double,std::allocator< double >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }




#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>

SWIGINTERN float Octopus_OctopusRowVectorXf___getitem____SWIG(Octopus::OctopusRowVectorXf *self,size_t i){ return (*self)(i-1); }
SWIGINTERN void Octopus_OctopusRowVectorXf___setitem____SWIG(Octopus::OctopusRowVectorXf *self,size_t i,float v){ (*self)(i-1) = v; }
SWIGINTERN size_t Octopus_OctopusRowVectorXf_size__SWIG_1(Octopus::OctopusRowVectorXf const *self){ return self->size(1); }
SWIGINTERN void Octopus_OctopusRowVectorXf_fill__SWIG_1(Octopus::OctopusRowVectorXf *self,float v){ self->fill(v); }
SWIGINTERN float const *Octopus_OctopusRowVectorXf_data__SWIG(Octopus::OctopusRowVectorXf *self){ return self->data(); }
SWIGINTERN void Octopus_OctopusRowVectorXf_copy__SWIG_0(Octopus::OctopusRowVectorXf *self,size_t n,float *p){
                self->resize(n);
                for(size_t i = 0; i < n; i++) (*self)(i) = p[i];
            }
SWIGINTERN void Octopus_OctopusRowVectorXf_copy__SWIG_1(Octopus::OctopusRowVectorXf *self,size_t n,double *p){
                self->resize(n);
                for(size_t i = 0; i < n; i++) (*self)(i) = p[i];
            }
SWIGINTERN double Octopus_OctopusRowVectorXd___getitem____SWIG(Octopus::OctopusRowVectorXd *self,size_t i){ return (*self)(i); }
SWIGINTERN void Octopus_OctopusRowVectorXd___setitem____SWIG(Octopus::OctopusRowVectorXd *self,size_t i,double v){ (*self)(i) = v; }
SWIGINTERN size_t Octopus_OctopusRowVectorXd_size__SWIG_1(Octopus::OctopusRowVectorXd const *self){ return self->size(1); }
SWIGINTERN void Octopus_OctopusRowVectorXd_fill__SWIG_1(Octopus::OctopusRowVectorXd *self,double v){ self->fill(v); }
SWIGINTERN double const *Octopus_OctopusRowVectorXd_data__SWIG(Octopus::OctopusRowVectorXd *self){ return self->data(); }
SWIGINTERN void Octopus_OctopusRowVectorXd_copy__SWIG_0(Octopus::OctopusRowVectorXd *self,size_t n,float *p){
                self->resize(n);
                for(size_t i = 0; i < n; i++) (*self)(i) = p[i];
            }
SWIGINTERN void Octopus_OctopusRowVectorXd_copy__SWIG_1(Octopus::OctopusRowVectorXd *self,size_t n,double *p){
                self->resize(n);
                for(size_t i = 0; i < n; i++) (*self)(i) = p[i];
            }
SWIGINTERN Octopus::OctopusRowVectorXd Octopus_OctopusRowVectorXd___div____SWIG_2(Octopus::OctopusRowVectorXd *self,double const &b){                
                OctopusRowVectorXd r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) / b;
                return r;
            }
SWIGINTERN std::complex< float > Octopus_OctopusRowVectorXcf___getitem____SWIG(Octopus::OctopusRowVectorXcf *self,size_t i){ return (*self)(i); }
SWIGINTERN void Octopus_OctopusRowVectorXcf___setitem____SWIG(Octopus::OctopusRowVectorXcf *self,size_t i,std::complex< float > v){ (*self)(i) = v; }
SWIGINTERN size_t Octopus_OctopusRowVectorXcf_size__SWIG_1(Octopus::OctopusRowVectorXcf const *self){ return self->size(1); }
SWIGINTERN void Octopus_OctopusRowVectorXcf_fill__SWIG_1(Octopus::OctopusRowVectorXcf *self,std::complex< float > v){ self->fill(v); }
SWIGINTERN std::complex< float > const *Octopus_OctopusRowVectorXcf_data__SWIG(Octopus::OctopusRowVectorXcf *self){ return self->data(); }
SWIGINTERN void Octopus_OctopusRowVectorXcf_copy__SWIG_0(Octopus::OctopusRowVectorXcf *self,size_t n,std::complex< float > *p){
                self->resize(n);
                for(size_t i = 0; i < n; i++) (*self)(i) = p[i];
            }
SWIGINTERN void Octopus_OctopusRowVectorXcf_copy__SWIG_1(Octopus::OctopusRowVectorXcf *self,size_t n,std::complex< double > *p){
                self->resize(n);
                for(size_t i = 0; i < n; i++) (*self)(i) = p[i];
            }
SWIGINTERN std::complex< double > Octopus_OctopusRowVectorXcd___getitem____SWIG(Octopus::OctopusRowVectorXcd *self,size_t i){ return (*self)(i); }
SWIGINTERN void Octopus_OctopusRowVectorXcd___setitem____SWIG(Octopus::OctopusRowVectorXcd *self,size_t i,std::complex< double > v){ (*self)(i) = v; }
SWIGINTERN size_t Octopus_OctopusRowVectorXcd_size__SWIG_1(Octopus::OctopusRowVectorXcd const *self){ return self->size(1); }
SWIGINTERN void Octopus_OctopusRowVectorXcd_fill__SWIG_1(Octopus::OctopusRowVectorXcd *self,std::complex< double > v){ self->fill(v); }
SWIGINTERN std::complex< double > const *Octopus_OctopusRowVectorXcd_data__SWIG(Octopus::OctopusRowVectorXcd *self){ return self->data(); }
SWIGINTERN void Octopus_OctopusRowVectorXcd_copy__SWIG_0(Octopus::OctopusRowVectorXcd *self,size_t n,std::complex< float > *p){
                self->resize(n);
                for(size_t i = 0; i < n; i++) (*self)(i) = p[i];
            }
SWIGINTERN void Octopus_OctopusRowVectorXcd_copy__SWIG_1(Octopus::OctopusRowVectorXcd *self,size_t n,std::complex< double > *p){
                self->resize(n);
                for(size_t i = 0; i < n; i++) (*self)(i) = p[i];
            }
SWIGINTERN Octopus::OctopusRowVectorXcd Octopus_OctopusRowVectorXcd___add____SWIG_2(Octopus::OctopusRowVectorXcd *self,std::complex< double > const b){                
                OctopusRowVectorXcd r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) + b;
                return r;
            }
SWIGINTERN Octopus::OctopusRowVectorXcd Octopus_OctopusRowVectorXcd___sub____SWIG_2(Octopus::OctopusRowVectorXcd *self,std::complex< double > const b){                
                OctopusRowVectorXcd r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) - b;
                return r;
            }
SWIGINTERN Octopus::OctopusRowVectorXcd Octopus_OctopusRowVectorXcd___mul____SWIG_2(Octopus::OctopusRowVectorXcd *self,std::complex< double > const b){                
                OctopusRowVectorXcd r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) * b;
                return r;
            }
SWIGINTERN Octopus::OctopusRowVectorXcd Octopus_OctopusRowVectorXcd___div____SWIG_2(Octopus::OctopusRowVectorXcd *self,std::complex< double > const b){                
                OctopusRowVectorXcd r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) / b;
                return r;
            }
SWIGINTERN float Octopus_OctopusColVectorXf___getitem____SWIG(Octopus::OctopusColVectorXf *self,size_t i){ return (*self)(i); }
SWIGINTERN void Octopus_OctopusColVectorXf___setitem____SWIG(Octopus::OctopusColVectorXf *self,size_t i,float v){ (*self)(i) = v; }
SWIGINTERN size_t Octopus_OctopusColVectorXf_size__SWIG_1(Octopus::OctopusColVectorXf const *self){ return self->size(1); }
SWIGINTERN void Octopus_OctopusColVectorXf_fill__SWIG_1(Octopus::OctopusColVectorXf *self,float v){ self->fill(v); }
SWIGINTERN float const *Octopus_OctopusColVectorXf_data__SWIG(Octopus::OctopusColVectorXf *self){ return self->data(); }
SWIGINTERN void Octopus_OctopusColVectorXf_copy__SWIG_0(Octopus::OctopusColVectorXf *self,size_t n,float *p){
                self->resize(n);
                for(size_t i = 0; i < n; i++) (*self)(i) = p[i];
            }
SWIGINTERN void Octopus_OctopusColVectorXf_copy__SWIG_1(Octopus::OctopusColVectorXf *self,size_t n,double *p){
                self->resize(n);
                for(size_t i = 0; i < n; i++) (*self)(i) = p[i];
            }
SWIGINTERN Octopus::OctopusColVectorXf Octopus_OctopusColVectorXf___add____SWIG_2(Octopus::OctopusColVectorXf *self,float b){
                OctopusColVectorXf r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) + b;
                return r;
            }
SWIGINTERN Octopus::OctopusColVectorXf Octopus_OctopusColVectorXf___sub____SWIG_2(Octopus::OctopusColVectorXf *self,float b){
                OctopusColVectorXf r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) - b;
                return r;
            }
SWIGINTERN Octopus::OctopusColVectorXf Octopus_OctopusColVectorXf___mul____SWIG_2(Octopus::OctopusColVectorXf *self,float b){
                OctopusColVectorXf r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) * b;
                return r;
            }
SWIGINTERN Octopus::OctopusColVectorXf Octopus_OctopusColVectorXf___div____SWIG_2(Octopus::OctopusColVectorXf *self,float b){
                OctopusColVectorXf r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) / b;
                return r;
            }
SWIGINTERN double Octopus_OctopusColVectorXd___getitem____SWIG(Octopus::OctopusColVectorXd *self,size_t i){ return (*self)(i); }
SWIGINTERN void Octopus_OctopusColVectorXd___setitem____SWIG(Octopus::OctopusColVectorXd *self,size_t i,double v){ (*self)(i) = v; }
SWIGINTERN size_t Octopus_OctopusColVectorXd_size__SWIG_1(Octopus::OctopusColVectorXd const *self){ return self->size(1); }
SWIGINTERN void Octopus_OctopusColVectorXd_fill__SWIG_1(Octopus::OctopusColVectorXd *self,double v){ self->fill(v); }
SWIGINTERN double const *Octopus_OctopusColVectorXd_data__SWIG(Octopus::OctopusColVectorXd *self){ return self->data(); }
SWIGINTERN void Octopus_OctopusColVectorXd_copy__SWIG_0(Octopus::OctopusColVectorXd *self,size_t n,float *p){
                self->resize(n);
                for(size_t i = 0; i < n; i++) (*self)(i) = p[i];
            }
SWIGINTERN void Octopus_OctopusColVectorXd_copy__SWIG_1(Octopus::OctopusColVectorXd *self,size_t n,double *p){
                self->resize(n);
                for(size_t i = 0; i < n; i++) (*self)(i) = p[i];
            }
SWIGINTERN Octopus::OctopusColVectorXd Octopus_OctopusColVectorXd___add____SWIG_2(Octopus::OctopusColVectorXd *self,double b){
                OctopusColVectorXd r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) + b;
                return r;
            }
SWIGINTERN Octopus::OctopusColVectorXd Octopus_OctopusColVectorXd___sub____SWIG_2(Octopus::OctopusColVectorXd *self,double b){
                OctopusColVectorXd r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) - b;
                return r;
            }
SWIGINTERN Octopus::OctopusColVectorXd Octopus_OctopusColVectorXd___mul____SWIG_2(Octopus::OctopusColVectorXd *self,double b){
                OctopusColVectorXd r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) * b;
                return r;
            }
SWIGINTERN Octopus::OctopusColVectorXd Octopus_OctopusColVectorXd___div____SWIG_2(Octopus::OctopusColVectorXd *self,double b){
                OctopusColVectorXd r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) / b;
                return r;
            }
SWIGINTERN std::complex< float > Octopus_OctopusColVectorXcf___getitem____SWIG(Octopus::OctopusColVectorXcf *self,size_t i){ return (*self)(i); }
SWIGINTERN void Octopus_OctopusColVectorXcf___setitem____SWIG(Octopus::OctopusColVectorXcf *self,size_t i,std::complex< float > v){ (*self)(i) = v; }
SWIGINTERN size_t Octopus_OctopusColVectorXcf_size__SWIG_1(Octopus::OctopusColVectorXcf const *self){ return self->size(1); }
SWIGINTERN void Octopus_OctopusColVectorXcf_fill__SWIG_1(Octopus::OctopusColVectorXcf *self,std::complex< float > v){ self->fill(v); }
SWIGINTERN std::complex< float > const *Octopus_OctopusColVectorXcf_data__SWIG(Octopus::OctopusColVectorXcf *self){ return self->data(); }
SWIGINTERN void Octopus_OctopusColVectorXcf_copy__SWIG_0(Octopus::OctopusColVectorXcf *self,size_t n,std::complex< float > *p){
                self->resize(n);
                for(size_t i = 0; i < n; i++) (*self)(i) = p[i];
            }
SWIGINTERN void Octopus_OctopusColVectorXcf_copy__SWIG_1(Octopus::OctopusColVectorXcf *self,size_t n,std::complex< double > *p){
                self->resize(n);
                for(size_t i = 0; i < n; i++) (*self)(i) = p[i];
            }
SWIGINTERN Octopus::OctopusColVectorXcf Octopus_OctopusColVectorXcf___add____SWIG_2(Octopus::OctopusColVectorXcf *self,std::complex< float > b){
                OctopusColVectorXcf r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) + b;
                return r;
            }
SWIGINTERN Octopus::OctopusColVectorXcf Octopus_OctopusColVectorXcf___sub____SWIG_2(Octopus::OctopusColVectorXcf *self,std::complex< float > b){
                OctopusColVectorXcf r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) - b;
                return r;
            }
SWIGINTERN Octopus::OctopusColVectorXcf Octopus_OctopusColVectorXcf___mul____SWIG_2(Octopus::OctopusColVectorXcf *self,std::complex< float > b){
                OctopusColVectorXcf r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) * b;
                return r;
            }
SWIGINTERN Octopus::OctopusColVectorXcf Octopus_OctopusColVectorXcf___div____SWIG_2(Octopus::OctopusColVectorXcf *self,std::complex< float > b){
                OctopusColVectorXcf r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) / b;
                return r;
            }
SWIGINTERN void Octopus_OctopusColVectorXcd___setitem____SWIG(Octopus::OctopusColVectorXcd *self,size_t i,std::complex< double > v){ (*self)(i) = v; }
SWIGINTERN size_t Octopus_OctopusColVectorXcd_size__SWIG_1(Octopus::OctopusColVectorXcd const *self){ return self->size(1); }
SWIGINTERN void Octopus_OctopusColVectorXcd_fill__SWIG_1(Octopus::OctopusColVectorXcd *self,std::complex< double > v){ self->fill(v); }
SWIGINTERN std::complex< double > const *Octopus_OctopusColVectorXcd_data__SWIG(Octopus::OctopusColVectorXcd *self){ return self->data(); }
SWIGINTERN void Octopus_OctopusColVectorXcd_copy__SWIG(Octopus::OctopusColVectorXcd *self,size_t n,std::complex< double > *p){
                self->resize(n);
                for(size_t i = 0; i < n; i++) (*self)(i) = p[i];
            }
SWIGINTERN Octopus::OctopusColVectorXcd Octopus_OctopusColVectorXcd___add____SWIG_2(Octopus::OctopusColVectorXcd *self,std::complex< double > b){
                OctopusColVectorXcd r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) + b;
                return r;
            }
SWIGINTERN Octopus::OctopusColVectorXcd Octopus_OctopusColVectorXcd___sub____SWIG_2(Octopus::OctopusColVectorXcd *self,std::complex< double > b){
                OctopusColVectorXcd r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) - b;
                return r;
            }
SWIGINTERN Octopus::OctopusColVectorXcd Octopus_OctopusColVectorXcd___mul____SWIG_2(Octopus::OctopusColVectorXcd *self,std::complex< double > b){
                OctopusColVectorXcd r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) * b;
                return r;
            }
SWIGINTERN Octopus::OctopusColVectorXcd Octopus_OctopusColVectorXcd___div____SWIG_2(Octopus::OctopusColVectorXcd *self,std::complex< double > b){
                OctopusColVectorXcd r(self->size(1));
                for(size_t i = 0; i < self->size(1); i++)
                    r(i) = (*self)(i) / b;
                return r;
            }
SWIGINTERN Octopus::MatrixViewXf Octopus_OctopusMatrixXf___getitem____SWIG(Octopus::OctopusMatrixXf *self,size_t i){ return MatrixViewXf(self,i); }
SWIGINTERN size_t Octopus_OctopusMatrixXf_rows__SWIG_1(Octopus::OctopusMatrixXf *self){ return self->rows(); }
SWIGINTERN size_t Octopus_OctopusMatrixXf_cols__SWIG_1(Octopus::OctopusMatrixXf *self){ return self->cols(); }
SWIGINTERN void Octopus_OctopusMatrixXf_fill__SWIG_1(Octopus::OctopusMatrixXf *self,float v){ self->fill(v); }
SWIGINTERN float const *Octopus_OctopusMatrixXf_data__SWIG(Octopus::OctopusMatrixXf *self){ return self->data(); }
SWIGINTERN void Octopus_OctopusMatrixXf_copy__SWIG_0(Octopus::OctopusMatrixXf *self,size_t m,size_t n,double *p){
                self->resize(m,n);
                for(size_t i = 0; i < self->rows(); i++)
                for(size_t j = 0; j < self->cols(); j++)
                    (*self)(i,j) = p[i*n + j];
            }
SWIGINTERN void Octopus_OctopusMatrixXf_copy__SWIG_1(Octopus::OctopusMatrixXf *self,size_t m,size_t n,float *p){
                self->resize(m,n);
                for(size_t i = 0; i < self->rows(); i++)
                for(size_t j = 0; j < self->cols(); j++)
                    (*self)(i,j) = p[i*n + j];
            }
SWIGINTERN double Octopus_OctopusMatrixXd_get__SWIG(Octopus::OctopusMatrixXd *self,size_t i,size_t j){ return (*self)(i,j); }
SWIGINTERN void Octopus_OctopusMatrixXd_set__SWIG(Octopus::OctopusMatrixXd *self,size_t i,size_t j,double v){ (*self)(i,j) = v; }
SWIGINTERN size_t Octopus_OctopusMatrixXd_rows__SWIG_1(Octopus::OctopusMatrixXd *self){ return self->rows(); }
SWIGINTERN size_t Octopus_OctopusMatrixXd_cols__SWIG_1(Octopus::OctopusMatrixXd *self){ return self->cols(); }
SWIGINTERN Octopus::MatrixViewXd Octopus_OctopusMatrixXd___getitem____SWIG(Octopus::OctopusMatrixXd *self,size_t i){ return MatrixViewXd(self,i); }
SWIGINTERN size_t Octopus_OctopusMatrixXd_rows__SWIG_2(Octopus::OctopusMatrixXd *self){ return self->rows(); }
SWIGINTERN size_t Octopus_OctopusMatrixXd_cols__SWIG_2(Octopus::OctopusMatrixXd *self){ return self->cols(); }
SWIGINTERN void Octopus_OctopusMatrixXd_fill__SWIG_1(Octopus::OctopusMatrixXd *self,double v){ self->fill(v); }
SWIGINTERN double const *Octopus_OctopusMatrixXd_data__SWIG(Octopus::OctopusMatrixXd *self){ return self->data(); }
SWIGINTERN void Octopus_OctopusMatrixXd_copy__SWIG_0(Octopus::OctopusMatrixXd *self,size_t m,size_t n,float *p){
                self->resize(m,n);
                for(size_t i = 0; i < self->rows(); i++)
                for(size_t j = 0; j < self->cols(); j++)
                    (*self)(i,j) = p[i*n + j];
            }
SWIGINTERN void Octopus_OctopusMatrixXd_copy__SWIG_1(Octopus::OctopusMatrixXd *self,size_t m,size_t n,double *p){
                self->resize(m,n);
                for(size_t i = 0; i < self->rows(); i++)
                for(size_t j = 0; j < self->cols(); j++)
                    (*self)(i,j) = p[i*n + j];
            }
SWIGINTERN Octopus::MatrixViewXcf Octopus_OctopusMatrixXcf___getitem____SWIG(Octopus::OctopusMatrixXcf *self,size_t i){ return MatrixViewXcf(self,i); }
SWIGINTERN size_t Octopus_OctopusMatrixXcf_rows__SWIG_1(Octopus::OctopusMatrixXcf *self){ return self->rows(); }
SWIGINTERN size_t Octopus_OctopusMatrixXcf_cols__SWIG_1(Octopus::OctopusMatrixXcf *self){ return self->cols(); }
SWIGINTERN void Octopus_OctopusMatrixXcf_fill__SWIG_1(Octopus::OctopusMatrixXcf *self,std::complex< float > v){ self->fill(v); }
SWIGINTERN std::complex< float > const *Octopus_OctopusMatrixXcf_data__SWIG(Octopus::OctopusMatrixXcf *self){ return self->data(); }
SWIGINTERN void Octopus_OctopusMatrixXcf_copy__SWIG_0(Octopus::OctopusMatrixXcf *self,size_t m,size_t n,std::complex< float > *p){
                self->resize(m,n);
                for(size_t i = 0; i < self->rows(); i++)
                for(size_t j = 0; j < self->cols(); j++)
                    (*self)(i,j) = p[i*n + j];
            }
SWIGINTERN void Octopus_OctopusMatrixXcf_copy__SWIG_1(Octopus::OctopusMatrixXcf *self,size_t m,size_t n,std::complex< double > *p){
                self->resize(m,n);
                for(size_t i = 0; i < self->rows(); i++)
                for(size_t j = 0; j < self->cols(); j++)
                    (*self)(i,j) = p[i*n + j];
            }
SWIGINTERN Octopus::MatrixViewXcd Octopus_OctopusMatrixXcd___getitem____SWIG(Octopus::OctopusMatrixXcd *self,size_t i){ return MatrixViewXcd(self,i); }
SWIGINTERN size_t Octopus_OctopusMatrixXcd_rows__SWIG_1(Octopus::OctopusMatrixXcd *self){ return self->rows(); }
SWIGINTERN size_t Octopus_OctopusMatrixXcd_cols__SWIG_1(Octopus::OctopusMatrixXcd *self){ return self->cols(); }
SWIGINTERN void Octopus_OctopusMatrixXcd_fill__SWIG_1(Octopus::OctopusMatrixXcd *self,std::complex< double > v){ self->fill(v); }
SWIGINTERN std::complex< double > const *Octopus_OctopusMatrixXcd_data__SWIG(Octopus::OctopusMatrixXcd *self){ return self->data(); }
SWIGINTERN void Octopus_OctopusMatrixXcd_copy__SWIG_0(Octopus::OctopusMatrixXcd *self,size_t m,size_t n,std::complex< double > *p){
                self->resize(m,n);
                for(size_t i = 0; i < self->rows(); i++)
                for(size_t j = 0; j < self->cols(); j++)
                    (*self)(i,j) = p[i*n + j];
            }
SWIGINTERN void Octopus_OctopusMatrixXcd_copy__SWIG_1(Octopus::OctopusMatrixXcd *self,size_t m,size_t n,std::complex< float > *p){
                self->resize(m,n);
                for(size_t i = 0; i < self->rows(); i++)
                for(size_t j = 0; j < self->cols(); j++)
                    (*self)(i,j) = p[i*n + j];
            }

namespace Octopus
{
  OctopusValueList evalFunc(const std::string& func, const OctopusValueList& inputs, int noutputs=1)
  {          
      octave_value_list out = octave::feval(func.c_str(), inputs.vlist, noutputs);
      return OctopusValueList(out);
  }

  OctopusValueList Function::eval(const OctopusValueList &input, int numOutputs)
  {
      return evalFunc(name,input,numOutputs);
  }
    
  Function octave_fft= Function("fft");
  Function octave_ifft= Function("ifft");
  Function octave_fft2= Function("fft2");
  Function octave_ifft2= Function("ifft2");
  Function octave_fftconv= Function("fftconv");
  Function octave_fftfilt= Function("fftfilt");
  Function octave_fftn= Function("fftn");
  Function octave_fftshift= Function("fftshift");
  Function octave_fftw= Function("fftw");
  Function octave_ifftn= Function("ifftn");
  Function octave_ifftshift= Function("ifftshift");
  Function octave_ifht= Function("ifht");
  Function octave_ifourier= Function("ifourier");
  Function octave_ifwht= Function("ifwht");
  Function octave_ifwt= Function("ifwt");
  Function octave_ifwt2= Function("ifwt2");
  Function octave_buffer= Function("buffer");
  Function octave_chirp= Function("chirp");
  Function octave_cmorwavf= Function("cmorwavf");
  Function octave_gauspuls= Function("gauspuls");
  Function octave_gmonopuls= Function("gmonopuls");
  Function octave_mexihat= Function("mexihat");
  Function octave_meyeraux= Function("meyeraux");
  Function octave_morlet= Function("morlet");
  Function octave_pulstran= Function("pulstran");
  Function octave_rectpuls= Function("rectpuls");
  Function octave_sawtooth= Function("sawtooth");
  Function octave_shanwavf= Function("shanwavf");
  Function octave_shiftdata= Function("shiftdata");
  Function octave_sigmoid_train= Function("sigmoid_train");
  Function octave_specgram= Function("specgram");
  Function octave_square= Function("square");
  Function octave_tripuls= Function("tripuls");
  Function octave_udecode= Function("udecode");
  Function octave_uencoder= Function("uencoder");
  Function octave_unshiftdata= Function("unshiftdata");
  Function octave_findpeaks= Function("findpeaks");
  Function octave_peak2peak= Function("peak2peak");
  Function octave_peak2rms= Function("peak2rms");
  Function octave_rms= Function("rms");
  Function octave_rssq= Function("rssq");
  Function octave_cconv= Function("cconv");
  Function octave_convmtx= Function("convmtx");
  Function octave_wconv= Function("wconv");
  Function octave_xcorr= Function("xcorr");
  Function octave_xcorr2= Function("xcorr2");
  Function octave_xcov= Function("xcov");
  Function octave_filtfilt= Function("filtfilt");
  Function octave_fltic= Function("fltic");
  Function octave_medfilt1= Function("medfilt1");
  Function octave_movingrms= Function("movingrms");
  Function octave_sgolayfilt= Function("sgolayfilt");
  Function octave_sosfilt= Function("sosfilt");
  Function octave_freqs= Function("freqs");
  Function octave_freqs_plot= Function("freqs_plot");
  Function octave_freqz= Function("freqz");
  Function octave_freqz_plot= Function("freqz_plot");
  Function octave_impz= Function("impz");
  Function octave_zplane= Function("zplane");
  Function octave_filter= Function("filter");
  Function octave_filter2= Function("filter2");
  Function octave_fir1= Function("fir1");
  Function octave_fir2= Function("fir2");
  Function octave_firls= Function("firls");
  Function octave_sinc= Function("sinc");
  Function octave_unwrap= Function("unwrap");
  Function octave_bartlett= Function("bartlett");
  Function octave_blackman= Function("blackman");
  Function octave_blackmanharris= Function("blackmanharris");
  Function octave_blackmannuttal= Function("blackmannuttal");
  Function octave_dftmtx= Function("dftmtx");
  Function octave_hamming= Function("hamming");
  Function octave_hann= Function("hann");
  Function octave_hanning= Function("hanning");
  Function octave_pchip= Function("pchip");
  Function octave_periodogram= Function("periodogram");
  Function octave_sinetone= Function("sinetone");
  Function octave_sinewave= Function("sinewave");
  Function octave_spectral_adf= Function("spectral_adf");
  Function octave_spectral_xdf= Function("spectral_xdf");
  Function octave_spencer= Function("spencer");
  Function octave_stft= Function("stft");
  Function octave_synthesis= Function("synthesis");
  Function octave_yulewalker= Function("yulewalker");
  Function octave_polystab= Function("polystab");
  Function octave_residued= Function("residued");
  Function octave_residuez= Function("residuez");
  Function octave_sos2ss= Function("sos2ss");
  Function octave_sos2tf= Function("sos2tf");
  Function octave_sos2zp= Function("sos2zp");
  Function octave_ss2tf= Function("ss2tf");
  Function octave_ss2zp= Function("ss2zp");
  Function octave_tf2sos= Function("tf2sos");
  Function octave_tf2ss= Function("tf2ss");
  Function octave_tf2zp= Function("tf2zp");
  Function octave_zp2sos= Function("zp2sos");
  Function octave_zp2ss= Function("zp2ss");
  Function octave_zp2tf= Function("zp2tf");
  Function octave_besselap= Function("besselap");
  Function octave_besself= Function("besself");
  Function octave_bilinear= Function("bilinear");
  Function octave_buttap= Function("buttap");
  Function octave_butter= Function("butter");
  Function octave_buttord= Function("buttord");
  Function octave_cheb= Function("cheb");
  Function octave_cheb1ap= Function("cheb1ap");
  Function octave_cheb1ord= Function("cheb1ord");
  Function octave_cheb2ap= Function("cheb2ap");
  Function octave_cheb2ord= Function("cheb2ord");
  Function octave_chebywin= Function("chebywin");
  Function octave_cheby1= Function("cheby1");
  Function octave_cheby2= Function("cheby2");
  Function octave_ellip= Function("ellip");
  Function octave_ellipap= Function("ellipap");
  Function octave_ellipord= Function("ellipord");
  Function octave_impinvar= Function("impinvar");
  Function octave_ncauer= Function("ncauer");
  Function octave_pei_tseng_notch= Function("pei_tseng_notch");
  Function octave_sftrans= Function("sftrans");
  Function octave_cl2bp= Function("cl2bp");
  Function octave_kaiserord= Function("kaiserord");
  Function octave_qp_kaiser= Function("qp_kaiser");
  Function octave_remez= Function("remez");
  Function octave_sgplay= Function("sgplay");
  Function octave_bitrevorder= Function("bitrevorder");
  Function octave_cceps= Function("cceps");
  Function octave_cplxreal= Function("cplxreal");
  Function octave_czt= Function("czt");
  Function octave_dct= Function("dct");
  Function octave_dct2= Function("dct2");
  Function octave_dctmtx= Function("dctmtx");
  Function octave_digitrevorder= Function("digitrevorder");
  Function octave_dst= Function("dst");
  Function octave_dwt= Function("dwt");
  Function octave_rceps= Function("rceps");
  Function octave_ar_psd= Function("ar_psd");
  Function octave_cohere= Function("cohere");
  Function octave_cpsd= Function("cpsd");
  Function octave_csd= Function("csd");
  Function octave_db2pow= Function("db2pow");
  Function octave_mscohere= Function("mscohere");
  Function octave_pburg= Function("pburg");
  Function octave_pow2db= Function("pow2db");
  Function octave_pwelch= Function("pwelch");
  Function octave_pyulear= Function("pyulear");
  Function octave_tfe= Function("tfe");
  Function octave_tfestimate= Function("tfestimate");
  Function octave___power= Function("__power");
  Function octave_barthannwin= Function("barthannwin");
  Function octave_bohmanwin= Function("bohmanwin");
  Function octave_boxcar= Function("boxcar");
  Function octave_flattopwin= Function("flattopwin");
  Function octave_chebwin= Function("chebwin");
  Function octave_gaussian= Function("gaussian");
  Function octave_gausswin= Function("gausswin");
  Function octave_kaiser= Function("kaiser");
  Function octave_nuttalwin= Function("nuttalwin");
  Function octave_parzenwin= Function("parzenwin");
  Function octave_rectwin= Function("rectwin");
  Function octave_tukeywin= Function("tukeywin");
  Function octave_ultrwin= Function("ultrwin");
  Function octave_welchwin= Function("welchwin");
  Function octave_window= Function("window");
  Function octave_arburg= Function("arburg");
  Function octave_aryule= Function("aryule");
  Function octave_invfreq= Function("invfreq");
  Function octave_invfreqz= Function("invfreqz");
  Function octave_invfreqs= Function("invfreqs");
  Function octave_levinson= Function("levinson");
  Function octave_data2fun= Function("data2fun");
  Function octave_decimate= Function("decimate");
  Function octave_interp= Function("interp");
  Function octave_resample= Function("resample");
  Function octave_upfirdn= Function("upfirdn");
  Function octave_upsample= Function("upsample");
  Function octave_clustersegment= Function("clustersegment");
  Function octave_fracshift= Function("fracshift");
  Function octave_marcumq= Function("marcumq");
  Function octave_primitive= Function("primitive");
  Function octave_sampled2continuous= Function("sampled2continuous");
  Function octave_schtrig= Function("schtrig");
  Function octave_upsamplefill= Function("upsamplefill");
  Function octave_wkeep= Function("wkeep");
  Function octave_wrev= Function("wrev");
  Function octave_zerocrossing= Function("zerocrossing");
  Function octave_fht= Function("fht");
  Function octave_fwht= Function("fwht");
  Function octave_hilbert= Function("hilbert");
  Function octave_idct= Function("idct");
  Function octave_idct2= Function("idct2");
  Function octave_max= Function("max");
  Function octave_mean= Function("mean");
  Function octave_meansq= Function("meansq");
  Function octave_median= Function("median");
  Function octave_min= Function("min");
  Function octave_plot= Function("plot");
  Function octave_pause= Function("pause");
  Function octave_abs= Function("abs");
  Function octave_accumarray= Function("accumarray");
  Function octave_accumdim= Function("accumdim");
  Function octave_acos= Function("acos");
  Function octave_acosd= Function("acosd");
  Function octave_acosh= Function("acosh");
  Function octave_acot= Function("acot");
  Function octave_acotd= Function("acotd");
  Function octave_acoth= Function("acoth");
  Function octave_acsc= Function("acsc");
  Function octave_acsch= Function("acsch");
  Function octave_acscd= Function("acscd");
  Function octave_airy= Function("airy");
  Function octave_adjoint= Function("adjoint");
  Function octave_all= Function("all");
  Function octave_allow_non_integer_range_as_index= Function("allow_non_integer_range_as_index");
  Function octave_amd= Function("amd");
  Function octave_ancestor= Function("ancestor");
  Function octave_and= Function("and");
  Function octave_angle= Function("angle");
  Function octave_annotation= Function("annotation");
  Function octave_anova= Function("anova");
  Function octave_ans= Function("ans");
  Function octave_any= Function("any");
  Function octave_arch_fit= Function("arch_fit");
  Function octave_arch_rnd= Function("arch_rnd");
  Function octave_arch_test= Function("arch_test");
  Function octave_area= Function("area");
  Function octave_arg= Function("arg");
  Function octave_arrayfun= Function("arrayfun");
  Function octave_asec= Function("asec");
  Function octave_asecd= Function("asecd");
  Function octave_asech= Function("asech");
  Function octave_asin= Function("asin");
  Function octave_asind= Function("asind");
  Function octave_asinh= Function("asinh");
  Function octave_assume= Function("assume");
  Function octave_assumptions= Function("assumptions");
  Function octave_atan= Function("atan");
  Function octave_atand= Function("atand");
  Function octave_atanh= Function("atanh");
  Function octave_atan2= Function("atan2");
  Function octave_audiodevinfo= Function("audiodevinfo");
  Function octave_audioformats= Function("audioformats");
  Function octave_audioinfo= Function("audioinfo");
  Function octave_audioread= Function("audioread");
  Function octave_audiowrite= Function("audiowrite");
  Function octave_autoreg_matrix= Function("autoreg_matrix");
  Function octave_autumn= Function("autumn");
  Function octave_axes= Function("axes");
  Function octave_axis= Function("axis");
  Function octave_balance= Function("balance");
  Function octave_bandwidth= Function("bandwidth");
  Function octave_bar= Function("bar");
  Function octave_barh= Function("barh");
  Function octave_bathannwin= Function("bathannwin");
  Function octave_bartlett_test= Function("bartlett_test");
  Function octave_base2dec= Function("base2dec");
  Function octave_base64_decode= Function("base64_decode");
  Function octave_base64_encode= Function("base64_encode");
  Function octave_beep= Function("beep");
  Function octave_beep_on_error= Function("beep_on_error");
  Function octave_bernoulli= Function("bernoulli");
  Function octave_besseli= Function("besseli");
  Function octave_besseljn= Function("besseljn");
  Function octave_besselk= Function("besselk");
  Function octave_bessely= Function("bessely");
  Function octave_beta= Function("beta");
  Function octave_betacdf= Function("betacdf");
  Function octave_betainc= Function("betainc");
  Function octave_betaincinv= Function("betaincinv");
  Function octave_betainv= Function("betainv");
  Function octave_betain= Function("betain");
  Function octave_betapdf= Function("betapdf");
  Function octave_betarnd= Function("betarnd");
  Function octave_bicg= Function("bicg");
  Function octave_bicgstab= Function("bicgstab");
  Function octave_bin2dec= Function("bin2dec");
  Function octave_bincoeff= Function("bincoeff");
  Function octave_binocdf= Function("binocdf");
  Function octave_binoinv= Function("binoinv");
  Function octave_binopdf= Function("binopdf");
  Function octave_binornd= Function("binornd");
  Function octave_bitand= Function("bitand");
  Function octave_bitcmp= Function("bitcmp");
  Function octave_bitget= Function("bitget");
  Function octave_bitor= Function("bitor");
  Function octave_bitpack= Function("bitpack");
  Function octave_bitset= Function("bitset");
  Function octave_bitshift= Function("bitshift");
  Function octave_bitunpack= Function("bitunpack");
  Function octave_bitxor= Function("bitxor");
  Function octave_blanks= Function("blanks");
  Function octave_blkdiag= Function("blkdiag");
  Function octave_blkmm= Function("blkmm");
  Function octave_bone= Function("bone");
  Function octave_box= Function("box");
  Function octave_brighten= Function("brighten");
  Function octave_bsxfun= Function("bsxfun");
  Function octave_builtin= Function("builtin");
  Function octave_bzip2= Function("bzip2");
  Function octave_calendar= Function("calendar");
  Function octave_camlight= Function("camlight");
  Function octave_cart2pol= Function("cart2pol");
  Function octave_cart2sph= Function("cart2sph");
  Function octave_cast= Function("cast");
  Function octave_cat= Function("cat");
  Function octave_catalan= Function("catalan");
  Function octave_cauchy= Function("cauchy");
  Function octave_cauchy_cdf= Function("cauchy_cdf");
  Function octave_cauchy_inv= Function("cauchy_inv");
  Function octave_cauchy_pdf= Function("cauchy_pdf");
  Function octave_cauchy_rnd= Function("cauchy_rnd");
  Function octave_caxis= Function("caxis");
  Function octave_cbrt= Function("cbrt");
  Function octave_ccode= Function("ccode");
  Function octave_ccolamd= Function("ccolamd");
  Function octave_ceil= Function("ceil");
  Function octave_center= Function("center");
  Function octave_centroid= Function("centroid");
  Function octave_cgs= Function("cgs");
  Function octave_chi2cdf= Function("chi2cdf");
  Function octave_chi2inv= Function("chi2inv");
  Function octave_chi2pdf= Function("chi2pdf");
  Function octave_chi2rnd= Function("chi2rnd");
  Function octave_children= Function("children");
  Function octave_chisquare_test_homogeneity= Function("chisquare_test_homogeneity");
  Function octave_chebyshevpoly= Function("chebyshevpoly");
  Function octave_chebyshevT= Function("chebyshevT");
  Function octave_chebyshevU= Function("chebyshevU");
  Function octave_chol= Function("chol");
  Function octave_chol2inv= Function("chol2inv");
  Function octave_choldelete= Function("choldelete");
  Function octave_cholinsert= Function("cholinsert");
  Function octave_colinv= Function("colinv");
  Function octave_cholshift= Function("cholshift");
  Function octave_cholupdate= Function("cholupdate");
  Function octave_chop= Function("chop");
  Function octave_circshift= Function("circshift");
  Function octave_cla= Function("cla");
  Function octave_clabel= Function("clabel");
  Function octave_clc= Function("clc");
  Function octave_clf= Function("clf");
  Function octave_clock= Function("clock");
  Function octave_cloglog= Function("cloglog");
  Function octave_cmpermute= Function("cmpermute");
  Function octave_cmunique= Function("cmunique");
  Function octave_coeffs= Function("coeffs");
  Function octave_colamd= Function("colamd");
  Function octave_colloc= Function("colloc");
  Function octave_colon= Function("colon");
  Function octave_colorbar= Function("colorbar");
  Function octave_colorcube= Function("colorcube");
  Function octave_colormap= Function("colormap");
  Function octave_colperm= Function("colperm");
  Function octave_columns= Function("columns");
  Function octave_comet= Function("comet");
  Function octave_compan= Function("compan");
  Function octave_compass= Function("compass");
  Function octave_complex= Function("complex");
  Function octave_computer= Function("computer");
  Function octave_cond= Function("cond");
  Function octave_condeig= Function("condeig");
  Function octave_condest= Function("condest");
  Function octave_conj= Function("conj");
  Function octave_contour= Function("contour");
  Function octave_contour3= Function("contour3");
  Function octave_contourc= Function("contourc");
  Function octave_contourf= Function("contourf");
  Function octave_contrast= Function("contrast");
  Function octave_conv= Function("conv");
  Function octave_conv2= Function("conv2");
  Function octave_convhull= Function("convhull");
  Function octave_convhulln= Function("convhulln");
  Function octave_cool= Function("cool");
  Function octave_copper= Function("copper");
  Function octave_copyfile= Function("copyfile");
  Function octave_copyobj= Function("copyobj");
  Function octave_cor_test= Function("cor_test");
  Function octave_cos= Function("cos");
  Function octave_cosd= Function("cosd");
  Function octave_cosh= Function("cosh");
  Function octave_coshint= Function("coshint");
  Function octave_cosint= Function("cosint");
  Function octave_cot= Function("cot");
  Function octave_cotd= Function("cotd");
  Function octave_coth= Function("coth");
  Function octave_cov= Function("cov");
  Function octave_cplxpair= Function("cplxpair");
  Function octave_cputime= Function("cputime");
  Function octave_cross= Function("cross");
  Function octave_csc= Function("csc");
  Function octave_cscd= Function("cscd");
  Function octave_csch= Function("csch");
  Function octave_cstrcat= Function("cstrcat");
  Function octave_cstrcmp= Function("cstrcmp");
  Function octave_csvread= Function("csvread");
  Function octave_csvwrite= Function("csvwrite");
  Function octave_csymamd= Function("csymamd");
  Function octave_ctime= Function("ctime");
  Function octave_ctranspose= Function("ctranspose");
  Function octave_cubehelix= Function("cubehelix");
  Function octave_cummax= Function("cummax");
  Function octave_cummin= Function("cummin");
  Function octave_cumprod= Function("cumprod");
  Function octave_cumsum= Function("cumsum");
  Function octave_cumtrapz= Function("cumtrapz");
  Function octave_cylinder= Function("cylinder");
  Function octave_daspect= Function("daspect");
  Function octave_daspk= Function("daspk");
  Function octave_dasrt_options= Function("dasrt_options");
  Function octave_dassl= Function("dassl");
  Function octave_dassl_options= Function("dassl_options");
  Function octave_date= Function("date");
  Function octave_datenum= Function("datenum");
  Function octave_datestr= Function("datestr");
  Function octave_datetick= Function("datetick");
  Function octave_dawson= Function("dawson");
  Function octave_dbclear= Function("dbclear");
  Function octave_dbcont= Function("dbcont");
  Function octave_dbdown= Function("dbdown");
  Function octave_dblist= Function("dblist");
  Function octave_dblquad= Function("dblquad");
  Function octave_dbquit= Function("dbquit");
  Function octave_dbstack= Function("dbstack");
  Function octave_dbstatus= Function("dbstatus");
  Function octave_dbstep= Function("dbstep");
  Function octave_dbstop= Function("dbstop");
  Function octave_dbtype= Function("dbtype");
  Function octave_dbup= Function("dbup");
  Function octave_dbwhere= Function("dbwhere");
  Function octave_deal= Function("deal");
  Function octave_deblank= Function("deblank");
  Function octave_dec2base= Function("dec2base");
  Function octave_dec2hex= Function("dec2hex");
  Function octave_deconv= Function("deconv");
  Function octave_deg2rad= Function("deg2rad");
  Function octave_del2= Function("del2");
  Function octave_delaunay= Function("delaunay");
  Function octave_delaunayn= Function("delaunayn");
  Function octave_det= Function("det");
  Function octave_detrend= Function("detrend");
  Function octave_diag= Function("diag");
  Function octave_diff= Function("diff");
  Function octave_diffpara= Function("diffpara");
  Function octave_diffuse= Function("diffuse");
  Function octave_digits= Function("digits");
  Function octave_dilog= Function("dilog");
  Function octave_dir= Function("dir");
  Function octave_dirac= Function("dirac");
  Function octave_discrete_cdf= Function("discrete_cdf");
  Function octave_discrete_inv= Function("discrete_inv");
  Function octave_discrete_pdf= Function("discrete_pdf");
  Function octave_discrete_rnd= Function("discrete_rnd");
  Function octave_disp= Function("disp");
  Function octave_display= Function("display");
  Function octave_divergence= Function("divergence");
  Function octave_dimread= Function("dimread");
  Function octave_dimwrite= Function("dimwrite");
  Function octave_dmperm= Function("dmperm");
  Function octave_do_string_escapes= Function("do_string_escapes");
  Function octave_doc= Function("doc");
  Function octave_dot= Function("dot");
  Function octave_double= Function("double");
  Function octave_downsample= Function("downsample");
  Function octave_dsearch= Function("dsearch");
  Function octave_dsearchn= Function("dsearchn");
  Function octave_dsolve= Function("dsolve");
  Function octave_dup2= Function("dup2");
  Function octave_duplication_matrix= Function("duplication_matrix");
  Function octave_durblevinson= Function("durblevinson");
  Function octave_e= Function("e");
  Function octave_ei= Function("ei");
  Function octave_eig= Function("eig");
  Function octave_ellipke= Function("ellipke");
  Function octave_ellipsoid= Function("ellipsoid");
  Function octave_ellipticCE= Function("ellipticCE");
  Function octave_ellipticCK= Function("ellipticCK");
  Function octave_ellipticCPi= Function("ellipticCPi");
  Function octave_ellipticE= Function("ellipticE");
  Function octave_ellipticF= Function("ellipticF");
  Function octave_ellipticK= Function("ellipticK");
  Function octave_ellipticPi= Function("ellipticPi");
  Function octave_empirical_cdf= Function("empirical_cdf");
  Function octave_empirical_inv= Function("empirical_inv");
  Function octave_empirical_pdf= Function("empirical_pdf");
  Function octave_empirical_rnd= Function("empirical_rnd");
  Function octave_end= Function("end");
  Function octave_endgrent= Function("endgrent");
  Function octave_endpwent= Function("endpwent");
  Function octave_eomday= Function("eomday");
  Function octave_eps= Function("eps");
  Function octave_eq= Function("eq");
  Function octave_equationsToMatrix= Function("equationsToMatrix");
  Function octave_erf= Function("erf");
  Function octave_erfc= Function("erfc");
  Function octave_erfinv= Function("erfinv");
  Function octave_erfi= Function("erfi");
  Function octave_errno= Function("errno");
  Function octave_error= Function("error");
  Function octave_error_ids= Function("error_ids");
  Function octave_errorbar= Function("errorbar");
  Function octave_etime= Function("etime");
  Function octave_etree= Function("etree");
  Function octave_etreeplot= Function("etreeplot");
  Function octave_eulier= Function("eulier");
  Function octave_eulergamma= Function("eulergamma");
  Function octave_evalin= Function("evalin");
  Function octave_exp= Function("exp");
  Function octave_expand= Function("expand");
  Function octave_expcdf= Function("expcdf");
  Function octave_expint= Function("expint");
  Function octave_expinv= Function("expinv");
  Function octave_expm= Function("expm");
  Function octave_expm1= Function("expm1");
  Function octave_exppdf= Function("exppdf");
  Function octave_exprnd= Function("exprnd");
  Function octave_eye= Function("eye");
  Function octave_ezcontour= Function("ezcontour");
  Function octave_ezcontourf= Function("ezcontourf");
  Function octave_ezmesh= Function("ezmesh");
  Function octave_explot= Function("explot");
  Function octave_ezplot3= Function("ezplot3");
  Function octave_ezsurf= Function("ezsurf");
  Function octave_ezpolar= Function("ezpolar");
  Function octave_ezsurfc= Function("ezsurfc");
  Function octave_f_test_regression= Function("f_test_regression");
  Function octave_factor= Function("factor");
  Function octave_factorial= Function("factorial");
  Function octave_false= Function("false");
  Function octave_fcdf= Function("fcdf");
  Function octave_fclear= Function("fclear");
  Function octave_fcntl= Function("fcntl");
  Function octave_fdisp= Function("fdisp");
  Function octave_feather= Function("feather");
  Function octave_ff2n= Function("ff2n");
  Function octave_fibonacci= Function("fibonacci");
  Function octave_find= Function("find");
  Function octave_findsym= Function("findsym");
  Function octave_finiteset= Function("finiteset");
  Function octave_finv= Function("finv");
  Function octave_fix= Function("fix");
  Function octave_flintmax= Function("flintmax");
  Function octave_flip= Function("flip");
  Function octave_flipir= Function("flipir");
  Function octave_flipud= Function("flipud");
  Function octave_floor= Function("floor");
  Function octave_fminbnd= Function("fminbnd");
  Function octave_fminunc= Function("fminunc");
  Function octave_formula= Function("formula");
  Function octave_fortran= Function("fortran");
  Function octave_fourier= Function("fourier");
  Function octave_fpdf= Function("fpdf");
  Function octave_fplot= Function("fplot");
  Function octave_frac= Function("frac");
  Function octave_fractdiff= Function("fractdiff");
  Function octave_frame2im= Function("frame2im");
  Function octave_freport= Function("freport");
  Function octave_fresneic= Function("fresneic");
  Function octave_frnd= Function("frnd");
  Function octave_fskipl= Function("fskipl");
  Function octave_fsolve= Function("fsolve");
  Function octave_full= Function("full");
  Function octave_fwhm= Function("fwhm");
  Function octave_fzero= Function("fzero");
  Function octave_gallery= Function("gallery");
  Function octave_gamcdf= Function("gamcdf");
  Function octave_gaminv= Function("gaminv");
  Function octave_gamma= Function("gamma");
  Function octave_gammainc= Function("gammainc");
  Function octave_gammaln= Function("gammaln");
  Function octave_gca= Function("gca");
  Function octave_gcbf= Function("gcbf");
  Function octave_gcbo= Function("gcbo");
  Function octave_gcd= Function("gcd");
  Function octave_ge= Function("ge");
  Function octave_geocdf= Function("geocdf");
  Function octave_geoinv= Function("geoinv");
  Function octave_geopdf= Function("geopdf");
  Function octave_geornd= Function("geornd");
  Function octave_givens= Function("givens");
  Function octave_glpk= Function("glpk");
  Function octave_gmres= Function("gmres");
  Function octave_gmtime= Function("gmtime");
  Function octave_gnplot_binary= Function("gnplot_binary");
  Function octave_gplot= Function("gplot");
  Function octave_gradient= Function("gradient");
  Function octave_gray= Function("gray");
  Function octave_gray2ind= Function("gray2ind");
  Function octave_gt= Function("gt");
  Function octave_gunzip= Function("gunzip");
  Function octave_gzip= Function("gzip");
  Function octave_hadamard= Function("hadamard");
  Function octave_hankel= Function("hankel");
  Function octave_harmonic= Function("harmonic");
  Function octave_has= Function("has");
  Function octave_hash= Function("hash");
  Function octave_heaviside= Function("heaviside");
  Function octave_help= Function("help");
  Function octave_hess= Function("hess");
  Function octave_hex2dec= Function("hex2dec");
  Function octave_hex2num= Function("hex2num");
  Function octave_hilb= Function("hilb");
  Function octave_hilbert_curve= Function("hilbert_curve");
  Function octave_hist= Function("hist");
  Function octave_horner= Function("horner");
  Function octave_horzcat= Function("horzcat");
  Function octave_hot= Function("hot");
  Function octave_housh= Function("housh");
  Function octave_hsv2rgb= Function("hsv2rgb");
  Function octave_hurst= Function("hurst");
  Function octave_hygecdf= Function("hygecdf");
  Function octave_hygeinv= Function("hygeinv");
  Function octave_hygepdf= Function("hygepdf");
  Function octave_hygernd= Function("hygernd");
  Function octave_hypergeom= Function("hypergeom");
  Function octave_hypot= Function("hypot");
  Function octave_I= Function("I");
  Function octave_ichol= Function("ichol");
  Function octave_idist= Function("idist");
  Function octave_idivide= Function("idivide");
  Function octave_igamma= Function("igamma");
  Function octave_ilaplace= Function("ilaplace");
  Function octave_ilu= Function("ilu");
  Function octave_im2double= Function("im2double");
  Function octave_im2frame= Function("im2frame");
  Function octave_im2int16= Function("im2int16");
  Function octave_im2single= Function("im2single");
  Function octave_im2uint16= Function("im2uint16");
  Function octave_im2uint8= Function("im2uint8");
  Function octave_imag= Function("imag");
  Function octave_image= Function("image");
  Function octave_imagesc= Function("imagesc");
  Function octave_imfinfo= Function("imfinfo");
  Function octave_imformats= Function("imformats");
  Function octave_importdata= Function("importdata");
  Function octave_imread= Function("imread");
  Function octave_imshow= Function("imshow");
  Function octave_imwrite= Function("imwrite");
  Function octave_ind2gray= Function("ind2gray");
  Function octave_ind2rgb= Function("ind2rgb");
  Function octave_int2sub= Function("int2sub");
  Function octave_index= Function("index");
  Function octave_inf= Function("Inf");
  Function octave_inpolygon= Function("inpolygon");
  Function octave_input= Function("input");
  Function octave_interp1= Function("interp1");
  Function octave_interp2= Function("interp2");
  Function octave_interp3= Function("interp3");
  Function octave_intersect= Function("intersect");
  Function octave_intmin= Function("intmin");
  Function octave_inv= Function("inv");
  Function octave_invhilb= Function("invhilb");
  Function octave_inimpinvar= Function("inimpinvar");
  Function octave_ipermute= Function("ipermute");
  Function octave_iqr= Function("iqr");
  Function octave_isa= Function("isa");
  Function octave_isequal= Function("isequal");
  Function octave_ishermitian= Function("ishermitian");
  Function octave_isprime= Function("isprime");
  Function octave_jit_enable= Function("jit_enable");
  Function octave_kbhit= Function("kbhit");
  Function octave_kendall= Function("kendall");
  Function octave_kron= Function("kron");
  Function octave_kurtosis= Function("kurtosis");
  Function octave_laplace= Function("laplace");
  Function octave_laplace_cdf= Function("laplace_cdf");
  Function octave_laplace_inv= Function("laplace_inv");
  Function octave_laplace_pdf= Function("laplace_pdf");
  Function octave_laplace_rnd= Function("laplace_rnd");
  Function octave_laplacian= Function("laplacian");
  Function octave_lcm= Function("lcm");
  Function octave_ldivide= Function("ldivide");
  Function octave_le= Function("le");
  Function octave_legendre= Function("legendre");
  Function octave_length= Function("length");
  Function octave_lgamma= Function("lgamma");
  Function octave_limit= Function("limit");
  Function octave_line= Function("line");
  Function octave_linprog= Function("linprog");
  Function octave_linsolve= Function("linsolve");
  Function octave_linspace= Function("linspace");
  Function octave_load= Function("load");
  Function octave_log= Function("log");
  Function octave_log10= Function("log10");
  Function octave_log1p= Function("log1p");
  Function octave_log2= Function("log2");
  Function octave_logical= Function("logical");
  Function octave_logistic_cdf= Function("logistic_cdf");
  Function octave_logistic_inv= Function("logistic_inv");
  Function octave_logistic_pdf= Function("logistic_pdf");
  Function octave_logistic_regression= Function("logistic_regression");
  Function octave_logit= Function("logit");
  Function octave_loglog= Function("loglog");
  Function octave_loglogerr= Function("loglogerr");
  Function octave_logm= Function("logm");
  Function octave_logncdf= Function("logncdf");
  Function octave_logninv= Function("logninv");
  Function octave_lognpdf= Function("lognpdf");
  Function octave_lognrnd= Function("lognrnd");
  Function octave_lognspace= Function("lognspace");
  Function octave_lookup= Function("lookup");
  Function octave_lscov= Function("lscov");
  Function octave_lsode= Function("lsode");
  Function octave_lsqnonneg= Function("lsqnonneg");
  Function octave_lt= Function("lt");
  Function octave_magic= Function("magic");
  Function octave_manova= Function("manova");
  Function octave_minus= Function("minus");
  Function octave_mkpp= Function("mkpp");
  Function octave_mldivide= Function("mldivide");
  Function octave_mod= Function("mod");
  Function octave_moment= Function("moment");
  Function octave_mpoles= Function("mpoles");
  Function octave_mpower= Function("mpower");
  Function octave_mrdivide= Function("mrdivide");
  Function octave_mu2lin= Function("mu2lin");
  Function octave_na= Function("NA");
  Function octave_nan= Function("NaN");
  Function octave_nextpow2= Function("nextpow2");
  Function octave_nnz= Function("nnz");
  Function octave_nonzeros= Function("nonzeros");
  Function octave_norm= Function("norm");
  Function octave_normcdf= Function("normcdf");
  Function octave_normest= Function("normest");
  Function octave_normest1= Function("normest1");
  Function octave_norminv= Function("norminv");
  Function octave_normpdf= Function("normpdf");
  Function octave_normrnd= Function("normrnd");
  Function octave_nth_element= Function("nth_element");
  Function octave_nth_root= Function("nth_root");
  Function octave_null= Function("null");
  Function octave_numel= Function("numel");
  Function octave_ode23= Function("ode23");
  Function octave_ode45= Function("ode45");
  Function octave_ols= Function("ols");
  Function octave_ones= Function("ones");
  Function octave_prod= Function("prod");
  Function octave_power= Function("power");
  Function octave_sin= Function("sin");
  Function octave_sqrt= Function("sqrt");
  Function octave_sum= Function("sum");
  Function octave_sumsq= Function("sumsq");
  Function octave_tan= Function("tan");
  Function octave_tanh= Function("tanh");
  Function octave_sinh= Function("sinh");
  Function octave_bin_values= Function("bin_values");
  Function octave_catmullrom= Function("catmullrom");
  Function octave_csape= Function("csape");
  Function octave_csapi= Function("csapi");
  Function octave_csaps= Function("csaps");
  Function octave_csaps_sel= Function("csaps_sel");
  Function octave_dedup= Function("dedup");
  Function octave_fnder= Function("fnder");
  Function octave_fnplt= Function("fnplt");
  Function octave_fnval= Function("fnval");
  Function octave_regularization= Function("regularization");
  Function octave_regularization2D= Function("regularization2D");
  Function octave_tpaps= Function("tpaps");
  Function octave_tps_val= Function("tps_val");
  Function octave_tps_val_der= Function("tps_val_der");
  //Function octave_rms= Function("rms");
  Function octave_normalize= Function("normalize");
  Function octave_gaindb= Function("gaindb");
  Function octave_crestfactor= Function("crestfactor");
  Function octave_uquant= Function("uquant");
  Function octave_firwin= Function("firwin");
  Function octave_firkaiser= Function("firkaiser");
  Function octave_fir2long= Function("fir2long");
  Function octave_long2fir= Function("long2fir");
  Function octave_freqwin= Function("freqwin");
  Function octave_firfilter= Function("firfilter");
  Function octave_blfilter= Function("blfilter");
  Function octave_warpedblfilter= Function("warpedblfilter");
  Function octave_freqfilter= Function("freqfilter");
  Function octave_pfilt= Function("pfilt");
  Function octave_magresp= Function("magresp");
  Function octave_transferfunction= Function("transferfunction");
  Function octave_pgrdelay= Function("pgrdelay");
  Function octave_rampup= Function("rampup");
  Function octave_rampdown= Function("rampdown");
  Function octave_thresh= Function("thresh");
  Function octave_largestr= Function("largestr");
  Function octave_largestn= Function("largestn");
  Function octave_dynlimit= Function("dynlimit");
  Function octave_groupthresh= Function("groupthresh");
  Function octave_rgb2jpeg= Function("rgb2jpeg");
  Function octave_jpeg2rgb= Function("jpeg2rgb");
  Function octave_qam4= Function("qam4");
  Function octave_iqam4= Function("iqam4");
  Function octave_semiaudplot= Function("semiaudplot");
  Function octave_audtofreq= Function("audtofreq");
  Function octave_freqtoaud= Function("freqtoaud");
  Function octave_audspace= Function("audspace");
  Function octave_audspacebw= Function("audspacebw");
  Function octave_erbtofreq= Function("erbtofreq");
  Function octave_freqtoerb= Function("freqtoerb");
  Function octave_erbspace= Function("erbspace");
}

Octopus::OctopusValueList* convert_octave_value_list(lua_State * L)
{
  Octopus::OctopusValueList* ptr;
  SWIG_ConvertPtr(L,-1,(void**)&ptr,SWIGTYPE_p_Octopus__OctopusValueList,0);
  return ptr;
}


#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_crealf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::real< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::real< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("crealf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR real< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cimagf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::imag< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::imag< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cimagf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR imag< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cabsf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::abs< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cabsf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR abs< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cargf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::arg< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::arg< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cargf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR arg< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cnormf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::norm< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::norm< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cnormf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR norm< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cprojf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::proj< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::proj< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cprojf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR proj< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpolarf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::polar< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::polar< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< float >((float const &)*arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpolarf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::polar< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< float >((float const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpolarf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_cpolarf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cpolarf__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cpolarf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::polar< float >(float const &,float const &)\n"
    "    std::polar< float >(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_csinf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sin< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("csinf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sin< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ccosf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cos< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ccosf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cos< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ctanf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tan< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ctanf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tan< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_casinf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asin< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("casinf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asin< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cacosf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acos< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cacosf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acos< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_catanf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atan< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("catanf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atan< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_csinhf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sinh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("csinhf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sinh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ccoshf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cosh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ccoshf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cosh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ctanhf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tanh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ctanhf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tanh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_casinhf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::asinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asinh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("casinhf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cacoshf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::acosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acosh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cacoshf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_catanhf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("std::atanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atanh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("catanhf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::max",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::epsilon",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::round_error",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::infinity",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::quiet_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::signaling_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::denorm_min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< float >::numeric_limits",0,0)
  {
    try
    {
      result = (std::numeric_limits< float > *)new std::numeric_limits< float >();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_numeric_limits(void *obj) {
std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_numeric_limits_methods[]= {
    { "min", _wrap_float_numeric_limits_min},
    { "max", _wrap_float_numeric_limits_max},
    { "epsilon", _wrap_float_numeric_limits_epsilon},
    { "round_error", _wrap_float_numeric_limits_round_error},
    { "infinity", _wrap_float_numeric_limits_infinity},
    { "quiet_NaN", _wrap_float_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_float_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_float_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_float_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_float_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_numeric_limits_Sf_SwigStatic = {
    "float_numeric_limits",
    swig_float_numeric_limits_Sf_SwigStatic_methods,
    swig_float_numeric_limits_Sf_SwigStatic_attributes,
    swig_float_numeric_limits_Sf_SwigStatic_constants,
    swig_float_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_numeric_limits_bases[] = {0};
static const char *swig_float_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_float_numeric_limits = { "float_numeric_limits", "float_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_float_t,_proxy__wrap_new_float_numeric_limits, swig_delete_float_numeric_limits, swig_float_numeric_limits_methods, swig_float_numeric_limits_attributes, &swig_float_numeric_limits_Sf_SwigStatic, swig_float_numeric_limits_meta, swig_float_numeric_limits_bases, swig_float_numeric_limits_base_names };

static int _wrap_double_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::max",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::epsilon",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::round_error",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::infinity",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::quiet_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::signaling_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::denorm_min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< double >::numeric_limits",0,0)
  {
    try
    {
      result = (std::numeric_limits< double > *)new std::numeric_limits< double >();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_numeric_limits(void *obj) {
std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_numeric_limits_methods[]= {
    { "min", _wrap_double_numeric_limits_min},
    { "max", _wrap_double_numeric_limits_max},
    { "epsilon", _wrap_double_numeric_limits_epsilon},
    { "round_error", _wrap_double_numeric_limits_round_error},
    { "infinity", _wrap_double_numeric_limits_infinity},
    { "quiet_NaN", _wrap_double_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_double_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_double_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_double_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_double_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_numeric_limits_Sf_SwigStatic = {
    "double_numeric_limits",
    swig_double_numeric_limits_Sf_SwigStatic_methods,
    swig_double_numeric_limits_Sf_SwigStatic_attributes,
    swig_double_numeric_limits_Sf_SwigStatic_constants,
    swig_double_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_numeric_limits_bases[] = {0};
static const char *swig_double_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_double_numeric_limits = { "double_numeric_limits", "double_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_double_t,_proxy__wrap_new_double_numeric_limits, swig_delete_double_numeric_limits, swig_double_numeric_limits_methods, swig_double_numeric_limits_attributes, &swig_double_numeric_limits_Sf_SwigStatic, swig_double_numeric_limits_meta, swig_double_numeric_limits_bases, swig_double_numeric_limits_base_names };

static int _wrap_int_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::max",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::epsilon",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::round_error",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::infinity",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::quiet_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::signaling_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::denorm_min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< int >::numeric_limits",0,0)
  {
    try
    {
      result = (std::numeric_limits< int > *)new std::numeric_limits< int >();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int_numeric_limits(void *obj) {
std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int_numeric_limits_methods[]= {
    { "min", _wrap_int_numeric_limits_min},
    { "max", _wrap_int_numeric_limits_max},
    { "epsilon", _wrap_int_numeric_limits_epsilon},
    { "round_error", _wrap_int_numeric_limits_round_error},
    { "infinity", _wrap_int_numeric_limits_infinity},
    { "quiet_NaN", _wrap_int_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_int_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_int_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_int_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_int_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int_numeric_limits_Sf_SwigStatic = {
    "int_numeric_limits",
    swig_int_numeric_limits_Sf_SwigStatic_methods,
    swig_int_numeric_limits_Sf_SwigStatic_attributes,
    swig_int_numeric_limits_Sf_SwigStatic_constants,
    swig_int_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int_numeric_limits_bases[] = {0};
static const char *swig_int_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_int_numeric_limits = { "int_numeric_limits", "int_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_int_t,_proxy__wrap_new_int_numeric_limits, swig_delete_int_numeric_limits, swig_int_numeric_limits_methods, swig_int_numeric_limits_attributes, &swig_int_numeric_limits_Sf_SwigStatic, swig_int_numeric_limits_meta, swig_int_numeric_limits_bases, swig_int_numeric_limits_base_names };

static int _wrap_uint_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::max",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::epsilon",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::round_error",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::infinity",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::quiet_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::signaling_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::denorm_min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::numeric_limits",0,0)
  {
    try
    {
      result = (std::numeric_limits< unsigned int > *)new std::numeric_limits< unsigned int >();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint_numeric_limits(void *obj) {
std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_methods[]= {
    { "min", _wrap_uint_numeric_limits_min},
    { "max", _wrap_uint_numeric_limits_max},
    { "epsilon", _wrap_uint_numeric_limits_epsilon},
    { "round_error", _wrap_uint_numeric_limits_round_error},
    { "infinity", _wrap_uint_numeric_limits_infinity},
    { "quiet_NaN", _wrap_uint_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_uint_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_uint_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_uint_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uint_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint_numeric_limits_Sf_SwigStatic = {
    "uint_numeric_limits",
    swig_uint_numeric_limits_Sf_SwigStatic_methods,
    swig_uint_numeric_limits_Sf_SwigStatic_attributes,
    swig_uint_numeric_limits_Sf_SwigStatic_constants,
    swig_uint_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint_numeric_limits_bases[] = {0};
static const char *swig_uint_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_uint_numeric_limits = { "uint_numeric_limits", "uint_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,_proxy__wrap_new_uint_numeric_limits, swig_delete_uint_numeric_limits, swig_uint_numeric_limits_methods, swig_uint_numeric_limits_attributes, &swig_uint_numeric_limits_Sf_SwigStatic, swig_uint_numeric_limits_meta, swig_uint_numeric_limits_bases, swig_uint_numeric_limits_base_names };

static int _wrap_short_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::max",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::epsilon",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::round_error",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::infinity",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::quiet_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::signaling_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::denorm_min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< short >::numeric_limits",0,0)
  {
    try
    {
      result = (std::numeric_limits< short > *)new std::numeric_limits< short >();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_short_numeric_limits(void *obj) {
std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_short_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_short_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_short_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_short_numeric_limits_methods[]= {
    { "min", _wrap_short_numeric_limits_min},
    { "max", _wrap_short_numeric_limits_max},
    { "epsilon", _wrap_short_numeric_limits_epsilon},
    { "round_error", _wrap_short_numeric_limits_round_error},
    { "infinity", _wrap_short_numeric_limits_infinity},
    { "quiet_NaN", _wrap_short_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_short_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_short_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_short_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_short_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_short_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_short_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_short_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_short_numeric_limits_Sf_SwigStatic = {
    "short_numeric_limits",
    swig_short_numeric_limits_Sf_SwigStatic_methods,
    swig_short_numeric_limits_Sf_SwigStatic_attributes,
    swig_short_numeric_limits_Sf_SwigStatic_constants,
    swig_short_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_short_numeric_limits_bases[] = {0};
static const char *swig_short_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_short_numeric_limits = { "short_numeric_limits", "short_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_short_t,_proxy__wrap_new_short_numeric_limits, swig_delete_short_numeric_limits, swig_short_numeric_limits_methods, swig_short_numeric_limits_attributes, &swig_short_numeric_limits_Sf_SwigStatic, swig_short_numeric_limits_meta, swig_short_numeric_limits_bases, swig_short_numeric_limits_base_names };

static int _wrap_ushort_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::max",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::epsilon",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::round_error",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::infinity",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::quiet_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::signaling_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::denorm_min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::numeric_limits",0,0)
  {
    try
    {
      result = (std::numeric_limits< unsigned short > *)new std::numeric_limits< unsigned short >();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ushort_numeric_limits(void *obj) {
std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ushort_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ushort_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ushort_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_methods[]= {
    { "min", _wrap_ushort_numeric_limits_min},
    { "max", _wrap_ushort_numeric_limits_max},
    { "epsilon", _wrap_ushort_numeric_limits_epsilon},
    { "round_error", _wrap_ushort_numeric_limits_round_error},
    { "infinity", _wrap_ushort_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ushort_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ushort_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ushort_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ushort_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ushort_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ushort_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ushort_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ushort_numeric_limits_Sf_SwigStatic = {
    "ushort_numeric_limits",
    swig_ushort_numeric_limits_Sf_SwigStatic_methods,
    swig_ushort_numeric_limits_Sf_SwigStatic_attributes,
    swig_ushort_numeric_limits_Sf_SwigStatic_constants,
    swig_ushort_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ushort_numeric_limits_bases[] = {0};
static const char *swig_ushort_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ushort_numeric_limits = { "ushort_numeric_limits", "ushort_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,_proxy__wrap_new_ushort_numeric_limits, swig_delete_ushort_numeric_limits, swig_ushort_numeric_limits_methods, swig_ushort_numeric_limits_attributes, &swig_ushort_numeric_limits_Sf_SwigStatic, swig_ushort_numeric_limits_meta, swig_ushort_numeric_limits_bases, swig_ushort_numeric_limits_base_names };

static int _wrap_long_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::max",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::epsilon",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::round_error",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::infinity",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::quiet_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::signaling_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::denorm_min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long >::numeric_limits",0,0)
  {
    try
    {
      result = (std::numeric_limits< long > *)new std::numeric_limits< long >();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_long_numeric_limits(void *obj) {
std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_long_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_long_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_long_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_long_numeric_limits_methods[]= {
    { "min", _wrap_long_numeric_limits_min},
    { "max", _wrap_long_numeric_limits_max},
    { "epsilon", _wrap_long_numeric_limits_epsilon},
    { "round_error", _wrap_long_numeric_limits_round_error},
    { "infinity", _wrap_long_numeric_limits_infinity},
    { "quiet_NaN", _wrap_long_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_long_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_long_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_long_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_long_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_long_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_long_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_long_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_long_numeric_limits_Sf_SwigStatic = {
    "long_numeric_limits",
    swig_long_numeric_limits_Sf_SwigStatic_methods,
    swig_long_numeric_limits_Sf_SwigStatic_attributes,
    swig_long_numeric_limits_Sf_SwigStatic_constants,
    swig_long_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_long_numeric_limits_bases[] = {0};
static const char *swig_long_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_long_numeric_limits = { "long_numeric_limits", "long_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_t,_proxy__wrap_new_long_numeric_limits, swig_delete_long_numeric_limits, swig_long_numeric_limits_methods, swig_long_numeric_limits_attributes, &swig_long_numeric_limits_Sf_SwigStatic, swig_long_numeric_limits_meta, swig_long_numeric_limits_bases, swig_long_numeric_limits_base_names };

static int _wrap_ulong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::max",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::epsilon",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::round_error",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::infinity",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::quiet_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::signaling_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::denorm_min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::numeric_limits",0,0)
  {
    try
    {
      result = (std::numeric_limits< unsigned long > *)new std::numeric_limits< unsigned long >();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ulong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ulong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ulong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ulong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_methods[]= {
    { "min", _wrap_ulong_numeric_limits_min},
    { "max", _wrap_ulong_numeric_limits_max},
    { "epsilon", _wrap_ulong_numeric_limits_epsilon},
    { "round_error", _wrap_ulong_numeric_limits_round_error},
    { "infinity", _wrap_ulong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ulong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ulong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ulong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ulong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ulong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ulong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ulong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ulong_numeric_limits_Sf_SwigStatic = {
    "ulong_numeric_limits",
    swig_ulong_numeric_limits_Sf_SwigStatic_methods,
    swig_ulong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ulong_numeric_limits_Sf_SwigStatic_constants,
    swig_ulong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ulong_numeric_limits_bases[] = {0};
static const char *swig_ulong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ulong_numeric_limits = { "ulong_numeric_limits", "ulong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,_proxy__wrap_new_ulong_numeric_limits, swig_delete_ulong_numeric_limits, swig_ulong_numeric_limits_methods, swig_ulong_numeric_limits_attributes, &swig_ulong_numeric_limits_Sf_SwigStatic, swig_ulong_numeric_limits_meta, swig_ulong_numeric_limits_bases, swig_ulong_numeric_limits_base_names };

static int _wrap_llong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::max",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::epsilon",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::round_error",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::infinity",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::quiet_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::signaling_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::denorm_min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long long >::numeric_limits",0,0)
  {
    try
    {
      result = (std::numeric_limits< long long > *)new std::numeric_limits< long long >();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_llong_numeric_limits(void *obj) {
std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_llong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_llong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_llong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_methods[]= {
    { "min", _wrap_llong_numeric_limits_min},
    { "max", _wrap_llong_numeric_limits_max},
    { "epsilon", _wrap_llong_numeric_limits_epsilon},
    { "round_error", _wrap_llong_numeric_limits_round_error},
    { "infinity", _wrap_llong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_llong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_llong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_llong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_llong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_llong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_llong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_llong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_llong_numeric_limits_Sf_SwigStatic = {
    "llong_numeric_limits",
    swig_llong_numeric_limits_Sf_SwigStatic_methods,
    swig_llong_numeric_limits_Sf_SwigStatic_attributes,
    swig_llong_numeric_limits_Sf_SwigStatic_constants,
    swig_llong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_llong_numeric_limits_bases[] = {0};
static const char *swig_llong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_llong_numeric_limits = { "llong_numeric_limits", "llong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_long_t,_proxy__wrap_new_llong_numeric_limits, swig_delete_llong_numeric_limits, swig_llong_numeric_limits_methods, swig_llong_numeric_limits_attributes, &swig_llong_numeric_limits_Sf_SwigStatic, swig_llong_numeric_limits_meta, swig_llong_numeric_limits_bases, swig_llong_numeric_limits_base_names };

static int _wrap_ullong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::max",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::epsilon",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::round_error",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::infinity",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::quiet_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::signaling_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::denorm_min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::numeric_limits",0,0)
  {
    try
    {
      result = (std::numeric_limits< unsigned long long > *)new std::numeric_limits< unsigned long long >();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ullong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ullong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ullong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ullong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_methods[]= {
    { "min", _wrap_ullong_numeric_limits_min},
    { "max", _wrap_ullong_numeric_limits_max},
    { "epsilon", _wrap_ullong_numeric_limits_epsilon},
    { "round_error", _wrap_ullong_numeric_limits_round_error},
    { "infinity", _wrap_ullong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ullong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ullong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ullong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ullong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ullong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ullong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ullong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ullong_numeric_limits_Sf_SwigStatic = {
    "ullong_numeric_limits",
    swig_ullong_numeric_limits_Sf_SwigStatic_methods,
    swig_ullong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ullong_numeric_limits_Sf_SwigStatic_constants,
    swig_ullong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ullong_numeric_limits_bases[] = {0};
static const char *swig_ullong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ullong_numeric_limits = { "ullong_numeric_limits", "ullong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,_proxy__wrap_new_ullong_numeric_limits, swig_delete_ullong_numeric_limits, swig_ullong_numeric_limits_methods, swig_ullong_numeric_limits_attributes, &swig_ullong_numeric_limits_Sf_SwigStatic, swig_ullong_numeric_limits_meta, swig_ullong_numeric_limits_bases, swig_ullong_numeric_limits_base_names };

static int _wrap_Huge(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Ops::Huge",0,0)
  result = (double)Ops::Huge();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Hugef(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("Ops::Hugef",0,0)
  result = (float)Ops::Hugef();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Infinity(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Ops::Infinity",0,0)
  result = (double)Ops::Infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NaN(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Ops::NaN",0,0)
  result = (double)Ops::NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::abs< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::abs< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR abs< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::cube< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cube< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR cube< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::sqrt< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::sqrt< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::exp< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::exp< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR exp< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::exp2< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::exp2< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR exp2< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::log< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR log< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::log10< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log10< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR log10< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::log2< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log2< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR log2< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::logb< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::logb< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR logb< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::pow< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::pow< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::pow< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR pow< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::floor< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::floor< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR floor< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::acos< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::acos< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR acos< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::asin< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::asin< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR asin< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::atan< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::atan< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR atan< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::atan2< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::atan2< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::atan2< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR atan2< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::cos< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cos< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR cos< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::sin< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::sin< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR sin< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::tan< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::tan< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR tan< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::cosh< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cosh< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR cosh< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::sinh< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::sinh< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR sinh< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::tanh< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::tanh< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR tanh< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::lgamma< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::lgamma< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR lgamma< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::acosh< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::acosh< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::asinh< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::asinh< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::atanh< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::atanh< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::cbrt< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cbrt< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR cbrt< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::cbrt< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cbrt< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR cbrt< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::copysign< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::copysign< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::copysign< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR copysign< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::erf< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::erf< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR erf< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::erfc< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::erfc< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR erfc< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::expm1< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::expm1< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR expm1< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::fdim< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fdim< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fdim< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR fdim< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp1 ;
  float temp2 ;
  float temp3 ;
  float result;
  
  SWIG_check_num_args("Ops::fma< float >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fma< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fma< float >",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ops::fma< float >",3,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR fma< float >((float const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::fmax< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fmax< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fmax< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR fmax< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fminf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::fmin< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fmin< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fmin< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR fmin< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::fmod< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fmod< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fmod< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR fmod< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("Ops::fpclassify< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fpclassify< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)Ops::SWIGTEMPLATEDISAMBIGUATOR fpclassify< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::hypot< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::hypot< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::hypot< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR hypot< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("Ops::ilogb< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::ilogb< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)Ops::SWIGTEMPLATEDISAMBIGUATOR ilogb< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinitef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isfinite< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isfinite< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isfinite< float >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isgreater< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isgreater< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isgreater< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isgreater< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isgreaterequal< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isgreaterequal< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isgreaterequal< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isgreaterequal< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isinf< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isinf< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isinf< float >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isless< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isless< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isless< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isless< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::islessequal< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::islessequal< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::islessequal< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR islessequal< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isnan< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isnan< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isnan< float >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isnormal< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isnormal< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isnormal< float >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isunordered< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isunordered< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isunordered< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isunordered< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::ldexp< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::ldexp< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::ldexp< float >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR ldexp< float >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::llrint< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::llrint< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR llrint< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::llround< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::llround< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR llround< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::log1p< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log1p< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR log1p< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::lrint< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::lrint< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR lrint< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::lround< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::lround< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR lround< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("Ops::nan< float >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Ops::nan< float >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR nan< float >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanff(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("Ops::nanf< float >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Ops::nanf< float >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR nanf< float >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanlf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("Ops::nanl< float >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Ops::nanl< float >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR nanl< float >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::nearbyint< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::nearbyint< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR nearbyint< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::nextafter< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::nextafter< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::nextafter< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR nextafter< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::nexttoward< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::nexttoward< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::nexttoward< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR nexttoward< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("Ops::remainder< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::remainder< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::remainder< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR remainder< float >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::rint< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::rint< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR rint< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::round< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::round< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR round< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  long arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::scalbln< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::scalbln< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::scalbln< float >",2,"long");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR scalbln< float >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::scalbn< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::scalbn< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::scalbn< float >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR scalbn< float >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::square< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::square< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR square< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::tgamma< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::tgamma< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR tgamma< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("Ops::trunc< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::trunc< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)Ops::SWIGTEMPLATEDISAMBIGUATOR trunc< float >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::abs< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::abs< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR abs< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::sqrt< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::sqrt< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR sqrt< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::exp< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::exp< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR exp< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::exp2< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::exp2< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR exp2< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::log< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR log< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::log10< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log10< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR log10< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::log2< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log2< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR log2< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::logb< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::logb< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR logb< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::pow< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::pow< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::pow< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR pow< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floord(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::floor< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::floor< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR floor< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::acos< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::acos< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR acos< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::asin< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::asin< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR asin< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::atan< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::atan< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR atan< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::atan2< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::atan2< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::atan2< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR atan2< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::cos< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cos< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR cos< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::sin< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::sin< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR sin< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::tan< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::tan< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR tan< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::cosh< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cosh< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR cosh< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::sinh< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::sinh< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR sinh< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::tanh< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::tanh< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR tanh< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::lgamma< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::lgamma< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR lgamma< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::acosh< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::acosh< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR acosh< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::asinh< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::asinh< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR asinh< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::atanh< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::atanh< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR atanh< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::cbrt< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cbrt< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR cbrt< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceild(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::cbrt< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::cbrt< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR cbrt< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::copysign< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::copysign< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::copysign< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR copysign< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::erf< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::erf< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR erf< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::erfc< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::erfc< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR erfc< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::expm1< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::expm1< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR expm1< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::fdim< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fdim< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fdim< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR fdim< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp1 ;
  double temp2 ;
  double temp3 ;
  double result;
  
  SWIG_check_num_args("Ops::fma< double >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fma< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fma< double >",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ops::fma< double >",3,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR fma< double >((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::fmax< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fmax< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fmax< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR fmax< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::fmin< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fmin< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fmin< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR fmin< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::fmod< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fmod< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::fmod< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR fmod< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("Ops::fpclassify< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::fpclassify< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)Ops::SWIGTEMPLATEDISAMBIGUATOR fpclassify< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::hypot< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::hypot< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::hypot< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR hypot< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("Ops::ilogb< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::ilogb< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)Ops::SWIGTEMPLATEDISAMBIGUATOR ilogb< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinited(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isfinite< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isfinite< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isfinite< double >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isgreater< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isgreater< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isgreater< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isgreater< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isgreaterequal< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isgreaterequal< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isgreaterequal< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isgreaterequal< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isinf< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isinf< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isinf< double >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isless< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isless< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isless< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isless< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::islessequal< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::islessequal< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::islessequal< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR islessequal< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isnan< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isnan< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isnan< double >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("Ops::isnormal< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isnormal< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isnormal< double >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("Ops::isunordered< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::isunordered< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::isunordered< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)Ops::SWIGTEMPLATEDISAMBIGUATOR isunordered< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::ldexp< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::ldexp< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::ldexp< double >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR ldexp< double >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::llrint< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::llrint< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR llrint< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::llround< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::llround< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR llround< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::log1p< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::log1p< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR log1p< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::lrint< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::lrint< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR lrint< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::lround< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::lround< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR lround< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nand(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("Ops::nan< double >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Ops::nan< double >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nan< double >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanfd(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("Ops::nanf< double >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Ops::nanf< double >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nanf< double >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanld(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("Ops::nanl< double >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Ops::nanl< double >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nanl< double >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::nearbyint< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::nearbyint< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nearbyint< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::nextafter< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::nextafter< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::nextafter< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nextafter< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::nexttoward< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::nexttoward< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::nexttoward< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR nexttoward< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("Ops::remainder< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::remainder< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::remainder< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR remainder< double >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::rint< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::rint< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR rint< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::round< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::round< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR round< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  long arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::scalbln< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::scalbln< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::scalbln< double >",2,"long");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR scalbln< double >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::scalbn< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::scalbn< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::scalbn< double >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR scalbn< double >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squared(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::square< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::square< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR square< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::tgamma< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::tgamma< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR tgamma< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("Ops::trunc< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::trunc< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)Ops::SWIGTEMPLATEDISAMBIGUATOR trunc< double >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("std::string::string",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (std::string *)new std::string((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n"
    "    std::string::string(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char result;
  
  SWIG_check_num_args("std::string::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__getitem__",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___getitem",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (char)std_string___getitem____SWIG(arg1,arg2);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("std::string::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__setitem__",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::__setitem__",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("std::string::__setitem__",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___setitem",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  std_string___setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string___tostring(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__str__",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___tostring",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)std_string___str____SWIG(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int arg2 ;
  int32_t result;
  
  SWIG_check_num_args("std::string::to_int32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int32",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::to_int32",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int32",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = std_string_to_int32__SWIG_0(arg1,arg2);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("std::string::to_int32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int32",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int32",1,SWIGTYPE_p_std__string);
  }
  
  result = std_string_to_int32__SWIG_0(arg1);
  {
    int32_t * resultptr = new int32_t((const int32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_string_to_int32__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_to_int32__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_to_int32'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::to_int32(int)\n"
    "    std::string::to_int32()\n");
  lua_error(L);return 0;
}


static int _wrap_string_to_int64__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int arg2 ;
  int64_t result;
  
  SWIG_check_num_args("std::string::to_int64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int64",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::to_int64",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int64",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = std_string_to_int64__SWIG_0(arg1,arg2);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int64__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("std::string::to_int64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int64",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int64",1,SWIGTYPE_p_std__string);
  }
  
  result = std_string_to_int64__SWIG_0(arg1);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int64(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_string_to_int64__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_to_int64__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_to_int64'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::to_int64(int)\n"
    "    std::string::to_int64()\n");
  lua_error(L);return 0;
}


static int _wrap_string_to_float(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  float result;
  
  SWIG_check_num_args("std::string::to_float",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_float",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_float",1,SWIGTYPE_p_std__string);
  }
  
  result = (float)std_string_to_float__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_double(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  double result;
  
  SWIG_check_num_args("std::string::to_double",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_double",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_double",1,SWIGTYPE_p_std__string);
  }
  
  result = (double)std_string_to_double__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_reverse(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::reverse",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_reverse",1,SWIGTYPE_p_std__string);
  }
  
  std_string_reverse__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_sort(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::sort",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_sort",1,SWIGTYPE_p_std__string);
  }
  
  std_string_sort__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::shuffle",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_shuffle",1,SWIGTYPE_p_std__string);
  }
  
  std_string_shuffle__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_getline(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::getline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::getline",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_getline",1,SWIGTYPE_p_std__string);
  }
  
  std_string_getline__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_fill(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("std::string::fill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::fill",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::fill",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("std::string::fill",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_fill",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  std_string_fill__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = ((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::clear",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_clear",1,SWIGTYPE_p_std__string);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::string::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::erase",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_erase",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::erase",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_erase",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_erase__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_erase__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::erase(size_t,size_t)\n"
    "    std::string::erase(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_string_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::push_back",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::push_back",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_push_back",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::pop_back",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_pop_back",1,SWIGTYPE_p_std__string);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_replace(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  std::string temp4 ;
  std::string result;
  
  SWIG_check_num_args("std::string::replace",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::replace",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::replace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::replace",3,"size_t");
  if(!lua_isstring(L,4)) SWIG_fail_arg("std::string::replace",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_replace",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (arg1)->replace(arg2,arg3,(std::string const &)*arg4);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::resize",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_resize",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_substr(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string result;
  
  SWIG_check_num_args("std::string::substr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::substr",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::substr",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::substr",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_substr",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->substr(arg2,arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::find",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::find",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::find",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::find",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_find",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::find",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::find",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_find",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->find((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_find__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_find__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::find(std::string const &,size_t)\n"
    "    std::string::find(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string_rfind__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::rfind",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::rfind",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::rfind",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::rfind",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_rfind",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->rfind((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_rfind__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::rfind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::rfind",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::rfind",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_rfind",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->rfind((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_rfind(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_rfind__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_rfind__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_rfind'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::rfind(std::string const &,size_t)\n"
    "    std::string::rfind(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string_compare(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  int result;
  
  SWIG_check_num_args("std::string::compare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::compare",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::compare",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_compare",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (int)(arg1)->compare((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "__getitem", _wrap_string___getitem},
    { "__setitem", _wrap_string___setitem},
    { "__tostring", _wrap_string___tostring},
    { "to_int32", _wrap_string_to_int32},
    { "to_int64", _wrap_string_to_int64},
    { "to_float", _wrap_string_to_float},
    { "to_double", _wrap_string_to_double},
    { "reverse", _wrap_string_reverse},
    { "sort", _wrap_string_sort},
    { "shuffle", _wrap_string_shuffle},
    { "getline", _wrap_string_getline},
    { "fill", _wrap_string_fill},
    { "data", _wrap_string_data},
    { "size", _wrap_string_size},
    { "empty", _wrap_string_empty},
    { "clear", _wrap_string_clear},
    { "erase", _wrap_string_erase},
    { "push_back", _wrap_string_push_back},
    { "pop_back", _wrap_string_pop_back},
    { "replace", _wrap_string_replace},
    { "resize", _wrap_string_resize},
    { "substr", _wrap_string_substr},
    { "find", _wrap_string_find},
    { "rfind", _wrap_string_rfind},
    { "compare", _wrap_string_compare},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    { "__getitem", _wrap_string___getitem},
    { "__setitem", _wrap_string___setitem},
    { "__tostring", _wrap_string___tostring},
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_new_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",0,0)
  result = (std::vector< float > *)new std::vector< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::vector",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< float > *)new std::vector< float >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float,std::allocator< float > > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"std::vector< float,std::allocator< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("new_float_vector",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (std::vector< float > *)new std::vector< float >((std::vector< float,std::allocator< float > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::vector()\n"
    "    std::vector< float >::vector(size_t,float const &)\n"
    "    std::vector< float >::vector(size_t)\n"
    "    std::vector< float >::vector(std::vector< float,std::allocator< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::vector< float >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__getitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector___getitem",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_vector_Sl_float_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::vector< float >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__setitem",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::__setitem",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector___setitem",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float,std::allocator< float > > > result;
  
  SWIG_check_num_args("std::vector< float >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::ibegin",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_ibegin",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = std_vector_Sl_float_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< float,std::allocator< float > > * resultptr = new std::vector_iterator< float,std::allocator< float > >((const std::vector_iterator< float,std::allocator< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_std__allocatorT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float,std::allocator< float > > > result;
  
  SWIG_check_num_args("std::vector< float >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::iend",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_iend",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = std_vector_Sl_float_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< float,std::allocator< float > > * resultptr = new std::vector_iterator< float,std::allocator< float > >((const std::vector_iterator< float,std::allocator< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_std__allocatorT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_float_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< float >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::erase",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_float_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::erase(size_t)\n"
    "    std::vector< float >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::front",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_front",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (float *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_back",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (float *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("std::vector< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::push_back",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::push_back",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_push_back",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::pop_back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::at",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_at",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::vector< float >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::assign",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::assign",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_assign",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::data",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_data",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_size",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::empty",1,"std::vector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_empty",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (bool)((std::vector< float > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::resize",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_resize",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::clear",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_clear",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float,std::allocator< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< float >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::swap",1,"std::vector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< float >::swap",2,"std::vector< float,std::allocator< float > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_swap",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_swap",2,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::shrink_to_fit",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< float >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::reserve",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_reserve",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::max_size",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_max_size",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< float >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::capacity",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,0))){
    SWIG_fail_ptr("float_vector_capacity",1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_vector(void *obj) {
std::vector< float > *arg1 = (std::vector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_vector_methods[]= {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    { "ibegin", _wrap_float_vector_ibegin},
    { "iend", _wrap_float_vector_iend},
    { "erase", _wrap_float_vector_erase},
    { "front", _wrap_float_vector_front},
    { "back", _wrap_float_vector_back},
    { "push_back", _wrap_float_vector_push_back},
    { "pop_back", _wrap_float_vector_pop_back},
    { "at", _wrap_float_vector_at},
    { "assign", _wrap_float_vector_assign},
    { "data", _wrap_float_vector_data},
    { "size", _wrap_float_vector_size},
    { "empty", _wrap_float_vector_empty},
    { "resize", _wrap_float_vector_resize},
    { "clear", _wrap_float_vector_clear},
    { "swap", _wrap_float_vector_swap},
    { "shrink_to_fit", _wrap_float_vector_shrink_to_fit},
    { "reserve", _wrap_float_vector_reserve},
    { "max_size", _wrap_float_vector_max_size},
    { "capacity", _wrap_float_vector_capacity},
    {0,0}
};
static swig_lua_method swig_float_vector_meta[] = {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_vector_Sf_SwigStatic = {
    "float_vector",
    swig_float_vector_Sf_SwigStatic_methods,
    swig_float_vector_Sf_SwigStatic_attributes,
    swig_float_vector_Sf_SwigStatic_constants,
    swig_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_vector_bases[] = {0};
static const char *swig_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_float_vector = { "float_vector", "float_vector", &SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,_proxy__wrap_new_float_vector, swig_delete_float_vector, swig_float_vector_methods, swig_float_vector_attributes, &swig_float_vector_Sf_SwigStatic, swig_float_vector_meta, swig_float_vector_bases, swig_float_vector_base_names };

static int _wrap_new_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",0,0)
  result = (std::vector< double > *)new std::vector< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::vector",2,"double const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"std::vector< double,std::allocator< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("new_double_vector",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (std::vector< double > *)new std::vector< double >((std::vector< double,std::allocator< double > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(size_t,double const &)\n"
    "    std::vector< double >::vector(size_t)\n"
    "    std::vector< double >::vector(std::vector< double,std::allocator< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__getitem",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector___getitem",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)std_vector_Sl_double_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("std::vector< double >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__setitem",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::__setitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector___setitem",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  std_vector_Sl_double_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_ibegin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double,std::allocator< double > > > result;
  
  SWIG_check_num_args("std::vector< double >::ibegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::ibegin",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_ibegin",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = std_vector_Sl_double_Sg__ibegin__SWIG(arg1);
  {
    std::vector_iterator< double,std::allocator< double > > * resultptr = new std::vector_iterator< double,std::allocator< double > >((const std::vector_iterator< double,std::allocator< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_std__allocatorT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_iend(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double,std::allocator< double > > > result;
  
  SWIG_check_num_args("std::vector< double >::iend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::iend",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_iend",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = std_vector_Sl_double_Sg__iend__SWIG(arg1);
  {
    std::vector_iterator< double,std::allocator< double > > * resultptr = new std::vector_iterator< double,std::allocator< double > >((const std::vector_iterator< double,std::allocator< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_std__allocatorT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::erase",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< double >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::erase",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_double_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(size_t)\n"
    "    std::vector< double >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::front",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_front",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_back",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("std::vector< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::push_back",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::push_back",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_push_back",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::pop_back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::at",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_at",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("std::vector< double >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::assign",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::assign",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_assign",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::data",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_data",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::size",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_size",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::empty",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_empty",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (bool)((std::vector< double > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::resize",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_resize",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::clear",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_clear",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< double >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::swap",1,"std::vector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< double >::swap",2,"std::vector< double,std::allocator< double > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_swap",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_swap",2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::shrink_to_fit",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< double >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::reserve",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_reserve",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::max_size",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_max_size",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< double >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::capacity",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,0))){
    SWIG_fail_ptr("double_vector_capacity",1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_vector(void *obj) {
std::vector< double > *arg1 = (std::vector< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_vector_methods[]= {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    { "ibegin", _wrap_double_vector_ibegin},
    { "iend", _wrap_double_vector_iend},
    { "erase", _wrap_double_vector_erase},
    { "front", _wrap_double_vector_front},
    { "back", _wrap_double_vector_back},
    { "push_back", _wrap_double_vector_push_back},
    { "pop_back", _wrap_double_vector_pop_back},
    { "at", _wrap_double_vector_at},
    { "assign", _wrap_double_vector_assign},
    { "data", _wrap_double_vector_data},
    { "size", _wrap_double_vector_size},
    { "empty", _wrap_double_vector_empty},
    { "resize", _wrap_double_vector_resize},
    { "clear", _wrap_double_vector_clear},
    { "swap", _wrap_double_vector_swap},
    { "shrink_to_fit", _wrap_double_vector_shrink_to_fit},
    { "reserve", _wrap_double_vector_reserve},
    { "max_size", _wrap_double_vector_max_size},
    { "capacity", _wrap_double_vector_capacity},
    {0,0}
};
static swig_lua_method swig_double_vector_meta[] = {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_vector_Sf_SwigStatic = {
    "double_vector",
    swig_double_vector_Sf_SwigStatic_methods,
    swig_double_vector_Sf_SwigStatic_attributes,
    swig_double_vector_Sf_SwigStatic_constants,
    swig_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_vector_bases[] = {0};
static const char *swig_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_double_vector = { "double_vector", "double_vector", &SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,_proxy__wrap_new_double_vector, swig_delete_double_vector, swig_double_vector_methods, swig_double_vector_attributes, &swig_double_vector_Sf_SwigStatic, swig_double_vector_meta, swig_double_vector_bases, swig_double_vector_base_names };

static int _wrap_new_OctopusRowVectorXf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::OctopusRowVectorXf",0,0)
  {
    try
    {
      result = (Octopus::OctopusRowVectorXf *)new Octopus::OctopusRowVectorXf();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusRowVectorXf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusRowVectorXf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = 0 ;
  Octopus::OctopusRowVectorXf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::OctopusRowVectorXf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::OctopusRowVectorXf",1,"FloatRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("new_OctopusRowVectorXf",1,SWIGTYPE_p_FloatRowVector);
  }
  
  {
    try
    {
      result = (Octopus::OctopusRowVectorXf *)new Octopus::OctopusRowVectorXf((FloatRowVector const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusRowVectorXf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusRowVectorXf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Octopus::OctopusRowVectorXf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::OctopusRowVectorXf",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::OctopusRowVectorXf",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  {
    try
    {
      result = (Octopus::OctopusRowVectorXf *)new Octopus::OctopusRowVectorXf(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusRowVectorXf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusRowVectorXf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OctopusRowVectorXf__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusRowVectorXf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_OctopusRowVectorXf__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OctopusRowVectorXf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXf::OctopusRowVectorXf()\n"
    "    Octopus::OctopusRowVectorXf::OctopusRowVectorXf(FloatRowVector const &)\n"
    "    Octopus::OctopusRowVectorXf::OctopusRowVectorXf(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXf_print(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::print",1,"Octopus::OctopusRowVectorXf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf_print",1,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  {
    try
    {
      (arg1)->print();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXf___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) 0 ;
  Octopus::OctopusRowVectorXf *arg2 = 0 ;
  Octopus::OctopusRowVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::operator +",1,"Octopus::OctopusRowVectorXf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::operator +",2,"Octopus::OctopusRowVectorXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf___add",1,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf___add",2,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  {
    try
    {
      result = (arg1)->operator +((Octopus::OctopusRowVectorXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXf * resultptr = new Octopus::OctopusRowVectorXf((const Octopus::OctopusRowVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXf___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) 0 ;
  Octopus::OctopusRowVectorXf *arg2 = 0 ;
  Octopus::OctopusRowVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::operator -",1,"Octopus::OctopusRowVectorXf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::operator -",2,"Octopus::OctopusRowVectorXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf___sub",1,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf___sub",2,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  {
    try
    {
      result = (arg1)->operator -((Octopus::OctopusRowVectorXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXf * resultptr = new Octopus::OctopusRowVectorXf((const Octopus::OctopusRowVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXf___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) 0 ;
  Octopus::OctopusRowVectorXf *arg2 = 0 ;
  Octopus::OctopusRowVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::operator *",1,"Octopus::OctopusRowVectorXf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::operator *",2,"Octopus::OctopusRowVectorXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf___mul",1,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf___mul",2,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  {
    try
    {
      result = (arg1)->operator *((Octopus::OctopusRowVectorXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXf * resultptr = new Octopus::OctopusRowVectorXf((const Octopus::OctopusRowVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXf___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) 0 ;
  Octopus::OctopusRowVectorXf *arg2 = 0 ;
  Octopus::OctopusRowVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::operator /",1,"Octopus::OctopusRowVectorXf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::operator /",2,"Octopus::OctopusRowVectorXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf___div",1,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf___div",2,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  {
    try
    {
      result = (arg1)->operator /((Octopus::OctopusRowVectorXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXf * resultptr = new Octopus::OctopusRowVectorXf((const Octopus::OctopusRowVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXf___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) 0 ;
  float arg2 ;
  Octopus::OctopusRowVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::operator +",1,"Octopus::OctopusRowVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::operator +",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf___add",1,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator +(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXf * resultptr = new Octopus::OctopusRowVectorXf((const Octopus::OctopusRowVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXf___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXf___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusRowVectorXf___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXf___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXf::operator +(Octopus::OctopusRowVectorXf const &)\n"
    "    Octopus::OctopusRowVectorXf::operator +(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXf___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) 0 ;
  float arg2 ;
  Octopus::OctopusRowVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::operator -",1,"Octopus::OctopusRowVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::operator -",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf___sub",1,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator -(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXf * resultptr = new Octopus::OctopusRowVectorXf((const Octopus::OctopusRowVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXf___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXf___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusRowVectorXf___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXf___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXf::operator -(Octopus::OctopusRowVectorXf const &)\n"
    "    Octopus::OctopusRowVectorXf::operator -(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXf___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) 0 ;
  float arg2 ;
  Octopus::OctopusRowVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::operator *",1,"Octopus::OctopusRowVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf___mul",1,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator *(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXf * resultptr = new Octopus::OctopusRowVectorXf((const Octopus::OctopusRowVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXf___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXf___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusRowVectorXf___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXf___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXf::operator *(Octopus::OctopusRowVectorXf const &)\n"
    "    Octopus::OctopusRowVectorXf::operator *(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXf___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) 0 ;
  float arg2 ;
  Octopus::OctopusRowVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::operator /",1,"Octopus::OctopusRowVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf___div",1,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator /(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXf * resultptr = new Octopus::OctopusRowVectorXf((const Octopus::OctopusRowVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXf___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXf___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusRowVectorXf___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXf___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXf::operator /(Octopus::OctopusRowVectorXf const &)\n"
    "    Octopus::OctopusRowVectorXf::operator /(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXf___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::__getitem__",1,"Octopus::OctopusRowVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf___getitem",1,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (float)Octopus_OctopusRowVectorXf___getitem____SWIG(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXf___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::__setitem__",1,"Octopus::OctopusRowVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::__setitem__",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf___setitem",1,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  {
    try
    {
      Octopus_OctopusRowVectorXf___setitem____SWIG(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXf_size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::size",1,"Octopus::OctopusRowVectorXf const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf_size",1,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  {
    try
    {
      result = Octopus_OctopusRowVectorXf_size__SWIG_1((Octopus::OctopusRowVectorXf const *)arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXf_size(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusRowVectorXf_size__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXf_size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXf::size()\n"
    "    Octopus::OctopusRowVectorXf::size() const\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXf_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::fill",1,"Octopus::OctopusRowVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf_fill",1,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  {
    try
    {
      Octopus_OctopusRowVectorXf_fill__SWIG_1(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXf_fill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusRowVectorXf_fill__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXf_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXf::fill()\n"
    "    Octopus::OctopusRowVectorXf::fill(float)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXf_data(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::data",1,"Octopus::OctopusRowVectorXf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf_data",1,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  {
    try
    {
      result = (float *)Octopus_OctopusRowVectorXf_data__SWIG(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXf_copy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::copy",1,"Octopus::OctopusRowVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::copy",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf_copy",1,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OctopusRowVectorXf_copy",3,SWIGTYPE_p_float);
  }
  
  {
    try
    {
      Octopus_OctopusRowVectorXf_copy__SWIG_0(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXf_copy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXf::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::copy",1,"Octopus::OctopusRowVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Octopus::OctopusRowVectorXf::copy",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusRowVectorXf_copy",1,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("OctopusRowVectorXf_copy",3,SWIGTYPE_p_double);
  }
  
  {
    try
    {
      Octopus_OctopusRowVectorXf_copy__SWIG_1(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXf_copy(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusRowVectorXf_copy__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusRowVectorXf_copy__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXf_copy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXf::copy(size_t,float *)\n"
    "    Octopus::OctopusRowVectorXf::copy(size_t,double *)\n");
  lua_error(L);return 0;
}


static void swig_delete_OctopusRowVectorXf(void *obj) {
Octopus::OctopusRowVectorXf *arg1 = (Octopus::OctopusRowVectorXf *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctopusRowVectorXf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctopusRowVectorXf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctopusRowVectorXf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OctopusRowVectorXf_methods[]= {
    { "print", _wrap_OctopusRowVectorXf_print},
    { "__add", _wrap_OctopusRowVectorXf___add},
    { "__sub", _wrap_OctopusRowVectorXf___sub},
    { "__mul", _wrap_OctopusRowVectorXf___mul},
    { "__div", _wrap_OctopusRowVectorXf___div},
    { "__getitem", _wrap_OctopusRowVectorXf___getitem},
    { "__setitem", _wrap_OctopusRowVectorXf___setitem},
    { "size", _wrap_OctopusRowVectorXf_size},
    { "fill", _wrap_OctopusRowVectorXf_fill},
    { "data", _wrap_OctopusRowVectorXf_data},
    { "copy", _wrap_OctopusRowVectorXf_copy},
    {0,0}
};
static swig_lua_method swig_OctopusRowVectorXf_meta[] = {
    { "__add", _wrap_OctopusRowVectorXf___add},
    { "__sub", _wrap_OctopusRowVectorXf___sub},
    { "__mul", _wrap_OctopusRowVectorXf___mul},
    { "__div", _wrap_OctopusRowVectorXf___div},
    { "__getitem", _wrap_OctopusRowVectorXf___getitem},
    { "__setitem", _wrap_OctopusRowVectorXf___setitem},
    {0,0}
};

static swig_lua_attribute swig_OctopusRowVectorXf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctopusRowVectorXf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctopusRowVectorXf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctopusRowVectorXf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctopusRowVectorXf_Sf_SwigStatic = {
    "OctopusRowVectorXf",
    swig_OctopusRowVectorXf_Sf_SwigStatic_methods,
    swig_OctopusRowVectorXf_Sf_SwigStatic_attributes,
    swig_OctopusRowVectorXf_Sf_SwigStatic_constants,
    swig_OctopusRowVectorXf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctopusRowVectorXf_bases[] = {0};
static const char *swig_OctopusRowVectorXf_base_names[] = {0};
static swig_lua_class _wrap_class_OctopusRowVectorXf = { "OctopusRowVectorXf", "OctopusRowVectorXf", &SWIGTYPE_p_Octopus__OctopusRowVectorXf,_proxy__wrap_new_OctopusRowVectorXf, swig_delete_OctopusRowVectorXf, swig_OctopusRowVectorXf_methods, swig_OctopusRowVectorXf_attributes, &swig_OctopusRowVectorXf_Sf_SwigStatic, swig_OctopusRowVectorXf_meta, swig_OctopusRowVectorXf_bases, swig_OctopusRowVectorXf_base_names };

static int _wrap_new_OctopusRowVectorXd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::OctopusRowVectorXd",0,0)
  {
    try
    {
      result = (Octopus::OctopusRowVectorXd *)new Octopus::OctopusRowVectorXd();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusRowVectorXd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusRowVectorXd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = 0 ;
  Octopus::OctopusRowVectorXd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::OctopusRowVectorXd",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::OctopusRowVectorXd",1,"RowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("new_OctopusRowVectorXd",1,SWIGTYPE_p_RowVector);
  }
  
  {
    try
    {
      result = (Octopus::OctopusRowVectorXd *)new Octopus::OctopusRowVectorXd((RowVector const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusRowVectorXd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusRowVectorXd__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Octopus::OctopusRowVectorXd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::OctopusRowVectorXd",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::OctopusRowVectorXd",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  {
    try
    {
      result = (Octopus::OctopusRowVectorXd *)new Octopus::OctopusRowVectorXd(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusRowVectorXd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusRowVectorXd(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OctopusRowVectorXd__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusRowVectorXd__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_OctopusRowVectorXd__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OctopusRowVectorXd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXd::OctopusRowVectorXd()\n"
    "    Octopus::OctopusRowVectorXd::OctopusRowVectorXd(RowVector const &)\n"
    "    Octopus::OctopusRowVectorXd::OctopusRowVectorXd(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXd_print(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::print",1,"Octopus::OctopusRowVectorXd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd_print",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  {
    try
    {
      (arg1)->print();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  Octopus::OctopusRowVectorXd *arg2 = 0 ;
  Octopus::OctopusRowVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::operator +",1,"Octopus::OctopusRowVectorXd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::operator +",2,"Octopus::OctopusRowVectorXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd___add",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd___add",2,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  {
    try
    {
      result = (arg1)->operator +((Octopus::OctopusRowVectorXd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXd * resultptr = new Octopus::OctopusRowVectorXd((const Octopus::OctopusRowVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  Octopus::OctopusRowVectorXd *arg2 = 0 ;
  Octopus::OctopusRowVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::operator -",1,"Octopus::OctopusRowVectorXd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::operator -",2,"Octopus::OctopusRowVectorXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd___sub",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd___sub",2,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  {
    try
    {
      result = (arg1)->operator -((Octopus::OctopusRowVectorXd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXd * resultptr = new Octopus::OctopusRowVectorXd((const Octopus::OctopusRowVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  Octopus::OctopusRowVectorXd *arg2 = 0 ;
  Octopus::OctopusRowVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::operator *",1,"Octopus::OctopusRowVectorXd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::operator *",2,"Octopus::OctopusRowVectorXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd___mul",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd___mul",2,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  {
    try
    {
      result = (arg1)->operator *((Octopus::OctopusRowVectorXd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXd * resultptr = new Octopus::OctopusRowVectorXd((const Octopus::OctopusRowVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  Octopus::OctopusRowVectorXd *arg2 = 0 ;
  Octopus::OctopusRowVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::operator /",1,"Octopus::OctopusRowVectorXd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::operator /",2,"Octopus::OctopusRowVectorXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd___div",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd___div",2,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  {
    try
    {
      result = (arg1)->operator /((Octopus::OctopusRowVectorXd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXd * resultptr = new Octopus::OctopusRowVectorXd((const Octopus::OctopusRowVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  double arg2 ;
  Octopus::OctopusRowVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::operator +",1,"Octopus::OctopusRowVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::operator +",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd___add",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator +(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXd * resultptr = new Octopus::OctopusRowVectorXd((const Octopus::OctopusRowVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXd___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusRowVectorXd___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXd___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXd::operator +(Octopus::OctopusRowVectorXd const &)\n"
    "    Octopus::OctopusRowVectorXd::operator +(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXd___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  double arg2 ;
  Octopus::OctopusRowVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::operator -",1,"Octopus::OctopusRowVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::operator -",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd___sub",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator -(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXd * resultptr = new Octopus::OctopusRowVectorXd((const Octopus::OctopusRowVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXd___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusRowVectorXd___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXd___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXd::operator -(Octopus::OctopusRowVectorXd const &)\n"
    "    Octopus::OctopusRowVectorXd::operator -(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXd___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  double arg2 ;
  Octopus::OctopusRowVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::operator *",1,"Octopus::OctopusRowVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::operator *",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd___mul",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator *(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXd * resultptr = new Octopus::OctopusRowVectorXd((const Octopus::OctopusRowVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXd___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusRowVectorXd___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXd___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXd::operator *(Octopus::OctopusRowVectorXd const &)\n"
    "    Octopus::OctopusRowVectorXd::operator *(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXd___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  double arg2 ;
  Octopus::OctopusRowVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::operator /",1,"Octopus::OctopusRowVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::operator /",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd___div",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator /(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXd * resultptr = new Octopus::OctopusRowVectorXd((const Octopus::OctopusRowVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::__getitem__",1,"Octopus::OctopusRowVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd___getitem",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (double)Octopus_OctopusRowVectorXd___getitem____SWIG(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::__setitem__",1,"Octopus::OctopusRowVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::__setitem__",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd___setitem",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  {
    try
    {
      Octopus_OctopusRowVectorXd___setitem____SWIG(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd_size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::size",1,"Octopus::OctopusRowVectorXd const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd_size",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  {
    try
    {
      result = Octopus_OctopusRowVectorXd_size__SWIG_1((Octopus::OctopusRowVectorXd const *)arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd_size(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusRowVectorXd_size__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXd_size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXd::size()\n"
    "    Octopus::OctopusRowVectorXd::size() const\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXd_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::fill",1,"Octopus::OctopusRowVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd_fill",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  {
    try
    {
      Octopus_OctopusRowVectorXd_fill__SWIG_1(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd_fill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusRowVectorXd_fill__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXd_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXd::fill()\n"
    "    Octopus::OctopusRowVectorXd::fill(double)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXd_data(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::data",1,"Octopus::OctopusRowVectorXd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd_data",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  {
    try
    {
      result = (double *)Octopus_OctopusRowVectorXd_data__SWIG(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd_copy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::copy",1,"Octopus::OctopusRowVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::copy",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd_copy",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OctopusRowVectorXd_copy",3,SWIGTYPE_p_float);
  }
  
  {
    try
    {
      Octopus_OctopusRowVectorXd_copy__SWIG_0(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd_copy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::copy",1,"Octopus::OctopusRowVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::copy",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd_copy",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("OctopusRowVectorXd_copy",3,SWIGTYPE_p_double);
  }
  
  {
    try
    {
      Octopus_OctopusRowVectorXd_copy__SWIG_1(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd_copy(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusRowVectorXd_copy__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusRowVectorXd_copy__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXd_copy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXd::copy(size_t,float *)\n"
    "    Octopus::OctopusRowVectorXd::copy(size_t,double *)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXd___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  Octopus::OctopusRowVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXd::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::__div__",1,"Octopus::OctopusRowVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXd::__div__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("OctopusRowVectorXd___div",1,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  {
    try
    {
      result = Octopus_OctopusRowVectorXd___div____SWIG_2(arg1,(double const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXd * resultptr = new Octopus::OctopusRowVectorXd((const Octopus::OctopusRowVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXd___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXd___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusRowVectorXd___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusRowVectorXd___div__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXd___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXd::operator /(Octopus::OctopusRowVectorXd const &)\n"
    "    Octopus::OctopusRowVectorXd::operator /(double const)\n"
    "    Octopus::OctopusRowVectorXd::__div__(double const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_OctopusRowVectorXd(void *obj) {
Octopus::OctopusRowVectorXd *arg1 = (Octopus::OctopusRowVectorXd *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctopusRowVectorXd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctopusRowVectorXd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctopusRowVectorXd_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OctopusRowVectorXd_methods[]= {
    { "print", _wrap_OctopusRowVectorXd_print},
    { "__add", _wrap_OctopusRowVectorXd___add},
    { "__sub", _wrap_OctopusRowVectorXd___sub},
    { "__mul", _wrap_OctopusRowVectorXd___mul},
    { "__getitem", _wrap_OctopusRowVectorXd___getitem},
    { "__setitem", _wrap_OctopusRowVectorXd___setitem},
    { "size", _wrap_OctopusRowVectorXd_size},
    { "fill", _wrap_OctopusRowVectorXd_fill},
    { "data", _wrap_OctopusRowVectorXd_data},
    { "copy", _wrap_OctopusRowVectorXd_copy},
    { "__div", _wrap_OctopusRowVectorXd___div},
    {0,0}
};
static swig_lua_method swig_OctopusRowVectorXd_meta[] = {
    { "__add", _wrap_OctopusRowVectorXd___add},
    { "__sub", _wrap_OctopusRowVectorXd___sub},
    { "__mul", _wrap_OctopusRowVectorXd___mul},
    { "__getitem", _wrap_OctopusRowVectorXd___getitem},
    { "__setitem", _wrap_OctopusRowVectorXd___setitem},
    { "__div", _wrap_OctopusRowVectorXd___div},
    {0,0}
};

static swig_lua_attribute swig_OctopusRowVectorXd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctopusRowVectorXd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctopusRowVectorXd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctopusRowVectorXd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctopusRowVectorXd_Sf_SwigStatic = {
    "OctopusRowVectorXd",
    swig_OctopusRowVectorXd_Sf_SwigStatic_methods,
    swig_OctopusRowVectorXd_Sf_SwigStatic_attributes,
    swig_OctopusRowVectorXd_Sf_SwigStatic_constants,
    swig_OctopusRowVectorXd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctopusRowVectorXd_bases[] = {0};
static const char *swig_OctopusRowVectorXd_base_names[] = {0};
static swig_lua_class _wrap_class_OctopusRowVectorXd = { "OctopusRowVectorXd", "OctopusRowVectorXd", &SWIGTYPE_p_Octopus__OctopusRowVectorXd,_proxy__wrap_new_OctopusRowVectorXd, swig_delete_OctopusRowVectorXd, swig_OctopusRowVectorXd_methods, swig_OctopusRowVectorXd_attributes, &swig_OctopusRowVectorXd_Sf_SwigStatic, swig_OctopusRowVectorXd_meta, swig_OctopusRowVectorXd_bases, swig_OctopusRowVectorXd_base_names };

static int _wrap_new_OctopusRowVectorXcf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::OctopusRowVectorXcf",0,0)
  {
    try
    {
      result = (Octopus::OctopusRowVectorXcf *)new Octopus::OctopusRowVectorXcf();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusRowVectorXcf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = 0 ;
  Octopus::OctopusRowVectorXcf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::OctopusRowVectorXcf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::OctopusRowVectorXcf",1,"FloatComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("new_OctopusRowVectorXcf",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  {
    try
    {
      result = (Octopus::OctopusRowVectorXcf *)new Octopus::OctopusRowVectorXcf((FloatComplexRowVector const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusRowVectorXcf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Octopus::OctopusRowVectorXcf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::OctopusRowVectorXcf",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::OctopusRowVectorXcf",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  {
    try
    {
      result = (Octopus::OctopusRowVectorXcf *)new Octopus::OctopusRowVectorXcf(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusRowVectorXcf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OctopusRowVectorXcf__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusRowVectorXcf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_OctopusRowVectorXcf__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OctopusRowVectorXcf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXcf::OctopusRowVectorXcf()\n"
    "    Octopus::OctopusRowVectorXcf::OctopusRowVectorXcf(FloatComplexRowVector const &)\n"
    "    Octopus::OctopusRowVectorXcf::OctopusRowVectorXcf(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXcf___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) 0 ;
  Octopus::OctopusRowVectorXcf *arg2 = 0 ;
  Octopus::OctopusRowVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::operator +",1,"Octopus::OctopusRowVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::operator +",2,"Octopus::OctopusRowVectorXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___add",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___add",2,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  {
    try
    {
      result = (arg1)->operator +((Octopus::OctopusRowVectorXcf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcf * resultptr = new Octopus::OctopusRowVectorXcf((const Octopus::OctopusRowVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcf___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) 0 ;
  Octopus::OctopusRowVectorXcf *arg2 = 0 ;
  Octopus::OctopusRowVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::operator -",1,"Octopus::OctopusRowVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::operator -",2,"Octopus::OctopusRowVectorXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___sub",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___sub",2,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  {
    try
    {
      result = (arg1)->operator -((Octopus::OctopusRowVectorXcf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcf * resultptr = new Octopus::OctopusRowVectorXcf((const Octopus::OctopusRowVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcf___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) 0 ;
  Octopus::OctopusRowVectorXcf *arg2 = 0 ;
  Octopus::OctopusRowVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::operator *",1,"Octopus::OctopusRowVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::operator *",2,"Octopus::OctopusRowVectorXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___mul",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___mul",2,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  {
    try
    {
      result = (arg1)->operator *((Octopus::OctopusRowVectorXcf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcf * resultptr = new Octopus::OctopusRowVectorXcf((const Octopus::OctopusRowVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcf___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) 0 ;
  Octopus::OctopusRowVectorXcf *arg2 = 0 ;
  Octopus::OctopusRowVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::operator /",1,"Octopus::OctopusRowVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::operator /",2,"Octopus::OctopusRowVectorXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___div",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___div",2,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  {
    try
    {
      result = (arg1)->operator /((Octopus::OctopusRowVectorXcf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcf * resultptr = new Octopus::OctopusRowVectorXcf((const Octopus::OctopusRowVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcf___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusRowVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::operator +",1,"Octopus::OctopusRowVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::operator +",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___add",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator +(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcf * resultptr = new Octopus::OctopusRowVectorXcf((const Octopus::OctopusRowVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcf___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcf___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcf___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXcf___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXcf::operator +(Octopus::OctopusRowVectorXcf const &)\n"
    "    Octopus::OctopusRowVectorXcf::operator +(std::complex< float > const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXcf___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusRowVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::operator -",1,"Octopus::OctopusRowVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::operator -",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___sub",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator -(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcf * resultptr = new Octopus::OctopusRowVectorXcf((const Octopus::OctopusRowVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcf___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcf___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcf___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXcf___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXcf::operator -(Octopus::OctopusRowVectorXcf const &)\n"
    "    Octopus::OctopusRowVectorXcf::operator -(std::complex< float > const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXcf___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusRowVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::operator *",1,"Octopus::OctopusRowVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::operator *",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___mul",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator *(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcf * resultptr = new Octopus::OctopusRowVectorXcf((const Octopus::OctopusRowVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcf___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcf___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcf___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXcf___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXcf::operator *(Octopus::OctopusRowVectorXcf const &)\n"
    "    Octopus::OctopusRowVectorXcf::operator *(std::complex< float > const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXcf___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusRowVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::operator /",1,"Octopus::OctopusRowVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::operator /",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___div",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator /(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcf * resultptr = new Octopus::OctopusRowVectorXcf((const Octopus::OctopusRowVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcf___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcf___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcf___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXcf___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXcf::operator /(Octopus::OctopusRowVectorXcf const &)\n"
    "    Octopus::OctopusRowVectorXcf::operator /(std::complex< float > const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXcf___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::__getitem__",1,"Octopus::OctopusRowVectorXcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___getitem",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = Octopus_OctopusRowVectorXcf___getitem____SWIG(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcf___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::complex< float > > arg3 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::__setitem__",1,"Octopus::OctopusRowVectorXcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::__setitem__",3,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___setitem",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf___setitem",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  {
    try
    {
      Octopus_OctopusRowVectorXcf___setitem____SWIG(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcf_size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::size",1,"Octopus::OctopusRowVectorXcf const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf_size",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  {
    try
    {
      result = Octopus_OctopusRowVectorXcf_size__SWIG_1((Octopus::OctopusRowVectorXcf const *)arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcf_size(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusRowVectorXcf_size__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXcf_size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXcf::size()\n"
    "    Octopus::OctopusRowVectorXcf::size() const\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXcf_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::fill",1,"Octopus::OctopusRowVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::fill",2,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf_fill",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf_fill",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      Octopus_OctopusRowVectorXcf_fill__SWIG_1(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcf_fill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcf_fill__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXcf_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXcf::fill()\n"
    "    Octopus::OctopusRowVectorXcf::fill(std::complex< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXcf_data(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::data",1,"Octopus::OctopusRowVectorXcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf_data",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  {
    try
    {
      result = (std::complex< float > *)Octopus_OctopusRowVectorXcf_data__SWIG(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcf_copy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) 0 ;
  size_t arg2 ;
  std::complex< float > *arg3 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::copy",1,"Octopus::OctopusRowVectorXcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::copy",3,"std::complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf_copy",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf_copy",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  {
    try
    {
      Octopus_OctopusRowVectorXcf_copy__SWIG_0(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcf_copy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) 0 ;
  size_t arg2 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::copy",1,"Octopus::OctopusRowVectorXcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::copy",3,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf_copy",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf_copy",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  {
    try
    {
      Octopus_OctopusRowVectorXcf_copy__SWIG_1(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcf_copy(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusRowVectorXcf_copy__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusRowVectorXcf_copy__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXcf_copy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXcf::copy(size_t,std::complex< float > *)\n"
    "    Octopus::OctopusRowVectorXcf::copy(size_t,std::complex< double > *)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXcf_print(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcf::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcf::print",1,"Octopus::OctopusRowVectorXcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("OctopusRowVectorXcf_print",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  {
    try
    {
      (arg1)->print();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OctopusRowVectorXcf(void *obj) {
Octopus::OctopusRowVectorXcf *arg1 = (Octopus::OctopusRowVectorXcf *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctopusRowVectorXcf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctopusRowVectorXcf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctopusRowVectorXcf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OctopusRowVectorXcf_methods[]= {
    { "__add", _wrap_OctopusRowVectorXcf___add},
    { "__sub", _wrap_OctopusRowVectorXcf___sub},
    { "__mul", _wrap_OctopusRowVectorXcf___mul},
    { "__div", _wrap_OctopusRowVectorXcf___div},
    { "__getitem", _wrap_OctopusRowVectorXcf___getitem},
    { "__setitem", _wrap_OctopusRowVectorXcf___setitem},
    { "size", _wrap_OctopusRowVectorXcf_size},
    { "fill", _wrap_OctopusRowVectorXcf_fill},
    { "data", _wrap_OctopusRowVectorXcf_data},
    { "copy", _wrap_OctopusRowVectorXcf_copy},
    { "print", _wrap_OctopusRowVectorXcf_print},
    {0,0}
};
static swig_lua_method swig_OctopusRowVectorXcf_meta[] = {
    { "__add", _wrap_OctopusRowVectorXcf___add},
    { "__sub", _wrap_OctopusRowVectorXcf___sub},
    { "__mul", _wrap_OctopusRowVectorXcf___mul},
    { "__div", _wrap_OctopusRowVectorXcf___div},
    { "__getitem", _wrap_OctopusRowVectorXcf___getitem},
    { "__setitem", _wrap_OctopusRowVectorXcf___setitem},
    {0,0}
};

static swig_lua_attribute swig_OctopusRowVectorXcf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctopusRowVectorXcf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctopusRowVectorXcf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctopusRowVectorXcf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctopusRowVectorXcf_Sf_SwigStatic = {
    "OctopusRowVectorXcf",
    swig_OctopusRowVectorXcf_Sf_SwigStatic_methods,
    swig_OctopusRowVectorXcf_Sf_SwigStatic_attributes,
    swig_OctopusRowVectorXcf_Sf_SwigStatic_constants,
    swig_OctopusRowVectorXcf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctopusRowVectorXcf_bases[] = {0};
static const char *swig_OctopusRowVectorXcf_base_names[] = {0};
static swig_lua_class _wrap_class_OctopusRowVectorXcf = { "OctopusRowVectorXcf", "OctopusRowVectorXcf", &SWIGTYPE_p_Octopus__OctopusRowVectorXcf,_proxy__wrap_new_OctopusRowVectorXcf, swig_delete_OctopusRowVectorXcf, swig_OctopusRowVectorXcf_methods, swig_OctopusRowVectorXcf_attributes, &swig_OctopusRowVectorXcf_Sf_SwigStatic, swig_OctopusRowVectorXcf_meta, swig_OctopusRowVectorXcf_bases, swig_OctopusRowVectorXcf_base_names };

static int _wrap_new_OctopusRowVectorXcd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::OctopusRowVectorXcd",0,0)
  {
    try
    {
      result = (Octopus::OctopusRowVectorXcd *)new Octopus::OctopusRowVectorXcd();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusRowVectorXcd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = 0 ;
  Octopus::OctopusRowVectorXcd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::OctopusRowVectorXcd",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::OctopusRowVectorXcd",1,"ComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("new_OctopusRowVectorXcd",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  {
    try
    {
      result = (Octopus::OctopusRowVectorXcd *)new Octopus::OctopusRowVectorXcd((ComplexRowVector const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusRowVectorXcd__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Octopus::OctopusRowVectorXcd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::OctopusRowVectorXcd",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::OctopusRowVectorXcd",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  {
    try
    {
      result = (Octopus::OctopusRowVectorXcd *)new Octopus::OctopusRowVectorXcd(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusRowVectorXcd(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OctopusRowVectorXcd__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusRowVectorXcd__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_OctopusRowVectorXcd__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OctopusRowVectorXcd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXcd::OctopusRowVectorXcd()\n"
    "    Octopus::OctopusRowVectorXcd::OctopusRowVectorXcd(ComplexRowVector const &)\n"
    "    Octopus::OctopusRowVectorXcd::OctopusRowVectorXcd(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXcd_print(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::print",1,"Octopus::OctopusRowVectorXcd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd_print",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  {
    try
    {
      (arg1)->print();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  Octopus::OctopusRowVectorXcd *arg2 = 0 ;
  Octopus::OctopusRowVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::operator +",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::operator +",2,"Octopus::OctopusRowVectorXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___add",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___add",2,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  {
    try
    {
      result = (arg1)->operator +((Octopus::OctopusRowVectorXcd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcd * resultptr = new Octopus::OctopusRowVectorXcd((const Octopus::OctopusRowVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  Octopus::OctopusRowVectorXcd *arg2 = 0 ;
  Octopus::OctopusRowVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::operator -",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::operator -",2,"Octopus::OctopusRowVectorXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___sub",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___sub",2,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  {
    try
    {
      result = (arg1)->operator -((Octopus::OctopusRowVectorXcd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcd * resultptr = new Octopus::OctopusRowVectorXcd((const Octopus::OctopusRowVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  Octopus::OctopusRowVectorXcd *arg2 = 0 ;
  Octopus::OctopusRowVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::operator *",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::operator *",2,"Octopus::OctopusRowVectorXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___mul",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___mul",2,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  {
    try
    {
      result = (arg1)->operator *((Octopus::OctopusRowVectorXcd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcd * resultptr = new Octopus::OctopusRowVectorXcd((const Octopus::OctopusRowVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  Octopus::OctopusRowVectorXcd *arg2 = 0 ;
  Octopus::OctopusRowVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::operator /",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::operator /",2,"Octopus::OctopusRowVectorXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___div",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___div",2,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  {
    try
    {
      result = (arg1)->operator /((Octopus::OctopusRowVectorXcd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcd * resultptr = new Octopus::OctopusRowVectorXcd((const Octopus::OctopusRowVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusRowVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::operator +",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::operator +",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___add",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator +(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcd * resultptr = new Octopus::OctopusRowVectorXcd((const Octopus::OctopusRowVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusRowVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::operator -",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::operator -",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___sub",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator -(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcd * resultptr = new Octopus::OctopusRowVectorXcd((const Octopus::OctopusRowVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusRowVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::operator *",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::operator *",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___mul",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator *(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcd * resultptr = new Octopus::OctopusRowVectorXcd((const Octopus::OctopusRowVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusRowVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::operator /",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::operator /",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___div",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator /(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcd * resultptr = new Octopus::OctopusRowVectorXcd((const Octopus::OctopusRowVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::complex< double > > result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::__getitem__",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___getitem",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = Octopus_OctopusRowVectorXcd___getitem____SWIG(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::complex< double > > arg3 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::__setitem__",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::__setitem__",3,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___setitem",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___setitem",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  {
    try
    {
      Octopus_OctopusRowVectorXcd___setitem____SWIG(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd_size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::size",1,"Octopus::OctopusRowVectorXcd const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd_size",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  {
    try
    {
      result = Octopus_OctopusRowVectorXcd_size__SWIG_1((Octopus::OctopusRowVectorXcd const *)arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd_size(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusRowVectorXcd_size__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXcd_size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXcd::size()\n"
    "    Octopus::OctopusRowVectorXcd::size() const\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXcd_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::fill",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::fill",2,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd_fill",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd_fill",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      Octopus_OctopusRowVectorXcd_fill__SWIG_1(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd_fill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcd_fill__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXcd_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXcd::fill()\n"
    "    Octopus::OctopusRowVectorXcd::fill(std::complex< double >)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXcd_data(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::data",1,"Octopus::OctopusRowVectorXcd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd_data",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  {
    try
    {
      result = (std::complex< double > *)Octopus_OctopusRowVectorXcd_data__SWIG(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd_copy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  size_t arg2 ;
  std::complex< float > *arg3 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::copy",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::copy",3,"std::complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd_copy",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd_copy",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  {
    try
    {
      Octopus_OctopusRowVectorXcd_copy__SWIG_0(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd_copy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  size_t arg2 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::copy",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::copy",3,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd_copy",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd_copy",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  {
    try
    {
      Octopus_OctopusRowVectorXcd_copy__SWIG_1(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd_copy(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusRowVectorXcd_copy__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusRowVectorXcd_copy__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXcd_copy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXcd::copy(size_t,std::complex< float > *)\n"
    "    Octopus::OctopusRowVectorXcd::copy(size_t,std::complex< double > *)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXcd___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  Octopus::OctopusRowVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::__add__",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::__add__",2,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___add",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = Octopus_OctopusRowVectorXcd___add____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcd * resultptr = new Octopus::OctopusRowVectorXcd((const Octopus::OctopusRowVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcd___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcd___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcd___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXcd___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXcd::operator +(Octopus::OctopusRowVectorXcd const &)\n"
    "    Octopus::OctopusRowVectorXcd::operator +(std::complex< float > const)\n"
    "    Octopus::OctopusRowVectorXcd::__add__(std::complex< double > const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXcd___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  Octopus::OctopusRowVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::__sub__",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::__sub__",2,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___sub",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = Octopus_OctopusRowVectorXcd___sub____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcd * resultptr = new Octopus::OctopusRowVectorXcd((const Octopus::OctopusRowVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcd___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcd___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcd___sub__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXcd___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXcd::operator -(Octopus::OctopusRowVectorXcd const &)\n"
    "    Octopus::OctopusRowVectorXcd::operator -(std::complex< float > const)\n"
    "    Octopus::OctopusRowVectorXcd::__sub__(std::complex< double > const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXcd___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  Octopus::OctopusRowVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::__mul__",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::__mul__",2,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___mul",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = Octopus_OctopusRowVectorXcd___mul____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcd * resultptr = new Octopus::OctopusRowVectorXcd((const Octopus::OctopusRowVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcd___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcd___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcd___mul__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXcd___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXcd::operator *(Octopus::OctopusRowVectorXcd const &)\n"
    "    Octopus::OctopusRowVectorXcd::operator *(std::complex< float > const)\n"
    "    Octopus::OctopusRowVectorXcd::__mul__(std::complex< double > const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusRowVectorXcd___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  Octopus::OctopusRowVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusRowVectorXcd::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::__div__",1,"Octopus::OctopusRowVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusRowVectorXcd::__div__",2,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___div",1,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusRowVectorXcd___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = Octopus_OctopusRowVectorXcd___div____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcd * resultptr = new Octopus::OctopusRowVectorXcd((const Octopus::OctopusRowVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusRowVectorXcd___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcd___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcd___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusRowVectorXcd___div__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusRowVectorXcd___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusRowVectorXcd::operator /(Octopus::OctopusRowVectorXcd const &)\n"
    "    Octopus::OctopusRowVectorXcd::operator /(std::complex< float > const)\n"
    "    Octopus::OctopusRowVectorXcd::__div__(std::complex< double > const)\n");
  lua_error(L);return 0;
}


static void swig_delete_OctopusRowVectorXcd(void *obj) {
Octopus::OctopusRowVectorXcd *arg1 = (Octopus::OctopusRowVectorXcd *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctopusRowVectorXcd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctopusRowVectorXcd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctopusRowVectorXcd_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OctopusRowVectorXcd_methods[]= {
    { "print", _wrap_OctopusRowVectorXcd_print},
    { "__getitem", _wrap_OctopusRowVectorXcd___getitem},
    { "__setitem", _wrap_OctopusRowVectorXcd___setitem},
    { "size", _wrap_OctopusRowVectorXcd_size},
    { "fill", _wrap_OctopusRowVectorXcd_fill},
    { "data", _wrap_OctopusRowVectorXcd_data},
    { "copy", _wrap_OctopusRowVectorXcd_copy},
    { "__add", _wrap_OctopusRowVectorXcd___add},
    { "__sub", _wrap_OctopusRowVectorXcd___sub},
    { "__mul", _wrap_OctopusRowVectorXcd___mul},
    { "__div", _wrap_OctopusRowVectorXcd___div},
    {0,0}
};
static swig_lua_method swig_OctopusRowVectorXcd_meta[] = {
    { "__getitem", _wrap_OctopusRowVectorXcd___getitem},
    { "__setitem", _wrap_OctopusRowVectorXcd___setitem},
    { "__add", _wrap_OctopusRowVectorXcd___add},
    { "__sub", _wrap_OctopusRowVectorXcd___sub},
    { "__mul", _wrap_OctopusRowVectorXcd___mul},
    { "__div", _wrap_OctopusRowVectorXcd___div},
    {0,0}
};

static swig_lua_attribute swig_OctopusRowVectorXcd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctopusRowVectorXcd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctopusRowVectorXcd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctopusRowVectorXcd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctopusRowVectorXcd_Sf_SwigStatic = {
    "OctopusRowVectorXcd",
    swig_OctopusRowVectorXcd_Sf_SwigStatic_methods,
    swig_OctopusRowVectorXcd_Sf_SwigStatic_attributes,
    swig_OctopusRowVectorXcd_Sf_SwigStatic_constants,
    swig_OctopusRowVectorXcd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctopusRowVectorXcd_bases[] = {0};
static const char *swig_OctopusRowVectorXcd_base_names[] = {0};
static swig_lua_class _wrap_class_OctopusRowVectorXcd = { "OctopusRowVectorXcd", "OctopusRowVectorXcd", &SWIGTYPE_p_Octopus__OctopusRowVectorXcd,_proxy__wrap_new_OctopusRowVectorXcd, swig_delete_OctopusRowVectorXcd, swig_OctopusRowVectorXcd_methods, swig_OctopusRowVectorXcd_attributes, &swig_OctopusRowVectorXcd_Sf_SwigStatic, swig_OctopusRowVectorXcd_meta, swig_OctopusRowVectorXcd_bases, swig_OctopusRowVectorXcd_base_names };

static int _wrap_new_OctopusColVectorXf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::OctopusColVectorXf",0,0)
  {
    try
    {
      result = (Octopus::OctopusColVectorXf *)new Octopus::OctopusColVectorXf();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusColVectorXf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = 0 ;
  Octopus::OctopusColVectorXf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::OctopusColVectorXf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::OctopusColVectorXf",1,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("new_OctopusColVectorXf",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  {
    try
    {
      result = (Octopus::OctopusColVectorXf *)new Octopus::OctopusColVectorXf((FloatColumnVector const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusColVectorXf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Octopus::OctopusColVectorXf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::OctopusColVectorXf",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::OctopusColVectorXf",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  {
    try
    {
      result = (Octopus::OctopusColVectorXf *)new Octopus::OctopusColVectorXf(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusColVectorXf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OctopusColVectorXf__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusColVectorXf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_OctopusColVectorXf__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OctopusColVectorXf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXf::OctopusColVectorXf()\n"
    "    Octopus::OctopusColVectorXf::OctopusColVectorXf(FloatColumnVector const &)\n"
    "    Octopus::OctopusColVectorXf::OctopusColVectorXf(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXf___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  Octopus::OctopusColVectorXf *arg2 = 0 ;
  Octopus::OctopusColVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::operator +",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::operator +",2,"Octopus::OctopusColVectorXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___add",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___add",2,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  {
    try
    {
      result = (arg1)->operator +((Octopus::OctopusColVectorXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXf * resultptr = new Octopus::OctopusColVectorXf((const Octopus::OctopusColVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  Octopus::OctopusColVectorXf *arg2 = 0 ;
  Octopus::OctopusColVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::operator -",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::operator -",2,"Octopus::OctopusColVectorXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___sub",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___sub",2,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  {
    try
    {
      result = (arg1)->operator -((Octopus::OctopusColVectorXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXf * resultptr = new Octopus::OctopusColVectorXf((const Octopus::OctopusColVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  Octopus::OctopusColVectorXf *arg2 = 0 ;
  Octopus::OctopusColVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::operator *",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::operator *",2,"Octopus::OctopusColVectorXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___mul",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___mul",2,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  {
    try
    {
      result = (arg1)->operator *((Octopus::OctopusColVectorXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXf * resultptr = new Octopus::OctopusColVectorXf((const Octopus::OctopusColVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  Octopus::OctopusColVectorXf *arg2 = 0 ;
  Octopus::OctopusColVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::operator /",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::operator /",2,"Octopus::OctopusColVectorXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___div",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___div",2,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  {
    try
    {
      result = (arg1)->operator /((Octopus::OctopusColVectorXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXf * resultptr = new Octopus::OctopusColVectorXf((const Octopus::OctopusColVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  float arg2 ;
  Octopus::OctopusColVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::operator +",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::operator +",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___add",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator +(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXf * resultptr = new Octopus::OctopusColVectorXf((const Octopus::OctopusColVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  float arg2 ;
  Octopus::OctopusColVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::operator -",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::operator -",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___sub",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator -(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXf * resultptr = new Octopus::OctopusColVectorXf((const Octopus::OctopusColVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  float arg2 ;
  Octopus::OctopusColVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::operator *",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___mul",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator *(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXf * resultptr = new Octopus::OctopusColVectorXf((const Octopus::OctopusColVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  float arg2 ;
  Octopus::OctopusColVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::operator /",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___div",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator /(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXf * resultptr = new Octopus::OctopusColVectorXf((const Octopus::OctopusColVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::__getitem__",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___getitem",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (float)Octopus_OctopusColVectorXf___getitem____SWIG(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::__setitem__",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusColVectorXf::__setitem__",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___setitem",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  {
    try
    {
      Octopus_OctopusColVectorXf___setitem____SWIG(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf_size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::size",1,"Octopus::OctopusColVectorXf const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf_size",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  {
    try
    {
      result = Octopus_OctopusColVectorXf_size__SWIG_1((Octopus::OctopusColVectorXf const *)arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf_size(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusColVectorXf_size__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXf_size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXf::size()\n"
    "    Octopus::OctopusColVectorXf::size() const\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXf_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::fill",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf_fill",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  {
    try
    {
      Octopus_OctopusColVectorXf_fill__SWIG_1(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf_fill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXf_fill__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXf_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXf::fill()\n"
    "    Octopus::OctopusColVectorXf::fill(float)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXf_data(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::data",1,"Octopus::OctopusColVectorXf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf_data",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  {
    try
    {
      result = (float *)Octopus_OctopusColVectorXf_data__SWIG(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf_copy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::copy",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Octopus::OctopusColVectorXf::copy",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf_copy",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OctopusColVectorXf_copy",3,SWIGTYPE_p_float);
  }
  
  {
    try
    {
      Octopus_OctopusColVectorXf_copy__SWIG_0(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf_copy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::copy",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Octopus::OctopusColVectorXf::copy",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf_copy",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("OctopusColVectorXf_copy",3,SWIGTYPE_p_double);
  }
  
  {
    try
    {
      Octopus_OctopusColVectorXf_copy__SWIG_1(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf_copy(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusColVectorXf_copy__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusColVectorXf_copy__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXf_copy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXf::copy(size_t,float *)\n"
    "    Octopus::OctopusColVectorXf::copy(size_t,double *)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXf___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  float arg2 ;
  Octopus::OctopusColVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::__add__",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::__add__",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___add",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  {
    try
    {
      result = Octopus_OctopusColVectorXf___add____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXf * resultptr = new Octopus::OctopusColVectorXf((const Octopus::OctopusColVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXf___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXf___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXf___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXf___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXf::operator +(Octopus::OctopusColVectorXf const &)\n"
    "    Octopus::OctopusColVectorXf::operator +(float const)\n"
    "    Octopus::OctopusColVectorXf::__add__(float)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXf___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  float arg2 ;
  Octopus::OctopusColVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::__sub__",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::__sub__",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___sub",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  {
    try
    {
      result = Octopus_OctopusColVectorXf___sub____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXf * resultptr = new Octopus::OctopusColVectorXf((const Octopus::OctopusColVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXf___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXf___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXf___sub__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXf___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXf::operator -(Octopus::OctopusColVectorXf const &)\n"
    "    Octopus::OctopusColVectorXf::operator -(float const)\n"
    "    Octopus::OctopusColVectorXf::__sub__(float)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXf___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  float arg2 ;
  Octopus::OctopusColVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::__mul__",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::__mul__",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___mul",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  {
    try
    {
      result = Octopus_OctopusColVectorXf___mul____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXf * resultptr = new Octopus::OctopusColVectorXf((const Octopus::OctopusColVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXf___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXf___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXf___mul__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXf___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXf::operator *(Octopus::OctopusColVectorXf const &)\n"
    "    Octopus::OctopusColVectorXf::operator *(float const)\n"
    "    Octopus::OctopusColVectorXf::__mul__(float)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXf___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  float arg2 ;
  Octopus::OctopusColVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::__div__",1,"Octopus::OctopusColVectorXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXf::__div__",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf___div",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  {
    try
    {
      result = Octopus_OctopusColVectorXf___div____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXf * resultptr = new Octopus::OctopusColVectorXf((const Octopus::OctopusColVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXf___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXf___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXf___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXf___div__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXf___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXf::operator /(Octopus::OctopusColVectorXf const &)\n"
    "    Octopus::OctopusColVectorXf::operator /(float const)\n"
    "    Octopus::OctopusColVectorXf::__div__(float)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXf_print(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXf::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXf::print",1,"Octopus::OctopusColVectorXf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("OctopusColVectorXf_print",1,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  {
    try
    {
      (arg1)->print();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OctopusColVectorXf(void *obj) {
Octopus::OctopusColVectorXf *arg1 = (Octopus::OctopusColVectorXf *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctopusColVectorXf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctopusColVectorXf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctopusColVectorXf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OctopusColVectorXf_methods[]= {
    { "__getitem", _wrap_OctopusColVectorXf___getitem},
    { "__setitem", _wrap_OctopusColVectorXf___setitem},
    { "size", _wrap_OctopusColVectorXf_size},
    { "fill", _wrap_OctopusColVectorXf_fill},
    { "data", _wrap_OctopusColVectorXf_data},
    { "copy", _wrap_OctopusColVectorXf_copy},
    { "__add", _wrap_OctopusColVectorXf___add},
    { "__sub", _wrap_OctopusColVectorXf___sub},
    { "__mul", _wrap_OctopusColVectorXf___mul},
    { "__div", _wrap_OctopusColVectorXf___div},
    { "print", _wrap_OctopusColVectorXf_print},
    {0,0}
};
static swig_lua_method swig_OctopusColVectorXf_meta[] = {
    { "__getitem", _wrap_OctopusColVectorXf___getitem},
    { "__setitem", _wrap_OctopusColVectorXf___setitem},
    { "__add", _wrap_OctopusColVectorXf___add},
    { "__sub", _wrap_OctopusColVectorXf___sub},
    { "__mul", _wrap_OctopusColVectorXf___mul},
    { "__div", _wrap_OctopusColVectorXf___div},
    {0,0}
};

static swig_lua_attribute swig_OctopusColVectorXf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctopusColVectorXf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctopusColVectorXf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctopusColVectorXf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctopusColVectorXf_Sf_SwigStatic = {
    "OctopusColVectorXf",
    swig_OctopusColVectorXf_Sf_SwigStatic_methods,
    swig_OctopusColVectorXf_Sf_SwigStatic_attributes,
    swig_OctopusColVectorXf_Sf_SwigStatic_constants,
    swig_OctopusColVectorXf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctopusColVectorXf_bases[] = {0};
static const char *swig_OctopusColVectorXf_base_names[] = {0};
static swig_lua_class _wrap_class_OctopusColVectorXf = { "OctopusColVectorXf", "OctopusColVectorXf", &SWIGTYPE_p_Octopus__OctopusColVectorXf,_proxy__wrap_new_OctopusColVectorXf, swig_delete_OctopusColVectorXf, swig_OctopusColVectorXf_methods, swig_OctopusColVectorXf_attributes, &swig_OctopusColVectorXf_Sf_SwigStatic, swig_OctopusColVectorXf_meta, swig_OctopusColVectorXf_bases, swig_OctopusColVectorXf_base_names };

static int _wrap_new_OctopusColVectorXd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::OctopusColVectorXd",0,0)
  {
    try
    {
      result = (Octopus::OctopusColVectorXd *)new Octopus::OctopusColVectorXd();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusColVectorXd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = 0 ;
  Octopus::OctopusColVectorXd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::OctopusColVectorXd",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::OctopusColVectorXd",1,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("new_OctopusColVectorXd",1,SWIGTYPE_p_ColumnVector);
  }
  
  {
    try
    {
      result = (Octopus::OctopusColVectorXd *)new Octopus::OctopusColVectorXd((ColumnVector const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusColVectorXd__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Octopus::OctopusColVectorXd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::OctopusColVectorXd",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::OctopusColVectorXd",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  {
    try
    {
      result = (Octopus::OctopusColVectorXd *)new Octopus::OctopusColVectorXd(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusColVectorXd(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OctopusColVectorXd__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusColVectorXd__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_OctopusColVectorXd__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OctopusColVectorXd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXd::OctopusColVectorXd()\n"
    "    Octopus::OctopusColVectorXd::OctopusColVectorXd(ColumnVector const &)\n"
    "    Octopus::OctopusColVectorXd::OctopusColVectorXd(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXd___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  Octopus::OctopusColVectorXd *arg2 = 0 ;
  Octopus::OctopusColVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::operator +",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::operator +",2,"Octopus::OctopusColVectorXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___add",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___add",2,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  {
    try
    {
      result = (arg1)->operator +((Octopus::OctopusColVectorXd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXd * resultptr = new Octopus::OctopusColVectorXd((const Octopus::OctopusColVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  Octopus::OctopusColVectorXd *arg2 = 0 ;
  Octopus::OctopusColVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::operator -",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::operator -",2,"Octopus::OctopusColVectorXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___sub",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___sub",2,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  {
    try
    {
      result = (arg1)->operator -((Octopus::OctopusColVectorXd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXd * resultptr = new Octopus::OctopusColVectorXd((const Octopus::OctopusColVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  Octopus::OctopusColVectorXd *arg2 = 0 ;
  Octopus::OctopusColVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::operator *",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::operator *",2,"Octopus::OctopusColVectorXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___mul",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___mul",2,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  {
    try
    {
      result = (arg1)->operator *((Octopus::OctopusColVectorXd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXd * resultptr = new Octopus::OctopusColVectorXd((const Octopus::OctopusColVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  Octopus::OctopusColVectorXd *arg2 = 0 ;
  Octopus::OctopusColVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::operator /",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::operator /",2,"Octopus::OctopusColVectorXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___div",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___div",2,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  {
    try
    {
      result = (arg1)->operator /((Octopus::OctopusColVectorXd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXd * resultptr = new Octopus::OctopusColVectorXd((const Octopus::OctopusColVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  double arg2 ;
  Octopus::OctopusColVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::operator +",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::operator +",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___add",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator +(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXd * resultptr = new Octopus::OctopusColVectorXd((const Octopus::OctopusColVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  double arg2 ;
  Octopus::OctopusColVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::operator -",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::operator -",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___sub",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator -(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXd * resultptr = new Octopus::OctopusColVectorXd((const Octopus::OctopusColVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  double arg2 ;
  Octopus::OctopusColVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::operator *",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::operator *",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___mul",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator *(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXd * resultptr = new Octopus::OctopusColVectorXd((const Octopus::OctopusColVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  double arg2 ;
  Octopus::OctopusColVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::operator /",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::operator /",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___div",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator /(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXd * resultptr = new Octopus::OctopusColVectorXd((const Octopus::OctopusColVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::__getitem__",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___getitem",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (double)Octopus_OctopusColVectorXd___getitem____SWIG(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::__setitem__",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusColVectorXd::__setitem__",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___setitem",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  {
    try
    {
      Octopus_OctopusColVectorXd___setitem____SWIG(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd_size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::size",1,"Octopus::OctopusColVectorXd const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd_size",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  {
    try
    {
      result = Octopus_OctopusColVectorXd_size__SWIG_1((Octopus::OctopusColVectorXd const *)arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd_size(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusColVectorXd_size__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXd_size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXd::size()\n"
    "    Octopus::OctopusColVectorXd::size() const\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXd_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::fill",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd_fill",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  {
    try
    {
      Octopus_OctopusColVectorXd_fill__SWIG_1(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd_fill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXd_fill__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXd_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXd::fill()\n"
    "    Octopus::OctopusColVectorXd::fill(double)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXd_data(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::data",1,"Octopus::OctopusColVectorXd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd_data",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  {
    try
    {
      result = (double *)Octopus_OctopusColVectorXd_data__SWIG(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd_copy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::copy",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Octopus::OctopusColVectorXd::copy",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd_copy",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OctopusColVectorXd_copy",3,SWIGTYPE_p_float);
  }
  
  {
    try
    {
      Octopus_OctopusColVectorXd_copy__SWIG_0(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd_copy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::copy",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Octopus::OctopusColVectorXd::copy",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd_copy",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("OctopusColVectorXd_copy",3,SWIGTYPE_p_double);
  }
  
  {
    try
    {
      Octopus_OctopusColVectorXd_copy__SWIG_1(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd_copy(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusColVectorXd_copy__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusColVectorXd_copy__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXd_copy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXd::copy(size_t,float *)\n"
    "    Octopus::OctopusColVectorXd::copy(size_t,double *)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXd___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  double arg2 ;
  Octopus::OctopusColVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::__add__",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::__add__",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___add",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  {
    try
    {
      result = Octopus_OctopusColVectorXd___add____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXd * resultptr = new Octopus::OctopusColVectorXd((const Octopus::OctopusColVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXd___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXd___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXd___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXd___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXd::operator +(Octopus::OctopusColVectorXd const &)\n"
    "    Octopus::OctopusColVectorXd::operator +(double const)\n"
    "    Octopus::OctopusColVectorXd::__add__(double)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXd___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  double arg2 ;
  Octopus::OctopusColVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::__sub__",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::__sub__",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___sub",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  {
    try
    {
      result = Octopus_OctopusColVectorXd___sub____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXd * resultptr = new Octopus::OctopusColVectorXd((const Octopus::OctopusColVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXd___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXd___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXd___sub__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXd___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXd::operator -(Octopus::OctopusColVectorXd const &)\n"
    "    Octopus::OctopusColVectorXd::operator -(double const)\n"
    "    Octopus::OctopusColVectorXd::__sub__(double)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXd___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  double arg2 ;
  Octopus::OctopusColVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::__mul__",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::__mul__",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___mul",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  {
    try
    {
      result = Octopus_OctopusColVectorXd___mul____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXd * resultptr = new Octopus::OctopusColVectorXd((const Octopus::OctopusColVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXd___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXd___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXd___mul__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXd___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXd::operator *(Octopus::OctopusColVectorXd const &)\n"
    "    Octopus::OctopusColVectorXd::operator *(double const)\n"
    "    Octopus::OctopusColVectorXd::__mul__(double)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXd___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  double arg2 ;
  Octopus::OctopusColVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::__div__",1,"Octopus::OctopusColVectorXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXd::__div__",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd___div",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  {
    try
    {
      result = Octopus_OctopusColVectorXd___div____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXd * resultptr = new Octopus::OctopusColVectorXd((const Octopus::OctopusColVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXd___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXd___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXd___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusColVectorXd___div__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXd___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXd::operator /(Octopus::OctopusColVectorXd const &)\n"
    "    Octopus::OctopusColVectorXd::operator /(double const)\n"
    "    Octopus::OctopusColVectorXd::__div__(double)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXd_print(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXd::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXd::print",1,"Octopus::OctopusColVectorXd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("OctopusColVectorXd_print",1,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  {
    try
    {
      (arg1)->print();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OctopusColVectorXd(void *obj) {
Octopus::OctopusColVectorXd *arg1 = (Octopus::OctopusColVectorXd *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctopusColVectorXd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctopusColVectorXd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctopusColVectorXd_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OctopusColVectorXd_methods[]= {
    { "__getitem", _wrap_OctopusColVectorXd___getitem},
    { "__setitem", _wrap_OctopusColVectorXd___setitem},
    { "size", _wrap_OctopusColVectorXd_size},
    { "fill", _wrap_OctopusColVectorXd_fill},
    { "data", _wrap_OctopusColVectorXd_data},
    { "copy", _wrap_OctopusColVectorXd_copy},
    { "__add", _wrap_OctopusColVectorXd___add},
    { "__sub", _wrap_OctopusColVectorXd___sub},
    { "__mul", _wrap_OctopusColVectorXd___mul},
    { "__div", _wrap_OctopusColVectorXd___div},
    { "print", _wrap_OctopusColVectorXd_print},
    {0,0}
};
static swig_lua_method swig_OctopusColVectorXd_meta[] = {
    { "__getitem", _wrap_OctopusColVectorXd___getitem},
    { "__setitem", _wrap_OctopusColVectorXd___setitem},
    { "__add", _wrap_OctopusColVectorXd___add},
    { "__sub", _wrap_OctopusColVectorXd___sub},
    { "__mul", _wrap_OctopusColVectorXd___mul},
    { "__div", _wrap_OctopusColVectorXd___div},
    {0,0}
};

static swig_lua_attribute swig_OctopusColVectorXd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctopusColVectorXd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctopusColVectorXd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctopusColVectorXd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctopusColVectorXd_Sf_SwigStatic = {
    "OctopusColVectorXd",
    swig_OctopusColVectorXd_Sf_SwigStatic_methods,
    swig_OctopusColVectorXd_Sf_SwigStatic_attributes,
    swig_OctopusColVectorXd_Sf_SwigStatic_constants,
    swig_OctopusColVectorXd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctopusColVectorXd_bases[] = {0};
static const char *swig_OctopusColVectorXd_base_names[] = {0};
static swig_lua_class _wrap_class_OctopusColVectorXd = { "OctopusColVectorXd", "OctopusColVectorXd", &SWIGTYPE_p_Octopus__OctopusColVectorXd,_proxy__wrap_new_OctopusColVectorXd, swig_delete_OctopusColVectorXd, swig_OctopusColVectorXd_methods, swig_OctopusColVectorXd_attributes, &swig_OctopusColVectorXd_Sf_SwigStatic, swig_OctopusColVectorXd_meta, swig_OctopusColVectorXd_bases, swig_OctopusColVectorXd_base_names };

static int _wrap_new_OctopusColVectorXcf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::OctopusColVectorXcf",0,0)
  {
    try
    {
      result = (Octopus::OctopusColVectorXcf *)new Octopus::OctopusColVectorXcf();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusColVectorXcf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = 0 ;
  Octopus::OctopusColVectorXcf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::OctopusColVectorXcf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::OctopusColVectorXcf",1,"FloatComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("new_OctopusColVectorXcf",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  {
    try
    {
      result = (Octopus::OctopusColVectorXcf *)new Octopus::OctopusColVectorXcf((FloatComplexColumnVector const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusColVectorXcf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Octopus::OctopusColVectorXcf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::OctopusColVectorXcf",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::OctopusColVectorXcf",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  {
    try
    {
      result = (Octopus::OctopusColVectorXcf *)new Octopus::OctopusColVectorXcf(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusColVectorXcf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OctopusColVectorXcf__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusColVectorXcf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_OctopusColVectorXcf__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OctopusColVectorXcf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXcf::OctopusColVectorXcf()\n"
    "    Octopus::OctopusColVectorXcf::OctopusColVectorXcf(FloatComplexColumnVector const &)\n"
    "    Octopus::OctopusColVectorXcf::OctopusColVectorXcf(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXcf___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  Octopus::OctopusColVectorXcf *arg2 = 0 ;
  Octopus::OctopusColVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::operator +",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::operator +",2,"Octopus::OctopusColVectorXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___add",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___add",2,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  {
    try
    {
      result = (arg1)->operator +((Octopus::OctopusColVectorXcf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcf * resultptr = new Octopus::OctopusColVectorXcf((const Octopus::OctopusColVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  Octopus::OctopusColVectorXcf *arg2 = 0 ;
  Octopus::OctopusColVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::operator -",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::operator -",2,"Octopus::OctopusColVectorXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___sub",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___sub",2,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  {
    try
    {
      result = (arg1)->operator -((Octopus::OctopusColVectorXcf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcf * resultptr = new Octopus::OctopusColVectorXcf((const Octopus::OctopusColVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  Octopus::OctopusColVectorXcf *arg2 = 0 ;
  Octopus::OctopusColVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::operator *",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::operator *",2,"Octopus::OctopusColVectorXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___mul",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___mul",2,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  {
    try
    {
      result = (arg1)->operator *((Octopus::OctopusColVectorXcf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcf * resultptr = new Octopus::OctopusColVectorXcf((const Octopus::OctopusColVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  Octopus::OctopusColVectorXcf *arg2 = 0 ;
  Octopus::OctopusColVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::operator /",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::operator /",2,"Octopus::OctopusColVectorXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___div",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___div",2,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  {
    try
    {
      result = (arg1)->operator /((Octopus::OctopusColVectorXcf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcf * resultptr = new Octopus::OctopusColVectorXcf((const Octopus::OctopusColVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusColVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::operator +",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::operator +",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___add",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator +(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcf * resultptr = new Octopus::OctopusColVectorXcf((const Octopus::OctopusColVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusColVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::operator -",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::operator -",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___sub",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator -(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcf * resultptr = new Octopus::OctopusColVectorXcf((const Octopus::OctopusColVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusColVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::operator *",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::operator *",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___mul",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator *(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcf * resultptr = new Octopus::OctopusColVectorXcf((const Octopus::OctopusColVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusColVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::operator /",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::operator /",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___div",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator /(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcf * resultptr = new Octopus::OctopusColVectorXcf((const Octopus::OctopusColVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::complex< float > > result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::__getitem__",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___getitem",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = Octopus_OctopusColVectorXcf___getitem____SWIG(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::complex< float > > arg3 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::__setitem__",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::__setitem__",3,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___setitem",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___setitem",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  {
    try
    {
      Octopus_OctopusColVectorXcf___setitem____SWIG(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf_size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::size",1,"Octopus::OctopusColVectorXcf const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf_size",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  {
    try
    {
      result = Octopus_OctopusColVectorXcf_size__SWIG_1((Octopus::OctopusColVectorXcf const *)arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf_size(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusColVectorXcf_size__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXcf_size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXcf::size()\n"
    "    Octopus::OctopusColVectorXcf::size() const\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXcf_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::fill",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::fill",2,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf_fill",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcf_fill",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      Octopus_OctopusColVectorXcf_fill__SWIG_1(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf_fill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcf_fill__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXcf_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXcf::fill()\n"
    "    Octopus::OctopusColVectorXcf::fill(std::complex< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXcf_data(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::data",1,"Octopus::OctopusColVectorXcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf_data",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  {
    try
    {
      result = (std::complex< float > *)Octopus_OctopusColVectorXcf_data__SWIG(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf_copy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  size_t arg2 ;
  std::complex< float > *arg3 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::copy",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::copy",3,"std::complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf_copy",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcf_copy",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  {
    try
    {
      Octopus_OctopusColVectorXcf_copy__SWIG_0(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf_copy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  size_t arg2 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::copy",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::copy",3,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf_copy",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcf_copy",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  {
    try
    {
      Octopus_OctopusColVectorXcf_copy__SWIG_1(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf_copy(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusColVectorXcf_copy__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusColVectorXcf_copy__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXcf_copy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXcf::copy(size_t,std::complex< float > *)\n"
    "    Octopus::OctopusColVectorXcf::copy(size_t,std::complex< double > *)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXcf___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusColVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::__add__",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::__add__",2,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___add",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = Octopus_OctopusColVectorXcf___add____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcf * resultptr = new Octopus::OctopusColVectorXcf((const Octopus::OctopusColVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcf___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcf___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcf___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXcf___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXcf::operator +(Octopus::OctopusColVectorXcf const &)\n"
    "    Octopus::OctopusColVectorXcf::operator +(std::complex< float > const)\n"
    "    Octopus::OctopusColVectorXcf::__add__(std::complex< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXcf___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusColVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::__sub__",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::__sub__",2,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___sub",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = Octopus_OctopusColVectorXcf___sub____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcf * resultptr = new Octopus::OctopusColVectorXcf((const Octopus::OctopusColVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcf___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcf___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcf___sub__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXcf___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXcf::operator -(Octopus::OctopusColVectorXcf const &)\n"
    "    Octopus::OctopusColVectorXcf::operator -(std::complex< float > const)\n"
    "    Octopus::OctopusColVectorXcf::__sub__(std::complex< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXcf___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusColVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::__mul__",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::__mul__",2,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___mul",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = Octopus_OctopusColVectorXcf___mul____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcf * resultptr = new Octopus::OctopusColVectorXcf((const Octopus::OctopusColVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcf___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcf___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcf___mul__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXcf___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXcf::operator *(Octopus::OctopusColVectorXcf const &)\n"
    "    Octopus::OctopusColVectorXcf::operator *(std::complex< float > const)\n"
    "    Octopus::OctopusColVectorXcf::__mul__(std::complex< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXcf___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusColVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::__div__",1,"Octopus::OctopusColVectorXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::__div__",2,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___div",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcf___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = Octopus_OctopusColVectorXcf___div____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcf * resultptr = new Octopus::OctopusColVectorXcf((const Octopus::OctopusColVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcf___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcf___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcf___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcf___div__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXcf___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXcf::operator /(Octopus::OctopusColVectorXcf const &)\n"
    "    Octopus::OctopusColVectorXcf::operator /(std::complex< float > const)\n"
    "    Octopus::OctopusColVectorXcf::__div__(std::complex< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXcf_print(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcf::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcf::print",1,"Octopus::OctopusColVectorXcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("OctopusColVectorXcf_print",1,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  {
    try
    {
      (arg1)->print();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OctopusColVectorXcf(void *obj) {
Octopus::OctopusColVectorXcf *arg1 = (Octopus::OctopusColVectorXcf *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctopusColVectorXcf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctopusColVectorXcf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctopusColVectorXcf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OctopusColVectorXcf_methods[]= {
    { "__getitem", _wrap_OctopusColVectorXcf___getitem},
    { "__setitem", _wrap_OctopusColVectorXcf___setitem},
    { "size", _wrap_OctopusColVectorXcf_size},
    { "fill", _wrap_OctopusColVectorXcf_fill},
    { "data", _wrap_OctopusColVectorXcf_data},
    { "copy", _wrap_OctopusColVectorXcf_copy},
    { "__add", _wrap_OctopusColVectorXcf___add},
    { "__sub", _wrap_OctopusColVectorXcf___sub},
    { "__mul", _wrap_OctopusColVectorXcf___mul},
    { "__div", _wrap_OctopusColVectorXcf___div},
    { "print", _wrap_OctopusColVectorXcf_print},
    {0,0}
};
static swig_lua_method swig_OctopusColVectorXcf_meta[] = {
    { "__getitem", _wrap_OctopusColVectorXcf___getitem},
    { "__setitem", _wrap_OctopusColVectorXcf___setitem},
    { "__add", _wrap_OctopusColVectorXcf___add},
    { "__sub", _wrap_OctopusColVectorXcf___sub},
    { "__mul", _wrap_OctopusColVectorXcf___mul},
    { "__div", _wrap_OctopusColVectorXcf___div},
    {0,0}
};

static swig_lua_attribute swig_OctopusColVectorXcf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctopusColVectorXcf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctopusColVectorXcf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctopusColVectorXcf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctopusColVectorXcf_Sf_SwigStatic = {
    "OctopusColVectorXcf",
    swig_OctopusColVectorXcf_Sf_SwigStatic_methods,
    swig_OctopusColVectorXcf_Sf_SwigStatic_attributes,
    swig_OctopusColVectorXcf_Sf_SwigStatic_constants,
    swig_OctopusColVectorXcf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctopusColVectorXcf_bases[] = {0};
static const char *swig_OctopusColVectorXcf_base_names[] = {0};
static swig_lua_class _wrap_class_OctopusColVectorXcf = { "OctopusColVectorXcf", "OctopusColVectorXcf", &SWIGTYPE_p_Octopus__OctopusColVectorXcf,_proxy__wrap_new_OctopusColVectorXcf, swig_delete_OctopusColVectorXcf, swig_OctopusColVectorXcf_methods, swig_OctopusColVectorXcf_attributes, &swig_OctopusColVectorXcf_Sf_SwigStatic, swig_OctopusColVectorXcf_meta, swig_OctopusColVectorXcf_bases, swig_OctopusColVectorXcf_base_names };

static int _wrap_new_OctopusColVectorXcd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::OctopusColVectorXcd",0,0)
  {
    try
    {
      result = (Octopus::OctopusColVectorXcd *)new Octopus::OctopusColVectorXcd();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusColVectorXcd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = 0 ;
  Octopus::OctopusColVectorXcd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::OctopusColVectorXcd",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::OctopusColVectorXcd",1,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("new_OctopusColVectorXcd",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  {
    try
    {
      result = (Octopus::OctopusColVectorXcd *)new Octopus::OctopusColVectorXcd((ComplexColumnVector const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusColVectorXcd__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Octopus::OctopusColVectorXcd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::OctopusColVectorXcd",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::OctopusColVectorXcd",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  {
    try
    {
      result = (Octopus::OctopusColVectorXcd *)new Octopus::OctopusColVectorXcd(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusColVectorXcd(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OctopusColVectorXcd__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusColVectorXcd__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_OctopusColVectorXcd__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OctopusColVectorXcd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXcd::OctopusColVectorXcd()\n"
    "    Octopus::OctopusColVectorXcd::OctopusColVectorXcd(ComplexColumnVector const &)\n"
    "    Octopus::OctopusColVectorXcd::OctopusColVectorXcd(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXcd_print(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::print",1,"Octopus::OctopusColVectorXcd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd_print",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  {
    try
    {
      (arg1)->print();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  Octopus::OctopusColVectorXcd *arg2 = 0 ;
  Octopus::OctopusColVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::operator +",1,"Octopus::OctopusColVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::operator +",2,"Octopus::OctopusColVectorXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___add",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___add",2,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  {
    try
    {
      result = (arg1)->operator +((Octopus::OctopusColVectorXcd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcd * resultptr = new Octopus::OctopusColVectorXcd((const Octopus::OctopusColVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  Octopus::OctopusColVectorXcd *arg2 = 0 ;
  Octopus::OctopusColVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::operator -",1,"Octopus::OctopusColVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::operator -",2,"Octopus::OctopusColVectorXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___sub",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___sub",2,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  {
    try
    {
      result = (arg1)->operator -((Octopus::OctopusColVectorXcd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcd * resultptr = new Octopus::OctopusColVectorXcd((const Octopus::OctopusColVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  Octopus::OctopusColVectorXcd *arg2 = 0 ;
  Octopus::OctopusColVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::operator *",1,"Octopus::OctopusColVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::operator *",2,"Octopus::OctopusColVectorXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___mul",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___mul",2,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  {
    try
    {
      result = (arg1)->operator *((Octopus::OctopusColVectorXcd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcd * resultptr = new Octopus::OctopusColVectorXcd((const Octopus::OctopusColVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  Octopus::OctopusColVectorXcd *arg2 = 0 ;
  Octopus::OctopusColVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::operator /",1,"Octopus::OctopusColVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::operator /",2,"Octopus::OctopusColVectorXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___div",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___div",2,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  {
    try
    {
      result = (arg1)->operator /((Octopus::OctopusColVectorXcd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcd * resultptr = new Octopus::OctopusColVectorXcd((const Octopus::OctopusColVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  Octopus::OctopusColVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::operator +",1,"Octopus::OctopusColVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::operator +",2,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___add",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator +(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcd * resultptr = new Octopus::OctopusColVectorXcd((const Octopus::OctopusColVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  Octopus::OctopusColVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::operator -",1,"Octopus::OctopusColVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::operator -",2,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___sub",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator -(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcd * resultptr = new Octopus::OctopusColVectorXcd((const Octopus::OctopusColVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  Octopus::OctopusColVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::operator *",1,"Octopus::OctopusColVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::operator *",2,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___mul",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator *(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcd * resultptr = new Octopus::OctopusColVectorXcd((const Octopus::OctopusColVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  Octopus::OctopusColVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::operator /",1,"Octopus::OctopusColVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::operator /",2,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___div",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator /(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcd * resultptr = new Octopus::OctopusColVectorXcd((const Octopus::OctopusColVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::complex< double > > arg3 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::__setitem__",1,"Octopus::OctopusColVectorXcd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::__setitem__",3,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___setitem",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___setitem",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  {
    try
    {
      Octopus_OctopusColVectorXcd___setitem____SWIG(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd_size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::size",1,"Octopus::OctopusColVectorXcd const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd_size",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  {
    try
    {
      result = Octopus_OctopusColVectorXcd_size__SWIG_1((Octopus::OctopusColVectorXcd const *)arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd_size(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusColVectorXcd_size__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXcd_size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXcd::size()\n"
    "    Octopus::OctopusColVectorXcd::size() const\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXcd_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::fill",1,"Octopus::OctopusColVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::fill",2,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd_fill",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcd_fill",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      Octopus_OctopusColVectorXcd_fill__SWIG_1(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd_fill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcd_fill__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXcd_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXcd::fill()\n"
    "    Octopus::OctopusColVectorXcd::fill(std::complex< double >)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXcd_data(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::data",1,"Octopus::OctopusColVectorXcd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd_data",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  {
    try
    {
      result = (std::complex< double > *)Octopus_OctopusColVectorXcd_data__SWIG(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd_copy(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  size_t arg2 ;
  std::complex< double > *arg3 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::copy",1,"Octopus::OctopusColVectorXcd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::copy",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::copy",3,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd_copy",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcd_copy",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  {
    try
    {
      Octopus_OctopusColVectorXcd_copy__SWIG(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  Octopus::OctopusColVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::__add__",1,"Octopus::OctopusColVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::__add__",2,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___add",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = Octopus_OctopusColVectorXcd___add____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcd * resultptr = new Octopus::OctopusColVectorXcd((const Octopus::OctopusColVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcd___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcd___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcd___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXcd___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXcd::operator +(Octopus::OctopusColVectorXcd const &)\n"
    "    Octopus::OctopusColVectorXcd::operator +(std::complex< double > const)\n"
    "    Octopus::OctopusColVectorXcd::__add__(std::complex< double >)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXcd___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  Octopus::OctopusColVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::__sub__",1,"Octopus::OctopusColVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::__sub__",2,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___sub",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = Octopus_OctopusColVectorXcd___sub____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcd * resultptr = new Octopus::OctopusColVectorXcd((const Octopus::OctopusColVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcd___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcd___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcd___sub__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXcd___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXcd::operator -(Octopus::OctopusColVectorXcd const &)\n"
    "    Octopus::OctopusColVectorXcd::operator -(std::complex< double > const)\n"
    "    Octopus::OctopusColVectorXcd::__sub__(std::complex< double >)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXcd___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  Octopus::OctopusColVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::__mul__",1,"Octopus::OctopusColVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::__mul__",2,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___mul",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = Octopus_OctopusColVectorXcd___mul____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcd * resultptr = new Octopus::OctopusColVectorXcd((const Octopus::OctopusColVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcd___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcd___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcd___mul__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXcd___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXcd::operator *(Octopus::OctopusColVectorXcd const &)\n"
    "    Octopus::OctopusColVectorXcd::operator *(std::complex< double > const)\n"
    "    Octopus::OctopusColVectorXcd::__mul__(std::complex< double >)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusColVectorXcd___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  Octopus::OctopusColVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusColVectorXcd::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::__div__",1,"Octopus::OctopusColVectorXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusColVectorXcd::__div__",2,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___div",1,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusColVectorXcd___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = Octopus_OctopusColVectorXcd___div____SWIG_2(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcd * resultptr = new Octopus::OctopusColVectorXcd((const Octopus::OctopusColVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusColVectorXcd___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcd___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcd___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusColVectorXcd___div__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusColVectorXcd___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusColVectorXcd::operator /(Octopus::OctopusColVectorXcd const &)\n"
    "    Octopus::OctopusColVectorXcd::operator /(std::complex< double > const)\n"
    "    Octopus::OctopusColVectorXcd::__div__(std::complex< double >)\n");
  lua_error(L);return 0;
}


static void swig_delete_OctopusColVectorXcd(void *obj) {
Octopus::OctopusColVectorXcd *arg1 = (Octopus::OctopusColVectorXcd *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctopusColVectorXcd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctopusColVectorXcd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctopusColVectorXcd_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OctopusColVectorXcd_methods[]= {
    { "print", _wrap_OctopusColVectorXcd_print},
    { "__setitem", _wrap_OctopusColVectorXcd___setitem},
    { "size", _wrap_OctopusColVectorXcd_size},
    { "fill", _wrap_OctopusColVectorXcd_fill},
    { "data", _wrap_OctopusColVectorXcd_data},
    { "copy", _wrap_OctopusColVectorXcd_copy},
    { "__add", _wrap_OctopusColVectorXcd___add},
    { "__sub", _wrap_OctopusColVectorXcd___sub},
    { "__mul", _wrap_OctopusColVectorXcd___mul},
    { "__div", _wrap_OctopusColVectorXcd___div},
    {0,0}
};
static swig_lua_method swig_OctopusColVectorXcd_meta[] = {
    { "__setitem", _wrap_OctopusColVectorXcd___setitem},
    { "__add", _wrap_OctopusColVectorXcd___add},
    { "__sub", _wrap_OctopusColVectorXcd___sub},
    { "__mul", _wrap_OctopusColVectorXcd___mul},
    { "__div", _wrap_OctopusColVectorXcd___div},
    {0,0}
};

static swig_lua_attribute swig_OctopusColVectorXcd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctopusColVectorXcd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctopusColVectorXcd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctopusColVectorXcd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctopusColVectorXcd_Sf_SwigStatic = {
    "OctopusColVectorXcd",
    swig_OctopusColVectorXcd_Sf_SwigStatic_methods,
    swig_OctopusColVectorXcd_Sf_SwigStatic_attributes,
    swig_OctopusColVectorXcd_Sf_SwigStatic_constants,
    swig_OctopusColVectorXcd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctopusColVectorXcd_bases[] = {0};
static const char *swig_OctopusColVectorXcd_base_names[] = {0};
static swig_lua_class _wrap_class_OctopusColVectorXcd = { "OctopusColVectorXcd", "OctopusColVectorXcd", &SWIGTYPE_p_Octopus__OctopusColVectorXcd,_proxy__wrap_new_OctopusColVectorXcd, swig_delete_OctopusColVectorXcd, swig_OctopusColVectorXcd_methods, swig_OctopusColVectorXcd_attributes, &swig_OctopusColVectorXcd_Sf_SwigStatic, swig_OctopusColVectorXcd_meta, swig_OctopusColVectorXcd_bases, swig_OctopusColVectorXcd_base_names };

static int _wrap_MatrixViewXf_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::MatrixViewXf *arg1 = (Octopus::MatrixViewXf *) 0 ;
  Octopus::OctopusMatrixXf *arg2 = (Octopus::OctopusMatrixXf *) 0 ;
  
  SWIG_check_num_args("Octopus::MatrixViewXf::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXf::matrix",1,"Octopus::MatrixViewXf *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Octopus::MatrixViewXf::matrix",2,"Octopus::OctopusMatrixXf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__MatrixViewXf,0))){
    SWIG_fail_ptr("MatrixViewXf_matrix_set",1,SWIGTYPE_p_Octopus__MatrixViewXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXf,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("MatrixViewXf_matrix_set",2,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  if (arg1) (arg1)->matrix = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixViewXf_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::MatrixViewXf *arg1 = (Octopus::MatrixViewXf *) 0 ;
  Octopus::OctopusMatrixXf *result = 0 ;
  
  SWIG_check_num_args("Octopus::MatrixViewXf::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXf::matrix",1,"Octopus::MatrixViewXf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__MatrixViewXf,0))){
    SWIG_fail_ptr("MatrixViewXf_matrix_get",1,SWIGTYPE_p_Octopus__MatrixViewXf);
  }
  
  result = (Octopus::OctopusMatrixXf *) ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusMatrixXf,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixViewXf_row_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::MatrixViewXf *arg1 = (Octopus::MatrixViewXf *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Octopus::MatrixViewXf::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXf::row",1,"Octopus::MatrixViewXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::MatrixViewXf::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__MatrixViewXf,0))){
    SWIG_fail_ptr("MatrixViewXf_row_set",1,SWIGTYPE_p_Octopus__MatrixViewXf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->row = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixViewXf_row_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::MatrixViewXf *arg1 = (Octopus::MatrixViewXf *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::MatrixViewXf::row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXf::row",1,"Octopus::MatrixViewXf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__MatrixViewXf,0))){
    SWIG_fail_ptr("MatrixViewXf_row_get",1,SWIGTYPE_p_Octopus__MatrixViewXf);
  }
  
  result =  ((arg1)->row);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MatrixViewXf(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  size_t arg2 ;
  Octopus::MatrixViewXf *result = 0 ;
  
  SWIG_check_num_args("Octopus::MatrixViewXf::MatrixViewXf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXf::MatrixViewXf",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::MatrixViewXf::MatrixViewXf",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("new_MatrixViewXf",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (Octopus::MatrixViewXf *)new Octopus::MatrixViewXf(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__MatrixViewXf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MatrixViewXf(void *obj) {
Octopus::MatrixViewXf *arg1 = (Octopus::MatrixViewXf *) obj;
delete arg1;
}
static int _proxy__wrap_new_MatrixViewXf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MatrixViewXf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MatrixViewXf_attributes[] = {
    { "matrix", _wrap_MatrixViewXf_matrix_get, _wrap_MatrixViewXf_matrix_set },
    { "row", _wrap_MatrixViewXf_row_get, _wrap_MatrixViewXf_row_set },
    {0,0,0}
};
static swig_lua_method swig_MatrixViewXf_methods[]= {
    {0,0}
};
static swig_lua_method swig_MatrixViewXf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MatrixViewXf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MatrixViewXf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MatrixViewXf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MatrixViewXf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MatrixViewXf_Sf_SwigStatic = {
    "MatrixViewXf",
    swig_MatrixViewXf_Sf_SwigStatic_methods,
    swig_MatrixViewXf_Sf_SwigStatic_attributes,
    swig_MatrixViewXf_Sf_SwigStatic_constants,
    swig_MatrixViewXf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MatrixViewXf_bases[] = {0};
static const char *swig_MatrixViewXf_base_names[] = {0};
static swig_lua_class _wrap_class_MatrixViewXf = { "MatrixViewXf", "MatrixViewXf", &SWIGTYPE_p_Octopus__MatrixViewXf,_proxy__wrap_new_MatrixViewXf, swig_delete_MatrixViewXf, swig_MatrixViewXf_methods, swig_MatrixViewXf_attributes, &swig_MatrixViewXf_Sf_SwigStatic, swig_MatrixViewXf_meta, swig_MatrixViewXf_bases, swig_MatrixViewXf_base_names };

static int _wrap_new_OctopusMatrixXf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::OctopusMatrixXf",0,0)
  {
    try
    {
      result = (Octopus::OctopusMatrixXf *)new Octopus::OctopusMatrixXf();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusMatrixXf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = 0 ;
  Octopus::OctopusMatrixXf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::OctopusMatrixXf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::OctopusMatrixXf",1,"FloatMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("new_OctopusMatrixXf",1,SWIGTYPE_p_FloatMatrix);
  }
  
  {
    try
    {
      result = (Octopus::OctopusMatrixXf *)new Octopus::OctopusMatrixXf((FloatMatrix const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusMatrixXf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Octopus::OctopusMatrixXf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::OctopusMatrixXf",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::OctopusMatrixXf",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::OctopusMatrixXf",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (Octopus::OctopusMatrixXf *)new Octopus::OctopusMatrixXf(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusMatrixXf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OctopusMatrixXf__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusMatrixXf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_OctopusMatrixXf__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OctopusMatrixXf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXf::OctopusMatrixXf()\n"
    "    Octopus::OctopusMatrixXf::OctopusMatrixXf(FloatMatrix const &)\n"
    "    Octopus::OctopusMatrixXf::OctopusMatrixXf(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXf___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  Octopus::OctopusMatrixXf *arg2 = 0 ;
  Octopus::OctopusMatrixXf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::operator +",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::operator +",2,"Octopus::OctopusMatrixXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf___add",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf___add",2,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  {
    try
    {
      result = (arg1)->operator +((Octopus::OctopusMatrixXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXf * resultptr = new Octopus::OctopusMatrixXf((const Octopus::OctopusMatrixXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  Octopus::OctopusMatrixXf *arg2 = 0 ;
  Octopus::OctopusMatrixXf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::operator -",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::operator -",2,"Octopus::OctopusMatrixXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf___sub",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf___sub",2,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  {
    try
    {
      result = (arg1)->operator -((Octopus::OctopusMatrixXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXf * resultptr = new Octopus::OctopusMatrixXf((const Octopus::OctopusMatrixXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  Octopus::OctopusMatrixXf *arg2 = 0 ;
  Octopus::OctopusMatrixXf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::operator *",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::operator *",2,"Octopus::OctopusMatrixXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf___mul",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf___mul",2,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  {
    try
    {
      result = (arg1)->operator *((Octopus::OctopusMatrixXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXf * resultptr = new Octopus::OctopusMatrixXf((const Octopus::OctopusMatrixXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  Octopus::OctopusMatrixXf *arg2 = 0 ;
  Octopus::OctopusMatrixXf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::operator /",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::operator /",2,"Octopus::OctopusMatrixXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf___div",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf___div",2,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  {
    try
    {
      result = (arg1)->operator /((Octopus::OctopusMatrixXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXf * resultptr = new Octopus::OctopusMatrixXf((const Octopus::OctopusMatrixXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  float arg2 ;
  Octopus::OctopusMatrixXf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::operator +",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::operator +",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf___add",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator +(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXf * resultptr = new Octopus::OctopusMatrixXf((const Octopus::OctopusMatrixXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXf___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusMatrixXf___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXf___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXf::operator +(Octopus::OctopusMatrixXf const &)\n"
    "    Octopus::OctopusMatrixXf::operator +(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXf___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  float arg2 ;
  Octopus::OctopusMatrixXf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::operator -",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::operator -",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf___sub",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator -(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXf * resultptr = new Octopus::OctopusMatrixXf((const Octopus::OctopusMatrixXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXf___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusMatrixXf___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXf___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXf::operator -(Octopus::OctopusMatrixXf const &)\n"
    "    Octopus::OctopusMatrixXf::operator -(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXf___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  float arg2 ;
  Octopus::OctopusMatrixXf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::operator *",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf___mul",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator *(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXf * resultptr = new Octopus::OctopusMatrixXf((const Octopus::OctopusMatrixXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXf___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusMatrixXf___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXf___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXf::operator *(Octopus::OctopusMatrixXf const &)\n"
    "    Octopus::OctopusMatrixXf::operator *(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXf___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  float arg2 ;
  Octopus::OctopusMatrixXf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::operator /",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf___div",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator /(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXf * resultptr = new Octopus::OctopusMatrixXf((const Octopus::OctopusMatrixXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXf___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusMatrixXf___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXf___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXf::operator /(Octopus::OctopusMatrixXf const &)\n"
    "    Octopus::OctopusMatrixXf::operator /(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXf_print(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::print",1,"Octopus::OctopusMatrixXf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_print",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  {
    try
    {
      (arg1)->print();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf_addToEachRow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  Octopus::OctopusRowVectorXf *arg2 = 0 ;
  Octopus::OctopusMatrixXf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::addToEachRow",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::addToEachRow",2,"Octopus::OctopusRowVectorXf &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_addToEachRow",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_addToEachRow",2,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  {
    try
    {
      result = (arg1)->addToEachRow(*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXf * resultptr = new Octopus::OctopusMatrixXf((const Octopus::OctopusMatrixXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf_addToEachRow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  Octopus::OctopusMatrixXf *arg2 = 0 ;
  Octopus::OctopusMatrixXf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::addToEachRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::addToEachRow",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::addToEachRow",2,"Octopus::OctopusMatrixXf &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_addToEachRow",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_addToEachRow",2,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  {
    try
    {
      result = (arg1)->addToEachRow(*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXf * resultptr = new Octopus::OctopusMatrixXf((const Octopus::OctopusMatrixXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf_addToEachRow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXf_addToEachRow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXf_addToEachRow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXf_addToEachRow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXf::addToEachRow(Octopus::OctopusRowVectorXf &)\n"
    "    Octopus::OctopusMatrixXf::addToEachRow(Octopus::OctopusMatrixXf &)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXf_eval(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  Octopus::OctopusMatrixXf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::eval",1,"Octopus::OctopusMatrixXf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_eval",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  {
    try
    {
      result = (arg1)->eval();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXf * resultptr = new Octopus::OctopusMatrixXf((const Octopus::OctopusMatrixXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf_printrowscols(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::printrowscols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::printrowscols",1,"Octopus::OctopusMatrixXf const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_printrowscols",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  {
    try
    {
      ((Octopus::OctopusMatrixXf const *)arg1)->printrowscols();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf_matmul(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  Octopus::OctopusMatrixXf *arg2 = 0 ;
  Octopus::OctopusMatrixXf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::matmul",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::matmul",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::matmul",2,"Octopus::OctopusMatrixXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_matmul",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_matmul",2,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  {
    try
    {
      result = (arg1)->matmul((Octopus::OctopusMatrixXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXf * resultptr = new Octopus::OctopusMatrixXf((const Octopus::OctopusMatrixXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf_hadamard(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  Octopus::OctopusMatrixXf *arg2 = 0 ;
  Octopus::OctopusMatrixXf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::hadamard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::hadamard",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::hadamard",2,"Octopus::OctopusMatrixXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_hadamard",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_hadamard",2,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  {
    try
    {
      result = (arg1)->hadamard((Octopus::OctopusMatrixXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXf * resultptr = new Octopus::OctopusMatrixXf((const Octopus::OctopusMatrixXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< Octopus::MatrixViewXf > result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::__getitem__",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf___getitem",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = Octopus_OctopusMatrixXf___getitem____SWIG(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::MatrixViewXf * resultptr = new Octopus::MatrixViewXf((const Octopus::MatrixViewXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__MatrixViewXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf_rows__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::rows",1,"Octopus::OctopusMatrixXf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_rows",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  {
    try
    {
      result = Octopus_OctopusMatrixXf_rows__SWIG_1(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf_rows(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusMatrixXf_rows__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXf_rows'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXf::rows()\n"
    "    Octopus::OctopusMatrixXf::rows()\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXf_cols__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::cols",1,"Octopus::OctopusMatrixXf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_cols",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  {
    try
    {
      result = Octopus_OctopusMatrixXf_cols__SWIG_1(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf_cols(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusMatrixXf_cols__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXf_cols'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXf::cols()\n"
    "    Octopus::OctopusMatrixXf::cols()\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXf_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::fill",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_fill",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  {
    try
    {
      Octopus_OctopusMatrixXf_fill__SWIG_1(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf_fill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusMatrixXf_fill__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXf_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXf::fill()\n"
    "    Octopus::OctopusMatrixXf::fill(float)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXf_data(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::data",1,"Octopus::OctopusMatrixXf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_data",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  {
    try
    {
      result = (float *)Octopus_OctopusMatrixXf_data__SWIG(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf_copy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::copy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::copy",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::copy",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusMatrixXf::copy",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Octopus::OctopusMatrixXf::copy",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_copy",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("OctopusMatrixXf_copy",4,SWIGTYPE_p_double);
  }
  
  {
    try
    {
      Octopus_OctopusMatrixXf_copy__SWIG_0(arg1,arg2,arg3,arg4);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf_copy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXf::copy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXf::copy",1,"Octopus::OctopusMatrixXf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXf::copy",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusMatrixXf::copy",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Octopus::OctopusMatrixXf::copy",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("OctopusMatrixXf_copy",1,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OctopusMatrixXf_copy",4,SWIGTYPE_p_float);
  }
  
  {
    try
    {
      Octopus_OctopusMatrixXf_copy__SWIG_1(arg1,arg2,arg3,arg4);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXf_copy(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_OctopusMatrixXf_copy__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_OctopusMatrixXf_copy__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXf_copy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXf::copy(size_t,size_t,double *)\n"
    "    Octopus::OctopusMatrixXf::copy(size_t,size_t,float *)\n");
  lua_error(L);return 0;
}


static void swig_delete_OctopusMatrixXf(void *obj) {
Octopus::OctopusMatrixXf *arg1 = (Octopus::OctopusMatrixXf *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctopusMatrixXf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctopusMatrixXf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctopusMatrixXf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OctopusMatrixXf_methods[]= {
    { "__add", _wrap_OctopusMatrixXf___add},
    { "__sub", _wrap_OctopusMatrixXf___sub},
    { "__mul", _wrap_OctopusMatrixXf___mul},
    { "__div", _wrap_OctopusMatrixXf___div},
    { "print", _wrap_OctopusMatrixXf_print},
    { "addToEachRow", _wrap_OctopusMatrixXf_addToEachRow},
    { "eval", _wrap_OctopusMatrixXf_eval},
    { "printrowscols", _wrap_OctopusMatrixXf_printrowscols},
    { "matmul", _wrap_OctopusMatrixXf_matmul},
    { "hadamard", _wrap_OctopusMatrixXf_hadamard},
    { "__getitem", _wrap_OctopusMatrixXf___getitem},
    { "rows", _wrap_OctopusMatrixXf_rows},
    { "cols", _wrap_OctopusMatrixXf_cols},
    { "fill", _wrap_OctopusMatrixXf_fill},
    { "data", _wrap_OctopusMatrixXf_data},
    { "copy", _wrap_OctopusMatrixXf_copy},
    {0,0}
};
static swig_lua_method swig_OctopusMatrixXf_meta[] = {
    { "__add", _wrap_OctopusMatrixXf___add},
    { "__sub", _wrap_OctopusMatrixXf___sub},
    { "__mul", _wrap_OctopusMatrixXf___mul},
    { "__div", _wrap_OctopusMatrixXf___div},
    { "__getitem", _wrap_OctopusMatrixXf___getitem},
    {0,0}
};

static swig_lua_attribute swig_OctopusMatrixXf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctopusMatrixXf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctopusMatrixXf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctopusMatrixXf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctopusMatrixXf_Sf_SwigStatic = {
    "OctopusMatrixXf",
    swig_OctopusMatrixXf_Sf_SwigStatic_methods,
    swig_OctopusMatrixXf_Sf_SwigStatic_attributes,
    swig_OctopusMatrixXf_Sf_SwigStatic_constants,
    swig_OctopusMatrixXf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctopusMatrixXf_bases[] = {0};
static const char *swig_OctopusMatrixXf_base_names[] = {0};
static swig_lua_class _wrap_class_OctopusMatrixXf = { "OctopusMatrixXf", "OctopusMatrixXf", &SWIGTYPE_p_Octopus__OctopusMatrixXf,_proxy__wrap_new_OctopusMatrixXf, swig_delete_OctopusMatrixXf, swig_OctopusMatrixXf_methods, swig_OctopusMatrixXf_attributes, &swig_OctopusMatrixXf_Sf_SwigStatic, swig_OctopusMatrixXf_meta, swig_OctopusMatrixXf_bases, swig_OctopusMatrixXf_base_names };

static int _wrap_MatrixViewXd_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::MatrixViewXd *arg1 = (Octopus::MatrixViewXd *) 0 ;
  Octopus::OctopusMatrixXd *arg2 = (Octopus::OctopusMatrixXd *) 0 ;
  
  SWIG_check_num_args("Octopus::MatrixViewXd::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXd::matrix",1,"Octopus::MatrixViewXd *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Octopus::MatrixViewXd::matrix",2,"Octopus::OctopusMatrixXd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__MatrixViewXd,0))){
    SWIG_fail_ptr("MatrixViewXd_matrix_set",1,SWIGTYPE_p_Octopus__MatrixViewXd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXd,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("MatrixViewXd_matrix_set",2,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  if (arg1) (arg1)->matrix = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixViewXd_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::MatrixViewXd *arg1 = (Octopus::MatrixViewXd *) 0 ;
  Octopus::OctopusMatrixXd *result = 0 ;
  
  SWIG_check_num_args("Octopus::MatrixViewXd::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXd::matrix",1,"Octopus::MatrixViewXd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__MatrixViewXd,0))){
    SWIG_fail_ptr("MatrixViewXd_matrix_get",1,SWIGTYPE_p_Octopus__MatrixViewXd);
  }
  
  result = (Octopus::OctopusMatrixXd *) ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusMatrixXd,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixViewXd_row_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::MatrixViewXd *arg1 = (Octopus::MatrixViewXd *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Octopus::MatrixViewXd::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXd::row",1,"Octopus::MatrixViewXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::MatrixViewXd::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__MatrixViewXd,0))){
    SWIG_fail_ptr("MatrixViewXd_row_set",1,SWIGTYPE_p_Octopus__MatrixViewXd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->row = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixViewXd_row_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::MatrixViewXd *arg1 = (Octopus::MatrixViewXd *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::MatrixViewXd::row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXd::row",1,"Octopus::MatrixViewXd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__MatrixViewXd,0))){
    SWIG_fail_ptr("MatrixViewXd_row_get",1,SWIGTYPE_p_Octopus__MatrixViewXd);
  }
  
  result =  ((arg1)->row);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MatrixViewXd(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  size_t arg2 ;
  Octopus::MatrixViewXd *result = 0 ;
  
  SWIG_check_num_args("Octopus::MatrixViewXd::MatrixViewXd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXd::MatrixViewXd",1,"Octopus::OctopusMatrixXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::MatrixViewXd::MatrixViewXd",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("new_MatrixViewXd",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (Octopus::MatrixViewXd *)new Octopus::MatrixViewXd(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__MatrixViewXd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MatrixViewXd(void *obj) {
Octopus::MatrixViewXd *arg1 = (Octopus::MatrixViewXd *) obj;
delete arg1;
}
static int _proxy__wrap_new_MatrixViewXd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MatrixViewXd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MatrixViewXd_attributes[] = {
    { "matrix", _wrap_MatrixViewXd_matrix_get, _wrap_MatrixViewXd_matrix_set },
    { "row", _wrap_MatrixViewXd_row_get, _wrap_MatrixViewXd_row_set },
    {0,0,0}
};
static swig_lua_method swig_MatrixViewXd_methods[]= {
    {0,0}
};
static swig_lua_method swig_MatrixViewXd_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MatrixViewXd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MatrixViewXd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MatrixViewXd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MatrixViewXd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MatrixViewXd_Sf_SwigStatic = {
    "MatrixViewXd",
    swig_MatrixViewXd_Sf_SwigStatic_methods,
    swig_MatrixViewXd_Sf_SwigStatic_attributes,
    swig_MatrixViewXd_Sf_SwigStatic_constants,
    swig_MatrixViewXd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MatrixViewXd_bases[] = {0};
static const char *swig_MatrixViewXd_base_names[] = {0};
static swig_lua_class _wrap_class_MatrixViewXd = { "MatrixViewXd", "MatrixViewXd", &SWIGTYPE_p_Octopus__MatrixViewXd,_proxy__wrap_new_MatrixViewXd, swig_delete_MatrixViewXd, swig_MatrixViewXd_methods, swig_MatrixViewXd_attributes, &swig_MatrixViewXd_Sf_SwigStatic, swig_MatrixViewXd_meta, swig_MatrixViewXd_bases, swig_MatrixViewXd_base_names };

static int _wrap_new_OctopusMatrixXd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::OctopusMatrixXd",0,0)
  {
    try
    {
      result = (Octopus::OctopusMatrixXd *)new Octopus::OctopusMatrixXd();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusMatrixXd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusMatrixXd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = 0 ;
  Octopus::OctopusMatrixXd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::OctopusMatrixXd",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::OctopusMatrixXd",1,"Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("new_OctopusMatrixXd",1,SWIGTYPE_p_Matrix);
  }
  
  {
    try
    {
      result = (Octopus::OctopusMatrixXd *)new Octopus::OctopusMatrixXd((Matrix const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusMatrixXd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusMatrixXd__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Octopus::OctopusMatrixXd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::OctopusMatrixXd",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::OctopusMatrixXd",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXd::OctopusMatrixXd",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (Octopus::OctopusMatrixXd *)new Octopus::OctopusMatrixXd(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusMatrixXd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusMatrixXd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OctopusMatrixXd__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusMatrixXd__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_OctopusMatrixXd__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OctopusMatrixXd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXd::OctopusMatrixXd()\n"
    "    Octopus::OctopusMatrixXd::OctopusMatrixXd(Matrix const &)\n"
    "    Octopus::OctopusMatrixXd::OctopusMatrixXd(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXd_print(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::print",1,"Octopus::OctopusMatrixXd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd_print",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  {
    try
    {
      (arg1)->print();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::get",1,"Octopus::OctopusMatrixXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXd::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusMatrixXd::get",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd_get",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  {
    try
    {
      result = (double)Octopus_OctopusMatrixXd_get__SWIG(arg1,arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::set",1,"Octopus::OctopusMatrixXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXd::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusMatrixXd::set",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Octopus::OctopusMatrixXd::set",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd_set",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  {
    try
    {
      Octopus_OctopusMatrixXd_set__SWIG(arg1,arg2,arg3,arg4);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd_rows__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::rows",1,"Octopus::OctopusMatrixXd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd_rows",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  {
    try
    {
      result = Octopus_OctopusMatrixXd_rows__SWIG_1(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd_cols__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::cols",1,"Octopus::OctopusMatrixXd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd_cols",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  {
    try
    {
      result = Octopus_OctopusMatrixXd_cols__SWIG_1(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  Octopus::OctopusMatrixXd *arg2 = 0 ;
  Octopus::OctopusMatrixXd result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::operator +",1,"Octopus::OctopusMatrixXd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXd::operator +",2,"Octopus::OctopusMatrixXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd___add",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd___add",2,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  {
    try
    {
      result = (arg1)->operator +((Octopus::OctopusMatrixXd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXd * resultptr = new Octopus::OctopusMatrixXd((const Octopus::OctopusMatrixXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  Octopus::OctopusMatrixXd *arg2 = 0 ;
  Octopus::OctopusMatrixXd result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::operator -",1,"Octopus::OctopusMatrixXd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXd::operator -",2,"Octopus::OctopusMatrixXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd___sub",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd___sub",2,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  {
    try
    {
      result = (arg1)->operator -((Octopus::OctopusMatrixXd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXd * resultptr = new Octopus::OctopusMatrixXd((const Octopus::OctopusMatrixXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  Octopus::OctopusMatrixXd *arg2 = 0 ;
  Octopus::OctopusMatrixXd result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::operator *",1,"Octopus::OctopusMatrixXd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXd::operator *",2,"Octopus::OctopusMatrixXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd___mul",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd___mul",2,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  {
    try
    {
      result = (arg1)->operator *((Octopus::OctopusMatrixXd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXd * resultptr = new Octopus::OctopusMatrixXd((const Octopus::OctopusMatrixXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  Octopus::OctopusMatrixXd *arg2 = 0 ;
  Octopus::OctopusMatrixXd result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::operator /",1,"Octopus::OctopusMatrixXd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXd::operator /",2,"Octopus::OctopusMatrixXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd___div",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd___div",2,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  {
    try
    {
      result = (arg1)->operator /((Octopus::OctopusMatrixXd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXd * resultptr = new Octopus::OctopusMatrixXd((const Octopus::OctopusMatrixXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  double arg2 ;
  Octopus::OctopusMatrixXd result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::operator +",1,"Octopus::OctopusMatrixXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXd::operator +",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd___add",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator +(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXd * resultptr = new Octopus::OctopusMatrixXd((const Octopus::OctopusMatrixXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXd___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusMatrixXd___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXd___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXd::operator +(Octopus::OctopusMatrixXd const &)\n"
    "    Octopus::OctopusMatrixXd::operator +(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXd___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  double arg2 ;
  Octopus::OctopusMatrixXd result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::operator -",1,"Octopus::OctopusMatrixXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXd::operator -",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd___sub",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator -(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXd * resultptr = new Octopus::OctopusMatrixXd((const Octopus::OctopusMatrixXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXd___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusMatrixXd___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXd___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXd::operator -(Octopus::OctopusMatrixXd const &)\n"
    "    Octopus::OctopusMatrixXd::operator -(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXd___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  double arg2 ;
  Octopus::OctopusMatrixXd result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::operator *",1,"Octopus::OctopusMatrixXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXd::operator *",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd___mul",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator *(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXd * resultptr = new Octopus::OctopusMatrixXd((const Octopus::OctopusMatrixXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXd___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusMatrixXd___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXd___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXd::operator *(Octopus::OctopusMatrixXd const &)\n"
    "    Octopus::OctopusMatrixXd::operator *(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXd___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  double arg2 ;
  Octopus::OctopusMatrixXd result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::operator /",1,"Octopus::OctopusMatrixXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXd::operator /",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd___div",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->operator /(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXd * resultptr = new Octopus::OctopusMatrixXd((const Octopus::OctopusMatrixXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXd___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusMatrixXd___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXd___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXd::operator /(Octopus::OctopusMatrixXd const &)\n"
    "    Octopus::OctopusMatrixXd::operator /(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXd___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< Octopus::MatrixViewXd > result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::__getitem__",1,"Octopus::OctopusMatrixXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXd::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd___getitem",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = Octopus_OctopusMatrixXd___getitem____SWIG(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::MatrixViewXd * resultptr = new Octopus::MatrixViewXd((const Octopus::MatrixViewXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__MatrixViewXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd_rows__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::rows",1,"Octopus::OctopusMatrixXd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd_rows",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  {
    try
    {
      result = Octopus_OctopusMatrixXd_rows__SWIG_2(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd_rows(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusMatrixXd_rows__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusMatrixXd_rows__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXd_rows'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXd::rows()\n"
    "    Octopus::OctopusMatrixXd::rows()\n"
    "    Octopus::OctopusMatrixXd::rows()\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXd_cols__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::cols",1,"Octopus::OctopusMatrixXd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd_cols",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  {
    try
    {
      result = Octopus_OctopusMatrixXd_cols__SWIG_2(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd_cols(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusMatrixXd_cols__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusMatrixXd_cols__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXd_cols'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXd::cols()\n"
    "    Octopus::OctopusMatrixXd::cols()\n"
    "    Octopus::OctopusMatrixXd::cols()\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXd_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::fill",1,"Octopus::OctopusMatrixXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXd::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd_fill",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  {
    try
    {
      Octopus_OctopusMatrixXd_fill__SWIG_1(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd_fill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctopusMatrixXd_fill__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXd_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXd::fill()\n"
    "    Octopus::OctopusMatrixXd::fill(double)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXd_data(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::data",1,"Octopus::OctopusMatrixXd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd_data",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  {
    try
    {
      result = (double *)Octopus_OctopusMatrixXd_data__SWIG(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd_copy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::copy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::copy",1,"Octopus::OctopusMatrixXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXd::copy",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusMatrixXd::copy",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Octopus::OctopusMatrixXd::copy",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd_copy",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OctopusMatrixXd_copy",4,SWIGTYPE_p_float);
  }
  
  {
    try
    {
      Octopus_OctopusMatrixXd_copy__SWIG_0(arg1,arg2,arg3,arg4);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd_copy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXd::copy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXd::copy",1,"Octopus::OctopusMatrixXd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXd::copy",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusMatrixXd::copy",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Octopus::OctopusMatrixXd::copy",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("OctopusMatrixXd_copy",1,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("OctopusMatrixXd_copy",4,SWIGTYPE_p_double);
  }
  
  {
    try
    {
      Octopus_OctopusMatrixXd_copy__SWIG_1(arg1,arg2,arg3,arg4);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXd_copy(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_OctopusMatrixXd_copy__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_OctopusMatrixXd_copy__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXd_copy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXd::copy(size_t,size_t,float *)\n"
    "    Octopus::OctopusMatrixXd::copy(size_t,size_t,double *)\n");
  lua_error(L);return 0;
}


static void swig_delete_OctopusMatrixXd(void *obj) {
Octopus::OctopusMatrixXd *arg1 = (Octopus::OctopusMatrixXd *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctopusMatrixXd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctopusMatrixXd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctopusMatrixXd_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OctopusMatrixXd_methods[]= {
    { "print", _wrap_OctopusMatrixXd_print},
    { "get", _wrap_OctopusMatrixXd_get},
    { "set", _wrap_OctopusMatrixXd_set},
    { "__add", _wrap_OctopusMatrixXd___add},
    { "__sub", _wrap_OctopusMatrixXd___sub},
    { "__mul", _wrap_OctopusMatrixXd___mul},
    { "__div", _wrap_OctopusMatrixXd___div},
    { "__getitem", _wrap_OctopusMatrixXd___getitem},
    { "rows", _wrap_OctopusMatrixXd_rows},
    { "cols", _wrap_OctopusMatrixXd_cols},
    { "fill", _wrap_OctopusMatrixXd_fill},
    { "data", _wrap_OctopusMatrixXd_data},
    { "copy", _wrap_OctopusMatrixXd_copy},
    {0,0}
};
static swig_lua_method swig_OctopusMatrixXd_meta[] = {
    { "__add", _wrap_OctopusMatrixXd___add},
    { "__sub", _wrap_OctopusMatrixXd___sub},
    { "__mul", _wrap_OctopusMatrixXd___mul},
    { "__div", _wrap_OctopusMatrixXd___div},
    { "__getitem", _wrap_OctopusMatrixXd___getitem},
    {0,0}
};

static swig_lua_attribute swig_OctopusMatrixXd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctopusMatrixXd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctopusMatrixXd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctopusMatrixXd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctopusMatrixXd_Sf_SwigStatic = {
    "OctopusMatrixXd",
    swig_OctopusMatrixXd_Sf_SwigStatic_methods,
    swig_OctopusMatrixXd_Sf_SwigStatic_attributes,
    swig_OctopusMatrixXd_Sf_SwigStatic_constants,
    swig_OctopusMatrixXd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctopusMatrixXd_bases[] = {0};
static const char *swig_OctopusMatrixXd_base_names[] = {0};
static swig_lua_class _wrap_class_OctopusMatrixXd = { "OctopusMatrixXd", "OctopusMatrixXd", &SWIGTYPE_p_Octopus__OctopusMatrixXd,_proxy__wrap_new_OctopusMatrixXd, swig_delete_OctopusMatrixXd, swig_OctopusMatrixXd_methods, swig_OctopusMatrixXd_attributes, &swig_OctopusMatrixXd_Sf_SwigStatic, swig_OctopusMatrixXd_meta, swig_OctopusMatrixXd_bases, swig_OctopusMatrixXd_base_names };

static int _wrap_MatrixViewXcf_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::MatrixViewXcf *arg1 = (Octopus::MatrixViewXcf *) 0 ;
  Octopus::OctopusMatrixXcf *arg2 = (Octopus::OctopusMatrixXcf *) 0 ;
  
  SWIG_check_num_args("Octopus::MatrixViewXcf::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXcf::matrix",1,"Octopus::MatrixViewXcf *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Octopus::MatrixViewXcf::matrix",2,"Octopus::OctopusMatrixXcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__MatrixViewXcf,0))){
    SWIG_fail_ptr("MatrixViewXcf_matrix_set",1,SWIGTYPE_p_Octopus__MatrixViewXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXcf,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("MatrixViewXcf_matrix_set",2,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  if (arg1) (arg1)->matrix = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixViewXcf_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::MatrixViewXcf *arg1 = (Octopus::MatrixViewXcf *) 0 ;
  Octopus::OctopusMatrixXcf *result = 0 ;
  
  SWIG_check_num_args("Octopus::MatrixViewXcf::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXcf::matrix",1,"Octopus::MatrixViewXcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__MatrixViewXcf,0))){
    SWIG_fail_ptr("MatrixViewXcf_matrix_get",1,SWIGTYPE_p_Octopus__MatrixViewXcf);
  }
  
  result = (Octopus::OctopusMatrixXcf *) ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixViewXcf_row_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::MatrixViewXcf *arg1 = (Octopus::MatrixViewXcf *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Octopus::MatrixViewXcf::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXcf::row",1,"Octopus::MatrixViewXcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::MatrixViewXcf::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__MatrixViewXcf,0))){
    SWIG_fail_ptr("MatrixViewXcf_row_set",1,SWIGTYPE_p_Octopus__MatrixViewXcf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->row = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixViewXcf_row_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::MatrixViewXcf *arg1 = (Octopus::MatrixViewXcf *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::MatrixViewXcf::row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXcf::row",1,"Octopus::MatrixViewXcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__MatrixViewXcf,0))){
    SWIG_fail_ptr("MatrixViewXcf_row_get",1,SWIGTYPE_p_Octopus__MatrixViewXcf);
  }
  
  result =  ((arg1)->row);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MatrixViewXcf(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  size_t arg2 ;
  Octopus::MatrixViewXcf *result = 0 ;
  
  SWIG_check_num_args("Octopus::MatrixViewXcf::MatrixViewXcf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXcf::MatrixViewXcf",1,"Octopus::OctopusMatrixXcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::MatrixViewXcf::MatrixViewXcf",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("new_MatrixViewXcf",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (Octopus::MatrixViewXcf *)new Octopus::MatrixViewXcf(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__MatrixViewXcf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MatrixViewXcf(void *obj) {
Octopus::MatrixViewXcf *arg1 = (Octopus::MatrixViewXcf *) obj;
delete arg1;
}
static int _proxy__wrap_new_MatrixViewXcf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MatrixViewXcf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MatrixViewXcf_attributes[] = {
    { "matrix", _wrap_MatrixViewXcf_matrix_get, _wrap_MatrixViewXcf_matrix_set },
    { "row", _wrap_MatrixViewXcf_row_get, _wrap_MatrixViewXcf_row_set },
    {0,0,0}
};
static swig_lua_method swig_MatrixViewXcf_methods[]= {
    {0,0}
};
static swig_lua_method swig_MatrixViewXcf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MatrixViewXcf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MatrixViewXcf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MatrixViewXcf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MatrixViewXcf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MatrixViewXcf_Sf_SwigStatic = {
    "MatrixViewXcf",
    swig_MatrixViewXcf_Sf_SwigStatic_methods,
    swig_MatrixViewXcf_Sf_SwigStatic_attributes,
    swig_MatrixViewXcf_Sf_SwigStatic_constants,
    swig_MatrixViewXcf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MatrixViewXcf_bases[] = {0};
static const char *swig_MatrixViewXcf_base_names[] = {0};
static swig_lua_class _wrap_class_MatrixViewXcf = { "MatrixViewXcf", "MatrixViewXcf", &SWIGTYPE_p_Octopus__MatrixViewXcf,_proxy__wrap_new_MatrixViewXcf, swig_delete_MatrixViewXcf, swig_MatrixViewXcf_methods, swig_MatrixViewXcf_attributes, &swig_MatrixViewXcf_Sf_SwigStatic, swig_MatrixViewXcf_meta, swig_MatrixViewXcf_bases, swig_MatrixViewXcf_base_names };

static int _wrap_new_OctopusMatrixXcf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::OctopusMatrixXcf",0,0)
  {
    try
    {
      result = (Octopus::OctopusMatrixXcf *)new Octopus::OctopusMatrixXcf();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusMatrixXcf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusMatrixXcf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = 0 ;
  Octopus::OctopusMatrixXcf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::OctopusMatrixXcf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::OctopusMatrixXcf",1,"FloatComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("new_OctopusMatrixXcf",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  {
    try
    {
      result = (Octopus::OctopusMatrixXcf *)new Octopus::OctopusMatrixXcf((FloatComplexMatrix const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusMatrixXcf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusMatrixXcf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Octopus::OctopusMatrixXcf *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::OctopusMatrixXcf",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::OctopusMatrixXcf",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::OctopusMatrixXcf",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (Octopus::OctopusMatrixXcf *)new Octopus::OctopusMatrixXcf(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusMatrixXcf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusMatrixXcf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OctopusMatrixXcf__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusMatrixXcf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_OctopusMatrixXcf__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OctopusMatrixXcf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcf::OctopusMatrixXcf()\n"
    "    Octopus::OctopusMatrixXcf::OctopusMatrixXcf(FloatComplexMatrix const &)\n"
    "    Octopus::OctopusMatrixXcf::OctopusMatrixXcf(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXcf_print(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::print",1,"Octopus::OctopusMatrixXcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf_print",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  {
    try
    {
      (arg1)->print();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcf___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  Octopus::OctopusMatrixXcf *arg2 = 0 ;
  Octopus::OctopusMatrixXcf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::operator +",1,"Octopus::OctopusMatrixXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::operator +",2,"Octopus::OctopusMatrixXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___add",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___add",2,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  {
    try
    {
      result = (arg1)->operator +((Octopus::OctopusMatrixXcf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcf * resultptr = new Octopus::OctopusMatrixXcf((const Octopus::OctopusMatrixXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcf___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  Octopus::OctopusMatrixXcf *arg2 = 0 ;
  Octopus::OctopusMatrixXcf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::operator -",1,"Octopus::OctopusMatrixXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::operator -",2,"Octopus::OctopusMatrixXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___sub",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___sub",2,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  {
    try
    {
      result = (arg1)->operator -((Octopus::OctopusMatrixXcf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcf * resultptr = new Octopus::OctopusMatrixXcf((const Octopus::OctopusMatrixXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcf___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  Octopus::OctopusMatrixXcf *arg2 = 0 ;
  Octopus::OctopusMatrixXcf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::operator *",1,"Octopus::OctopusMatrixXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::operator *",2,"Octopus::OctopusMatrixXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___mul",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___mul",2,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  {
    try
    {
      result = (arg1)->operator *((Octopus::OctopusMatrixXcf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcf * resultptr = new Octopus::OctopusMatrixXcf((const Octopus::OctopusMatrixXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcf___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  Octopus::OctopusMatrixXcf *arg2 = 0 ;
  Octopus::OctopusMatrixXcf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::operator /",1,"Octopus::OctopusMatrixXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::operator /",2,"Octopus::OctopusMatrixXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___div",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___div",2,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  {
    try
    {
      result = (arg1)->operator /((Octopus::OctopusMatrixXcf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcf * resultptr = new Octopus::OctopusMatrixXcf((const Octopus::OctopusMatrixXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcf___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusMatrixXcf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::operator +",1,"Octopus::OctopusMatrixXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::operator +",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___add",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator +(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcf * resultptr = new Octopus::OctopusMatrixXcf((const Octopus::OctopusMatrixXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcf___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcf___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcf___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXcf___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcf::operator +(Octopus::OctopusMatrixXcf const &)\n"
    "    Octopus::OctopusMatrixXcf::operator +(std::complex< float > const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXcf___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusMatrixXcf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::operator -",1,"Octopus::OctopusMatrixXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::operator -",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___sub",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator -(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcf * resultptr = new Octopus::OctopusMatrixXcf((const Octopus::OctopusMatrixXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcf___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcf___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcf___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXcf___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcf::operator -(Octopus::OctopusMatrixXcf const &)\n"
    "    Octopus::OctopusMatrixXcf::operator -(std::complex< float > const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXcf___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusMatrixXcf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::operator *",1,"Octopus::OctopusMatrixXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::operator *",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___mul",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator *(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcf * resultptr = new Octopus::OctopusMatrixXcf((const Octopus::OctopusMatrixXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcf___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcf___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcf___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXcf___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcf::operator *(Octopus::OctopusMatrixXcf const &)\n"
    "    Octopus::OctopusMatrixXcf::operator *(std::complex< float > const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXcf___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  Octopus::OctopusMatrixXcf result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::operator /",1,"Octopus::OctopusMatrixXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::operator /",2,"std::complex< float > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___div",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator /(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcf * resultptr = new Octopus::OctopusMatrixXcf((const Octopus::OctopusMatrixXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcf___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcf___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcf___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXcf___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcf::operator /(Octopus::OctopusMatrixXcf const &)\n"
    "    Octopus::OctopusMatrixXcf::operator /(std::complex< float > const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXcf___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< Octopus::MatrixViewXcf > result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::__getitem__",1,"Octopus::OctopusMatrixXcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf___getitem",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = Octopus_OctopusMatrixXcf___getitem____SWIG(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::MatrixViewXcf * resultptr = new Octopus::MatrixViewXcf((const Octopus::MatrixViewXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__MatrixViewXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcf_rows__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::rows",1,"Octopus::OctopusMatrixXcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf_rows",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  {
    try
    {
      result = Octopus_OctopusMatrixXcf_rows__SWIG_1(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcf_rows(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusMatrixXcf_rows__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXcf_rows'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcf::rows()\n"
    "    Octopus::OctopusMatrixXcf::rows()\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXcf_cols__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::cols",1,"Octopus::OctopusMatrixXcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf_cols",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  {
    try
    {
      result = Octopus_OctopusMatrixXcf_cols__SWIG_1(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcf_cols(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusMatrixXcf_cols__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXcf_cols'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcf::cols()\n"
    "    Octopus::OctopusMatrixXcf::cols()\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXcf_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  SwigValueWrapper< std::complex< float > > arg2 ;
  std::complex< float > *argp2 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::fill",1,"Octopus::OctopusMatrixXcf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::fill",2,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf_fill",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusMatrixXcf_fill",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      Octopus_OctopusMatrixXcf_fill__SWIG_1(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcf_fill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcf_fill__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXcf_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcf::fill()\n"
    "    Octopus::OctopusMatrixXcf::fill(std::complex< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXcf_data(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::data",1,"Octopus::OctopusMatrixXcf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf_data",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  {
    try
    {
      result = (std::complex< float > *)Octopus_OctopusMatrixXcf_data__SWIG(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcf_copy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::complex< float > *arg4 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::copy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::copy",1,"Octopus::OctopusMatrixXcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::copy",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::copy",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::copy",4,"std::complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf_copy",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusMatrixXcf_copy",4,SWIGTYPE_p_std__complexT_float_t);
  }
  
  {
    try
    {
      Octopus_OctopusMatrixXcf_copy__SWIG_0(arg1,arg2,arg3,arg4);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcf_copy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::complex< double > *arg4 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcf::copy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::copy",1,"Octopus::OctopusMatrixXcf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::copy",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::copy",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Octopus::OctopusMatrixXcf::copy",4,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("OctopusMatrixXcf_copy",1,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusMatrixXcf_copy",4,SWIGTYPE_p_std__complexT_double_t);
  }
  
  {
    try
    {
      Octopus_OctopusMatrixXcf_copy__SWIG_1(arg1,arg2,arg3,arg4);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcf_copy(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_OctopusMatrixXcf_copy__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_OctopusMatrixXcf_copy__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXcf_copy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcf::copy(size_t,size_t,std::complex< float > *)\n"
    "    Octopus::OctopusMatrixXcf::copy(size_t,size_t,std::complex< double > *)\n");
  lua_error(L);return 0;
}


static void swig_delete_OctopusMatrixXcf(void *obj) {
Octopus::OctopusMatrixXcf *arg1 = (Octopus::OctopusMatrixXcf *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctopusMatrixXcf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctopusMatrixXcf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctopusMatrixXcf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OctopusMatrixXcf_methods[]= {
    { "print", _wrap_OctopusMatrixXcf_print},
    { "__add", _wrap_OctopusMatrixXcf___add},
    { "__sub", _wrap_OctopusMatrixXcf___sub},
    { "__mul", _wrap_OctopusMatrixXcf___mul},
    { "__div", _wrap_OctopusMatrixXcf___div},
    { "__getitem", _wrap_OctopusMatrixXcf___getitem},
    { "rows", _wrap_OctopusMatrixXcf_rows},
    { "cols", _wrap_OctopusMatrixXcf_cols},
    { "fill", _wrap_OctopusMatrixXcf_fill},
    { "data", _wrap_OctopusMatrixXcf_data},
    { "copy", _wrap_OctopusMatrixXcf_copy},
    {0,0}
};
static swig_lua_method swig_OctopusMatrixXcf_meta[] = {
    { "__add", _wrap_OctopusMatrixXcf___add},
    { "__sub", _wrap_OctopusMatrixXcf___sub},
    { "__mul", _wrap_OctopusMatrixXcf___mul},
    { "__div", _wrap_OctopusMatrixXcf___div},
    { "__getitem", _wrap_OctopusMatrixXcf___getitem},
    {0,0}
};

static swig_lua_attribute swig_OctopusMatrixXcf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctopusMatrixXcf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctopusMatrixXcf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctopusMatrixXcf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctopusMatrixXcf_Sf_SwigStatic = {
    "OctopusMatrixXcf",
    swig_OctopusMatrixXcf_Sf_SwigStatic_methods,
    swig_OctopusMatrixXcf_Sf_SwigStatic_attributes,
    swig_OctopusMatrixXcf_Sf_SwigStatic_constants,
    swig_OctopusMatrixXcf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctopusMatrixXcf_bases[] = {0};
static const char *swig_OctopusMatrixXcf_base_names[] = {0};
static swig_lua_class _wrap_class_OctopusMatrixXcf = { "OctopusMatrixXcf", "OctopusMatrixXcf", &SWIGTYPE_p_Octopus__OctopusMatrixXcf,_proxy__wrap_new_OctopusMatrixXcf, swig_delete_OctopusMatrixXcf, swig_OctopusMatrixXcf_methods, swig_OctopusMatrixXcf_attributes, &swig_OctopusMatrixXcf_Sf_SwigStatic, swig_OctopusMatrixXcf_meta, swig_OctopusMatrixXcf_bases, swig_OctopusMatrixXcf_base_names };

static int _wrap_MatrixViewXcd_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::MatrixViewXcd *arg1 = (Octopus::MatrixViewXcd *) 0 ;
  Octopus::OctopusMatrixXcd *arg2 = (Octopus::OctopusMatrixXcd *) 0 ;
  
  SWIG_check_num_args("Octopus::MatrixViewXcd::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXcd::matrix",1,"Octopus::MatrixViewXcd *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Octopus::MatrixViewXcd::matrix",2,"Octopus::OctopusMatrixXcd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__MatrixViewXcd,0))){
    SWIG_fail_ptr("MatrixViewXcd_matrix_set",1,SWIGTYPE_p_Octopus__MatrixViewXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXcd,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("MatrixViewXcd_matrix_set",2,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  if (arg1) (arg1)->matrix = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixViewXcd_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::MatrixViewXcd *arg1 = (Octopus::MatrixViewXcd *) 0 ;
  Octopus::OctopusMatrixXcd *result = 0 ;
  
  SWIG_check_num_args("Octopus::MatrixViewXcd::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXcd::matrix",1,"Octopus::MatrixViewXcd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__MatrixViewXcd,0))){
    SWIG_fail_ptr("MatrixViewXcd_matrix_get",1,SWIGTYPE_p_Octopus__MatrixViewXcd);
  }
  
  result = (Octopus::OctopusMatrixXcd *) ((arg1)->matrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixViewXcd_row_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::MatrixViewXcd *arg1 = (Octopus::MatrixViewXcd *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Octopus::MatrixViewXcd::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXcd::row",1,"Octopus::MatrixViewXcd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::MatrixViewXcd::row",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__MatrixViewXcd,0))){
    SWIG_fail_ptr("MatrixViewXcd_row_set",1,SWIGTYPE_p_Octopus__MatrixViewXcd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->row = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixViewXcd_row_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::MatrixViewXcd *arg1 = (Octopus::MatrixViewXcd *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::MatrixViewXcd::row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXcd::row",1,"Octopus::MatrixViewXcd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__MatrixViewXcd,0))){
    SWIG_fail_ptr("MatrixViewXcd_row_get",1,SWIGTYPE_p_Octopus__MatrixViewXcd);
  }
  
  result =  ((arg1)->row);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MatrixViewXcd(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  size_t arg2 ;
  Octopus::MatrixViewXcd *result = 0 ;
  
  SWIG_check_num_args("Octopus::MatrixViewXcd::MatrixViewXcd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::MatrixViewXcd::MatrixViewXcd",1,"Octopus::OctopusMatrixXcd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::MatrixViewXcd::MatrixViewXcd",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("new_MatrixViewXcd",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (Octopus::MatrixViewXcd *)new Octopus::MatrixViewXcd(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__MatrixViewXcd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MatrixViewXcd(void *obj) {
Octopus::MatrixViewXcd *arg1 = (Octopus::MatrixViewXcd *) obj;
delete arg1;
}
static int _proxy__wrap_new_MatrixViewXcd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MatrixViewXcd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MatrixViewXcd_attributes[] = {
    { "matrix", _wrap_MatrixViewXcd_matrix_get, _wrap_MatrixViewXcd_matrix_set },
    { "row", _wrap_MatrixViewXcd_row_get, _wrap_MatrixViewXcd_row_set },
    {0,0,0}
};
static swig_lua_method swig_MatrixViewXcd_methods[]= {
    {0,0}
};
static swig_lua_method swig_MatrixViewXcd_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MatrixViewXcd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MatrixViewXcd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MatrixViewXcd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MatrixViewXcd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MatrixViewXcd_Sf_SwigStatic = {
    "MatrixViewXcd",
    swig_MatrixViewXcd_Sf_SwigStatic_methods,
    swig_MatrixViewXcd_Sf_SwigStatic_attributes,
    swig_MatrixViewXcd_Sf_SwigStatic_constants,
    swig_MatrixViewXcd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MatrixViewXcd_bases[] = {0};
static const char *swig_MatrixViewXcd_base_names[] = {0};
static swig_lua_class _wrap_class_MatrixViewXcd = { "MatrixViewXcd", "MatrixViewXcd", &SWIGTYPE_p_Octopus__MatrixViewXcd,_proxy__wrap_new_MatrixViewXcd, swig_delete_MatrixViewXcd, swig_MatrixViewXcd_methods, swig_MatrixViewXcd_attributes, &swig_MatrixViewXcd_Sf_SwigStatic, swig_MatrixViewXcd_meta, swig_MatrixViewXcd_bases, swig_MatrixViewXcd_base_names };

static int _wrap_new_OctopusMatrixXcd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::OctopusMatrixXcd",0,0)
  {
    try
    {
      result = (Octopus::OctopusMatrixXcd *)new Octopus::OctopusMatrixXcd();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusMatrixXcd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusMatrixXcd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = 0 ;
  Octopus::OctopusMatrixXcd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::OctopusMatrixXcd",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::OctopusMatrixXcd",1,"ComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("new_OctopusMatrixXcd",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  {
    try
    {
      result = (Octopus::OctopusMatrixXcd *)new Octopus::OctopusMatrixXcd((ComplexMatrix const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusMatrixXcd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusMatrixXcd__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Octopus::OctopusMatrixXcd *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::OctopusMatrixXcd",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::OctopusMatrixXcd",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::OctopusMatrixXcd",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (Octopus::OctopusMatrixXcd *)new Octopus::OctopusMatrixXcd(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusMatrixXcd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusMatrixXcd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OctopusMatrixXcd__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusMatrixXcd__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_OctopusMatrixXcd__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OctopusMatrixXcd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcd::OctopusMatrixXcd()\n"
    "    Octopus::OctopusMatrixXcd::OctopusMatrixXcd(ComplexMatrix const &)\n"
    "    Octopus::OctopusMatrixXcd::OctopusMatrixXcd(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXcd_print(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::print",1,"Octopus::OctopusMatrixXcd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd_print",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  {
    try
    {
      (arg1)->print();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcd___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  Octopus::OctopusMatrixXcd *arg2 = 0 ;
  Octopus::OctopusMatrixXcd result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::operator +",1,"Octopus::OctopusMatrixXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::operator +",2,"Octopus::OctopusMatrixXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___add",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___add",2,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  {
    try
    {
      result = (arg1)->operator +((Octopus::OctopusMatrixXcd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcd * resultptr = new Octopus::OctopusMatrixXcd((const Octopus::OctopusMatrixXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcd___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  Octopus::OctopusMatrixXcd *arg2 = 0 ;
  Octopus::OctopusMatrixXcd result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::operator -",1,"Octopus::OctopusMatrixXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::operator -",2,"Octopus::OctopusMatrixXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___sub",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___sub",2,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  {
    try
    {
      result = (arg1)->operator -((Octopus::OctopusMatrixXcd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcd * resultptr = new Octopus::OctopusMatrixXcd((const Octopus::OctopusMatrixXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcd___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  Octopus::OctopusMatrixXcd *arg2 = 0 ;
  Octopus::OctopusMatrixXcd result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::operator *",1,"Octopus::OctopusMatrixXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::operator *",2,"Octopus::OctopusMatrixXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___mul",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___mul",2,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  {
    try
    {
      result = (arg1)->operator *((Octopus::OctopusMatrixXcd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcd * resultptr = new Octopus::OctopusMatrixXcd((const Octopus::OctopusMatrixXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcd___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  Octopus::OctopusMatrixXcd *arg2 = 0 ;
  Octopus::OctopusMatrixXcd result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::operator /",1,"Octopus::OctopusMatrixXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::operator /",2,"Octopus::OctopusMatrixXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___div",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___div",2,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  {
    try
    {
      result = (arg1)->operator /((Octopus::OctopusMatrixXcd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcd * resultptr = new Octopus::OctopusMatrixXcd((const Octopus::OctopusMatrixXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcd___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  Octopus::OctopusMatrixXcd result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::operator +",1,"Octopus::OctopusMatrixXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::operator +",2,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___add",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator +(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcd * resultptr = new Octopus::OctopusMatrixXcd((const Octopus::OctopusMatrixXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcd___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcd___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcd___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXcd___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcd::operator +(Octopus::OctopusMatrixXcd const &)\n"
    "    Octopus::OctopusMatrixXcd::operator +(std::complex< double > const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXcd___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  Octopus::OctopusMatrixXcd result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::operator -",1,"Octopus::OctopusMatrixXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::operator -",2,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___sub",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator -(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcd * resultptr = new Octopus::OctopusMatrixXcd((const Octopus::OctopusMatrixXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcd___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcd___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcd___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXcd___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcd::operator -(Octopus::OctopusMatrixXcd const &)\n"
    "    Octopus::OctopusMatrixXcd::operator -(std::complex< double > const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXcd___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  Octopus::OctopusMatrixXcd result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::operator *",1,"Octopus::OctopusMatrixXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::operator *",2,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___mul",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator *(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcd * resultptr = new Octopus::OctopusMatrixXcd((const Octopus::OctopusMatrixXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcd___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcd___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcd___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXcd___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcd::operator *(Octopus::OctopusMatrixXcd const &)\n"
    "    Octopus::OctopusMatrixXcd::operator *(std::complex< double > const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXcd___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  Octopus::OctopusMatrixXcd result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::operator /",1,"Octopus::OctopusMatrixXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::operator /",2,"std::complex< double > const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___div",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      result = (arg1)->operator /(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcd * resultptr = new Octopus::OctopusMatrixXcd((const Octopus::OctopusMatrixXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcd___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcd___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcd___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXcd___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcd::operator /(Octopus::OctopusMatrixXcd const &)\n"
    "    Octopus::OctopusMatrixXcd::operator /(std::complex< double > const)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXcd___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< Octopus::MatrixViewXcd > result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::__getitem__",1,"Octopus::OctopusMatrixXcd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd___getitem",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = Octopus_OctopusMatrixXcd___getitem____SWIG(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::MatrixViewXcd * resultptr = new Octopus::MatrixViewXcd((const Octopus::MatrixViewXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__MatrixViewXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcd_rows__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::rows",1,"Octopus::OctopusMatrixXcd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd_rows",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  {
    try
    {
      result = Octopus_OctopusMatrixXcd_rows__SWIG_1(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcd_rows(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusMatrixXcd_rows__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXcd_rows'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcd::rows()\n"
    "    Octopus::OctopusMatrixXcd::rows()\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXcd_cols__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::cols",1,"Octopus::OctopusMatrixXcd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd_cols",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  {
    try
    {
      result = Octopus_OctopusMatrixXcd_cols__SWIG_1(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcd_cols(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OctopusMatrixXcd_cols__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXcd_cols'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcd::cols()\n"
    "    Octopus::OctopusMatrixXcd::cols()\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXcd_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  SwigValueWrapper< std::complex< double > > arg2 ;
  std::complex< double > *argp2 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::fill",1,"Octopus::OctopusMatrixXcd *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::fill",2,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd_fill",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusMatrixXcd_fill",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  {
    try
    {
      Octopus_OctopusMatrixXcd_fill__SWIG_1(arg1,arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcd_fill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OctopusMatrixXcd_fill__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXcd_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcd::fill()\n"
    "    Octopus::OctopusMatrixXcd::fill(std::complex< double >)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusMatrixXcd_data(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::data",1,"Octopus::OctopusMatrixXcd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd_data",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  {
    try
    {
      result = (std::complex< double > *)Octopus_OctopusMatrixXcd_data__SWIG(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcd_copy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::complex< double > *arg4 = (std::complex< double > *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::copy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::copy",1,"Octopus::OctopusMatrixXcd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::copy",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::copy",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::copy",4,"std::complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd_copy",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("OctopusMatrixXcd_copy",4,SWIGTYPE_p_std__complexT_double_t);
  }
  
  {
    try
    {
      Octopus_OctopusMatrixXcd_copy__SWIG_0(arg1,arg2,arg3,arg4);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcd_copy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::complex< float > *arg4 = (std::complex< float > *) 0 ;
  
  SWIG_check_num_args("Octopus::OctopusMatrixXcd::copy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::copy",1,"Octopus::OctopusMatrixXcd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::copy",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::copy",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Octopus::OctopusMatrixXcd::copy",4,"std::complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("OctopusMatrixXcd_copy",1,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("OctopusMatrixXcd_copy",4,SWIGTYPE_p_std__complexT_float_t);
  }
  
  {
    try
    {
      Octopus_OctopusMatrixXcd_copy__SWIG_1(arg1,arg2,arg3,arg4);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusMatrixXcd_copy(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_OctopusMatrixXcd_copy__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_OctopusMatrixXcd_copy__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusMatrixXcd_copy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusMatrixXcd::copy(size_t,size_t,std::complex< double > *)\n"
    "    Octopus::OctopusMatrixXcd::copy(size_t,size_t,std::complex< float > *)\n");
  lua_error(L);return 0;
}


static void swig_delete_OctopusMatrixXcd(void *obj) {
Octopus::OctopusMatrixXcd *arg1 = (Octopus::OctopusMatrixXcd *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctopusMatrixXcd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctopusMatrixXcd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctopusMatrixXcd_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OctopusMatrixXcd_methods[]= {
    { "print", _wrap_OctopusMatrixXcd_print},
    { "__add", _wrap_OctopusMatrixXcd___add},
    { "__sub", _wrap_OctopusMatrixXcd___sub},
    { "__mul", _wrap_OctopusMatrixXcd___mul},
    { "__div", _wrap_OctopusMatrixXcd___div},
    { "__getitem", _wrap_OctopusMatrixXcd___getitem},
    { "rows", _wrap_OctopusMatrixXcd_rows},
    { "cols", _wrap_OctopusMatrixXcd_cols},
    { "fill", _wrap_OctopusMatrixXcd_fill},
    { "data", _wrap_OctopusMatrixXcd_data},
    { "copy", _wrap_OctopusMatrixXcd_copy},
    {0,0}
};
static swig_lua_method swig_OctopusMatrixXcd_meta[] = {
    { "__add", _wrap_OctopusMatrixXcd___add},
    { "__sub", _wrap_OctopusMatrixXcd___sub},
    { "__mul", _wrap_OctopusMatrixXcd___mul},
    { "__div", _wrap_OctopusMatrixXcd___div},
    { "__getitem", _wrap_OctopusMatrixXcd___getitem},
    {0,0}
};

static swig_lua_attribute swig_OctopusMatrixXcd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctopusMatrixXcd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctopusMatrixXcd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctopusMatrixXcd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctopusMatrixXcd_Sf_SwigStatic = {
    "OctopusMatrixXcd",
    swig_OctopusMatrixXcd_Sf_SwigStatic_methods,
    swig_OctopusMatrixXcd_Sf_SwigStatic_attributes,
    swig_OctopusMatrixXcd_Sf_SwigStatic_constants,
    swig_OctopusMatrixXcd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctopusMatrixXcd_bases[] = {0};
static const char *swig_OctopusMatrixXcd_base_names[] = {0};
static swig_lua_class _wrap_class_OctopusMatrixXcd = { "OctopusMatrixXcd", "OctopusMatrixXcd", &SWIGTYPE_p_Octopus__OctopusMatrixXcd,_proxy__wrap_new_OctopusMatrixXcd, swig_delete_OctopusMatrixXcd, swig_OctopusMatrixXcd_methods, swig_OctopusMatrixXcd_attributes, &swig_OctopusMatrixXcd_Sf_SwigStatic, swig_OctopusMatrixXcd_meta, swig_OctopusMatrixXcd_bases, swig_OctopusMatrixXcd_base_names };

static int _wrap_new_OctopusValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",0,0)
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_octave_value);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((octave_value const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ArrayXf *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"ArrayXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((ArrayXf const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ArrayXd *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"ArrayXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((ArrayXd const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ArrayXcf *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"ArrayXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_ArrayT_std__complexT_float_t_t);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((ArrayXcf const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  ArrayXcd *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"ArrayXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_ArrayT_std__complexT_double_t_t);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((ArrayXcd const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  VectorXf *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"VectorXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_FloatRowVector);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((VectorXf const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  VectorXd *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"VectorXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_RowVector);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((VectorXd const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  VectorXcf *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"VectorXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((VectorXcf const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  VectorXcd *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"VectorXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((VectorXcd const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  ColVectorXf *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"ColVectorXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((ColVectorXf const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  ColVectorXd *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"ColVectorXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_ColumnVector);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((ColVectorXd const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  ColVectorXcf *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"ColVectorXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((ColVectorXcf const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  ColVectorXcd *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"ColVectorXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((ColVectorXcd const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  MatrixXf *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"MatrixXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_FloatMatrix);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((MatrixXf const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_16(lua_State* L) {
  int SWIG_arg = 0;
  MatrixXd *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"MatrixXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_Matrix);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((MatrixXd const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_17(lua_State* L) {
  int SWIG_arg = 0;
  MatrixXcf *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"MatrixXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((MatrixXcf const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue__SWIG_18(lua_State* L) {
  int SWIG_arg = 0;
  MatrixXcd *arg1 = 0 ;
  Octopus::OctopusValue *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValue::OctopusValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValue::OctopusValue",1,"MatrixXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("new_OctopusValue",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValue *)new Octopus::OctopusValue((MatrixXcd const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValue(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OctopusValue__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_9(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_10(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_11(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_12(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_13(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_14(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_15(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_16(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_17(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_18(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_OctopusValue__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OctopusValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusValue::OctopusValue()\n"
    "    Octopus::OctopusValue::OctopusValue(octave_value const &)\n"
    "    Octopus::OctopusValue::OctopusValue(double)\n"
    "    Octopus::OctopusValue::OctopusValue(ArrayXf const &)\n"
    "    Octopus::OctopusValue::OctopusValue(ArrayXd const &)\n"
    "    Octopus::OctopusValue::OctopusValue(ArrayXcf const &)\n"
    "    Octopus::OctopusValue::OctopusValue(ArrayXcd const &)\n"
    "    Octopus::OctopusValue::OctopusValue(VectorXf const &)\n"
    "    Octopus::OctopusValue::OctopusValue(VectorXd const &)\n"
    "    Octopus::OctopusValue::OctopusValue(VectorXcf const &)\n"
    "    Octopus::OctopusValue::OctopusValue(VectorXcd const &)\n"
    "    Octopus::OctopusValue::OctopusValue(ColVectorXf const &)\n"
    "    Octopus::OctopusValue::OctopusValue(ColVectorXd const &)\n"
    "    Octopus::OctopusValue::OctopusValue(ColVectorXcf const &)\n"
    "    Octopus::OctopusValue::OctopusValue(ColVectorXcd const &)\n"
    "    Octopus::OctopusValue::OctopusValue(MatrixXf const &)\n"
    "    Octopus::OctopusValue::OctopusValue(MatrixXd const &)\n"
    "    Octopus::OctopusValue::OctopusValue(MatrixXcf const &)\n"
    "    Octopus::OctopusValue::OctopusValue(MatrixXcd const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusValue_getScalarValue(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValue *arg1 = (Octopus::OctopusValue *) 0 ;
  double result;
  
  SWIG_check_num_args("Octopus::OctopusValue::getScalarValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValue::getScalarValue",1,"Octopus::OctopusValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctopusValue_getScalarValue",1,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      result = (double)(arg1)->getScalarValue();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValue_getFloatRowVector(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValue *arg1 = (Octopus::OctopusValue *) 0 ;
  Octopus::OctopusRowVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusValue::getFloatRowVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValue::getFloatRowVector",1,"Octopus::OctopusValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctopusValue_getFloatRowVector",1,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      result = (arg1)->getFloatRowVector();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXf * resultptr = new Octopus::OctopusRowVectorXf((const Octopus::OctopusRowVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValue_getFloatColVector(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValue *arg1 = (Octopus::OctopusValue *) 0 ;
  Octopus::OctopusColVectorXf result;
  
  SWIG_check_num_args("Octopus::OctopusValue::getFloatColVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValue::getFloatColVector",1,"Octopus::OctopusValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctopusValue_getFloatColVector",1,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      result = (arg1)->getFloatColVector();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXf * resultptr = new Octopus::OctopusColVectorXf((const Octopus::OctopusColVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValue_getFloatComplexRowVector(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValue *arg1 = (Octopus::OctopusValue *) 0 ;
  Octopus::OctopusRowVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusValue::getFloatComplexRowVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValue::getFloatComplexRowVector",1,"Octopus::OctopusValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctopusValue_getFloatComplexRowVector",1,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      result = (arg1)->getFloatComplexRowVector();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcf * resultptr = new Octopus::OctopusRowVectorXcf((const Octopus::OctopusRowVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValue_getFloatComplexColVector(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValue *arg1 = (Octopus::OctopusValue *) 0 ;
  Octopus::OctopusColVectorXcf result;
  
  SWIG_check_num_args("Octopus::OctopusValue::getFloatComplexColVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValue::getFloatComplexColVector",1,"Octopus::OctopusValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctopusValue_getFloatComplexColVector",1,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      result = (arg1)->getFloatComplexColVector();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcf * resultptr = new Octopus::OctopusColVectorXcf((const Octopus::OctopusColVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValue_getRowVector(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValue *arg1 = (Octopus::OctopusValue *) 0 ;
  Octopus::OctopusRowVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusValue::getRowVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValue::getRowVector",1,"Octopus::OctopusValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctopusValue_getRowVector",1,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      result = (arg1)->getRowVector();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXd * resultptr = new Octopus::OctopusRowVectorXd((const Octopus::OctopusRowVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValue_getColVector(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValue *arg1 = (Octopus::OctopusValue *) 0 ;
  Octopus::OctopusColVectorXd result;
  
  SWIG_check_num_args("Octopus::OctopusValue::getColVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValue::getColVector",1,"Octopus::OctopusValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctopusValue_getColVector",1,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      result = (arg1)->getColVector();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXd * resultptr = new Octopus::OctopusColVectorXd((const Octopus::OctopusColVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValue_getComplexRowVector(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValue *arg1 = (Octopus::OctopusValue *) 0 ;
  Octopus::OctopusRowVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusValue::getComplexRowVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValue::getComplexRowVector",1,"Octopus::OctopusValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctopusValue_getComplexRowVector",1,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      result = (arg1)->getComplexRowVector();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcd * resultptr = new Octopus::OctopusRowVectorXcd((const Octopus::OctopusRowVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValue_getComplexColVector(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValue *arg1 = (Octopus::OctopusValue *) 0 ;
  Octopus::OctopusColVectorXcd result;
  
  SWIG_check_num_args("Octopus::OctopusValue::getComplexColVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValue::getComplexColVector",1,"Octopus::OctopusValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctopusValue_getComplexColVector",1,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      result = (arg1)->getComplexColVector();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcd * resultptr = new Octopus::OctopusColVectorXcd((const Octopus::OctopusColVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValue_getFloatMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValue *arg1 = (Octopus::OctopusValue *) 0 ;
  Octopus::OctopusMatrixXf result;
  
  SWIG_check_num_args("Octopus::OctopusValue::getFloatMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValue::getFloatMatrix",1,"Octopus::OctopusValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctopusValue_getFloatMatrix",1,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      result = (arg1)->getFloatMatrix();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXf * resultptr = new Octopus::OctopusMatrixXf((const Octopus::OctopusMatrixXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValue_getMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValue *arg1 = (Octopus::OctopusValue *) 0 ;
  Octopus::OctopusMatrixXd result;
  
  SWIG_check_num_args("Octopus::OctopusValue::getMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValue::getMatrix",1,"Octopus::OctopusValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctopusValue_getMatrix",1,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      result = (arg1)->getMatrix();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXd * resultptr = new Octopus::OctopusMatrixXd((const Octopus::OctopusMatrixXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValue_getFloatComplexMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValue *arg1 = (Octopus::OctopusValue *) 0 ;
  Octopus::OctopusMatrixXcf result;
  
  SWIG_check_num_args("Octopus::OctopusValue::getFloatComplexMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValue::getFloatComplexMatrix",1,"Octopus::OctopusValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctopusValue_getFloatComplexMatrix",1,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      result = (arg1)->getFloatComplexMatrix();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcf * resultptr = new Octopus::OctopusMatrixXcf((const Octopus::OctopusMatrixXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValue_getComplexMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValue *arg1 = (Octopus::OctopusValue *) 0 ;
  Octopus::OctopusMatrixXcd result;
  
  SWIG_check_num_args("Octopus::OctopusValue::getComplexMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValue::getComplexMatrix",1,"Octopus::OctopusValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctopusValue_getComplexMatrix",1,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      result = (arg1)->getComplexMatrix();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcd * resultptr = new Octopus::OctopusMatrixXcd((const Octopus::OctopusMatrixXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OctopusValue(void *obj) {
Octopus::OctopusValue *arg1 = (Octopus::OctopusValue *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctopusValue(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctopusValue);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctopusValue_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OctopusValue_methods[]= {
    { "getScalarValue", _wrap_OctopusValue_getScalarValue},
    { "getFloatRowVector", _wrap_OctopusValue_getFloatRowVector},
    { "getFloatColVector", _wrap_OctopusValue_getFloatColVector},
    { "getFloatComplexRowVector", _wrap_OctopusValue_getFloatComplexRowVector},
    { "getFloatComplexColVector", _wrap_OctopusValue_getFloatComplexColVector},
    { "getRowVector", _wrap_OctopusValue_getRowVector},
    { "getColVector", _wrap_OctopusValue_getColVector},
    { "getComplexRowVector", _wrap_OctopusValue_getComplexRowVector},
    { "getComplexColVector", _wrap_OctopusValue_getComplexColVector},
    { "getFloatMatrix", _wrap_OctopusValue_getFloatMatrix},
    { "getMatrix", _wrap_OctopusValue_getMatrix},
    { "getFloatComplexMatrix", _wrap_OctopusValue_getFloatComplexMatrix},
    { "getComplexMatrix", _wrap_OctopusValue_getComplexMatrix},
    {0,0}
};
static swig_lua_method swig_OctopusValue_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OctopusValue_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctopusValue_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctopusValue_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctopusValue_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctopusValue_Sf_SwigStatic = {
    "OctopusValue",
    swig_OctopusValue_Sf_SwigStatic_methods,
    swig_OctopusValue_Sf_SwigStatic_attributes,
    swig_OctopusValue_Sf_SwigStatic_constants,
    swig_OctopusValue_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctopusValue_bases[] = {0};
static const char *swig_OctopusValue_base_names[] = {0};
static swig_lua_class _wrap_class_OctopusValue = { "OctopusValue", "OctopusValue", &SWIGTYPE_p_Octopus__OctopusValue,_proxy__wrap_new_OctopusValue, swig_delete_OctopusValue, swig_OctopusValue_methods, swig_OctopusValue_attributes, &swig_OctopusValue_Sf_SwigStatic, swig_OctopusValue_meta, swig_OctopusValue_bases, swig_OctopusValue_base_names };

static int _wrap_OctopusValueList_vlist_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  octave_value_list arg2 ;
  octave_value_list *argp2 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::vlist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::vlist",1,"Octopus::OctopusValueList *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::vlist",2,"octave_value_list");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList_vlist_set",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("OctopusValueList_vlist_set",2,SWIGTYPE_p_octave_value_list);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vlist = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList_vlist_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  octave_value_list result;
  
  SWIG_check_num_args("Octopus::OctopusValueList::vlist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::vlist",1,"Octopus::OctopusValueList *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList_vlist_get",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  result =  ((arg1)->vlist);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValueList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::OctopusValueList",0,0)
  {
    try
    {
      result = (Octopus::OctopusValueList *)new Octopus::OctopusValueList();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValueList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = 0 ;
  Octopus::OctopusValueList *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::OctopusValueList",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::OctopusValueList",1,"octave_value_list const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("new_OctopusValueList",1,SWIGTYPE_p_octave_value_list);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValueList *)new Octopus::OctopusValueList((octave_value_list const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValueList__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = 0 ;
  Octopus::OctopusValueList *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::OctopusValueList",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::OctopusValueList",1,"Octopus::OctopusValueList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("new_OctopusValueList",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  {
    try
    {
      result = (Octopus::OctopusValueList *)new Octopus::OctopusValueList((Octopus::OctopusValueList const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusValueList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OctopusValueList__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValueList__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OctopusValueList__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OctopusValueList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusValueList::OctopusValueList()\n"
    "    Octopus::OctopusValueList::OctopusValueList(octave_value_list const &)\n"
    "    Octopus::OctopusValueList::OctopusValueList(Octopus::OctopusValueList const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusValueList_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  Octopus::OctopusValue result;
  
  SWIG_check_num_args("Octopus::OctopusValueList::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::get",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList_get",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->get(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValue * resultptr = new Octopus::OctopusValue((const Octopus::OctopusValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  Octopus::OctopusValue *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::set",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::set",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::set",3,"Octopus::OctopusValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList_set",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctopusValueList_set",3,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      (arg1)->set(arg2,(Octopus::OctopusValue const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::set",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::set",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::set",3,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList_set",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  {
    try
    {
      (arg1)->set(arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList_set__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::set",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::set",2,"size_t");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::set",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList_set",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try
    {
      (arg1)->set(arg2,(std::string const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList_set(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValue, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList_set__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_OctopusValueList_set__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_OctopusValueList_set__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusValueList_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusValueList::set(size_t,Octopus::OctopusValue const &)\n"
    "    Octopus::OctopusValueList::set(size_t,double const)\n"
    "    Octopus::OctopusValueList::set(size_t,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusValueList___call(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  Value *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::operator ()",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___call",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (Value *) &(arg1)->operator ()(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  Octopus::OctopusValue result;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__getitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___getitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (arg1)->__getitem__(arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValue * resultptr = new Octopus::OctopusValue((const Octopus::OctopusValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  Octopus::OctopusValue *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"Octopus::OctopusValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(Octopus::OctopusValue const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  {
    try
    {
      (arg1)->__setitem__(arg2,(double const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  ArrayXf *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"ArrayXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_ArrayT_float_t);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(ArrayXf const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  ArrayXd *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"ArrayXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_ArrayT_double_t);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(ArrayXd const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  ArrayXcf *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"ArrayXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_ArrayT_std__complexT_float_t_t);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(ArrayXcf const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  ArrayXcd *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"ArrayXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_ArrayT_std__complexT_double_t_t);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(ArrayXcd const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  VectorXf *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"VectorXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_FloatRowVector);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(VectorXf const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  VectorXd *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"VectorXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_RowVector);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(VectorXd const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  VectorXcf *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"VectorXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(VectorXcf const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  VectorXcd *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"VectorXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_ComplexRowVector);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(VectorXcd const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  ColVectorXf *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"ColVectorXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_FloatColumnVector);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(ColVectorXf const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  ColVectorXd *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"ColVectorXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_ColumnVector);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(ColVectorXd const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  ColVectorXcf *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"ColVectorXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(ColVectorXcf const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  ColVectorXcd *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"ColVectorXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_ComplexColumnVector);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(ColVectorXcd const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  MatrixXf *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"MatrixXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_FloatMatrix);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(MatrixXf const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  MatrixXd *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"MatrixXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_Matrix);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(MatrixXd const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_16(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  MatrixXcf *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"MatrixXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(MatrixXcf const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem__SWIG_17(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) 0 ;
  size_t arg2 ;
  MatrixXcd *arg3 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusValueList::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",1,"Octopus::OctopusValueList *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusValueList::__setitem__",3,"MatrixXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",1,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("OctopusValueList___setitem",3,SWIGTYPE_p_ComplexMatrix);
  }
  
  {
    try
    {
      (arg1)->__setitem__(arg2,(MatrixXcd const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusValueList___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValue, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatRowVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_RowVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_8(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_10(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_11(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_12(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_13(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_14(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_15(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_16(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_17(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_OctopusValueList___setitem__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctopusValueList___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,Octopus::OctopusValue const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,double const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,ArrayXf const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,ArrayXd const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,ArrayXcf const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,ArrayXcd const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,VectorXf const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,VectorXd const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,VectorXcf const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,VectorXcd const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,ColVectorXf const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,ColVectorXd const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,ColVectorXcf const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,ColVectorXcd const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,MatrixXf const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,MatrixXd const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,MatrixXcf const &)\n"
    "    Octopus::OctopusValueList::__setitem__(size_t,MatrixXcd const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_OctopusValueList(void *obj) {
Octopus::OctopusValueList *arg1 = (Octopus::OctopusValueList *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctopusValueList(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctopusValueList);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctopusValueList_attributes[] = {
    { "vlist", _wrap_OctopusValueList_vlist_get, _wrap_OctopusValueList_vlist_set },
    {0,0,0}
};
static swig_lua_method swig_OctopusValueList_methods[]= {
    { "get", _wrap_OctopusValueList_get},
    { "set", _wrap_OctopusValueList_set},
    { "__call", _wrap_OctopusValueList___call},
    { "__getitem", _wrap_OctopusValueList___getitem},
    { "__setitem", _wrap_OctopusValueList___setitem},
    {0,0}
};
static swig_lua_method swig_OctopusValueList_meta[] = {
    { "__call", _wrap_OctopusValueList___call},
    { "__getitem", _wrap_OctopusValueList___getitem},
    { "__setitem", _wrap_OctopusValueList___setitem},
    {0,0}
};

static swig_lua_attribute swig_OctopusValueList_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctopusValueList_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctopusValueList_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctopusValueList_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctopusValueList_Sf_SwigStatic = {
    "OctopusValueList",
    swig_OctopusValueList_Sf_SwigStatic_methods,
    swig_OctopusValueList_Sf_SwigStatic_attributes,
    swig_OctopusValueList_Sf_SwigStatic_constants,
    swig_OctopusValueList_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctopusValueList_bases[] = {0};
static const char *swig_OctopusValueList_base_names[] = {0};
static swig_lua_class _wrap_class_OctopusValueList = { "OctopusValueList", "OctopusValueList", &SWIGTYPE_p_Octopus__OctopusValueList,_proxy__wrap_new_OctopusValueList, swig_delete_OctopusValueList, swig_OctopusValueList_methods, swig_OctopusValueList_attributes, &swig_OctopusValueList_Sf_SwigStatic, swig_OctopusValueList_meta, swig_OctopusValueList_bases, swig_OctopusValueList_base_names };

static int _wrap_OctaveInterpreter_interpreter_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) 0 ;
  octave::interpreter *arg2 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::interpreter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctaveInterpreter::interpreter",1,"Octopus::OctaveInterpreter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Octopus::OctaveInterpreter::interpreter",2,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctaveInterpreter_interpreter_set",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave__interpreter,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("OctaveInterpreter_interpreter_set",2,SWIGTYPE_p_octave__interpreter);
  }
  
  if (arg1) (arg1)->interpreter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveInterpreter_interpreter_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) 0 ;
  octave::interpreter *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::interpreter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctaveInterpreter::interpreter",1,"Octopus::OctaveInterpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctaveInterpreter_interpreter_get",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  result = (octave::interpreter *) ((arg1)->interpreter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave__interpreter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctaveInterpreter(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::OctaveInterpreter",0,0)
  {
    try
    {
      result = (Octopus::OctaveInterpreter *)new Octopus::OctaveInterpreter();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctaveInterpreter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveInterpreter_run_script(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::run_script",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctaveInterpreter::run_script",1,"Octopus::OctaveInterpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctaveInterpreter::run_script",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctaveInterpreter_run_script",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try
    {
      (arg1)->run_script((std::string const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveInterpreter_eval_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  std::string temp2 ;
  Octopus::OctopusValueList result;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::eval_string",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctaveInterpreter::eval_string",1,"Octopus::OctaveInterpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctaveInterpreter::eval_string",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Octopus::OctaveInterpreter::eval_string",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Octopus::OctaveInterpreter::eval_string",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctaveInterpreter_eval_string",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (int)lua_tonumber(L, 4);
  {
    try
    {
      result = (arg1)->eval_string((std::string const &)*arg2,arg3,arg4);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValueList * resultptr = new Octopus::OctopusValueList((const Octopus::OctopusValueList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveInterpreter_eval_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string temp2 ;
  Octopus::OctopusValueList result;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::eval_string",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctaveInterpreter::eval_string",1,"Octopus::OctaveInterpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctaveInterpreter::eval_string",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Octopus::OctaveInterpreter::eval_string",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctaveInterpreter_eval_string",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  {
    try
    {
      result = (arg1)->eval_string((std::string const &)*arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValueList * resultptr = new Octopus::OctopusValueList((const Octopus::OctopusValueList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveInterpreter_eval_string__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Octopus::OctopusValueList result;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::eval_string",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctaveInterpreter::eval_string",1,"Octopus::OctaveInterpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctaveInterpreter::eval_string",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctaveInterpreter_eval_string",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try
    {
      result = (arg1)->eval_string((std::string const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValueList * resultptr = new Octopus::OctopusValueList((const Octopus::OctopusValueList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveInterpreter_eval_string(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctaveInterpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_OctaveInterpreter_eval_string__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctaveInterpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_OctaveInterpreter_eval_string__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctaveInterpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_OctaveInterpreter_eval_string__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctaveInterpreter_eval_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctaveInterpreter::eval_string(std::string const &,bool,int)\n"
    "    Octopus::OctaveInterpreter::eval_string(std::string const &,bool)\n"
    "    Octopus::OctaveInterpreter::eval_string(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OctaveInterpreter_eval__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) 0 ;
  std::string *arg2 = 0 ;
  Octopus::OctopusValueList *arg3 = 0 ;
  int arg4 ;
  std::string temp2 ;
  Octopus::OctopusValueList result;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::eval",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctaveInterpreter::eval",1,"Octopus::OctaveInterpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctaveInterpreter::eval",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctaveInterpreter::eval",3,"Octopus::OctopusValueList const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Octopus::OctaveInterpreter::eval",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctaveInterpreter_eval",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctaveInterpreter_eval",3,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  {
    try
    {
      result = (arg1)->eval((std::string const &)*arg2,(Octopus::OctopusValueList const &)*arg3,arg4);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValueList * resultptr = new Octopus::OctopusValueList((const Octopus::OctopusValueList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveInterpreter_eval__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) 0 ;
  std::string *arg2 = 0 ;
  Octopus::OctopusValueList *arg3 = 0 ;
  std::string temp2 ;
  Octopus::OctopusValueList result;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::eval",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctaveInterpreter::eval",1,"Octopus::OctaveInterpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctaveInterpreter::eval",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctaveInterpreter::eval",3,"Octopus::OctopusValueList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctaveInterpreter_eval",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctaveInterpreter_eval",3,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  {
    try
    {
      result = (arg1)->eval((std::string const &)*arg2,(Octopus::OctopusValueList const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValueList * resultptr = new Octopus::OctopusValueList((const Octopus::OctopusValueList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveInterpreter_eval(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctaveInterpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctaveInterpreter_eval__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctaveInterpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_OctaveInterpreter_eval__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctaveInterpreter_eval'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctaveInterpreter::eval(std::string const &,Octopus::OctopusValueList const &,int)\n"
    "    Octopus::OctaveInterpreter::eval(std::string const &,Octopus::OctopusValueList const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OctaveInterpreter___call__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) 0 ;
  std::string *arg2 = 0 ;
  Octopus::OctopusValueList *arg3 = 0 ;
  int arg4 ;
  std::string temp2 ;
  Octopus::OctopusValueList result;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::operator ()",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctaveInterpreter::operator ()",1,"Octopus::OctaveInterpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctaveInterpreter::operator ()",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctaveInterpreter::operator ()",3,"Octopus::OctopusValueList const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Octopus::OctaveInterpreter::operator ()",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctaveInterpreter___call",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctaveInterpreter___call",3,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  {
    try
    {
      result = (arg1)->operator ()((std::string const &)*arg2,(Octopus::OctopusValueList const &)*arg3,arg4);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValueList * resultptr = new Octopus::OctopusValueList((const Octopus::OctopusValueList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveInterpreter___call__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) 0 ;
  std::string *arg2 = 0 ;
  Octopus::OctopusValueList *arg3 = 0 ;
  std::string temp2 ;
  Octopus::OctopusValueList result;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctaveInterpreter::operator ()",1,"Octopus::OctaveInterpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctaveInterpreter::operator ()",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctaveInterpreter::operator ()",3,"Octopus::OctopusValueList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctaveInterpreter___call",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctaveInterpreter___call",3,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  {
    try
    {
      result = (arg1)->operator ()((std::string const &)*arg2,(Octopus::OctopusValueList const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValueList * resultptr = new Octopus::OctopusValueList((const Octopus::OctopusValueList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveInterpreter___call(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctaveInterpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctaveInterpreter___call__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctaveInterpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_OctaveInterpreter___call__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctaveInterpreter___call'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctaveInterpreter::operator ()(std::string const &,Octopus::OctopusValueList const &,int)\n"
    "    Octopus::OctaveInterpreter::operator ()(std::string const &,Octopus::OctopusValueList const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OctaveInterpreter_createVar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) 0 ;
  std::string *arg2 = 0 ;
  Octopus::OctopusValue *arg3 = 0 ;
  bool arg4 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::createVar",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctaveInterpreter::createVar",1,"Octopus::OctaveInterpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctaveInterpreter::createVar",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctaveInterpreter::createVar",3,"Octopus::OctopusValue const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Octopus::OctaveInterpreter::createVar",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctaveInterpreter_createVar",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctaveInterpreter_createVar",3,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  {
    try
    {
      (arg1)->createVar((std::string const &)*arg2,(Octopus::OctopusValue const &)*arg3,arg4);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveInterpreter_createVar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) 0 ;
  std::string *arg2 = 0 ;
  Octopus::OctopusValue *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::createVar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctaveInterpreter::createVar",1,"Octopus::OctaveInterpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctaveInterpreter::createVar",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctaveInterpreter::createVar",3,"Octopus::OctopusValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctaveInterpreter_createVar",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctaveInterpreter_createVar",3,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      (arg1)->createVar((std::string const &)*arg2,(Octopus::OctopusValue const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveInterpreter_createVar(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctaveInterpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValue, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OctaveInterpreter_createVar__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctaveInterpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValue, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_OctaveInterpreter_createVar__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OctaveInterpreter_createVar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctaveInterpreter::createVar(std::string const &,Octopus::OctopusValue const &,bool)\n"
    "    Octopus::OctaveInterpreter::createVar(std::string const &,Octopus::OctopusValue const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OctaveInterpreter_getGlobalVar(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Octopus::OctopusValue result;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::getGlobalVar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctaveInterpreter::getGlobalVar",1,"Octopus::OctaveInterpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctaveInterpreter::getGlobalVar",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctaveInterpreter_getGlobalVar",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try
    {
      result = (arg1)->getGlobalVar((std::string const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValue * resultptr = new Octopus::OctopusValue((const Octopus::OctopusValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveInterpreter_setGlobalVar(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) 0 ;
  std::string *arg2 = 0 ;
  Octopus::OctopusValue *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::setGlobalVar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctaveInterpreter::setGlobalVar",1,"Octopus::OctaveInterpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctaveInterpreter::setGlobalVar",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctaveInterpreter::setGlobalVar",3,"Octopus::OctopusValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctaveInterpreter_setGlobalVar",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctaveInterpreter_setGlobalVar",3,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      (arg1)->setGlobalVar((std::string const &)*arg2,(Octopus::OctopusValue const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveInterpreter_getVarVal(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Octopus::OctopusValue result;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::getVarVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctaveInterpreter::getVarVal",1,"Octopus::OctaveInterpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctaveInterpreter::getVarVal",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctaveInterpreter_getVarVal",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  {
    try
    {
      result = (arg1)->getVarVal((std::string const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValue * resultptr = new Octopus::OctopusValue((const Octopus::OctopusValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctaveInterpreter_assign(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) 0 ;
  std::string *arg2 = 0 ;
  Octopus::OctopusValue *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Octopus::OctaveInterpreter::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctaveInterpreter::assign",1,"Octopus::OctaveInterpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctaveInterpreter::assign",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctaveInterpreter::assign",3,"Octopus::OctopusValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctaveInterpreter_assign",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Octopus__OctopusValue,0))){
    SWIG_fail_ptr("OctaveInterpreter_assign",3,SWIGTYPE_p_Octopus__OctopusValue);
  }
  
  {
    try
    {
      (arg1)->assign((std::string const &)*arg2,(Octopus::OctopusValue const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OctaveInterpreter(void *obj) {
Octopus::OctaveInterpreter *arg1 = (Octopus::OctaveInterpreter *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctaveInterpreter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctaveInterpreter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctaveInterpreter_attributes[] = {
    { "interpreter", _wrap_OctaveInterpreter_interpreter_get, _wrap_OctaveInterpreter_interpreter_set },
    {0,0,0}
};
static swig_lua_method swig_OctaveInterpreter_methods[]= {
    { "run_script", _wrap_OctaveInterpreter_run_script},
    { "eval_string", _wrap_OctaveInterpreter_eval_string},
    { "eval", _wrap_OctaveInterpreter_eval},
    { "__call", _wrap_OctaveInterpreter___call},
    { "createVar", _wrap_OctaveInterpreter_createVar},
    { "getGlobalVar", _wrap_OctaveInterpreter_getGlobalVar},
    { "setGlobalVar", _wrap_OctaveInterpreter_setGlobalVar},
    { "getVarVal", _wrap_OctaveInterpreter_getVarVal},
    { "assign", _wrap_OctaveInterpreter_assign},
    {0,0}
};
static swig_lua_method swig_OctaveInterpreter_meta[] = {
    { "__call", _wrap_OctaveInterpreter___call},
    {0,0}
};

static swig_lua_attribute swig_OctaveInterpreter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctaveInterpreter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctaveInterpreter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctaveInterpreter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctaveInterpreter_Sf_SwigStatic = {
    "OctaveInterpreter",
    swig_OctaveInterpreter_Sf_SwigStatic_methods,
    swig_OctaveInterpreter_Sf_SwigStatic_attributes,
    swig_OctaveInterpreter_Sf_SwigStatic_constants,
    swig_OctaveInterpreter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctaveInterpreter_bases[] = {0};
static const char *swig_OctaveInterpreter_base_names[] = {0};
static swig_lua_class _wrap_class_OctaveInterpreter = { "OctaveInterpreter", "OctaveInterpreter", &SWIGTYPE_p_Octopus__OctaveInterpreter,_proxy__wrap_new_OctaveInterpreter, swig_delete_OctaveInterpreter, swig_OctaveInterpreter_methods, swig_OctaveInterpreter_attributes, &swig_OctaveInterpreter_Sf_SwigStatic, swig_OctaveInterpreter_meta, swig_OctaveInterpreter_bases, swig_OctaveInterpreter_base_names };

static int _wrap_OctopusVar_interp_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusVar *arg1 = (Octopus::OctopusVar *) 0 ;
  Octopus::OctaveInterpreter *arg2 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusVar::interp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusVar::interp",1,"Octopus::OctopusVar *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusVar::interp",2,"Octopus::OctaveInterpreter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusVar,0))){
    SWIG_fail_ptr("OctopusVar_interp_set",1,SWIGTYPE_p_Octopus__OctopusVar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctopusVar_interp_set",2,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  if (arg1) (arg1)->interp = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusVar_interp_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusVar *arg1 = (Octopus::OctopusVar *) 0 ;
  Octopus::OctaveInterpreter *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusVar::interp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusVar::interp",1,"Octopus::OctopusVar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusVar,0))){
    SWIG_fail_ptr("OctopusVar_interp_get",1,SWIGTYPE_p_Octopus__OctopusVar);
  }
  
  result = (Octopus::OctaveInterpreter *) &(Octopus::OctaveInterpreter &) ((arg1)->interp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctaveInterpreter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusVar_var_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusVar *arg1 = (Octopus::OctopusVar *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Octopus::OctopusVar::var",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusVar::var",1,"Octopus::OctopusVar *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctopusVar::var",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusVar,0))){
    SWIG_fail_ptr("OctopusVar_var_set",1,SWIGTYPE_p_Octopus__OctopusVar);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->var = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusVar_var_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusVar *arg1 = (Octopus::OctopusVar *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusVar::var",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusVar::var",1,"Octopus::OctopusVar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusVar,0))){
    SWIG_fail_ptr("OctopusVar_var_get",1,SWIGTYPE_p_Octopus__OctopusVar);
  }
  
  result = (std::string *) & ((arg1)->var);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusVar__global_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusVar *arg1 = (Octopus::OctopusVar *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Octopus::OctopusVar::_global",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusVar::_global",1,"Octopus::OctopusVar *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Octopus::OctopusVar::_global",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusVar,0))){
    SWIG_fail_ptr("OctopusVar__global_set",1,SWIGTYPE_p_Octopus__OctopusVar);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->_global = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusVar__global_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusVar *arg1 = (Octopus::OctopusVar *) 0 ;
  bool result;
  
  SWIG_check_num_args("Octopus::OctopusVar::_global",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusVar::_global",1,"Octopus::OctopusVar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusVar,0))){
    SWIG_fail_ptr("OctopusVar__global_get",1,SWIGTYPE_p_Octopus__OctopusVar);
  }
  
  result = (bool) ((arg1)->_global);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusVar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Value *arg3 = 0 ;
  bool arg4 ;
  std::string temp2 ;
  Octopus::OctopusVar *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusVar::OctopusVar",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusVar::OctopusVar",1,"Octopus::OctaveInterpreter &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctopusVar::OctopusVar",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusVar::OctopusVar",3,"Value const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Octopus::OctopusVar::OctopusVar",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("new_OctopusVar",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("new_OctopusVar",3,SWIGTYPE_p_octave_value);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  {
    try
    {
      result = (Octopus::OctopusVar *)new Octopus::OctopusVar(*arg1,(std::string const &)*arg2,(Value const &)*arg3,arg4);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusVar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusVar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Value *arg3 = 0 ;
  std::string temp2 ;
  Octopus::OctopusVar *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusVar::OctopusVar",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusVar::OctopusVar",1,"Octopus::OctaveInterpreter &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctopusVar::OctopusVar",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Octopus::OctopusVar::OctopusVar",3,"Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("new_OctopusVar",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("new_OctopusVar",3,SWIGTYPE_p_octave_value);
  }
  
  {
    try
    {
      result = (Octopus::OctopusVar *)new Octopus::OctopusVar(*arg1,(std::string const &)*arg2,(Value const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusVar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusVar(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctaveInterpreter, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_OctopusVar__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__OctaveInterpreter, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_OctopusVar__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OctopusVar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::OctopusVar::OctopusVar(Octopus::OctaveInterpreter &,std::string const &,Value const &,bool)\n"
    "    Octopus::OctopusVar::OctopusVar(Octopus::OctaveInterpreter &,std::string const &,Value const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OctopusVar_getValue(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusVar *arg1 = (Octopus::OctopusVar *) 0 ;
  Value result;
  
  SWIG_check_num_args("Octopus::OctopusVar::getValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusVar::getValue",1,"Octopus::OctopusVar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusVar,0))){
    SWIG_fail_ptr("OctopusVar_getValue",1,SWIGTYPE_p_Octopus__OctopusVar);
  }
  
  {
    try
    {
      result = (arg1)->getValue();
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Value * resultptr = new Value((const Value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusVar_setValue(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusVar *arg1 = (Octopus::OctopusVar *) 0 ;
  Value *arg2 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusVar::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusVar::setValue",1,"Octopus::OctopusVar *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusVar::setValue",2,"Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusVar,0))){
    SWIG_fail_ptr("OctopusVar_setValue",1,SWIGTYPE_p_Octopus__OctopusVar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("OctopusVar_setValue",2,SWIGTYPE_p_octave_value);
  }
  
  {
    try
    {
      (arg1)->setValue((Value const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OctopusVar(void *obj) {
Octopus::OctopusVar *arg1 = (Octopus::OctopusVar *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctopusVar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctopusVar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctopusVar_attributes[] = {
    { "interp", _wrap_OctopusVar_interp_get, _wrap_OctopusVar_interp_set },
    { "var", _wrap_OctopusVar_var_get, _wrap_OctopusVar_var_set },
    { "_global", _wrap_OctopusVar__global_get, _wrap_OctopusVar__global_set },
    {0,0,0}
};
static swig_lua_method swig_OctopusVar_methods[]= {
    { "getValue", _wrap_OctopusVar_getValue},
    { "setValue", _wrap_OctopusVar_setValue},
    {0,0}
};
static swig_lua_method swig_OctopusVar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OctopusVar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctopusVar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctopusVar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctopusVar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctopusVar_Sf_SwigStatic = {
    "OctopusVar",
    swig_OctopusVar_Sf_SwigStatic_methods,
    swig_OctopusVar_Sf_SwigStatic_attributes,
    swig_OctopusVar_Sf_SwigStatic_constants,
    swig_OctopusVar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctopusVar_bases[] = {0};
static const char *swig_OctopusVar_base_names[] = {0};
static swig_lua_class _wrap_class_OctopusVar = { "OctopusVar", "OctopusVar", &SWIGTYPE_p_Octopus__OctopusVar,_proxy__wrap_new_OctopusVar, swig_delete_OctopusVar, swig_OctopusVar_methods, swig_OctopusVar_attributes, &swig_OctopusVar_Sf_SwigStatic, swig_OctopusVar_meta, swig_OctopusVar_bases, swig_OctopusVar_base_names };

static int _wrap_OctopusFunction_code_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusFunction *arg1 = (Octopus::OctopusFunction *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Octopus::OctopusFunction::code",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusFunction::code",1,"Octopus::OctopusFunction *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctopusFunction::code",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusFunction,0))){
    SWIG_fail_ptr("OctopusFunction_code_set",1,SWIGTYPE_p_Octopus__OctopusFunction);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->code = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusFunction_code_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusFunction *arg1 = (Octopus::OctopusFunction *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusFunction::code",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusFunction::code",1,"Octopus::OctopusFunction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusFunction,0))){
    SWIG_fail_ptr("OctopusFunction_code_get",1,SWIGTYPE_p_Octopus__OctopusFunction);
  }
  
  result = (std::string *) & ((arg1)->code);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusFunction_name_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusFunction *arg1 = (Octopus::OctopusFunction *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Octopus::OctopusFunction::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusFunction::name",1,"Octopus::OctopusFunction *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctopusFunction::name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusFunction,0))){
    SWIG_fail_ptr("OctopusFunction_name_set",1,SWIGTYPE_p_Octopus__OctopusFunction);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusFunction_name_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusFunction *arg1 = (Octopus::OctopusFunction *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusFunction::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusFunction::name",1,"Octopus::OctopusFunction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusFunction,0))){
    SWIG_fail_ptr("OctopusFunction_name_get",1,SWIGTYPE_p_Octopus__OctopusFunction);
  }
  
  result = (std::string *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusFunction_interp_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusFunction *arg1 = (Octopus::OctopusFunction *) 0 ;
  Octopus::OctaveInterpreter *arg2 = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusFunction::interp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusFunction::interp",1,"Octopus::OctopusFunction *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusFunction::interp",2,"Octopus::OctaveInterpreter &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusFunction,0))){
    SWIG_fail_ptr("OctopusFunction_interp_set",1,SWIGTYPE_p_Octopus__OctopusFunction);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("OctopusFunction_interp_set",2,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  if (arg1) (arg1)->interp = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusFunction_interp_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusFunction *arg1 = (Octopus::OctopusFunction *) 0 ;
  Octopus::OctaveInterpreter *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusFunction::interp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusFunction::interp",1,"Octopus::OctopusFunction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusFunction,0))){
    SWIG_fail_ptr("OctopusFunction_interp_get",1,SWIGTYPE_p_Octopus__OctopusFunction);
  }
  
  result = (Octopus::OctaveInterpreter *) &(Octopus::OctaveInterpreter &) ((arg1)->interp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctaveInterpreter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OctopusFunction(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctaveInterpreter *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  Octopus::OctopusFunction *result = 0 ;
  
  SWIG_check_num_args("Octopus::OctopusFunction::OctopusFunction",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Octopus::OctopusFunction::OctopusFunction",1,"Octopus::OctaveInterpreter &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::OctopusFunction::OctopusFunction",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Octopus::OctopusFunction::OctopusFunction",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctaveInterpreter,0))){
    SWIG_fail_ptr("new_OctopusFunction",1,SWIGTYPE_p_Octopus__OctaveInterpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  {
    try
    {
      result = (Octopus::OctopusFunction *)new Octopus::OctopusFunction(*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusFunction,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OctopusFunction___call(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::OctopusFunction *arg1 = (Octopus::OctopusFunction *) 0 ;
  Octopus::OctopusValueList *arg2 = 0 ;
  int arg3 ;
  Octopus::OctopusValueList result;
  
  SWIG_check_num_args("Octopus::OctopusFunction::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::OctopusFunction::operator ()",1,"Octopus::OctopusFunction *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::OctopusFunction::operator ()",2,"Octopus::OctopusValueList &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::OctopusFunction::operator ()",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__OctopusFunction,0))){
    SWIG_fail_ptr("OctopusFunction___call",1,SWIGTYPE_p_Octopus__OctopusFunction);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("OctopusFunction___call",2,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  {
    try
    {
      result = (arg1)->operator ()(*arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValueList * resultptr = new Octopus::OctopusValueList((const Octopus::OctopusValueList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OctopusFunction(void *obj) {
Octopus::OctopusFunction *arg1 = (Octopus::OctopusFunction *) obj;
delete arg1;
}
static int _proxy__wrap_new_OctopusFunction(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OctopusFunction);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OctopusFunction_attributes[] = {
    { "code", _wrap_OctopusFunction_code_get, _wrap_OctopusFunction_code_set },
    { "name", _wrap_OctopusFunction_name_get, _wrap_OctopusFunction_name_set },
    { "interp", _wrap_OctopusFunction_interp_get, _wrap_OctopusFunction_interp_set },
    {0,0,0}
};
static swig_lua_method swig_OctopusFunction_methods[]= {
    { "__call", _wrap_OctopusFunction___call},
    {0,0}
};
static swig_lua_method swig_OctopusFunction_meta[] = {
    { "__call", _wrap_OctopusFunction___call},
    {0,0}
};

static swig_lua_attribute swig_OctopusFunction_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OctopusFunction_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OctopusFunction_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OctopusFunction_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OctopusFunction_Sf_SwigStatic = {
    "OctopusFunction",
    swig_OctopusFunction_Sf_SwigStatic_methods,
    swig_OctopusFunction_Sf_SwigStatic_attributes,
    swig_OctopusFunction_Sf_SwigStatic_constants,
    swig_OctopusFunction_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OctopusFunction_bases[] = {0};
static const char *swig_OctopusFunction_base_names[] = {0};
static swig_lua_class _wrap_class_OctopusFunction = { "OctopusFunction", "OctopusFunction", &SWIGTYPE_p_Octopus__OctopusFunction,_proxy__wrap_new_OctopusFunction, swig_delete_OctopusFunction, swig_OctopusFunction_methods, swig_OctopusFunction_attributes, &swig_OctopusFunction_Sf_SwigStatic, swig_OctopusFunction_meta, swig_OctopusFunction_bases, swig_OctopusFunction_base_names };

static int _wrap_Function_name_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Octopus::Function::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::name",1,"Octopus::Function *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Octopus::Function::name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function_name_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function_name_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Octopus::Function::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::name",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function_name_get",1,SWIGTYPE_p_Octopus__Function);
  }
  
  result = (std::string *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Function(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::Function::Function",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Octopus::Function::Function",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  {
    try
    {
      result = (Octopus::Function *)new Octopus::Function((std::string const &)*arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function___call__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusValueList *arg2 = 0 ;
  int arg3 ;
  Octopus::OctopusValueList result;
  
  SWIG_check_num_args("Octopus::Function::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::operator ()",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::operator ()",2,"Octopus::OctopusValueList const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::Function::operator ()",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function___call",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("Function___call",2,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  {
    try
    {
      result = (arg1)->operator ()((Octopus::OctopusValueList const &)*arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValueList * resultptr = new Octopus::OctopusValueList((const Octopus::OctopusValueList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function___call__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusValueList *arg2 = 0 ;
  Octopus::OctopusValueList result;
  
  SWIG_check_num_args("Octopus::Function::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::operator ()",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::operator ()",2,"Octopus::OctopusValueList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function___call",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("Function___call",2,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  {
    try
    {
      result = (arg1)->operator ()((Octopus::OctopusValueList const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValueList * resultptr = new Octopus::OctopusValueList((const Octopus::OctopusValueList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function___call__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusMatrixXf *arg2 = 0 ;
  Octopus::OctopusMatrixXf result;
  
  SWIG_check_num_args("Octopus::Function::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::operator ()",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::operator ()",2,"Octopus::OctopusMatrixXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function___call",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXf,0))){
    SWIG_fail_ptr("Function___call",2,SWIGTYPE_p_Octopus__OctopusMatrixXf);
  }
  
  {
    try
    {
      result = (arg1)->operator ()((Octopus::OctopusMatrixXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXf * resultptr = new Octopus::OctopusMatrixXf((const Octopus::OctopusMatrixXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function___call__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusMatrixXd *arg2 = 0 ;
  Octopus::OctopusMatrixXd result;
  
  SWIG_check_num_args("Octopus::Function::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::operator ()",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::operator ()",2,"Octopus::OctopusMatrixXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function___call",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXd,0))){
    SWIG_fail_ptr("Function___call",2,SWIGTYPE_p_Octopus__OctopusMatrixXd);
  }
  
  {
    try
    {
      result = (arg1)->operator ()((Octopus::OctopusMatrixXd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXd * resultptr = new Octopus::OctopusMatrixXd((const Octopus::OctopusMatrixXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function___call__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusMatrixXcf *arg2 = 0 ;
  Octopus::OctopusMatrixXcf result;
  
  SWIG_check_num_args("Octopus::Function::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::operator ()",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::operator ()",2,"Octopus::OctopusMatrixXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function___call",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXcf,0))){
    SWIG_fail_ptr("Function___call",2,SWIGTYPE_p_Octopus__OctopusMatrixXcf);
  }
  
  {
    try
    {
      result = (arg1)->operator ()((Octopus::OctopusMatrixXcf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcf * resultptr = new Octopus::OctopusMatrixXcf((const Octopus::OctopusMatrixXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function___call__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusMatrixXcd *arg2 = 0 ;
  int arg3 ;
  Octopus::OctopusMatrixXcd result;
  
  SWIG_check_num_args("Octopus::Function::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::operator ()",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::operator ()",2,"Octopus::OctopusMatrixXcd const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::Function::operator ()",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function___call",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("Function___call",2,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  {
    try
    {
      result = (arg1)->operator ()((Octopus::OctopusMatrixXcd const &)*arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcd * resultptr = new Octopus::OctopusMatrixXcd((const Octopus::OctopusMatrixXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function___call__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusMatrixXcd *arg2 = 0 ;
  Octopus::OctopusMatrixXcd result;
  
  SWIG_check_num_args("Octopus::Function::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::operator ()",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::operator ()",2,"Octopus::OctopusMatrixXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function___call",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusMatrixXcd,0))){
    SWIG_fail_ptr("Function___call",2,SWIGTYPE_p_Octopus__OctopusMatrixXcd);
  }
  
  {
    try
    {
      result = (arg1)->operator ()((Octopus::OctopusMatrixXcd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusMatrixXcd * resultptr = new Octopus::OctopusMatrixXcd((const Octopus::OctopusMatrixXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusMatrixXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function___call__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusRowVectorXf *arg2 = 0 ;
  Octopus::OctopusRowVectorXf result;
  
  SWIG_check_num_args("Octopus::Function::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::operator ()",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::operator ()",2,"Octopus::OctopusRowVectorXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function___call",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXf,0))){
    SWIG_fail_ptr("Function___call",2,SWIGTYPE_p_Octopus__OctopusRowVectorXf);
  }
  
  {
    try
    {
      result = (arg1)->operator ()((Octopus::OctopusRowVectorXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXf * resultptr = new Octopus::OctopusRowVectorXf((const Octopus::OctopusRowVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function___call__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusRowVectorXd *arg2 = 0 ;
  Octopus::OctopusRowVectorXd result;
  
  SWIG_check_num_args("Octopus::Function::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::operator ()",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::operator ()",2,"Octopus::OctopusRowVectorXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function___call",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXd,0))){
    SWIG_fail_ptr("Function___call",2,SWIGTYPE_p_Octopus__OctopusRowVectorXd);
  }
  
  {
    try
    {
      result = (arg1)->operator ()((Octopus::OctopusRowVectorXd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXd * resultptr = new Octopus::OctopusRowVectorXd((const Octopus::OctopusRowVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function___call__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusRowVectorXcf *arg2 = 0 ;
  Octopus::OctopusRowVectorXcf result;
  
  SWIG_check_num_args("Octopus::Function::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::operator ()",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::operator ()",2,"Octopus::OctopusRowVectorXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function___call",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,0))){
    SWIG_fail_ptr("Function___call",2,SWIGTYPE_p_Octopus__OctopusRowVectorXcf);
  }
  
  {
    try
    {
      result = (arg1)->operator ()((Octopus::OctopusRowVectorXcf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcf * resultptr = new Octopus::OctopusRowVectorXcf((const Octopus::OctopusRowVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function___call__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusRowVectorXcd *arg2 = 0 ;
  Octopus::OctopusRowVectorXcd result;
  
  SWIG_check_num_args("Octopus::Function::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::operator ()",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::operator ()",2,"Octopus::OctopusRowVectorXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function___call",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,0))){
    SWIG_fail_ptr("Function___call",2,SWIGTYPE_p_Octopus__OctopusRowVectorXcd);
  }
  
  {
    try
    {
      result = (arg1)->operator ()((Octopus::OctopusRowVectorXcd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusRowVectorXcd * resultptr = new Octopus::OctopusRowVectorXcd((const Octopus::OctopusRowVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusRowVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function___call__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusColVectorXf *arg2 = 0 ;
  Octopus::OctopusColVectorXf result;
  
  SWIG_check_num_args("Octopus::Function::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::operator ()",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::operator ()",2,"Octopus::OctopusColVectorXf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function___call",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXf,0))){
    SWIG_fail_ptr("Function___call",2,SWIGTYPE_p_Octopus__OctopusColVectorXf);
  }
  
  {
    try
    {
      result = (arg1)->operator ()((Octopus::OctopusColVectorXf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXf * resultptr = new Octopus::OctopusColVectorXf((const Octopus::OctopusColVectorXf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function___call__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusColVectorXd *arg2 = 0 ;
  Octopus::OctopusColVectorXd result;
  
  SWIG_check_num_args("Octopus::Function::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::operator ()",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::operator ()",2,"Octopus::OctopusColVectorXd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function___call",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXd,0))){
    SWIG_fail_ptr("Function___call",2,SWIGTYPE_p_Octopus__OctopusColVectorXd);
  }
  
  {
    try
    {
      result = (arg1)->operator ()((Octopus::OctopusColVectorXd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXd * resultptr = new Octopus::OctopusColVectorXd((const Octopus::OctopusColVectorXd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function___call__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusColVectorXcf *arg2 = 0 ;
  Octopus::OctopusColVectorXcf result;
  
  SWIG_check_num_args("Octopus::Function::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::operator ()",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::operator ()",2,"Octopus::OctopusColVectorXcf const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function___call",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXcf,0))){
    SWIG_fail_ptr("Function___call",2,SWIGTYPE_p_Octopus__OctopusColVectorXcf);
  }
  
  {
    try
    {
      result = (arg1)->operator ()((Octopus::OctopusColVectorXcf const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcf * resultptr = new Octopus::OctopusColVectorXcf((const Octopus::OctopusColVectorXcf &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcf,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function___call__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusColVectorXcd *arg2 = 0 ;
  Octopus::OctopusColVectorXcd result;
  
  SWIG_check_num_args("Octopus::Function::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::operator ()",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::operator ()",2,"Octopus::OctopusColVectorXcd const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function___call",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusColVectorXcd,0))){
    SWIG_fail_ptr("Function___call",2,SWIGTYPE_p_Octopus__OctopusColVectorXcd);
  }
  
  {
    try
    {
      result = (arg1)->operator ()((Octopus::OctopusColVectorXcd const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusColVectorXcd * resultptr = new Octopus::OctopusColVectorXcd((const Octopus::OctopusColVectorXcd &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusColVectorXcd,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function___call(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Function___call__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Function___call__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Function___call__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Function___call__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Function___call__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Function___call__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Function___call__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Function___call__SWIG_9(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusRowVectorXcd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Function___call__SWIG_10(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Function___call__SWIG_11(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Function___call__SWIG_12(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcf, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Function___call__SWIG_13(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusColVectorXcd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Function___call__SWIG_14(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusMatrixXcd, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Function___call__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Function___call__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Function___call'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::Function::operator ()(Octopus::OctopusValueList const &,int)\n"
    "    Octopus::Function::operator ()(Octopus::OctopusValueList const &)\n"
    "    Octopus::Function::operator ()(Octopus::OctopusMatrixXf const &)\n"
    "    Octopus::Function::operator ()(Octopus::OctopusMatrixXd const &)\n"
    "    Octopus::Function::operator ()(Octopus::OctopusMatrixXcf const &)\n"
    "    Octopus::Function::operator ()(Octopus::OctopusMatrixXcd const &,int)\n"
    "    Octopus::Function::operator ()(Octopus::OctopusMatrixXcd const &)\n"
    "    Octopus::Function::operator ()(Octopus::OctopusRowVectorXf const &)\n"
    "    Octopus::Function::operator ()(Octopus::OctopusRowVectorXd const &)\n"
    "    Octopus::Function::operator ()(Octopus::OctopusRowVectorXcf const &)\n"
    "    Octopus::Function::operator ()(Octopus::OctopusRowVectorXcd const &)\n"
    "    Octopus::Function::operator ()(Octopus::OctopusColVectorXf const &)\n"
    "    Octopus::Function::operator ()(Octopus::OctopusColVectorXd const &)\n"
    "    Octopus::Function::operator ()(Octopus::OctopusColVectorXcf const &)\n"
    "    Octopus::Function::operator ()(Octopus::OctopusColVectorXcd const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Function_eval__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusValueList *arg2 = 0 ;
  int arg3 ;
  Octopus::OctopusValueList result;
  
  SWIG_check_num_args("Octopus::Function::eval",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::eval",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::eval",2,"Octopus::OctopusValueList const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::Function::eval",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function_eval",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("Function_eval",2,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  {
    try
    {
      result = (arg1)->eval((Octopus::OctopusValueList const &)*arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValueList * resultptr = new Octopus::OctopusValueList((const Octopus::OctopusValueList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function_eval__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  Octopus::OctopusValueList *arg2 = 0 ;
  Octopus::OctopusValueList result;
  
  SWIG_check_num_args("Octopus::Function::eval",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::Function::eval",1,"Octopus::Function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::Function::eval",2,"Octopus::OctopusValueList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("Function_eval",1,SWIGTYPE_p_Octopus__Function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("Function_eval",2,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  {
    try
    {
      result = (arg1)->eval((Octopus::OctopusValueList const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValueList * resultptr = new Octopus::OctopusValueList((const Octopus::OctopusValueList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function_eval(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Function_eval__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Octopus__Function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Function_eval__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Function_eval'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::Function::eval(Octopus::OctopusValueList const &,int)\n"
    "    Octopus::Function::eval(Octopus::OctopusValueList const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Function(void *obj) {
Octopus::Function *arg1 = (Octopus::Function *) obj;
delete arg1;
}
static int _proxy__wrap_new_Function(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Function);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Function_attributes[] = {
    { "name", _wrap_Function_name_get, _wrap_Function_name_set },
    {0,0,0}
};
static swig_lua_method swig_Function_methods[]= {
    { "__call", _wrap_Function___call},
    { "eval", _wrap_Function_eval},
    {0,0}
};
static swig_lua_method swig_Function_meta[] = {
    { "__call", _wrap_Function___call},
    {0,0}
};

static swig_lua_attribute swig_Function_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Function_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Function_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Function_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Function_Sf_SwigStatic = {
    "Function",
    swig_Function_Sf_SwigStatic_methods,
    swig_Function_Sf_SwigStatic_attributes,
    swig_Function_Sf_SwigStatic_constants,
    swig_Function_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Function_bases[] = {0};
static const char *swig_Function_base_names[] = {0};
static swig_lua_class _wrap_class_Function = { "Function", "Function", &SWIGTYPE_p_Octopus__Function,_proxy__wrap_new_Function, swig_delete_Function, swig_Function_methods, swig_Function_attributes, &swig_Function_Sf_SwigStatic, swig_Function_meta, swig_Function_bases, swig_Function_base_names };

static int _wrap_octave_fft_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fft",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fft_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fft = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fft_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fft",0,0)
  result = (Octopus::Function *)&Octopus::octave_fft;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifft_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ifft",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ifft_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ifft = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifft_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifft",0,0)
  result = (Octopus::Function *)&Octopus::octave_ifft;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fft2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fft2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fft2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fft2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fft2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fft2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fft2",0,0)
  result = (Octopus::Function *)&Octopus::octave_fft2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifft2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifft2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ifft2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ifft2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ifft2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifft2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifft2",0,0)
  result = (Octopus::Function *)&Octopus::octave_ifft2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fftconv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fftconv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fftconv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fftconv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fftconv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fftconv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fftconv",0,0)
  result = (Octopus::Function *)&Octopus::octave_fftconv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fftfilt_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fftfilt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fftfilt",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fftfilt_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fftfilt = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fftfilt_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fftfilt",0,0)
  result = (Octopus::Function *)&Octopus::octave_fftfilt;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fftn_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fftn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fftn",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fftn_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fftn = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fftn_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fftn",0,0)
  result = (Octopus::Function *)&Octopus::octave_fftn;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fftshift_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fftshift",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fftshift",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fftshift_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fftshift = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fftshift_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fftshift",0,0)
  result = (Octopus::Function *)&Octopus::octave_fftshift;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fftw_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fftw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fftw",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fftw_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fftw = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fftw_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fftw",0,0)
  result = (Octopus::Function *)&Octopus::octave_fftw;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifftn_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifftn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ifftn",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ifftn_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ifftn = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifftn_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifftn",0,0)
  result = (Octopus::Function *)&Octopus::octave_ifftn;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifftshift_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifftshift",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ifftshift",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ifftshift_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ifftshift = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifftshift_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifftshift",0,0)
  result = (Octopus::Function *)&Octopus::octave_ifftshift;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifht_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifht",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ifht",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ifht_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ifht = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifht_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifht",0,0)
  result = (Octopus::Function *)&Octopus::octave_ifht;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifourier_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ifourier",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ifourier_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ifourier = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifourier_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifourier",0,0)
  result = (Octopus::Function *)&Octopus::octave_ifourier;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifwht_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifwht",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ifwht",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ifwht_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ifwht = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifwht_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifwht",0,0)
  result = (Octopus::Function *)&Octopus::octave_ifwht;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifwt_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifwt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ifwt",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ifwt_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ifwt = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifwt_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifwt",0,0)
  result = (Octopus::Function *)&Octopus::octave_ifwt;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifwt2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifwt2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ifwt2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ifwt2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ifwt2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ifwt2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ifwt2",0,0)
  result = (Octopus::Function *)&Octopus::octave_ifwt2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_buffer_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_buffer",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_buffer_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_buffer = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_buffer_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_buffer",0,0)
  result = (Octopus::Function *)&Octopus::octave_buffer;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chirp_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_chirp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_chirp",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_chirp_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_chirp = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chirp_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_chirp",0,0)
  result = (Octopus::Function *)&Octopus::octave_chirp;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cmorwavf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cmorwavf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cmorwavf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cmorwavf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cmorwavf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cmorwavf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cmorwavf",0,0)
  result = (Octopus::Function *)&Octopus::octave_cmorwavf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gauspuls_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gauspuls",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gauspuls",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gauspuls_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gauspuls = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gauspuls_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gauspuls",0,0)
  result = (Octopus::Function *)&Octopus::octave_gauspuls;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gmonopuls_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gmonopuls",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gmonopuls",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gmonopuls_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gmonopuls = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gmonopuls_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gmonopuls",0,0)
  result = (Octopus::Function *)&Octopus::octave_gmonopuls;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mexihat_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_mexihat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_mexihat",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_mexihat_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_mexihat = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mexihat_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_mexihat",0,0)
  result = (Octopus::Function *)&Octopus::octave_mexihat;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_meyeraux_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_meyeraux",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_meyeraux",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_meyeraux_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_meyeraux = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_meyeraux_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_meyeraux",0,0)
  result = (Octopus::Function *)&Octopus::octave_meyeraux;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_morlet_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_morlet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_morlet",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_morlet_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_morlet = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_morlet_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_morlet",0,0)
  result = (Octopus::Function *)&Octopus::octave_morlet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pulstran_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_pulstran",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_pulstran",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_pulstran_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_pulstran = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pulstran_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_pulstran",0,0)
  result = (Octopus::Function *)&Octopus::octave_pulstran;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_rectpuls_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_rectpuls",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_rectpuls",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_rectpuls_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_rectpuls = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_rectpuls_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_rectpuls",0,0)
  result = (Octopus::Function *)&Octopus::octave_rectpuls;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sawtooth_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sawtooth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sawtooth",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sawtooth_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sawtooth = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sawtooth_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sawtooth",0,0)
  result = (Octopus::Function *)&Octopus::octave_sawtooth;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_shanwavf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_shanwavf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_shanwavf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_shanwavf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_shanwavf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_shanwavf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_shanwavf",0,0)
  result = (Octopus::Function *)&Octopus::octave_shanwavf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_shiftdata_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_shiftdata",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_shiftdata",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_shiftdata_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_shiftdata = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_shiftdata_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_shiftdata",0,0)
  result = (Octopus::Function *)&Octopus::octave_shiftdata;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sigmoid_train_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sigmoid_train",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sigmoid_train",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sigmoid_train_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sigmoid_train = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sigmoid_train_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sigmoid_train",0,0)
  result = (Octopus::Function *)&Octopus::octave_sigmoid_train;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_specgram_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_specgram",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_specgram",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_specgram_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_specgram = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_specgram_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_specgram",0,0)
  result = (Octopus::Function *)&Octopus::octave_specgram;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_square_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_square",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_square",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_square_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_square = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_square_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_square",0,0)
  result = (Octopus::Function *)&Octopus::octave_square;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tripuls_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_tripuls",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_tripuls",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_tripuls_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_tripuls = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tripuls_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_tripuls",0,0)
  result = (Octopus::Function *)&Octopus::octave_tripuls;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_udecode_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_udecode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_udecode",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_udecode_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_udecode = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_udecode_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_udecode",0,0)
  result = (Octopus::Function *)&Octopus::octave_udecode;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_uencoder_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_uencoder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_uencoder",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_uencoder_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_uencoder = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_uencoder_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_uencoder",0,0)
  result = (Octopus::Function *)&Octopus::octave_uencoder;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_unshiftdata_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_unshiftdata",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_unshiftdata",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_unshiftdata_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_unshiftdata = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_unshiftdata_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_unshiftdata",0,0)
  result = (Octopus::Function *)&Octopus::octave_unshiftdata;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_findpeaks_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_findpeaks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_findpeaks",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_findpeaks_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_findpeaks = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_findpeaks_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_findpeaks",0,0)
  result = (Octopus::Function *)&Octopus::octave_findpeaks;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_peak2peak_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_peak2peak",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_peak2peak",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_peak2peak_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_peak2peak = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_peak2peak_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_peak2peak",0,0)
  result = (Octopus::Function *)&Octopus::octave_peak2peak;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_peak2rms_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_peak2rms",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_peak2rms",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_peak2rms_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_peak2rms = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_peak2rms_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_peak2rms",0,0)
  result = (Octopus::Function *)&Octopus::octave_peak2rms;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_rms_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_rms",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_rms",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_rms_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_rms = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_rms_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_rms",0,0)
  result = (Octopus::Function *)&Octopus::octave_rms;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_rssq_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_rssq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_rssq",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_rssq_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_rssq = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_rssq_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_rssq",0,0)
  result = (Octopus::Function *)&Octopus::octave_rssq;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cconv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cconv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cconv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cconv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cconv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cconv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cconv",0,0)
  result = (Octopus::Function *)&Octopus::octave_cconv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_convmtx_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_convmtx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_convmtx",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_convmtx_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_convmtx = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_convmtx_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_convmtx",0,0)
  result = (Octopus::Function *)&Octopus::octave_convmtx;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_wconv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_wconv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_wconv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_wconv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_wconv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_wconv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_wconv",0,0)
  result = (Octopus::Function *)&Octopus::octave_wconv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_xcorr_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_xcorr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_xcorr",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_xcorr_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_xcorr = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_xcorr_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_xcorr",0,0)
  result = (Octopus::Function *)&Octopus::octave_xcorr;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_xcorr2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_xcorr2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_xcorr2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_xcorr2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_xcorr2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_xcorr2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_xcorr2",0,0)
  result = (Octopus::Function *)&Octopus::octave_xcorr2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_xcov_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_xcov",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_xcov",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_xcov_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_xcov = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_xcov_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_xcov",0,0)
  result = (Octopus::Function *)&Octopus::octave_xcov;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_filtfilt_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_filtfilt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_filtfilt",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_filtfilt_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_filtfilt = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_filtfilt_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_filtfilt",0,0)
  result = (Octopus::Function *)&Octopus::octave_filtfilt;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fltic_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fltic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fltic",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fltic_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fltic = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fltic_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fltic",0,0)
  result = (Octopus::Function *)&Octopus::octave_fltic;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_medfilt1_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_medfilt1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_medfilt1",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_medfilt1_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_medfilt1 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_medfilt1_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_medfilt1",0,0)
  result = (Octopus::Function *)&Octopus::octave_medfilt1;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_movingrms_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_movingrms",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_movingrms",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_movingrms_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_movingrms = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_movingrms_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_movingrms",0,0)
  result = (Octopus::Function *)&Octopus::octave_movingrms;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sgolayfilt_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sgolayfilt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sgolayfilt",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sgolayfilt_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sgolayfilt = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sgolayfilt_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sgolayfilt",0,0)
  result = (Octopus::Function *)&Octopus::octave_sgolayfilt;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sosfilt_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sosfilt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sosfilt",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sosfilt_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sosfilt = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sosfilt_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sosfilt",0,0)
  result = (Octopus::Function *)&Octopus::octave_sosfilt;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freqs_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_freqs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_freqs",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_freqs_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_freqs = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freqs_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_freqs",0,0)
  result = (Octopus::Function *)&Octopus::octave_freqs;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freqs_plot_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_freqs_plot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_freqs_plot",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_freqs_plot_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_freqs_plot = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freqs_plot_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_freqs_plot",0,0)
  result = (Octopus::Function *)&Octopus::octave_freqs_plot;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freqz_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_freqz",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_freqz",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_freqz_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_freqz = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freqz_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_freqz",0,0)
  result = (Octopus::Function *)&Octopus::octave_freqz;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freqz_plot_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_freqz_plot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_freqz_plot",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_freqz_plot_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_freqz_plot = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freqz_plot_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_freqz_plot",0,0)
  result = (Octopus::Function *)&Octopus::octave_freqz_plot;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_impz_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_impz",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_impz",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_impz_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_impz = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_impz_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_impz",0,0)
  result = (Octopus::Function *)&Octopus::octave_impz;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_zplane_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_zplane",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_zplane",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_zplane_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_zplane = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_zplane_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_zplane",0,0)
  result = (Octopus::Function *)&Octopus::octave_zplane;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_filter",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_filter_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_filter = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_filter",0,0)
  result = (Octopus::Function *)&Octopus::octave_filter;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_filter2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_filter2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_filter2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_filter2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_filter2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_filter2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_filter2",0,0)
  result = (Octopus::Function *)&Octopus::octave_filter2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fir1_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fir1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fir1",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fir1_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fir1 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fir1_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fir1",0,0)
  result = (Octopus::Function *)&Octopus::octave_fir1;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fir2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fir2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fir2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fir2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fir2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fir2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fir2",0,0)
  result = (Octopus::Function *)&Octopus::octave_fir2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_firls_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_firls",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_firls",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_firls_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_firls = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_firls_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_firls",0,0)
  result = (Octopus::Function *)&Octopus::octave_firls;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sinc_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sinc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sinc",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sinc_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sinc = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sinc_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sinc",0,0)
  result = (Octopus::Function *)&Octopus::octave_sinc;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_unwrap_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_unwrap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_unwrap",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_unwrap_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_unwrap = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_unwrap_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_unwrap",0,0)
  result = (Octopus::Function *)&Octopus::octave_unwrap;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bartlett_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bartlett",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bartlett",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bartlett_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bartlett = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bartlett_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bartlett",0,0)
  result = (Octopus::Function *)&Octopus::octave_bartlett;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_blackman_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_blackman",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_blackman",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_blackman_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_blackman = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_blackman_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_blackman",0,0)
  result = (Octopus::Function *)&Octopus::octave_blackman;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_blackmanharris_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_blackmanharris",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_blackmanharris",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_blackmanharris_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_blackmanharris = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_blackmanharris_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_blackmanharris",0,0)
  result = (Octopus::Function *)&Octopus::octave_blackmanharris;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_blackmannuttal_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_blackmannuttal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_blackmannuttal",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_blackmannuttal_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_blackmannuttal = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_blackmannuttal_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_blackmannuttal",0,0)
  result = (Octopus::Function *)&Octopus::octave_blackmannuttal;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dftmtx_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dftmtx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dftmtx",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dftmtx_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dftmtx = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dftmtx_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dftmtx",0,0)
  result = (Octopus::Function *)&Octopus::octave_dftmtx;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hamming_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hamming",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hamming",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hamming_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hamming = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hamming_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hamming",0,0)
  result = (Octopus::Function *)&Octopus::octave_hamming;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hann_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hann",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hann",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hann_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hann = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hann_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hann",0,0)
  result = (Octopus::Function *)&Octopus::octave_hann;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hanning_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hanning",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hanning",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hanning_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hanning = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hanning_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hanning",0,0)
  result = (Octopus::Function *)&Octopus::octave_hanning;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pchip_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_pchip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_pchip",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_pchip_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_pchip = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pchip_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_pchip",0,0)
  result = (Octopus::Function *)&Octopus::octave_pchip;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_periodogram_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_periodogram",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_periodogram",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_periodogram_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_periodogram = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_periodogram_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_periodogram",0,0)
  result = (Octopus::Function *)&Octopus::octave_periodogram;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sinetone_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sinetone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sinetone",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sinetone_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sinetone = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sinetone_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sinetone",0,0)
  result = (Octopus::Function *)&Octopus::octave_sinetone;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sinewave_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sinewave",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sinewave",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sinewave_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sinewave = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sinewave_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sinewave",0,0)
  result = (Octopus::Function *)&Octopus::octave_sinewave;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_spectral_adf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_spectral_adf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_spectral_adf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_spectral_adf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_spectral_adf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_spectral_adf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_spectral_adf",0,0)
  result = (Octopus::Function *)&Octopus::octave_spectral_adf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_spectral_xdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_spectral_xdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_spectral_xdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_spectral_xdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_spectral_xdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_spectral_xdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_spectral_xdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_spectral_xdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_spencer_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_spencer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_spencer",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_spencer_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_spencer = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_spencer_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_spencer",0,0)
  result = (Octopus::Function *)&Octopus::octave_spencer;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_stft_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_stft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_stft",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_stft_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_stft = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_stft_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_stft",0,0)
  result = (Octopus::Function *)&Octopus::octave_stft;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_synthesis_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_synthesis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_synthesis",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_synthesis_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_synthesis = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_synthesis_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_synthesis",0,0)
  result = (Octopus::Function *)&Octopus::octave_synthesis;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_yulewalker_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_yulewalker",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_yulewalker",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_yulewalker_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_yulewalker = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_yulewalker_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_yulewalker",0,0)
  result = (Octopus::Function *)&Octopus::octave_yulewalker;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_polystab_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_polystab",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_polystab",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_polystab_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_polystab = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_polystab_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_polystab",0,0)
  result = (Octopus::Function *)&Octopus::octave_polystab;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_residued_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_residued",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_residued",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_residued_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_residued = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_residued_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_residued",0,0)
  result = (Octopus::Function *)&Octopus::octave_residued;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_residuez_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_residuez",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_residuez",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_residuez_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_residuez = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_residuez_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_residuez",0,0)
  result = (Octopus::Function *)&Octopus::octave_residuez;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sos2ss_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sos2ss",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sos2ss",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sos2ss_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sos2ss = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sos2ss_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sos2ss",0,0)
  result = (Octopus::Function *)&Octopus::octave_sos2ss;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sos2tf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sos2tf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sos2tf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sos2tf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sos2tf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sos2tf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sos2tf",0,0)
  result = (Octopus::Function *)&Octopus::octave_sos2tf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sos2zp_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sos2zp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sos2zp",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sos2zp_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sos2zp = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sos2zp_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sos2zp",0,0)
  result = (Octopus::Function *)&Octopus::octave_sos2zp;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ss2tf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ss2tf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ss2tf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ss2tf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ss2tf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ss2tf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ss2tf",0,0)
  result = (Octopus::Function *)&Octopus::octave_ss2tf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ss2zp_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ss2zp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ss2zp",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ss2zp_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ss2zp = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ss2zp_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ss2zp",0,0)
  result = (Octopus::Function *)&Octopus::octave_ss2zp;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tf2sos_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_tf2sos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_tf2sos",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_tf2sos_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_tf2sos = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tf2sos_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_tf2sos",0,0)
  result = (Octopus::Function *)&Octopus::octave_tf2sos;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tf2ss_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_tf2ss",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_tf2ss",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_tf2ss_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_tf2ss = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tf2ss_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_tf2ss",0,0)
  result = (Octopus::Function *)&Octopus::octave_tf2ss;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tf2zp_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_tf2zp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_tf2zp",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_tf2zp_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_tf2zp = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tf2zp_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_tf2zp",0,0)
  result = (Octopus::Function *)&Octopus::octave_tf2zp;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_zp2sos_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_zp2sos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_zp2sos",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_zp2sos_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_zp2sos = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_zp2sos_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_zp2sos",0,0)
  result = (Octopus::Function *)&Octopus::octave_zp2sos;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_zp2ss_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_zp2ss",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_zp2ss",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_zp2ss_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_zp2ss = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_zp2ss_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_zp2ss",0,0)
  result = (Octopus::Function *)&Octopus::octave_zp2ss;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_zp2tf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_zp2tf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_zp2tf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_zp2tf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_zp2tf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_zp2tf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_zp2tf",0,0)
  result = (Octopus::Function *)&Octopus::octave_zp2tf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_besselap_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_besselap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_besselap",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_besselap_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_besselap = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_besselap_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_besselap",0,0)
  result = (Octopus::Function *)&Octopus::octave_besselap;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_besself_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_besself",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_besself",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_besself_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_besself = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_besself_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_besself",0,0)
  result = (Octopus::Function *)&Octopus::octave_besself;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bilinear_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bilinear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bilinear",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bilinear_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bilinear = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bilinear_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bilinear",0,0)
  result = (Octopus::Function *)&Octopus::octave_bilinear;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_buttap_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_buttap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_buttap",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_buttap_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_buttap = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_buttap_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_buttap",0,0)
  result = (Octopus::Function *)&Octopus::octave_buttap;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_butter_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_butter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_butter",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_butter_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_butter = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_butter_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_butter",0,0)
  result = (Octopus::Function *)&Octopus::octave_butter;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_buttord_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_buttord",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_buttord",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_buttord_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_buttord = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_buttord_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_buttord",0,0)
  result = (Octopus::Function *)&Octopus::octave_buttord;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cheb_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cheb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cheb",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cheb_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cheb = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cheb_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cheb",0,0)
  result = (Octopus::Function *)&Octopus::octave_cheb;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cheb1ap_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cheb1ap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cheb1ap",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cheb1ap_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cheb1ap = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cheb1ap_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cheb1ap",0,0)
  result = (Octopus::Function *)&Octopus::octave_cheb1ap;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cheb1ord_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cheb1ord",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cheb1ord",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cheb1ord_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cheb1ord = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cheb1ord_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cheb1ord",0,0)
  result = (Octopus::Function *)&Octopus::octave_cheb1ord;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cheb2ap_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cheb2ap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cheb2ap",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cheb2ap_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cheb2ap = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cheb2ap_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cheb2ap",0,0)
  result = (Octopus::Function *)&Octopus::octave_cheb2ap;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cheb2ord_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cheb2ord",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cheb2ord",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cheb2ord_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cheb2ord = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cheb2ord_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cheb2ord",0,0)
  result = (Octopus::Function *)&Octopus::octave_cheb2ord;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chebywin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_chebywin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_chebywin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_chebywin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_chebywin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chebywin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_chebywin",0,0)
  result = (Octopus::Function *)&Octopus::octave_chebywin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cheby1_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cheby1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cheby1",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cheby1_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cheby1 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cheby1_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cheby1",0,0)
  result = (Octopus::Function *)&Octopus::octave_cheby1;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cheby2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cheby2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cheby2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cheby2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cheby2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cheby2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cheby2",0,0)
  result = (Octopus::Function *)&Octopus::octave_cheby2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellip_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ellip",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ellip_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ellip = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellip_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellip",0,0)
  result = (Octopus::Function *)&Octopus::octave_ellip;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipap_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ellipap",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ellipap_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ellipap = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipap_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipap",0,0)
  result = (Octopus::Function *)&Octopus::octave_ellipap;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipord_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipord",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ellipord",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ellipord_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ellipord = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipord_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipord",0,0)
  result = (Octopus::Function *)&Octopus::octave_ellipord;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_impinvar_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_impinvar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_impinvar",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_impinvar_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_impinvar = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_impinvar_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_impinvar",0,0)
  result = (Octopus::Function *)&Octopus::octave_impinvar;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ncauer_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ncauer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ncauer",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ncauer_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ncauer = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ncauer_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ncauer",0,0)
  result = (Octopus::Function *)&Octopus::octave_ncauer;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pei_tseng_notch_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_pei_tseng_notch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_pei_tseng_notch",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_pei_tseng_notch_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_pei_tseng_notch = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pei_tseng_notch_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_pei_tseng_notch",0,0)
  result = (Octopus::Function *)&Octopus::octave_pei_tseng_notch;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sftrans_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sftrans",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sftrans",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sftrans_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sftrans = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sftrans_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sftrans",0,0)
  result = (Octopus::Function *)&Octopus::octave_sftrans;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cl2bp_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cl2bp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cl2bp",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cl2bp_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cl2bp = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cl2bp_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cl2bp",0,0)
  result = (Octopus::Function *)&Octopus::octave_cl2bp;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_kaiserord_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_kaiserord",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_kaiserord",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_kaiserord_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_kaiserord = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_kaiserord_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_kaiserord",0,0)
  result = (Octopus::Function *)&Octopus::octave_kaiserord;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_qp_kaiser_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_qp_kaiser",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_qp_kaiser",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_qp_kaiser_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_qp_kaiser = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_qp_kaiser_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_qp_kaiser",0,0)
  result = (Octopus::Function *)&Octopus::octave_qp_kaiser;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_remez_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_remez",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_remez",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_remez_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_remez = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_remez_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_remez",0,0)
  result = (Octopus::Function *)&Octopus::octave_remez;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sgplay_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sgplay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sgplay",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sgplay_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sgplay = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sgplay_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sgplay",0,0)
  result = (Octopus::Function *)&Octopus::octave_sgplay;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitrevorder_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitrevorder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bitrevorder",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bitrevorder_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bitrevorder = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitrevorder_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitrevorder",0,0)
  result = (Octopus::Function *)&Octopus::octave_bitrevorder;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cceps_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cceps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cceps",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cceps_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cceps = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cceps_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cceps",0,0)
  result = (Octopus::Function *)&Octopus::octave_cceps;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cplxreal_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cplxreal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cplxreal",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cplxreal_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cplxreal = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cplxreal_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cplxreal",0,0)
  result = (Octopus::Function *)&Octopus::octave_cplxreal;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_czt_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_czt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_czt",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_czt_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_czt = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_czt_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_czt",0,0)
  result = (Octopus::Function *)&Octopus::octave_czt;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dct_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dct",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dct_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dct = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dct_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dct",0,0)
  result = (Octopus::Function *)&Octopus::octave_dct;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dct2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dct2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dct2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dct2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dct2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dct2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dct2",0,0)
  result = (Octopus::Function *)&Octopus::octave_dct2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dctmtx_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dctmtx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dctmtx",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dctmtx_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dctmtx = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dctmtx_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dctmtx",0,0)
  result = (Octopus::Function *)&Octopus::octave_dctmtx;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_digitrevorder_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_digitrevorder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_digitrevorder",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_digitrevorder_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_digitrevorder = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_digitrevorder_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_digitrevorder",0,0)
  result = (Octopus::Function *)&Octopus::octave_digitrevorder;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dst_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dst",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dst_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dst = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dst_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dst",0,0)
  result = (Octopus::Function *)&Octopus::octave_dst;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dwt_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dwt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dwt",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dwt_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dwt = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dwt_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dwt",0,0)
  result = (Octopus::Function *)&Octopus::octave_dwt;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_rceps_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_rceps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_rceps",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_rceps_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_rceps = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_rceps_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_rceps",0,0)
  result = (Octopus::Function *)&Octopus::octave_rceps;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ar_psd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ar_psd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ar_psd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ar_psd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ar_psd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ar_psd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ar_psd",0,0)
  result = (Octopus::Function *)&Octopus::octave_ar_psd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cohere_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cohere",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cohere",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cohere_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cohere = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cohere_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cohere",0,0)
  result = (Octopus::Function *)&Octopus::octave_cohere;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cpsd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cpsd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cpsd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cpsd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cpsd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cpsd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cpsd",0,0)
  result = (Octopus::Function *)&Octopus::octave_cpsd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_csd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_csd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_csd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_csd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_csd",0,0)
  result = (Octopus::Function *)&Octopus::octave_csd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_db2pow_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_db2pow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_db2pow",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_db2pow_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_db2pow = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_db2pow_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_db2pow",0,0)
  result = (Octopus::Function *)&Octopus::octave_db2pow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mscohere_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_mscohere",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_mscohere",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_mscohere_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_mscohere = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mscohere_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_mscohere",0,0)
  result = (Octopus::Function *)&Octopus::octave_mscohere;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pburg_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_pburg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_pburg",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_pburg_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_pburg = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pburg_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_pburg",0,0)
  result = (Octopus::Function *)&Octopus::octave_pburg;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pow2db_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_pow2db",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_pow2db",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_pow2db_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_pow2db = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pow2db_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_pow2db",0,0)
  result = (Octopus::Function *)&Octopus::octave_pow2db;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pwelch_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_pwelch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_pwelch",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_pwelch_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_pwelch = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pwelch_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_pwelch",0,0)
  result = (Octopus::Function *)&Octopus::octave_pwelch;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pyulear_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_pyulear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_pyulear",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_pyulear_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_pyulear = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pyulear_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_pyulear",0,0)
  result = (Octopus::Function *)&Octopus::octave_pyulear;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tfe_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_tfe",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_tfe",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_tfe_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_tfe = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tfe_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_tfe",0,0)
  result = (Octopus::Function *)&Octopus::octave_tfe;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tfestimate_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_tfestimate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_tfestimate",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_tfestimate_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_tfestimate = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tfestimate_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_tfestimate",0,0)
  result = (Octopus::Function *)&Octopus::octave_tfestimate;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave___power_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave___power",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave___power",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave___power_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave___power = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave___power_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave___power",0,0)
  result = (Octopus::Function *)&Octopus::octave___power;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_barthannwin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_barthannwin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_barthannwin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_barthannwin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_barthannwin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_barthannwin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_barthannwin",0,0)
  result = (Octopus::Function *)&Octopus::octave_barthannwin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bohmanwin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bohmanwin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bohmanwin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bohmanwin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bohmanwin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bohmanwin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bohmanwin",0,0)
  result = (Octopus::Function *)&Octopus::octave_bohmanwin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_boxcar_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_boxcar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_boxcar",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_boxcar_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_boxcar = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_boxcar_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_boxcar",0,0)
  result = (Octopus::Function *)&Octopus::octave_boxcar;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_flattopwin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_flattopwin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_flattopwin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_flattopwin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_flattopwin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_flattopwin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_flattopwin",0,0)
  result = (Octopus::Function *)&Octopus::octave_flattopwin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chebwin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_chebwin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_chebwin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_chebwin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_chebwin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chebwin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_chebwin",0,0)
  result = (Octopus::Function *)&Octopus::octave_chebwin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gaussian_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gaussian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gaussian",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gaussian_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gaussian = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gaussian_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gaussian",0,0)
  result = (Octopus::Function *)&Octopus::octave_gaussian;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gausswin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gausswin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gausswin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gausswin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gausswin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gausswin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gausswin",0,0)
  result = (Octopus::Function *)&Octopus::octave_gausswin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_kaiser_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_kaiser",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_kaiser",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_kaiser_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_kaiser = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_kaiser_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_kaiser",0,0)
  result = (Octopus::Function *)&Octopus::octave_kaiser;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_nuttalwin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_nuttalwin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_nuttalwin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_nuttalwin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_nuttalwin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_nuttalwin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_nuttalwin",0,0)
  result = (Octopus::Function *)&Octopus::octave_nuttalwin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_parzenwin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_parzenwin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_parzenwin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_parzenwin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_parzenwin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_parzenwin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_parzenwin",0,0)
  result = (Octopus::Function *)&Octopus::octave_parzenwin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_rectwin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_rectwin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_rectwin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_rectwin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_rectwin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_rectwin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_rectwin",0,0)
  result = (Octopus::Function *)&Octopus::octave_rectwin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tukeywin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_tukeywin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_tukeywin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_tukeywin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_tukeywin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tukeywin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_tukeywin",0,0)
  result = (Octopus::Function *)&Octopus::octave_tukeywin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ultrwin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ultrwin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ultrwin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ultrwin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ultrwin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ultrwin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ultrwin",0,0)
  result = (Octopus::Function *)&Octopus::octave_ultrwin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_welchwin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_welchwin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_welchwin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_welchwin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_welchwin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_welchwin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_welchwin",0,0)
  result = (Octopus::Function *)&Octopus::octave_welchwin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_window_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_window",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_window",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_window_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_window = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_window_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_window",0,0)
  result = (Octopus::Function *)&Octopus::octave_window;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_arburg_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_arburg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_arburg",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_arburg_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_arburg = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_arburg_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_arburg",0,0)
  result = (Octopus::Function *)&Octopus::octave_arburg;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_aryule_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_aryule",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_aryule",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_aryule_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_aryule = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_aryule_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_aryule",0,0)
  result = (Octopus::Function *)&Octopus::octave_aryule;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_invfreq_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_invfreq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_invfreq",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_invfreq_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_invfreq = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_invfreq_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_invfreq",0,0)
  result = (Octopus::Function *)&Octopus::octave_invfreq;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_invfreqz_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_invfreqz",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_invfreqz",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_invfreqz_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_invfreqz = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_invfreqz_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_invfreqz",0,0)
  result = (Octopus::Function *)&Octopus::octave_invfreqz;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_invfreqs_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_invfreqs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_invfreqs",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_invfreqs_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_invfreqs = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_invfreqs_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_invfreqs",0,0)
  result = (Octopus::Function *)&Octopus::octave_invfreqs;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_levinson_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_levinson",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_levinson",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_levinson_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_levinson = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_levinson_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_levinson",0,0)
  result = (Octopus::Function *)&Octopus::octave_levinson;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_data2fun_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_data2fun",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_data2fun",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_data2fun_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_data2fun = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_data2fun_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_data2fun",0,0)
  result = (Octopus::Function *)&Octopus::octave_data2fun;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_decimate_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_decimate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_decimate",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_decimate_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_decimate = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_decimate_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_decimate",0,0)
  result = (Octopus::Function *)&Octopus::octave_decimate;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_interp_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_interp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_interp",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_interp_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_interp = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_interp_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_interp",0,0)
  result = (Octopus::Function *)&Octopus::octave_interp;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_resample_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_resample",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_resample",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_resample_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_resample = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_resample_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_resample",0,0)
  result = (Octopus::Function *)&Octopus::octave_resample;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_upfirdn_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_upfirdn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_upfirdn",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_upfirdn_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_upfirdn = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_upfirdn_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_upfirdn",0,0)
  result = (Octopus::Function *)&Octopus::octave_upfirdn;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_upsample_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_upsample",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_upsample",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_upsample_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_upsample = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_upsample_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_upsample",0,0)
  result = (Octopus::Function *)&Octopus::octave_upsample;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_clustersegment_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_clustersegment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_clustersegment",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_clustersegment_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_clustersegment = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_clustersegment_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_clustersegment",0,0)
  result = (Octopus::Function *)&Octopus::octave_clustersegment;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fracshift_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fracshift",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fracshift",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fracshift_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fracshift = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fracshift_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fracshift",0,0)
  result = (Octopus::Function *)&Octopus::octave_fracshift;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_marcumq_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_marcumq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_marcumq",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_marcumq_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_marcumq = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_marcumq_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_marcumq",0,0)
  result = (Octopus::Function *)&Octopus::octave_marcumq;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_primitive_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_primitive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_primitive",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_primitive_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_primitive = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_primitive_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_primitive",0,0)
  result = (Octopus::Function *)&Octopus::octave_primitive;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sampled2continuous_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sampled2continuous",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sampled2continuous",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sampled2continuous_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sampled2continuous = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sampled2continuous_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sampled2continuous",0,0)
  result = (Octopus::Function *)&Octopus::octave_sampled2continuous;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_schtrig_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_schtrig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_schtrig",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_schtrig_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_schtrig = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_schtrig_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_schtrig",0,0)
  result = (Octopus::Function *)&Octopus::octave_schtrig;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_upsamplefill_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_upsamplefill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_upsamplefill",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_upsamplefill_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_upsamplefill = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_upsamplefill_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_upsamplefill",0,0)
  result = (Octopus::Function *)&Octopus::octave_upsamplefill;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_wkeep_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_wkeep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_wkeep",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_wkeep_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_wkeep = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_wkeep_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_wkeep",0,0)
  result = (Octopus::Function *)&Octopus::octave_wkeep;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_wrev_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_wrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_wrev",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_wrev_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_wrev = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_wrev_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_wrev",0,0)
  result = (Octopus::Function *)&Octopus::octave_wrev;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_zerocrossing_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_zerocrossing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_zerocrossing",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_zerocrossing_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_zerocrossing = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_zerocrossing_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_zerocrossing",0,0)
  result = (Octopus::Function *)&Octopus::octave_zerocrossing;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fht_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fht",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fht",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fht_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fht = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fht_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fht",0,0)
  result = (Octopus::Function *)&Octopus::octave_fht;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fwht_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fwht",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fwht",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fwht_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fwht = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fwht_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fwht",0,0)
  result = (Octopus::Function *)&Octopus::octave_fwht;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hilbert_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hilbert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hilbert",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hilbert_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hilbert = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hilbert_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hilbert",0,0)
  result = (Octopus::Function *)&Octopus::octave_hilbert;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_idct_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_idct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_idct",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_idct_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_idct = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_idct_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_idct",0,0)
  result = (Octopus::Function *)&Octopus::octave_idct;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_idct2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_idct2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_idct2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_idct2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_idct2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_idct2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_idct2",0,0)
  result = (Octopus::Function *)&Octopus::octave_idct2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_max_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_max",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_max_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_max = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_max_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_max",0,0)
  result = (Octopus::Function *)&Octopus::octave_max;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mean_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_mean",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_mean",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_mean_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_mean = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mean_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_mean",0,0)
  result = (Octopus::Function *)&Octopus::octave_mean;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_meansq_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_meansq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_meansq",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_meansq_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_meansq = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_meansq_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_meansq",0,0)
  result = (Octopus::Function *)&Octopus::octave_meansq;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_median_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_median",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_median",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_median_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_median = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_median_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_median",0,0)
  result = (Octopus::Function *)&Octopus::octave_median;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_min_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_min",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_min_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_min = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_min_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_min",0,0)
  result = (Octopus::Function *)&Octopus::octave_min;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_plot_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_plot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_plot",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_plot_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_plot = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_plot_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_plot",0,0)
  result = (Octopus::Function *)&Octopus::octave_plot;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pause_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_pause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_pause",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_pause_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_pause = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pause_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_pause",0,0)
  result = (Octopus::Function *)&Octopus::octave_pause;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_abs_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_abs",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_abs_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_abs = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_abs_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_abs",0,0)
  result = (Octopus::Function *)&Octopus::octave_abs;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_accumarray_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_accumarray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_accumarray",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_accumarray_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_accumarray = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_accumarray_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_accumarray",0,0)
  result = (Octopus::Function *)&Octopus::octave_accumarray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_accumdim_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_accumdim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_accumdim",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_accumdim_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_accumdim = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_accumdim_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_accumdim",0,0)
  result = (Octopus::Function *)&Octopus::octave_accumdim;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acos_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_acos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_acos",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_acos_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_acos = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acos_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_acos",0,0)
  result = (Octopus::Function *)&Octopus::octave_acos;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acosd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_acosd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_acosd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_acosd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_acosd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acosd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_acosd",0,0)
  result = (Octopus::Function *)&Octopus::octave_acosd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acosh_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_acosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_acosh",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_acosh_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_acosh = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acosh_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_acosh",0,0)
  result = (Octopus::Function *)&Octopus::octave_acosh;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acot_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_acot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_acot",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_acot_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_acot = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acot_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_acot",0,0)
  result = (Octopus::Function *)&Octopus::octave_acot;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acotd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_acotd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_acotd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_acotd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_acotd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acotd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_acotd",0,0)
  result = (Octopus::Function *)&Octopus::octave_acotd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acoth_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_acoth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_acoth",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_acoth_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_acoth = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acoth_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_acoth",0,0)
  result = (Octopus::Function *)&Octopus::octave_acoth;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acsc_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_acsc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_acsc",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_acsc_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_acsc = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acsc_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_acsc",0,0)
  result = (Octopus::Function *)&Octopus::octave_acsc;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acsch_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_acsch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_acsch",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_acsch_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_acsch = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acsch_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_acsch",0,0)
  result = (Octopus::Function *)&Octopus::octave_acsch;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acscd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_acscd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_acscd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_acscd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_acscd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_acscd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_acscd",0,0)
  result = (Octopus::Function *)&Octopus::octave_acscd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_airy_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_airy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_airy",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_airy_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_airy = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_airy_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_airy",0,0)
  result = (Octopus::Function *)&Octopus::octave_airy;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_adjoint_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_adjoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_adjoint",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_adjoint_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_adjoint = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_adjoint_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_adjoint",0,0)
  result = (Octopus::Function *)&Octopus::octave_adjoint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_all_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_all",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_all",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_all_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_all = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_all_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_all",0,0)
  result = (Octopus::Function *)&Octopus::octave_all;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_allow_non_integer_range_as_index_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_allow_non_integer_range_as_index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_allow_non_integer_range_as_index",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_allow_non_integer_range_as_index_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_allow_non_integer_range_as_index = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_allow_non_integer_range_as_index_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_allow_non_integer_range_as_index",0,0)
  result = (Octopus::Function *)&Octopus::octave_allow_non_integer_range_as_index;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_amd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_amd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_amd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_amd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_amd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_amd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_amd",0,0)
  result = (Octopus::Function *)&Octopus::octave_amd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ancestor_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ancestor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ancestor",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ancestor_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ancestor = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ancestor_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ancestor",0,0)
  result = (Octopus::Function *)&Octopus::octave_ancestor;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_and_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_and",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_and",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_and_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_and = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_and_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_and",0,0)
  result = (Octopus::Function *)&Octopus::octave_and;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_angle_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_angle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_angle",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_angle_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_angle = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_angle_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_angle",0,0)
  result = (Octopus::Function *)&Octopus::octave_angle;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_annotation_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_annotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_annotation",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_annotation_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_annotation = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_annotation_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_annotation",0,0)
  result = (Octopus::Function *)&Octopus::octave_annotation;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_anova_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_anova",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_anova",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_anova_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_anova = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_anova_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_anova",0,0)
  result = (Octopus::Function *)&Octopus::octave_anova;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ans_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ans",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ans",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ans_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ans = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ans_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ans",0,0)
  result = (Octopus::Function *)&Octopus::octave_ans;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_any_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_any",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_any",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_any_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_any = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_any_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_any",0,0)
  result = (Octopus::Function *)&Octopus::octave_any;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_arch_fit_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_arch_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_arch_fit",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_arch_fit_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_arch_fit = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_arch_fit_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_arch_fit",0,0)
  result = (Octopus::Function *)&Octopus::octave_arch_fit;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_arch_rnd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_arch_rnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_arch_rnd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_arch_rnd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_arch_rnd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_arch_rnd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_arch_rnd",0,0)
  result = (Octopus::Function *)&Octopus::octave_arch_rnd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_arch_test_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_arch_test",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_arch_test",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_arch_test_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_arch_test = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_arch_test_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_arch_test",0,0)
  result = (Octopus::Function *)&Octopus::octave_arch_test;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_area_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_area",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_area",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_area_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_area = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_area_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_area",0,0)
  result = (Octopus::Function *)&Octopus::octave_area;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_arg_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_arg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_arg",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_arg_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_arg = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_arg_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_arg",0,0)
  result = (Octopus::Function *)&Octopus::octave_arg;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_arrayfun_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_arrayfun",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_arrayfun",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_arrayfun_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_arrayfun = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_arrayfun_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_arrayfun",0,0)
  result = (Octopus::Function *)&Octopus::octave_arrayfun;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_asec_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_asec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_asec",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_asec_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_asec = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_asec_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_asec",0,0)
  result = (Octopus::Function *)&Octopus::octave_asec;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_asecd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_asecd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_asecd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_asecd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_asecd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_asecd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_asecd",0,0)
  result = (Octopus::Function *)&Octopus::octave_asecd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_asech_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_asech",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_asech",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_asech_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_asech = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_asech_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_asech",0,0)
  result = (Octopus::Function *)&Octopus::octave_asech;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_asin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_asin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_asin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_asin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_asin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_asin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_asin",0,0)
  result = (Octopus::Function *)&Octopus::octave_asin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_asind_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_asind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_asind",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_asind_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_asind = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_asind_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_asind",0,0)
  result = (Octopus::Function *)&Octopus::octave_asind;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_asinh_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_asinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_asinh",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_asinh_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_asinh = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_asinh_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_asinh",0,0)
  result = (Octopus::Function *)&Octopus::octave_asinh;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_assume_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_assume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_assume",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_assume_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_assume = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_assume_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_assume",0,0)
  result = (Octopus::Function *)&Octopus::octave_assume;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_assumptions_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_assumptions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_assumptions",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_assumptions_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_assumptions = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_assumptions_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_assumptions",0,0)
  result = (Octopus::Function *)&Octopus::octave_assumptions;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_atan_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_atan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_atan",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_atan_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_atan = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_atan_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_atan",0,0)
  result = (Octopus::Function *)&Octopus::octave_atan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_atand_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_atand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_atand",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_atand_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_atand = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_atand_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_atand",0,0)
  result = (Octopus::Function *)&Octopus::octave_atand;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_atanh_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_atanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_atanh",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_atanh_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_atanh = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_atanh_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_atanh",0,0)
  result = (Octopus::Function *)&Octopus::octave_atanh;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_atan2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_atan2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_atan2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_atan2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_atan2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_atan2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_atan2",0,0)
  result = (Octopus::Function *)&Octopus::octave_atan2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_audiodevinfo_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_audiodevinfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_audiodevinfo",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_audiodevinfo_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_audiodevinfo = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_audiodevinfo_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_audiodevinfo",0,0)
  result = (Octopus::Function *)&Octopus::octave_audiodevinfo;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_audioformats_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_audioformats",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_audioformats",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_audioformats_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_audioformats = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_audioformats_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_audioformats",0,0)
  result = (Octopus::Function *)&Octopus::octave_audioformats;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_audioinfo_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_audioinfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_audioinfo",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_audioinfo_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_audioinfo = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_audioinfo_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_audioinfo",0,0)
  result = (Octopus::Function *)&Octopus::octave_audioinfo;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_audioread_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_audioread",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_audioread",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_audioread_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_audioread = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_audioread_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_audioread",0,0)
  result = (Octopus::Function *)&Octopus::octave_audioread;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_audiowrite_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_audiowrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_audiowrite",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_audiowrite_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_audiowrite = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_audiowrite_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_audiowrite",0,0)
  result = (Octopus::Function *)&Octopus::octave_audiowrite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_autoreg_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_autoreg_matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_autoreg_matrix",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_autoreg_matrix_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_autoreg_matrix = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_autoreg_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_autoreg_matrix",0,0)
  result = (Octopus::Function *)&Octopus::octave_autoreg_matrix;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_autumn_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_autumn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_autumn",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_autumn_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_autumn = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_autumn_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_autumn",0,0)
  result = (Octopus::Function *)&Octopus::octave_autumn;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_axes_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_axes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_axes",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_axes_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_axes = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_axes_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_axes",0,0)
  result = (Octopus::Function *)&Octopus::octave_axes;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_axis_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_axis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_axis",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_axis_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_axis = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_axis_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_axis",0,0)
  result = (Octopus::Function *)&Octopus::octave_axis;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_balance_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_balance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_balance",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_balance_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_balance = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_balance_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_balance",0,0)
  result = (Octopus::Function *)&Octopus::octave_balance;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bandwidth_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bandwidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bandwidth",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bandwidth_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bandwidth = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bandwidth_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bandwidth",0,0)
  result = (Octopus::Function *)&Octopus::octave_bandwidth;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bar_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bar",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bar_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bar = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bar_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bar",0,0)
  result = (Octopus::Function *)&Octopus::octave_bar;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_barh_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_barh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_barh",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_barh_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_barh = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_barh_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_barh",0,0)
  result = (Octopus::Function *)&Octopus::octave_barh;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bathannwin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bathannwin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bathannwin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bathannwin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bathannwin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bathannwin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bathannwin",0,0)
  result = (Octopus::Function *)&Octopus::octave_bathannwin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bartlett_test_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bartlett_test",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bartlett_test",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bartlett_test_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bartlett_test = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bartlett_test_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bartlett_test",0,0)
  result = (Octopus::Function *)&Octopus::octave_bartlett_test;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_base2dec_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_base2dec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_base2dec",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_base2dec_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_base2dec = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_base2dec_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_base2dec",0,0)
  result = (Octopus::Function *)&Octopus::octave_base2dec;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_base64_decode_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_base64_decode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_base64_decode",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_base64_decode_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_base64_decode = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_base64_decode_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_base64_decode",0,0)
  result = (Octopus::Function *)&Octopus::octave_base64_decode;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_base64_encode_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_base64_encode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_base64_encode",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_base64_encode_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_base64_encode = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_base64_encode_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_base64_encode",0,0)
  result = (Octopus::Function *)&Octopus::octave_base64_encode;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_beep_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_beep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_beep",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_beep_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_beep = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_beep_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_beep",0,0)
  result = (Octopus::Function *)&Octopus::octave_beep;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_beep_on_error_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_beep_on_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_beep_on_error",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_beep_on_error_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_beep_on_error = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_beep_on_error_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_beep_on_error",0,0)
  result = (Octopus::Function *)&Octopus::octave_beep_on_error;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bernoulli_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bernoulli",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bernoulli",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bernoulli_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bernoulli = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bernoulli_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bernoulli",0,0)
  result = (Octopus::Function *)&Octopus::octave_bernoulli;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_besseli_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_besseli",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_besseli",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_besseli_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_besseli = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_besseli_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_besseli",0,0)
  result = (Octopus::Function *)&Octopus::octave_besseli;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_besseljn_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_besseljn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_besseljn",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_besseljn_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_besseljn = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_besseljn_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_besseljn",0,0)
  result = (Octopus::Function *)&Octopus::octave_besseljn;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_besselk_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_besselk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_besselk",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_besselk_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_besselk = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_besselk_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_besselk",0,0)
  result = (Octopus::Function *)&Octopus::octave_besselk;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bessely_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bessely",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bessely",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bessely_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bessely = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bessely_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bessely",0,0)
  result = (Octopus::Function *)&Octopus::octave_bessely;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_beta_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_beta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_beta",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_beta_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_beta = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_beta_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_beta",0,0)
  result = (Octopus::Function *)&Octopus::octave_beta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_betacdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_betacdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_betacdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_betacdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_betacdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_betacdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_betacdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_betacdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_betainc_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_betainc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_betainc",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_betainc_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_betainc = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_betainc_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_betainc",0,0)
  result = (Octopus::Function *)&Octopus::octave_betainc;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_betaincinv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_betaincinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_betaincinv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_betaincinv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_betaincinv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_betaincinv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_betaincinv",0,0)
  result = (Octopus::Function *)&Octopus::octave_betaincinv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_betainv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_betainv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_betainv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_betainv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_betainv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_betainv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_betainv",0,0)
  result = (Octopus::Function *)&Octopus::octave_betainv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_betain_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_betain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_betain",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_betain_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_betain = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_betain_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_betain",0,0)
  result = (Octopus::Function *)&Octopus::octave_betain;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_betapdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_betapdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_betapdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_betapdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_betapdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_betapdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_betapdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_betapdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_betarnd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_betarnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_betarnd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_betarnd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_betarnd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_betarnd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_betarnd",0,0)
  result = (Octopus::Function *)&Octopus::octave_betarnd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bicg_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bicg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bicg",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bicg_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bicg = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bicg_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bicg",0,0)
  result = (Octopus::Function *)&Octopus::octave_bicg;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bicgstab_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bicgstab",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bicgstab",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bicgstab_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bicgstab = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bicgstab_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bicgstab",0,0)
  result = (Octopus::Function *)&Octopus::octave_bicgstab;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bin2dec_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bin2dec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bin2dec",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bin2dec_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bin2dec = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bin2dec_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bin2dec",0,0)
  result = (Octopus::Function *)&Octopus::octave_bin2dec;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bincoeff_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bincoeff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bincoeff",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bincoeff_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bincoeff = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bincoeff_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bincoeff",0,0)
  result = (Octopus::Function *)&Octopus::octave_bincoeff;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_binocdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_binocdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_binocdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_binocdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_binocdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_binocdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_binocdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_binocdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_binoinv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_binoinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_binoinv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_binoinv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_binoinv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_binoinv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_binoinv",0,0)
  result = (Octopus::Function *)&Octopus::octave_binoinv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_binopdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_binopdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_binopdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_binopdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_binopdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_binopdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_binopdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_binopdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_binornd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_binornd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_binornd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_binornd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_binornd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_binornd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_binornd",0,0)
  result = (Octopus::Function *)&Octopus::octave_binornd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitand_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bitand",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bitand_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bitand = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitand_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitand",0,0)
  result = (Octopus::Function *)&Octopus::octave_bitand;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitcmp_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitcmp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bitcmp",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bitcmp_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bitcmp = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitcmp_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitcmp",0,0)
  result = (Octopus::Function *)&Octopus::octave_bitcmp;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitget_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bitget",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bitget_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bitget = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitget_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitget",0,0)
  result = (Octopus::Function *)&Octopus::octave_bitget;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitor_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bitor",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bitor_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bitor = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitor_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitor",0,0)
  result = (Octopus::Function *)&Octopus::octave_bitor;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitpack_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitpack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bitpack",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bitpack_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bitpack = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitpack_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitpack",0,0)
  result = (Octopus::Function *)&Octopus::octave_bitpack;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitset_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bitset",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bitset_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bitset = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitset_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitset",0,0)
  result = (Octopus::Function *)&Octopus::octave_bitset;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitshift_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitshift",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bitshift",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bitshift_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bitshift = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitshift_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitshift",0,0)
  result = (Octopus::Function *)&Octopus::octave_bitshift;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitunpack_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitunpack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bitunpack",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bitunpack_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bitunpack = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitunpack_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitunpack",0,0)
  result = (Octopus::Function *)&Octopus::octave_bitunpack;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitxor_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitxor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bitxor",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bitxor_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bitxor = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bitxor_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bitxor",0,0)
  result = (Octopus::Function *)&Octopus::octave_bitxor;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_blanks_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_blanks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_blanks",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_blanks_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_blanks = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_blanks_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_blanks",0,0)
  result = (Octopus::Function *)&Octopus::octave_blanks;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_blkdiag_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_blkdiag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_blkdiag",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_blkdiag_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_blkdiag = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_blkdiag_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_blkdiag",0,0)
  result = (Octopus::Function *)&Octopus::octave_blkdiag;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_blkmm_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_blkmm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_blkmm",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_blkmm_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_blkmm = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_blkmm_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_blkmm",0,0)
  result = (Octopus::Function *)&Octopus::octave_blkmm;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bone_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bone",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bone_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bone = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bone_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bone",0,0)
  result = (Octopus::Function *)&Octopus::octave_bone;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_box_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_box",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_box",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_box_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_box = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_box_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_box",0,0)
  result = (Octopus::Function *)&Octopus::octave_box;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_brighten_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_brighten",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_brighten",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_brighten_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_brighten = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_brighten_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_brighten",0,0)
  result = (Octopus::Function *)&Octopus::octave_brighten;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bsxfun_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bsxfun",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bsxfun",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bsxfun_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bsxfun = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bsxfun_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bsxfun",0,0)
  result = (Octopus::Function *)&Octopus::octave_bsxfun;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_builtin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_builtin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_builtin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_builtin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_builtin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_builtin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_builtin",0,0)
  result = (Octopus::Function *)&Octopus::octave_builtin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bzip2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bzip2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bzip2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bzip2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bzip2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bzip2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bzip2",0,0)
  result = (Octopus::Function *)&Octopus::octave_bzip2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_calendar_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_calendar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_calendar",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_calendar_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_calendar = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_calendar_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_calendar",0,0)
  result = (Octopus::Function *)&Octopus::octave_calendar;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_camlight_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_camlight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_camlight",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_camlight_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_camlight = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_camlight_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_camlight",0,0)
  result = (Octopus::Function *)&Octopus::octave_camlight;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cart2pol_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cart2pol",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cart2pol",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cart2pol_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cart2pol = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cart2pol_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cart2pol",0,0)
  result = (Octopus::Function *)&Octopus::octave_cart2pol;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cart2sph_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cart2sph",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cart2sph",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cart2sph_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cart2sph = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cart2sph_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cart2sph",0,0)
  result = (Octopus::Function *)&Octopus::octave_cart2sph;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cast_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cast",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cast_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cast = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cast_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cast",0,0)
  result = (Octopus::Function *)&Octopus::octave_cast;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cat_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cat",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cat_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cat = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cat_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cat",0,0)
  result = (Octopus::Function *)&Octopus::octave_cat;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_catalan_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_catalan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_catalan",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_catalan_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_catalan = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_catalan_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_catalan",0,0)
  result = (Octopus::Function *)&Octopus::octave_catalan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cauchy_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cauchy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cauchy",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cauchy_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cauchy = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cauchy_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cauchy",0,0)
  result = (Octopus::Function *)&Octopus::octave_cauchy;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cauchy_cdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cauchy_cdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cauchy_cdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cauchy_cdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cauchy_cdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cauchy_cdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cauchy_cdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_cauchy_cdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cauchy_inv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cauchy_inv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cauchy_inv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cauchy_inv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cauchy_inv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cauchy_inv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cauchy_inv",0,0)
  result = (Octopus::Function *)&Octopus::octave_cauchy_inv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cauchy_pdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cauchy_pdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cauchy_pdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cauchy_pdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cauchy_pdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cauchy_pdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cauchy_pdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_cauchy_pdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cauchy_rnd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cauchy_rnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cauchy_rnd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cauchy_rnd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cauchy_rnd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cauchy_rnd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cauchy_rnd",0,0)
  result = (Octopus::Function *)&Octopus::octave_cauchy_rnd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_caxis_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_caxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_caxis",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_caxis_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_caxis = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_caxis_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_caxis",0,0)
  result = (Octopus::Function *)&Octopus::octave_caxis;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cbrt_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cbrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cbrt",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cbrt_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cbrt = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cbrt_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cbrt",0,0)
  result = (Octopus::Function *)&Octopus::octave_cbrt;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ccode_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ccode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ccode",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ccode_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ccode = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ccode_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ccode",0,0)
  result = (Octopus::Function *)&Octopus::octave_ccode;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ccolamd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ccolamd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ccolamd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ccolamd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ccolamd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ccolamd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ccolamd",0,0)
  result = (Octopus::Function *)&Octopus::octave_ccolamd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ceil_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ceil",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ceil",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ceil_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ceil = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ceil_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ceil",0,0)
  result = (Octopus::Function *)&Octopus::octave_ceil;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_center_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_center",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_center",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_center_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_center = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_center_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_center",0,0)
  result = (Octopus::Function *)&Octopus::octave_center;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_centroid_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_centroid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_centroid",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_centroid_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_centroid = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_centroid_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_centroid",0,0)
  result = (Octopus::Function *)&Octopus::octave_centroid;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cgs_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cgs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cgs",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cgs_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cgs = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cgs_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cgs",0,0)
  result = (Octopus::Function *)&Octopus::octave_cgs;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chi2cdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_chi2cdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_chi2cdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_chi2cdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_chi2cdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chi2cdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_chi2cdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_chi2cdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chi2inv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_chi2inv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_chi2inv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_chi2inv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_chi2inv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chi2inv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_chi2inv",0,0)
  result = (Octopus::Function *)&Octopus::octave_chi2inv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chi2pdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_chi2pdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_chi2pdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_chi2pdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_chi2pdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chi2pdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_chi2pdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_chi2pdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chi2rnd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_chi2rnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_chi2rnd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_chi2rnd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_chi2rnd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chi2rnd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_chi2rnd",0,0)
  result = (Octopus::Function *)&Octopus::octave_chi2rnd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_children_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_children",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_children",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_children_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_children = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_children_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_children",0,0)
  result = (Octopus::Function *)&Octopus::octave_children;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chisquare_test_homogeneity_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_chisquare_test_homogeneity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_chisquare_test_homogeneity",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_chisquare_test_homogeneity_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_chisquare_test_homogeneity = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chisquare_test_homogeneity_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_chisquare_test_homogeneity",0,0)
  result = (Octopus::Function *)&Octopus::octave_chisquare_test_homogeneity;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chebyshevpoly_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_chebyshevpoly",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_chebyshevpoly",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_chebyshevpoly_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_chebyshevpoly = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chebyshevpoly_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_chebyshevpoly",0,0)
  result = (Octopus::Function *)&Octopus::octave_chebyshevpoly;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chebyshevT_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_chebyshevT",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_chebyshevT",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_chebyshevT_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_chebyshevT = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chebyshevT_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_chebyshevT",0,0)
  result = (Octopus::Function *)&Octopus::octave_chebyshevT;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chebyshevU_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_chebyshevU",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_chebyshevU",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_chebyshevU_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_chebyshevU = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chebyshevU_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_chebyshevU",0,0)
  result = (Octopus::Function *)&Octopus::octave_chebyshevU;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chol_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_chol",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_chol",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_chol_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_chol = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chol_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_chol",0,0)
  result = (Octopus::Function *)&Octopus::octave_chol;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chol2inv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_chol2inv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_chol2inv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_chol2inv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_chol2inv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chol2inv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_chol2inv",0,0)
  result = (Octopus::Function *)&Octopus::octave_chol2inv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_choldelete_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_choldelete",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_choldelete",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_choldelete_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_choldelete = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_choldelete_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_choldelete",0,0)
  result = (Octopus::Function *)&Octopus::octave_choldelete;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cholinsert_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cholinsert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cholinsert",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cholinsert_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cholinsert = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cholinsert_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cholinsert",0,0)
  result = (Octopus::Function *)&Octopus::octave_cholinsert;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_colinv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_colinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_colinv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_colinv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_colinv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_colinv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_colinv",0,0)
  result = (Octopus::Function *)&Octopus::octave_colinv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cholshift_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cholshift",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cholshift",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cholshift_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cholshift = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cholshift_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cholshift",0,0)
  result = (Octopus::Function *)&Octopus::octave_cholshift;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cholupdate_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cholupdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cholupdate",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cholupdate_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cholupdate = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cholupdate_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cholupdate",0,0)
  result = (Octopus::Function *)&Octopus::octave_cholupdate;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chop_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_chop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_chop",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_chop_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_chop = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_chop_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_chop",0,0)
  result = (Octopus::Function *)&Octopus::octave_chop;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_circshift_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_circshift",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_circshift",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_circshift_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_circshift = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_circshift_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_circshift",0,0)
  result = (Octopus::Function *)&Octopus::octave_circshift;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cla_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cla",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cla",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cla_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cla = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cla_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cla",0,0)
  result = (Octopus::Function *)&Octopus::octave_cla;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_clabel_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_clabel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_clabel",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_clabel_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_clabel = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_clabel_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_clabel",0,0)
  result = (Octopus::Function *)&Octopus::octave_clabel;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_clc_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_clc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_clc",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_clc_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_clc = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_clc_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_clc",0,0)
  result = (Octopus::Function *)&Octopus::octave_clc;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_clf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_clf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_clf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_clf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_clf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_clf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_clf",0,0)
  result = (Octopus::Function *)&Octopus::octave_clf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_clock_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_clock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_clock",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_clock_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_clock = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_clock_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_clock",0,0)
  result = (Octopus::Function *)&Octopus::octave_clock;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cloglog_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cloglog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cloglog",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cloglog_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cloglog = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cloglog_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cloglog",0,0)
  result = (Octopus::Function *)&Octopus::octave_cloglog;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cmpermute_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cmpermute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cmpermute",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cmpermute_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cmpermute = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cmpermute_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cmpermute",0,0)
  result = (Octopus::Function *)&Octopus::octave_cmpermute;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cmunique_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cmunique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cmunique",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cmunique_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cmunique = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cmunique_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cmunique",0,0)
  result = (Octopus::Function *)&Octopus::octave_cmunique;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_coeffs_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_coeffs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_coeffs",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_coeffs_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_coeffs = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_coeffs_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_coeffs",0,0)
  result = (Octopus::Function *)&Octopus::octave_coeffs;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_colamd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_colamd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_colamd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_colamd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_colamd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_colamd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_colamd",0,0)
  result = (Octopus::Function *)&Octopus::octave_colamd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_colloc_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_colloc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_colloc",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_colloc_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_colloc = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_colloc_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_colloc",0,0)
  result = (Octopus::Function *)&Octopus::octave_colloc;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_colon_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_colon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_colon",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_colon_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_colon = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_colon_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_colon",0,0)
  result = (Octopus::Function *)&Octopus::octave_colon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_colorbar_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_colorbar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_colorbar",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_colorbar_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_colorbar = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_colorbar_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_colorbar",0,0)
  result = (Octopus::Function *)&Octopus::octave_colorbar;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_colorcube_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_colorcube",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_colorcube",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_colorcube_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_colorcube = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_colorcube_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_colorcube",0,0)
  result = (Octopus::Function *)&Octopus::octave_colorcube;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_colormap_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_colormap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_colormap",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_colormap_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_colormap = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_colormap_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_colormap",0,0)
  result = (Octopus::Function *)&Octopus::octave_colormap;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_colperm_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_colperm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_colperm",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_colperm_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_colperm = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_colperm_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_colperm",0,0)
  result = (Octopus::Function *)&Octopus::octave_colperm;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_columns_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_columns",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_columns",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_columns_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_columns = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_columns_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_columns",0,0)
  result = (Octopus::Function *)&Octopus::octave_columns;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_comet_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_comet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_comet",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_comet_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_comet = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_comet_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_comet",0,0)
  result = (Octopus::Function *)&Octopus::octave_comet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_compan_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_compan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_compan",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_compan_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_compan = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_compan_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_compan",0,0)
  result = (Octopus::Function *)&Octopus::octave_compan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_compass_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_compass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_compass",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_compass_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_compass = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_compass_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_compass",0,0)
  result = (Octopus::Function *)&Octopus::octave_compass;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_complex_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_complex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_complex",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_complex_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_complex = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_complex_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_complex",0,0)
  result = (Octopus::Function *)&Octopus::octave_complex;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_computer_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_computer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_computer",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_computer_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_computer = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_computer_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_computer",0,0)
  result = (Octopus::Function *)&Octopus::octave_computer;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cond_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cond",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cond",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cond_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cond = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cond_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cond",0,0)
  result = (Octopus::Function *)&Octopus::octave_cond;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_condeig_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_condeig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_condeig",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_condeig_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_condeig = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_condeig_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_condeig",0,0)
  result = (Octopus::Function *)&Octopus::octave_condeig;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_condest_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_condest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_condest",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_condest_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_condest = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_condest_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_condest",0,0)
  result = (Octopus::Function *)&Octopus::octave_condest;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_conj_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_conj",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_conj",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_conj_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_conj = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_conj_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_conj",0,0)
  result = (Octopus::Function *)&Octopus::octave_conj;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_contour_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_contour",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_contour",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_contour_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_contour = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_contour_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_contour",0,0)
  result = (Octopus::Function *)&Octopus::octave_contour;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_contour3_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_contour3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_contour3",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_contour3_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_contour3 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_contour3_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_contour3",0,0)
  result = (Octopus::Function *)&Octopus::octave_contour3;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_contourc_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_contourc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_contourc",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_contourc_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_contourc = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_contourc_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_contourc",0,0)
  result = (Octopus::Function *)&Octopus::octave_contourc;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_contourf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_contourf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_contourf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_contourf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_contourf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_contourf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_contourf",0,0)
  result = (Octopus::Function *)&Octopus::octave_contourf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_contrast_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_contrast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_contrast",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_contrast_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_contrast = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_contrast_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_contrast",0,0)
  result = (Octopus::Function *)&Octopus::octave_contrast;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_conv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_conv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_conv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_conv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_conv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_conv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_conv",0,0)
  result = (Octopus::Function *)&Octopus::octave_conv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_conv2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_conv2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_conv2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_conv2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_conv2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_conv2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_conv2",0,0)
  result = (Octopus::Function *)&Octopus::octave_conv2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_convhull_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_convhull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_convhull",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_convhull_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_convhull = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_convhull_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_convhull",0,0)
  result = (Octopus::Function *)&Octopus::octave_convhull;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_convhulln_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_convhulln",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_convhulln",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_convhulln_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_convhulln = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_convhulln_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_convhulln",0,0)
  result = (Octopus::Function *)&Octopus::octave_convhulln;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cool_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cool",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cool_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cool = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cool_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cool",0,0)
  result = (Octopus::Function *)&Octopus::octave_cool;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_copper_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_copper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_copper",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_copper_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_copper = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_copper_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_copper",0,0)
  result = (Octopus::Function *)&Octopus::octave_copper;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_copyfile_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_copyfile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_copyfile",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_copyfile_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_copyfile = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_copyfile_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_copyfile",0,0)
  result = (Octopus::Function *)&Octopus::octave_copyfile;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_copyobj_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_copyobj",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_copyobj",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_copyobj_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_copyobj = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_copyobj_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_copyobj",0,0)
  result = (Octopus::Function *)&Octopus::octave_copyobj;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cor_test_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cor_test",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cor_test",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cor_test_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cor_test = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cor_test_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cor_test",0,0)
  result = (Octopus::Function *)&Octopus::octave_cor_test;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cos_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cos",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cos_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cos = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cos_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cos",0,0)
  result = (Octopus::Function *)&Octopus::octave_cos;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cosd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cosd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cosd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cosd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cosd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cosd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cosd",0,0)
  result = (Octopus::Function *)&Octopus::octave_cosd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cosh_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cosh",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cosh_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cosh = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cosh_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cosh",0,0)
  result = (Octopus::Function *)&Octopus::octave_cosh;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_coshint_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_coshint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_coshint",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_coshint_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_coshint = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_coshint_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_coshint",0,0)
  result = (Octopus::Function *)&Octopus::octave_coshint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cosint_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cosint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cosint",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cosint_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cosint = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cosint_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cosint",0,0)
  result = (Octopus::Function *)&Octopus::octave_cosint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cot_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cot",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cot_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cot = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cot_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cot",0,0)
  result = (Octopus::Function *)&Octopus::octave_cot;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cotd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cotd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cotd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cotd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cotd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cotd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cotd",0,0)
  result = (Octopus::Function *)&Octopus::octave_cotd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_coth_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_coth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_coth",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_coth_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_coth = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_coth_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_coth",0,0)
  result = (Octopus::Function *)&Octopus::octave_coth;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cov_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cov",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cov",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cov_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cov = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cov_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cov",0,0)
  result = (Octopus::Function *)&Octopus::octave_cov;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cplxpair_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cplxpair",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cplxpair",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cplxpair_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cplxpair = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cplxpair_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cplxpair",0,0)
  result = (Octopus::Function *)&Octopus::octave_cplxpair;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cputime_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cputime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cputime",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cputime_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cputime = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cputime_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cputime",0,0)
  result = (Octopus::Function *)&Octopus::octave_cputime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cross_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cross",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cross",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cross_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cross = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cross_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cross",0,0)
  result = (Octopus::Function *)&Octopus::octave_cross;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csc_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_csc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_csc",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_csc_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_csc = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csc_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_csc",0,0)
  result = (Octopus::Function *)&Octopus::octave_csc;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cscd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cscd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cscd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cscd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cscd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cscd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cscd",0,0)
  result = (Octopus::Function *)&Octopus::octave_cscd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csch_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_csch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_csch",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_csch_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_csch = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csch_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_csch",0,0)
  result = (Octopus::Function *)&Octopus::octave_csch;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cstrcat_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cstrcat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cstrcat",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cstrcat_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cstrcat = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cstrcat_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cstrcat",0,0)
  result = (Octopus::Function *)&Octopus::octave_cstrcat;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cstrcmp_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cstrcmp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cstrcmp",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cstrcmp_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cstrcmp = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cstrcmp_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cstrcmp",0,0)
  result = (Octopus::Function *)&Octopus::octave_cstrcmp;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csvread_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_csvread",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_csvread",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_csvread_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_csvread = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csvread_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_csvread",0,0)
  result = (Octopus::Function *)&Octopus::octave_csvread;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csvwrite_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_csvwrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_csvwrite",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_csvwrite_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_csvwrite = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csvwrite_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_csvwrite",0,0)
  result = (Octopus::Function *)&Octopus::octave_csvwrite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csymamd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_csymamd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_csymamd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_csymamd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_csymamd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csymamd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_csymamd",0,0)
  result = (Octopus::Function *)&Octopus::octave_csymamd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ctime_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ctime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ctime",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ctime_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ctime = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ctime_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ctime",0,0)
  result = (Octopus::Function *)&Octopus::octave_ctime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ctranspose_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ctranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ctranspose",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ctranspose_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ctranspose = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ctranspose_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ctranspose",0,0)
  result = (Octopus::Function *)&Octopus::octave_ctranspose;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cubehelix_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cubehelix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cubehelix",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cubehelix_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cubehelix = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cubehelix_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cubehelix",0,0)
  result = (Octopus::Function *)&Octopus::octave_cubehelix;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cummax_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cummax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cummax",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cummax_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cummax = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cummax_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cummax",0,0)
  result = (Octopus::Function *)&Octopus::octave_cummax;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cummin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cummin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cummin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cummin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cummin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cummin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cummin",0,0)
  result = (Octopus::Function *)&Octopus::octave_cummin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cumprod_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cumprod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cumprod",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cumprod_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cumprod = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cumprod_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cumprod",0,0)
  result = (Octopus::Function *)&Octopus::octave_cumprod;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cumsum_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cumsum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cumsum",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cumsum_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cumsum = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cumsum_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cumsum",0,0)
  result = (Octopus::Function *)&Octopus::octave_cumsum;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cumtrapz_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cumtrapz",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cumtrapz",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cumtrapz_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cumtrapz = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cumtrapz_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cumtrapz",0,0)
  result = (Octopus::Function *)&Octopus::octave_cumtrapz;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cylinder_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_cylinder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_cylinder",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_cylinder_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_cylinder = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_cylinder_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_cylinder",0,0)
  result = (Octopus::Function *)&Octopus::octave_cylinder;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_daspect_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_daspect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_daspect",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_daspect_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_daspect = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_daspect_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_daspect",0,0)
  result = (Octopus::Function *)&Octopus::octave_daspect;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_daspk_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_daspk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_daspk",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_daspk_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_daspk = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_daspk_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_daspk",0,0)
  result = (Octopus::Function *)&Octopus::octave_daspk;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dasrt_options_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dasrt_options",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dasrt_options",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dasrt_options_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dasrt_options = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dasrt_options_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dasrt_options",0,0)
  result = (Octopus::Function *)&Octopus::octave_dasrt_options;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dassl_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dassl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dassl",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dassl_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dassl = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dassl_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dassl",0,0)
  result = (Octopus::Function *)&Octopus::octave_dassl;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dassl_options_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dassl_options",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dassl_options",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dassl_options_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dassl_options = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dassl_options_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dassl_options",0,0)
  result = (Octopus::Function *)&Octopus::octave_dassl_options;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_date_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_date",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_date",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_date_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_date = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_date_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_date",0,0)
  result = (Octopus::Function *)&Octopus::octave_date;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_datenum_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_datenum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_datenum",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_datenum_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_datenum = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_datenum_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_datenum",0,0)
  result = (Octopus::Function *)&Octopus::octave_datenum;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_datestr_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_datestr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_datestr",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_datestr_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_datestr = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_datestr_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_datestr",0,0)
  result = (Octopus::Function *)&Octopus::octave_datestr;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_datetick_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_datetick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_datetick",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_datetick_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_datetick = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_datetick_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_datetick",0,0)
  result = (Octopus::Function *)&Octopus::octave_datetick;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dawson_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dawson",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dawson",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dawson_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dawson = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dawson_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dawson",0,0)
  result = (Octopus::Function *)&Octopus::octave_dawson;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbclear_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbclear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dbclear",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dbclear_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dbclear = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbclear_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbclear",0,0)
  result = (Octopus::Function *)&Octopus::octave_dbclear;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbcont_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbcont",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dbcont",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dbcont_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dbcont = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbcont_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbcont",0,0)
  result = (Octopus::Function *)&Octopus::octave_dbcont;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbdown_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbdown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dbdown",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dbdown_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dbdown = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbdown_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbdown",0,0)
  result = (Octopus::Function *)&Octopus::octave_dbdown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dblist_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dblist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dblist",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dblist_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dblist = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dblist_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dblist",0,0)
  result = (Octopus::Function *)&Octopus::octave_dblist;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dblquad_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dblquad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dblquad",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dblquad_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dblquad = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dblquad_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dblquad",0,0)
  result = (Octopus::Function *)&Octopus::octave_dblquad;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbquit_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbquit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dbquit",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dbquit_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dbquit = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbquit_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbquit",0,0)
  result = (Octopus::Function *)&Octopus::octave_dbquit;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbstack_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbstack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dbstack",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dbstack_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dbstack = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbstack_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbstack",0,0)
  result = (Octopus::Function *)&Octopus::octave_dbstack;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbstatus_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbstatus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dbstatus",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dbstatus_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dbstatus = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbstatus_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbstatus",0,0)
  result = (Octopus::Function *)&Octopus::octave_dbstatus;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbstep_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbstep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dbstep",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dbstep_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dbstep = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbstep_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbstep",0,0)
  result = (Octopus::Function *)&Octopus::octave_dbstep;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbstop_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbstop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dbstop",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dbstop_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dbstop = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbstop_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbstop",0,0)
  result = (Octopus::Function *)&Octopus::octave_dbstop;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbtype_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbtype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dbtype",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dbtype_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dbtype = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbtype_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbtype",0,0)
  result = (Octopus::Function *)&Octopus::octave_dbtype;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbup_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dbup",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dbup_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dbup = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbup_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbup",0,0)
  result = (Octopus::Function *)&Octopus::octave_dbup;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbwhere_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbwhere",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dbwhere",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dbwhere_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dbwhere = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dbwhere_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dbwhere",0,0)
  result = (Octopus::Function *)&Octopus::octave_dbwhere;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_deal_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_deal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_deal",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_deal_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_deal = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_deal_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_deal",0,0)
  result = (Octopus::Function *)&Octopus::octave_deal;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_deblank_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_deblank",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_deblank",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_deblank_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_deblank = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_deblank_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_deblank",0,0)
  result = (Octopus::Function *)&Octopus::octave_deblank;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dec2base_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dec2base",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dec2base",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dec2base_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dec2base = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dec2base_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dec2base",0,0)
  result = (Octopus::Function *)&Octopus::octave_dec2base;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dec2hex_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dec2hex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dec2hex",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dec2hex_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dec2hex = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dec2hex_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dec2hex",0,0)
  result = (Octopus::Function *)&Octopus::octave_dec2hex;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_deconv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_deconv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_deconv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_deconv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_deconv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_deconv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_deconv",0,0)
  result = (Octopus::Function *)&Octopus::octave_deconv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_deg2rad_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_deg2rad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_deg2rad",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_deg2rad_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_deg2rad = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_deg2rad_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_deg2rad",0,0)
  result = (Octopus::Function *)&Octopus::octave_deg2rad;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_del2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_del2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_del2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_del2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_del2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_del2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_del2",0,0)
  result = (Octopus::Function *)&Octopus::octave_del2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_delaunay_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_delaunay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_delaunay",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_delaunay_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_delaunay = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_delaunay_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_delaunay",0,0)
  result = (Octopus::Function *)&Octopus::octave_delaunay;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_delaunayn_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_delaunayn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_delaunayn",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_delaunayn_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_delaunayn = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_delaunayn_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_delaunayn",0,0)
  result = (Octopus::Function *)&Octopus::octave_delaunayn;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_det_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_det",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_det",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_det_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_det = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_det_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_det",0,0)
  result = (Octopus::Function *)&Octopus::octave_det;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_detrend_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_detrend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_detrend",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_detrend_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_detrend = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_detrend_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_detrend",0,0)
  result = (Octopus::Function *)&Octopus::octave_detrend;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_diag_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_diag",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_diag_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_diag = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_diag_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_diag",0,0)
  result = (Octopus::Function *)&Octopus::octave_diag;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_diff_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_diff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_diff",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_diff_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_diff = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_diff_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_diff",0,0)
  result = (Octopus::Function *)&Octopus::octave_diff;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_diffpara_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_diffpara",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_diffpara",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_diffpara_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_diffpara = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_diffpara_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_diffpara",0,0)
  result = (Octopus::Function *)&Octopus::octave_diffpara;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_diffuse_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_diffuse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_diffuse",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_diffuse_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_diffuse = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_diffuse_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_diffuse",0,0)
  result = (Octopus::Function *)&Octopus::octave_diffuse;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_digits_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_digits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_digits",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_digits_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_digits = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_digits_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_digits",0,0)
  result = (Octopus::Function *)&Octopus::octave_digits;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dilog_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dilog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dilog",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dilog_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dilog = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dilog_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dilog",0,0)
  result = (Octopus::Function *)&Octopus::octave_dilog;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dir_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dir",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dir_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dir = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dir_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dir",0,0)
  result = (Octopus::Function *)&Octopus::octave_dir;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dirac_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dirac",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dirac",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dirac_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dirac = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dirac_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dirac",0,0)
  result = (Octopus::Function *)&Octopus::octave_dirac;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_discrete_cdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_discrete_cdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_discrete_cdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_discrete_cdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_discrete_cdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_discrete_cdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_discrete_cdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_discrete_cdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_discrete_inv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_discrete_inv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_discrete_inv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_discrete_inv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_discrete_inv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_discrete_inv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_discrete_inv",0,0)
  result = (Octopus::Function *)&Octopus::octave_discrete_inv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_discrete_pdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_discrete_pdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_discrete_pdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_discrete_pdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_discrete_pdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_discrete_pdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_discrete_pdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_discrete_pdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_discrete_rnd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_discrete_rnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_discrete_rnd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_discrete_rnd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_discrete_rnd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_discrete_rnd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_discrete_rnd",0,0)
  result = (Octopus::Function *)&Octopus::octave_discrete_rnd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_disp_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_disp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_disp",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_disp_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_disp = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_disp_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_disp",0,0)
  result = (Octopus::Function *)&Octopus::octave_disp;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_display_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_display",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_display",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_display_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_display = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_display_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_display",0,0)
  result = (Octopus::Function *)&Octopus::octave_display;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_divergence_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_divergence",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_divergence",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_divergence_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_divergence = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_divergence_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_divergence",0,0)
  result = (Octopus::Function *)&Octopus::octave_divergence;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dimread_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dimread",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dimread",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dimread_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dimread = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dimread_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dimread",0,0)
  result = (Octopus::Function *)&Octopus::octave_dimread;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dimwrite_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dimwrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dimwrite",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dimwrite_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dimwrite = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dimwrite_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dimwrite",0,0)
  result = (Octopus::Function *)&Octopus::octave_dimwrite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dmperm_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dmperm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dmperm",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dmperm_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dmperm = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dmperm_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dmperm",0,0)
  result = (Octopus::Function *)&Octopus::octave_dmperm;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_do_string_escapes_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_do_string_escapes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_do_string_escapes",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_do_string_escapes_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_do_string_escapes = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_do_string_escapes_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_do_string_escapes",0,0)
  result = (Octopus::Function *)&Octopus::octave_do_string_escapes;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_doc_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_doc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_doc",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_doc_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_doc = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_doc_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_doc",0,0)
  result = (Octopus::Function *)&Octopus::octave_doc;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dot_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dot",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dot_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dot = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dot_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dot",0,0)
  result = (Octopus::Function *)&Octopus::octave_dot;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_double_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_double",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_double",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_double_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_double = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_double_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_double",0,0)
  result = (Octopus::Function *)&Octopus::octave_double;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_downsample_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_downsample",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_downsample",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_downsample_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_downsample = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_downsample_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_downsample",0,0)
  result = (Octopus::Function *)&Octopus::octave_downsample;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dsearch_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dsearch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dsearch",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dsearch_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dsearch = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dsearch_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dsearch",0,0)
  result = (Octopus::Function *)&Octopus::octave_dsearch;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dsearchn_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dsearchn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dsearchn",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dsearchn_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dsearchn = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dsearchn_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dsearchn",0,0)
  result = (Octopus::Function *)&Octopus::octave_dsearchn;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dsolve_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dsolve",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dsolve",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dsolve_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dsolve = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dsolve_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dsolve",0,0)
  result = (Octopus::Function *)&Octopus::octave_dsolve;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dup2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dup2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dup2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dup2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dup2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dup2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dup2",0,0)
  result = (Octopus::Function *)&Octopus::octave_dup2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_duplication_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_duplication_matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_duplication_matrix",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_duplication_matrix_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_duplication_matrix = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_duplication_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_duplication_matrix",0,0)
  result = (Octopus::Function *)&Octopus::octave_duplication_matrix;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_durblevinson_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_durblevinson",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_durblevinson",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_durblevinson_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_durblevinson = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_durblevinson_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_durblevinson",0,0)
  result = (Octopus::Function *)&Octopus::octave_durblevinson;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_e_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_e",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_e",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_e_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_e = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_e_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_e",0,0)
  result = (Octopus::Function *)&Octopus::octave_e;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ei_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ei",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ei",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ei_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ei = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ei_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ei",0,0)
  result = (Octopus::Function *)&Octopus::octave_ei;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_eig_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_eig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_eig",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_eig_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_eig = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_eig_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_eig",0,0)
  result = (Octopus::Function *)&Octopus::octave_eig;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipke_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipke",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ellipke",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ellipke_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ellipke = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipke_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipke",0,0)
  result = (Octopus::Function *)&Octopus::octave_ellipke;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipsoid_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipsoid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ellipsoid",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ellipsoid_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ellipsoid = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipsoid_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipsoid",0,0)
  result = (Octopus::Function *)&Octopus::octave_ellipsoid;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipticCE_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipticCE",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ellipticCE",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ellipticCE_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ellipticCE = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipticCE_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipticCE",0,0)
  result = (Octopus::Function *)&Octopus::octave_ellipticCE;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipticCK_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipticCK",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ellipticCK",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ellipticCK_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ellipticCK = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipticCK_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipticCK",0,0)
  result = (Octopus::Function *)&Octopus::octave_ellipticCK;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipticCPi_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipticCPi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ellipticCPi",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ellipticCPi_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ellipticCPi = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipticCPi_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipticCPi",0,0)
  result = (Octopus::Function *)&Octopus::octave_ellipticCPi;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipticE_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipticE",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ellipticE",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ellipticE_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ellipticE = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipticE_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipticE",0,0)
  result = (Octopus::Function *)&Octopus::octave_ellipticE;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipticF_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipticF",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ellipticF",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ellipticF_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ellipticF = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipticF_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipticF",0,0)
  result = (Octopus::Function *)&Octopus::octave_ellipticF;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipticK_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipticK",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ellipticK",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ellipticK_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ellipticK = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipticK_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipticK",0,0)
  result = (Octopus::Function *)&Octopus::octave_ellipticK;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipticPi_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipticPi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ellipticPi",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ellipticPi_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ellipticPi = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ellipticPi_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ellipticPi",0,0)
  result = (Octopus::Function *)&Octopus::octave_ellipticPi;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_empirical_cdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_empirical_cdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_empirical_cdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_empirical_cdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_empirical_cdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_empirical_cdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_empirical_cdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_empirical_cdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_empirical_inv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_empirical_inv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_empirical_inv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_empirical_inv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_empirical_inv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_empirical_inv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_empirical_inv",0,0)
  result = (Octopus::Function *)&Octopus::octave_empirical_inv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_empirical_pdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_empirical_pdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_empirical_pdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_empirical_pdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_empirical_pdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_empirical_pdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_empirical_pdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_empirical_pdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_empirical_rnd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_empirical_rnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_empirical_rnd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_empirical_rnd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_empirical_rnd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_empirical_rnd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_empirical_rnd",0,0)
  result = (Octopus::Function *)&Octopus::octave_empirical_rnd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_end_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_end",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_end_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_end = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_end_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_end",0,0)
  result = (Octopus::Function *)&Octopus::octave_end;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_endgrent_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_endgrent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_endgrent",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_endgrent_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_endgrent = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_endgrent_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_endgrent",0,0)
  result = (Octopus::Function *)&Octopus::octave_endgrent;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_endpwent_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_endpwent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_endpwent",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_endpwent_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_endpwent = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_endpwent_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_endpwent",0,0)
  result = (Octopus::Function *)&Octopus::octave_endpwent;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_eomday_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_eomday",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_eomday",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_eomday_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_eomday = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_eomday_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_eomday",0,0)
  result = (Octopus::Function *)&Octopus::octave_eomday;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_eps_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_eps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_eps",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_eps_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_eps = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_eps_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_eps",0,0)
  result = (Octopus::Function *)&Octopus::octave_eps;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_eq_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_eq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_eq",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_eq_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_eq = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_eq_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_eq",0,0)
  result = (Octopus::Function *)&Octopus::octave_eq;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_equationsToMatrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_equationsToMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_equationsToMatrix",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_equationsToMatrix_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_equationsToMatrix = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_equationsToMatrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_equationsToMatrix",0,0)
  result = (Octopus::Function *)&Octopus::octave_equationsToMatrix;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_erf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_erf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_erf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_erf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_erf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_erf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_erf",0,0)
  result = (Octopus::Function *)&Octopus::octave_erf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_erfc_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_erfc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_erfc",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_erfc_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_erfc = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_erfc_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_erfc",0,0)
  result = (Octopus::Function *)&Octopus::octave_erfc;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_erfinv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_erfinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_erfinv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_erfinv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_erfinv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_erfinv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_erfinv",0,0)
  result = (Octopus::Function *)&Octopus::octave_erfinv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_erfi_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_erfi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_erfi",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_erfi_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_erfi = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_erfi_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_erfi",0,0)
  result = (Octopus::Function *)&Octopus::octave_erfi;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_errno_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_errno",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_errno",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_errno_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_errno = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_errno_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_errno",0,0)
  result = (Octopus::Function *)&Octopus::octave_errno;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_error_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_error",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_error_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_error = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_error_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_error",0,0)
  result = (Octopus::Function *)&Octopus::octave_error;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_error_ids_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_error_ids",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_error_ids",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_error_ids_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_error_ids = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_error_ids_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_error_ids",0,0)
  result = (Octopus::Function *)&Octopus::octave_error_ids;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_errorbar_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_errorbar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_errorbar",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_errorbar_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_errorbar = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_errorbar_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_errorbar",0,0)
  result = (Octopus::Function *)&Octopus::octave_errorbar;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_etime_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_etime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_etime",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_etime_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_etime = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_etime_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_etime",0,0)
  result = (Octopus::Function *)&Octopus::octave_etime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_etree_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_etree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_etree",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_etree_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_etree = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_etree_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_etree",0,0)
  result = (Octopus::Function *)&Octopus::octave_etree;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_etreeplot_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_etreeplot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_etreeplot",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_etreeplot_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_etreeplot = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_etreeplot_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_etreeplot",0,0)
  result = (Octopus::Function *)&Octopus::octave_etreeplot;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_eulier_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_eulier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_eulier",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_eulier_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_eulier = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_eulier_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_eulier",0,0)
  result = (Octopus::Function *)&Octopus::octave_eulier;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_eulergamma_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_eulergamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_eulergamma",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_eulergamma_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_eulergamma = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_eulergamma_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_eulergamma",0,0)
  result = (Octopus::Function *)&Octopus::octave_eulergamma;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_evalin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_evalin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_evalin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_evalin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_evalin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_evalin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_evalin",0,0)
  result = (Octopus::Function *)&Octopus::octave_evalin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_exp_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_exp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_exp",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_exp_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_exp = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_exp_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_exp",0,0)
  result = (Octopus::Function *)&Octopus::octave_exp;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_expand_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_expand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_expand",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_expand_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_expand = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_expand_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_expand",0,0)
  result = (Octopus::Function *)&Octopus::octave_expand;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_expcdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_expcdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_expcdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_expcdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_expcdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_expcdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_expcdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_expcdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_expint_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_expint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_expint",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_expint_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_expint = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_expint_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_expint",0,0)
  result = (Octopus::Function *)&Octopus::octave_expint;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_expinv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_expinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_expinv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_expinv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_expinv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_expinv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_expinv",0,0)
  result = (Octopus::Function *)&Octopus::octave_expinv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_expm_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_expm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_expm",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_expm_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_expm = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_expm_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_expm",0,0)
  result = (Octopus::Function *)&Octopus::octave_expm;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_expm1_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_expm1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_expm1",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_expm1_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_expm1 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_expm1_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_expm1",0,0)
  result = (Octopus::Function *)&Octopus::octave_expm1;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_exppdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_exppdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_exppdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_exppdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_exppdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_exppdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_exppdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_exppdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_exprnd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_exprnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_exprnd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_exprnd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_exprnd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_exprnd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_exprnd",0,0)
  result = (Octopus::Function *)&Octopus::octave_exprnd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_eye_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_eye",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_eye",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_eye_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_eye = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_eye_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_eye",0,0)
  result = (Octopus::Function *)&Octopus::octave_eye;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ezcontour_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ezcontour",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ezcontour",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ezcontour_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ezcontour = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ezcontour_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ezcontour",0,0)
  result = (Octopus::Function *)&Octopus::octave_ezcontour;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ezcontourf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ezcontourf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ezcontourf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ezcontourf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ezcontourf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ezcontourf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ezcontourf",0,0)
  result = (Octopus::Function *)&Octopus::octave_ezcontourf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ezmesh_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ezmesh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ezmesh",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ezmesh_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ezmesh = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ezmesh_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ezmesh",0,0)
  result = (Octopus::Function *)&Octopus::octave_ezmesh;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_explot_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_explot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_explot",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_explot_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_explot = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_explot_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_explot",0,0)
  result = (Octopus::Function *)&Octopus::octave_explot;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ezplot3_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ezplot3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ezplot3",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ezplot3_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ezplot3 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ezplot3_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ezplot3",0,0)
  result = (Octopus::Function *)&Octopus::octave_ezplot3;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ezsurf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ezsurf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ezsurf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ezsurf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ezsurf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ezsurf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ezsurf",0,0)
  result = (Octopus::Function *)&Octopus::octave_ezsurf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ezpolar_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ezpolar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ezpolar",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ezpolar_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ezpolar = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ezpolar_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ezpolar",0,0)
  result = (Octopus::Function *)&Octopus::octave_ezpolar;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ezsurfc_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ezsurfc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ezsurfc",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ezsurfc_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ezsurfc = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ezsurfc_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ezsurfc",0,0)
  result = (Octopus::Function *)&Octopus::octave_ezsurfc;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_f_test_regression_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_f_test_regression",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_f_test_regression",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_f_test_regression_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_f_test_regression = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_f_test_regression_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_f_test_regression",0,0)
  result = (Octopus::Function *)&Octopus::octave_f_test_regression;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_factor_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_factor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_factor",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_factor_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_factor = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_factor_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_factor",0,0)
  result = (Octopus::Function *)&Octopus::octave_factor;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_factorial_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_factorial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_factorial",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_factorial_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_factorial = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_factorial_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_factorial",0,0)
  result = (Octopus::Function *)&Octopus::octave_factorial;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_false_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_false",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_false",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_false_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_false = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_false_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_false",0,0)
  result = (Octopus::Function *)&Octopus::octave_false;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fcdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fcdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fcdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fcdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fcdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fcdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fcdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_fcdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fclear_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fclear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fclear",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fclear_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fclear = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fclear_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fclear",0,0)
  result = (Octopus::Function *)&Octopus::octave_fclear;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fcntl_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fcntl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fcntl",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fcntl_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fcntl = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fcntl_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fcntl",0,0)
  result = (Octopus::Function *)&Octopus::octave_fcntl;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fdisp_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fdisp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fdisp",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fdisp_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fdisp = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fdisp_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fdisp",0,0)
  result = (Octopus::Function *)&Octopus::octave_fdisp;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_feather_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_feather",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_feather",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_feather_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_feather = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_feather_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_feather",0,0)
  result = (Octopus::Function *)&Octopus::octave_feather;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ff2n_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ff2n",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ff2n",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ff2n_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ff2n = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ff2n_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ff2n",0,0)
  result = (Octopus::Function *)&Octopus::octave_ff2n;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fibonacci_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fibonacci",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fibonacci",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fibonacci_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fibonacci = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fibonacci_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fibonacci",0,0)
  result = (Octopus::Function *)&Octopus::octave_fibonacci;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_find_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_find",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_find",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_find_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_find = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_find_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_find",0,0)
  result = (Octopus::Function *)&Octopus::octave_find;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_findsym_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_findsym",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_findsym",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_findsym_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_findsym = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_findsym_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_findsym",0,0)
  result = (Octopus::Function *)&Octopus::octave_findsym;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_finiteset_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_finiteset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_finiteset",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_finiteset_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_finiteset = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_finiteset_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_finiteset",0,0)
  result = (Octopus::Function *)&Octopus::octave_finiteset;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_finv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_finv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_finv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_finv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_finv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_finv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_finv",0,0)
  result = (Octopus::Function *)&Octopus::octave_finv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fix_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fix",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fix_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fix = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fix_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fix",0,0)
  result = (Octopus::Function *)&Octopus::octave_fix;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_flintmax_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_flintmax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_flintmax",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_flintmax_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_flintmax = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_flintmax_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_flintmax",0,0)
  result = (Octopus::Function *)&Octopus::octave_flintmax;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_flip_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_flip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_flip",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_flip_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_flip = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_flip_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_flip",0,0)
  result = (Octopus::Function *)&Octopus::octave_flip;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_flipir_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_flipir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_flipir",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_flipir_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_flipir = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_flipir_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_flipir",0,0)
  result = (Octopus::Function *)&Octopus::octave_flipir;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_flipud_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_flipud",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_flipud",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_flipud_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_flipud = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_flipud_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_flipud",0,0)
  result = (Octopus::Function *)&Octopus::octave_flipud;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_floor_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_floor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_floor",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_floor_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_floor = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_floor_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_floor",0,0)
  result = (Octopus::Function *)&Octopus::octave_floor;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fminbnd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fminbnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fminbnd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fminbnd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fminbnd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fminbnd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fminbnd",0,0)
  result = (Octopus::Function *)&Octopus::octave_fminbnd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fminunc_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fminunc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fminunc",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fminunc_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fminunc = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fminunc_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fminunc",0,0)
  result = (Octopus::Function *)&Octopus::octave_fminunc;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_formula_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_formula",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_formula",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_formula_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_formula = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_formula_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_formula",0,0)
  result = (Octopus::Function *)&Octopus::octave_formula;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fortran_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fortran",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fortran",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fortran_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fortran = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fortran_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fortran",0,0)
  result = (Octopus::Function *)&Octopus::octave_fortran;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fourier_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fourier",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fourier_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fourier = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fourier_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fourier",0,0)
  result = (Octopus::Function *)&Octopus::octave_fourier;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fpdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fpdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fpdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fpdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fpdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fpdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fpdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_fpdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fplot_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fplot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fplot",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fplot_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fplot = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fplot_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fplot",0,0)
  result = (Octopus::Function *)&Octopus::octave_fplot;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_frac_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_frac",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_frac",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_frac_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_frac = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_frac_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_frac",0,0)
  result = (Octopus::Function *)&Octopus::octave_frac;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fractdiff_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fractdiff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fractdiff",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fractdiff_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fractdiff = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fractdiff_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fractdiff",0,0)
  result = (Octopus::Function *)&Octopus::octave_fractdiff;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_frame2im_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_frame2im",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_frame2im",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_frame2im_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_frame2im = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_frame2im_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_frame2im",0,0)
  result = (Octopus::Function *)&Octopus::octave_frame2im;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freport_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_freport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_freport",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_freport_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_freport = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freport_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_freport",0,0)
  result = (Octopus::Function *)&Octopus::octave_freport;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fresneic_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fresneic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fresneic",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fresneic_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fresneic = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fresneic_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fresneic",0,0)
  result = (Octopus::Function *)&Octopus::octave_fresneic;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_frnd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_frnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_frnd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_frnd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_frnd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_frnd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_frnd",0,0)
  result = (Octopus::Function *)&Octopus::octave_frnd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fskipl_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fskipl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fskipl",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fskipl_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fskipl = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fskipl_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fskipl",0,0)
  result = (Octopus::Function *)&Octopus::octave_fskipl;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fsolve_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fsolve",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fsolve",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fsolve_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fsolve = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fsolve_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fsolve",0,0)
  result = (Octopus::Function *)&Octopus::octave_fsolve;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_full_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_full",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_full",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_full_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_full = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_full_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_full",0,0)
  result = (Octopus::Function *)&Octopus::octave_full;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fwhm_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fwhm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fwhm",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fwhm_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fwhm = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fwhm_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fwhm",0,0)
  result = (Octopus::Function *)&Octopus::octave_fwhm;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fzero_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fzero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fzero",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fzero_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fzero = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fzero_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fzero",0,0)
  result = (Octopus::Function *)&Octopus::octave_fzero;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gallery_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gallery",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gallery",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gallery_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gallery = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gallery_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gallery",0,0)
  result = (Octopus::Function *)&Octopus::octave_gallery;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gamcdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gamcdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gamcdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gamcdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gamcdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gamcdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gamcdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_gamcdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gaminv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gaminv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gaminv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gaminv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gaminv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gaminv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gaminv",0,0)
  result = (Octopus::Function *)&Octopus::octave_gaminv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gamma_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gamma",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gamma_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gamma = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gamma_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gamma",0,0)
  result = (Octopus::Function *)&Octopus::octave_gamma;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gammainc_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gammainc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gammainc",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gammainc_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gammainc = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gammainc_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gammainc",0,0)
  result = (Octopus::Function *)&Octopus::octave_gammainc;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gammaln_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gammaln",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gammaln",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gammaln_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gammaln = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gammaln_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gammaln",0,0)
  result = (Octopus::Function *)&Octopus::octave_gammaln;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gca_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gca",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gca",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gca_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gca = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gca_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gca",0,0)
  result = (Octopus::Function *)&Octopus::octave_gca;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gcbf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gcbf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gcbf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gcbf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gcbf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gcbf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gcbf",0,0)
  result = (Octopus::Function *)&Octopus::octave_gcbf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gcbo_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gcbo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gcbo",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gcbo_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gcbo = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gcbo_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gcbo",0,0)
  result = (Octopus::Function *)&Octopus::octave_gcbo;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gcd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gcd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gcd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gcd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gcd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gcd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gcd",0,0)
  result = (Octopus::Function *)&Octopus::octave_gcd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ge_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ge",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ge",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ge_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ge = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ge_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ge",0,0)
  result = (Octopus::Function *)&Octopus::octave_ge;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_geocdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_geocdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_geocdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_geocdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_geocdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_geocdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_geocdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_geocdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_geoinv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_geoinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_geoinv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_geoinv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_geoinv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_geoinv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_geoinv",0,0)
  result = (Octopus::Function *)&Octopus::octave_geoinv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_geopdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_geopdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_geopdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_geopdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_geopdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_geopdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_geopdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_geopdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_geornd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_geornd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_geornd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_geornd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_geornd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_geornd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_geornd",0,0)
  result = (Octopus::Function *)&Octopus::octave_geornd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_givens_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_givens",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_givens",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_givens_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_givens = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_givens_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_givens",0,0)
  result = (Octopus::Function *)&Octopus::octave_givens;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_glpk_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_glpk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_glpk",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_glpk_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_glpk = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_glpk_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_glpk",0,0)
  result = (Octopus::Function *)&Octopus::octave_glpk;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gmres_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gmres",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gmres",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gmres_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gmres = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gmres_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gmres",0,0)
  result = (Octopus::Function *)&Octopus::octave_gmres;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gmtime_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gmtime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gmtime",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gmtime_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gmtime = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gmtime_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gmtime",0,0)
  result = (Octopus::Function *)&Octopus::octave_gmtime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gnplot_binary_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gnplot_binary",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gnplot_binary",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gnplot_binary_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gnplot_binary = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gnplot_binary_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gnplot_binary",0,0)
  result = (Octopus::Function *)&Octopus::octave_gnplot_binary;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gplot_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gplot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gplot",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gplot_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gplot = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gplot_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gplot",0,0)
  result = (Octopus::Function *)&Octopus::octave_gplot;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gradient_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gradient",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gradient",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gradient_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gradient = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gradient_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gradient",0,0)
  result = (Octopus::Function *)&Octopus::octave_gradient;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gray_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gray",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gray_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gray = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gray_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gray",0,0)
  result = (Octopus::Function *)&Octopus::octave_gray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gray2ind_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gray2ind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gray2ind",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gray2ind_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gray2ind = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gray2ind_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gray2ind",0,0)
  result = (Octopus::Function *)&Octopus::octave_gray2ind;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gt_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gt",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gt_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gt = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gt_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gt",0,0)
  result = (Octopus::Function *)&Octopus::octave_gt;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gunzip_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gunzip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gunzip",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gunzip_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gunzip = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gunzip_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gunzip",0,0)
  result = (Octopus::Function *)&Octopus::octave_gunzip;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gzip_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gzip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gzip",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gzip_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gzip = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gzip_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gzip",0,0)
  result = (Octopus::Function *)&Octopus::octave_gzip;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hadamard_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hadamard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hadamard",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hadamard_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hadamard = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hadamard_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hadamard",0,0)
  result = (Octopus::Function *)&Octopus::octave_hadamard;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hankel_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hankel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hankel",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hankel_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hankel = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hankel_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hankel",0,0)
  result = (Octopus::Function *)&Octopus::octave_hankel;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_harmonic_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_harmonic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_harmonic",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_harmonic_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_harmonic = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_harmonic_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_harmonic",0,0)
  result = (Octopus::Function *)&Octopus::octave_harmonic;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_has_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_has",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_has",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_has_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_has = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_has_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_has",0,0)
  result = (Octopus::Function *)&Octopus::octave_has;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hash_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hash",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hash",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hash_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hash = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hash_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hash",0,0)
  result = (Octopus::Function *)&Octopus::octave_hash;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_heaviside_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_heaviside",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_heaviside",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_heaviside_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_heaviside = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_heaviside_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_heaviside",0,0)
  result = (Octopus::Function *)&Octopus::octave_heaviside;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_help_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_help",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_help",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_help_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_help = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_help_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_help",0,0)
  result = (Octopus::Function *)&Octopus::octave_help;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hess_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hess",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hess",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hess_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hess = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hess_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hess",0,0)
  result = (Octopus::Function *)&Octopus::octave_hess;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hex2dec_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hex2dec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hex2dec",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hex2dec_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hex2dec = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hex2dec_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hex2dec",0,0)
  result = (Octopus::Function *)&Octopus::octave_hex2dec;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hex2num_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hex2num",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hex2num",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hex2num_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hex2num = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hex2num_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hex2num",0,0)
  result = (Octopus::Function *)&Octopus::octave_hex2num;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hilb_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hilb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hilb",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hilb_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hilb = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hilb_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hilb",0,0)
  result = (Octopus::Function *)&Octopus::octave_hilb;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hilbert_curve_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hilbert_curve",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hilbert_curve",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hilbert_curve_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hilbert_curve = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hilbert_curve_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hilbert_curve",0,0)
  result = (Octopus::Function *)&Octopus::octave_hilbert_curve;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hist_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hist",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hist_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hist = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hist_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hist",0,0)
  result = (Octopus::Function *)&Octopus::octave_hist;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_horner_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_horner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_horner",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_horner_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_horner = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_horner_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_horner",0,0)
  result = (Octopus::Function *)&Octopus::octave_horner;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_horzcat_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_horzcat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_horzcat",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_horzcat_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_horzcat = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_horzcat_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_horzcat",0,0)
  result = (Octopus::Function *)&Octopus::octave_horzcat;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hot_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hot",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hot_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hot = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hot_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hot",0,0)
  result = (Octopus::Function *)&Octopus::octave_hot;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_housh_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_housh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_housh",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_housh_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_housh = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_housh_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_housh",0,0)
  result = (Octopus::Function *)&Octopus::octave_housh;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hsv2rgb_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hsv2rgb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hsv2rgb",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hsv2rgb_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hsv2rgb = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hsv2rgb_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hsv2rgb",0,0)
  result = (Octopus::Function *)&Octopus::octave_hsv2rgb;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hurst_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hurst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hurst",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hurst_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hurst = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hurst_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hurst",0,0)
  result = (Octopus::Function *)&Octopus::octave_hurst;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hygecdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hygecdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hygecdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hygecdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hygecdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hygecdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hygecdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_hygecdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hygeinv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hygeinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hygeinv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hygeinv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hygeinv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hygeinv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hygeinv",0,0)
  result = (Octopus::Function *)&Octopus::octave_hygeinv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hygepdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hygepdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hygepdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hygepdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hygepdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hygepdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hygepdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_hygepdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hygernd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hygernd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hygernd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hygernd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hygernd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hygernd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hygernd",0,0)
  result = (Octopus::Function *)&Octopus::octave_hygernd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hypergeom_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hypergeom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hypergeom",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hypergeom_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hypergeom = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hypergeom_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hypergeom",0,0)
  result = (Octopus::Function *)&Octopus::octave_hypergeom;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hypot_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_hypot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_hypot",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_hypot_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_hypot = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_hypot_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_hypot",0,0)
  result = (Octopus::Function *)&Octopus::octave_hypot;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_I_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_I",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_I",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_I_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_I = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_I_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_I",0,0)
  result = (Octopus::Function *)&Octopus::octave_I;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ichol_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ichol",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ichol",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ichol_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ichol = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ichol_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ichol",0,0)
  result = (Octopus::Function *)&Octopus::octave_ichol;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_idist_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_idist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_idist",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_idist_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_idist = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_idist_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_idist",0,0)
  result = (Octopus::Function *)&Octopus::octave_idist;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_idivide_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_idivide",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_idivide",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_idivide_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_idivide = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_idivide_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_idivide",0,0)
  result = (Octopus::Function *)&Octopus::octave_idivide;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_igamma_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_igamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_igamma",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_igamma_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_igamma = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_igamma_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_igamma",0,0)
  result = (Octopus::Function *)&Octopus::octave_igamma;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ilaplace_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ilaplace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ilaplace",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ilaplace_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ilaplace = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ilaplace_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ilaplace",0,0)
  result = (Octopus::Function *)&Octopus::octave_ilaplace;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ilu_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ilu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ilu",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ilu_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ilu = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ilu_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ilu",0,0)
  result = (Octopus::Function *)&Octopus::octave_ilu;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_im2double_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_im2double",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_im2double",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_im2double_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_im2double = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_im2double_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_im2double",0,0)
  result = (Octopus::Function *)&Octopus::octave_im2double;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_im2frame_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_im2frame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_im2frame",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_im2frame_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_im2frame = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_im2frame_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_im2frame",0,0)
  result = (Octopus::Function *)&Octopus::octave_im2frame;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_im2int16_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_im2int16",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_im2int16",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_im2int16_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_im2int16 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_im2int16_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_im2int16",0,0)
  result = (Octopus::Function *)&Octopus::octave_im2int16;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_im2single_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_im2single",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_im2single",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_im2single_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_im2single = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_im2single_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_im2single",0,0)
  result = (Octopus::Function *)&Octopus::octave_im2single;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_im2uint16_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_im2uint16",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_im2uint16",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_im2uint16_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_im2uint16 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_im2uint16_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_im2uint16",0,0)
  result = (Octopus::Function *)&Octopus::octave_im2uint16;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_im2uint8_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_im2uint8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_im2uint8",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_im2uint8_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_im2uint8 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_im2uint8_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_im2uint8",0,0)
  result = (Octopus::Function *)&Octopus::octave_im2uint8;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_imag_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_imag",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_imag_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_imag = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_imag_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_imag",0,0)
  result = (Octopus::Function *)&Octopus::octave_imag;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_image_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_image",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_image",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_image_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_image = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_image_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_image",0,0)
  result = (Octopus::Function *)&Octopus::octave_image;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_imagesc_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_imagesc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_imagesc",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_imagesc_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_imagesc = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_imagesc_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_imagesc",0,0)
  result = (Octopus::Function *)&Octopus::octave_imagesc;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_imfinfo_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_imfinfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_imfinfo",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_imfinfo_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_imfinfo = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_imfinfo_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_imfinfo",0,0)
  result = (Octopus::Function *)&Octopus::octave_imfinfo;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_imformats_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_imformats",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_imformats",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_imformats_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_imformats = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_imformats_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_imformats",0,0)
  result = (Octopus::Function *)&Octopus::octave_imformats;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_importdata_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_importdata",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_importdata",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_importdata_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_importdata = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_importdata_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_importdata",0,0)
  result = (Octopus::Function *)&Octopus::octave_importdata;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_imread_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_imread",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_imread",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_imread_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_imread = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_imread_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_imread",0,0)
  result = (Octopus::Function *)&Octopus::octave_imread;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_imshow_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_imshow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_imshow",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_imshow_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_imshow = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_imshow_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_imshow",0,0)
  result = (Octopus::Function *)&Octopus::octave_imshow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_imwrite_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_imwrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_imwrite",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_imwrite_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_imwrite = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_imwrite_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_imwrite",0,0)
  result = (Octopus::Function *)&Octopus::octave_imwrite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ind2gray_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ind2gray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ind2gray",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ind2gray_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ind2gray = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ind2gray_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ind2gray",0,0)
  result = (Octopus::Function *)&Octopus::octave_ind2gray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ind2rgb_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ind2rgb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ind2rgb",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ind2rgb_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ind2rgb = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ind2rgb_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ind2rgb",0,0)
  result = (Octopus::Function *)&Octopus::octave_ind2rgb;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_int2sub_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_int2sub",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_int2sub",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_int2sub_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_int2sub = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_int2sub_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_int2sub",0,0)
  result = (Octopus::Function *)&Octopus::octave_int2sub;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_index_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_index",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_index_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_index = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_index_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_index",0,0)
  result = (Octopus::Function *)&Octopus::octave_index;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_inf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_inf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_inf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_inf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_inf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_inf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_inf",0,0)
  result = (Octopus::Function *)&Octopus::octave_inf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_inpolygon_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_inpolygon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_inpolygon",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_inpolygon_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_inpolygon = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_inpolygon_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_inpolygon",0,0)
  result = (Octopus::Function *)&Octopus::octave_inpolygon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_input_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_input",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_input",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_input_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_input = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_input_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_input",0,0)
  result = (Octopus::Function *)&Octopus::octave_input;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_interp1_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_interp1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_interp1",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_interp1_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_interp1 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_interp1_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_interp1",0,0)
  result = (Octopus::Function *)&Octopus::octave_interp1;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_interp2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_interp2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_interp2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_interp2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_interp2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_interp2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_interp2",0,0)
  result = (Octopus::Function *)&Octopus::octave_interp2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_interp3_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_interp3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_interp3",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_interp3_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_interp3 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_interp3_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_interp3",0,0)
  result = (Octopus::Function *)&Octopus::octave_interp3;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_intersect_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_intersect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_intersect",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_intersect_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_intersect = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_intersect_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_intersect",0,0)
  result = (Octopus::Function *)&Octopus::octave_intersect;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_intmin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_intmin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_intmin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_intmin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_intmin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_intmin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_intmin",0,0)
  result = (Octopus::Function *)&Octopus::octave_intmin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_inv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_inv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_inv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_inv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_inv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_inv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_inv",0,0)
  result = (Octopus::Function *)&Octopus::octave_inv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_invhilb_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_invhilb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_invhilb",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_invhilb_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_invhilb = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_invhilb_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_invhilb",0,0)
  result = (Octopus::Function *)&Octopus::octave_invhilb;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_inimpinvar_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_inimpinvar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_inimpinvar",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_inimpinvar_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_inimpinvar = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_inimpinvar_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_inimpinvar",0,0)
  result = (Octopus::Function *)&Octopus::octave_inimpinvar;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ipermute_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ipermute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ipermute",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ipermute_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ipermute = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ipermute_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ipermute",0,0)
  result = (Octopus::Function *)&Octopus::octave_ipermute;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_iqr_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_iqr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_iqr",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_iqr_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_iqr = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_iqr_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_iqr",0,0)
  result = (Octopus::Function *)&Octopus::octave_iqr;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_isa_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_isa",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_isa",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_isa_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_isa = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_isa_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_isa",0,0)
  result = (Octopus::Function *)&Octopus::octave_isa;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_isequal_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_isequal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_isequal",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_isequal_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_isequal = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_isequal_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_isequal",0,0)
  result = (Octopus::Function *)&Octopus::octave_isequal;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ishermitian_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ishermitian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ishermitian",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ishermitian_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ishermitian = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ishermitian_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ishermitian",0,0)
  result = (Octopus::Function *)&Octopus::octave_ishermitian;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_isprime_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_isprime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_isprime",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_isprime_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_isprime = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_isprime_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_isprime",0,0)
  result = (Octopus::Function *)&Octopus::octave_isprime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_jit_enable_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_jit_enable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_jit_enable",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_jit_enable_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_jit_enable = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_jit_enable_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_jit_enable",0,0)
  result = (Octopus::Function *)&Octopus::octave_jit_enable;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_kbhit_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_kbhit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_kbhit",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_kbhit_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_kbhit = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_kbhit_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_kbhit",0,0)
  result = (Octopus::Function *)&Octopus::octave_kbhit;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_kendall_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_kendall",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_kendall",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_kendall_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_kendall = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_kendall_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_kendall",0,0)
  result = (Octopus::Function *)&Octopus::octave_kendall;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_kron_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_kron",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_kron",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_kron_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_kron = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_kron_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_kron",0,0)
  result = (Octopus::Function *)&Octopus::octave_kron;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_kurtosis_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_kurtosis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_kurtosis",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_kurtosis_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_kurtosis = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_kurtosis_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_kurtosis",0,0)
  result = (Octopus::Function *)&Octopus::octave_kurtosis;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_laplace_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_laplace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_laplace",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_laplace_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_laplace = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_laplace_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_laplace",0,0)
  result = (Octopus::Function *)&Octopus::octave_laplace;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_laplace_cdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_laplace_cdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_laplace_cdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_laplace_cdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_laplace_cdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_laplace_cdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_laplace_cdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_laplace_cdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_laplace_inv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_laplace_inv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_laplace_inv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_laplace_inv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_laplace_inv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_laplace_inv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_laplace_inv",0,0)
  result = (Octopus::Function *)&Octopus::octave_laplace_inv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_laplace_pdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_laplace_pdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_laplace_pdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_laplace_pdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_laplace_pdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_laplace_pdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_laplace_pdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_laplace_pdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_laplace_rnd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_laplace_rnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_laplace_rnd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_laplace_rnd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_laplace_rnd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_laplace_rnd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_laplace_rnd",0,0)
  result = (Octopus::Function *)&Octopus::octave_laplace_rnd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_laplacian_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_laplacian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_laplacian",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_laplacian_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_laplacian = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_laplacian_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_laplacian",0,0)
  result = (Octopus::Function *)&Octopus::octave_laplacian;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lcm_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_lcm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_lcm",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_lcm_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_lcm = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lcm_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_lcm",0,0)
  result = (Octopus::Function *)&Octopus::octave_lcm;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ldivide_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ldivide",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ldivide",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ldivide_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ldivide = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ldivide_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ldivide",0,0)
  result = (Octopus::Function *)&Octopus::octave_ldivide;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_le_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_le",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_le",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_le_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_le = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_le_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_le",0,0)
  result = (Octopus::Function *)&Octopus::octave_le;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_legendre_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_legendre",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_legendre",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_legendre_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_legendre = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_legendre_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_legendre",0,0)
  result = (Octopus::Function *)&Octopus::octave_legendre;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_length_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_length",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_length_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_length = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_length_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_length",0,0)
  result = (Octopus::Function *)&Octopus::octave_length;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lgamma_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_lgamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_lgamma",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_lgamma_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_lgamma = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lgamma_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_lgamma",0,0)
  result = (Octopus::Function *)&Octopus::octave_lgamma;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_limit_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_limit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_limit",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_limit_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_limit = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_limit_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_limit",0,0)
  result = (Octopus::Function *)&Octopus::octave_limit;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_line_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_line",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_line",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_line_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_line = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_line_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_line",0,0)
  result = (Octopus::Function *)&Octopus::octave_line;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_linprog_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_linprog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_linprog",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_linprog_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_linprog = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_linprog_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_linprog",0,0)
  result = (Octopus::Function *)&Octopus::octave_linprog;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_linsolve_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_linsolve",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_linsolve",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_linsolve_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_linsolve = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_linsolve_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_linsolve",0,0)
  result = (Octopus::Function *)&Octopus::octave_linsolve;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_linspace_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_linspace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_linspace",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_linspace_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_linspace = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_linspace_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_linspace",0,0)
  result = (Octopus::Function *)&Octopus::octave_linspace;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_load_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_load",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_load",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_load_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_load = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_load_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_load",0,0)
  result = (Octopus::Function *)&Octopus::octave_load;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_log_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_log",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_log",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_log_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_log = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_log_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_log",0,0)
  result = (Octopus::Function *)&Octopus::octave_log;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_log10_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_log10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_log10",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_log10_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_log10 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_log10_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_log10",0,0)
  result = (Octopus::Function *)&Octopus::octave_log10;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_log1p_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_log1p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_log1p",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_log1p_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_log1p = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_log1p_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_log1p",0,0)
  result = (Octopus::Function *)&Octopus::octave_log1p;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_log2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_log2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_log2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_log2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_log2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_log2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_log2",0,0)
  result = (Octopus::Function *)&Octopus::octave_log2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logical_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_logical",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_logical",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_logical_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_logical = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logical_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_logical",0,0)
  result = (Octopus::Function *)&Octopus::octave_logical;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logistic_cdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_logistic_cdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_logistic_cdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_logistic_cdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_logistic_cdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logistic_cdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_logistic_cdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_logistic_cdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logistic_inv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_logistic_inv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_logistic_inv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_logistic_inv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_logistic_inv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logistic_inv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_logistic_inv",0,0)
  result = (Octopus::Function *)&Octopus::octave_logistic_inv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logistic_pdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_logistic_pdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_logistic_pdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_logistic_pdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_logistic_pdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logistic_pdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_logistic_pdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_logistic_pdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logistic_regression_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_logistic_regression",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_logistic_regression",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_logistic_regression_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_logistic_regression = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logistic_regression_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_logistic_regression",0,0)
  result = (Octopus::Function *)&Octopus::octave_logistic_regression;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logit_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_logit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_logit",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_logit_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_logit = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logit_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_logit",0,0)
  result = (Octopus::Function *)&Octopus::octave_logit;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_loglog_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_loglog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_loglog",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_loglog_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_loglog = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_loglog_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_loglog",0,0)
  result = (Octopus::Function *)&Octopus::octave_loglog;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_loglogerr_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_loglogerr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_loglogerr",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_loglogerr_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_loglogerr = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_loglogerr_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_loglogerr",0,0)
  result = (Octopus::Function *)&Octopus::octave_loglogerr;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logm_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_logm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_logm",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_logm_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_logm = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logm_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_logm",0,0)
  result = (Octopus::Function *)&Octopus::octave_logm;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logncdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_logncdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_logncdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_logncdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_logncdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logncdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_logncdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_logncdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logninv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_logninv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_logninv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_logninv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_logninv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_logninv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_logninv",0,0)
  result = (Octopus::Function *)&Octopus::octave_logninv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lognpdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_lognpdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_lognpdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_lognpdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_lognpdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lognpdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_lognpdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_lognpdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lognrnd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_lognrnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_lognrnd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_lognrnd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_lognrnd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lognrnd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_lognrnd",0,0)
  result = (Octopus::Function *)&Octopus::octave_lognrnd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lognspace_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_lognspace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_lognspace",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_lognspace_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_lognspace = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lognspace_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_lognspace",0,0)
  result = (Octopus::Function *)&Octopus::octave_lognspace;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lookup_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_lookup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_lookup",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_lookup_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_lookup = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lookup_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_lookup",0,0)
  result = (Octopus::Function *)&Octopus::octave_lookup;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lscov_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_lscov",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_lscov",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_lscov_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_lscov = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lscov_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_lscov",0,0)
  result = (Octopus::Function *)&Octopus::octave_lscov;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lsode_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_lsode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_lsode",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_lsode_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_lsode = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lsode_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_lsode",0,0)
  result = (Octopus::Function *)&Octopus::octave_lsode;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lsqnonneg_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_lsqnonneg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_lsqnonneg",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_lsqnonneg_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_lsqnonneg = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lsqnonneg_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_lsqnonneg",0,0)
  result = (Octopus::Function *)&Octopus::octave_lsqnonneg;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lt_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_lt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_lt",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_lt_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_lt = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_lt_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_lt",0,0)
  result = (Octopus::Function *)&Octopus::octave_lt;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_magic_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_magic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_magic",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_magic_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_magic = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_magic_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_magic",0,0)
  result = (Octopus::Function *)&Octopus::octave_magic;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_manova_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_manova",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_manova",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_manova_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_manova = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_manova_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_manova",0,0)
  result = (Octopus::Function *)&Octopus::octave_manova;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_minus_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_minus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_minus",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_minus_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_minus = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_minus_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_minus",0,0)
  result = (Octopus::Function *)&Octopus::octave_minus;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mkpp_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_mkpp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_mkpp",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_mkpp_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_mkpp = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mkpp_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_mkpp",0,0)
  result = (Octopus::Function *)&Octopus::octave_mkpp;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mldivide_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_mldivide",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_mldivide",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_mldivide_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_mldivide = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mldivide_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_mldivide",0,0)
  result = (Octopus::Function *)&Octopus::octave_mldivide;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mod_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_mod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_mod",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_mod_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_mod = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mod_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_mod",0,0)
  result = (Octopus::Function *)&Octopus::octave_mod;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_moment_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_moment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_moment",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_moment_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_moment = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_moment_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_moment",0,0)
  result = (Octopus::Function *)&Octopus::octave_moment;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mpoles_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_mpoles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_mpoles",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_mpoles_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_mpoles = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mpoles_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_mpoles",0,0)
  result = (Octopus::Function *)&Octopus::octave_mpoles;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mpower_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_mpower",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_mpower",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_mpower_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_mpower = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mpower_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_mpower",0,0)
  result = (Octopus::Function *)&Octopus::octave_mpower;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mrdivide_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_mrdivide",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_mrdivide",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_mrdivide_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_mrdivide = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mrdivide_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_mrdivide",0,0)
  result = (Octopus::Function *)&Octopus::octave_mrdivide;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mu2lin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_mu2lin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_mu2lin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_mu2lin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_mu2lin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_mu2lin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_mu2lin",0,0)
  result = (Octopus::Function *)&Octopus::octave_mu2lin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_na_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_na",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_na",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_na_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_na = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_na_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_na",0,0)
  result = (Octopus::Function *)&Octopus::octave_na;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_nan_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_nan",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_nan_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_nan = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_nan_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_nan",0,0)
  result = (Octopus::Function *)&Octopus::octave_nan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_nextpow2_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_nextpow2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_nextpow2",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_nextpow2_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_nextpow2 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_nextpow2_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_nextpow2",0,0)
  result = (Octopus::Function *)&Octopus::octave_nextpow2;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_nnz_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_nnz",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_nnz",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_nnz_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_nnz = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_nnz_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_nnz",0,0)
  result = (Octopus::Function *)&Octopus::octave_nnz;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_nonzeros_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_nonzeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_nonzeros",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_nonzeros_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_nonzeros = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_nonzeros_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_nonzeros",0,0)
  result = (Octopus::Function *)&Octopus::octave_nonzeros;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_norm_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_norm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_norm",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_norm_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_norm = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_norm_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_norm",0,0)
  result = (Octopus::Function *)&Octopus::octave_norm;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_normcdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_normcdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_normcdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_normcdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_normcdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_normcdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_normcdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_normcdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_normest_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_normest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_normest",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_normest_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_normest = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_normest_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_normest",0,0)
  result = (Octopus::Function *)&Octopus::octave_normest;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_normest1_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_normest1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_normest1",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_normest1_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_normest1 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_normest1_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_normest1",0,0)
  result = (Octopus::Function *)&Octopus::octave_normest1;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_norminv_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_norminv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_norminv",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_norminv_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_norminv = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_norminv_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_norminv",0,0)
  result = (Octopus::Function *)&Octopus::octave_norminv;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_normpdf_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_normpdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_normpdf",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_normpdf_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_normpdf = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_normpdf_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_normpdf",0,0)
  result = (Octopus::Function *)&Octopus::octave_normpdf;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_normrnd_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_normrnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_normrnd",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_normrnd_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_normrnd = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_normrnd_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_normrnd",0,0)
  result = (Octopus::Function *)&Octopus::octave_normrnd;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_nth_element_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_nth_element",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_nth_element",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_nth_element_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_nth_element = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_nth_element_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_nth_element",0,0)
  result = (Octopus::Function *)&Octopus::octave_nth_element;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_nth_root_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_nth_root",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_nth_root",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_nth_root_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_nth_root = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_nth_root_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_nth_root",0,0)
  result = (Octopus::Function *)&Octopus::octave_nth_root;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_null_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_null",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_null",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_null_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_null = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_null_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_null",0,0)
  result = (Octopus::Function *)&Octopus::octave_null;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_numel_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_numel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_numel",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_numel_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_numel = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_numel_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_numel",0,0)
  result = (Octopus::Function *)&Octopus::octave_numel;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ode23_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ode23",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ode23",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ode23_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ode23 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ode23_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ode23",0,0)
  result = (Octopus::Function *)&Octopus::octave_ode23;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ode45_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ode45",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ode45",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ode45_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ode45 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ode45_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ode45",0,0)
  result = (Octopus::Function *)&Octopus::octave_ode45;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ols_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ols",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ols_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ols = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ols_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ols",0,0)
  result = (Octopus::Function *)&Octopus::octave_ols;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ones_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_ones",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_ones_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_ones = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_ones_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_ones",0,0)
  result = (Octopus::Function *)&Octopus::octave_ones;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_prod_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_prod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_prod",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_prod_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_prod = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_prod_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_prod",0,0)
  result = (Octopus::Function *)&Octopus::octave_prod;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_power_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_power",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_power",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_power_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_power = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_power_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_power",0,0)
  result = (Octopus::Function *)&Octopus::octave_power;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sin",0,0)
  result = (Octopus::Function *)&Octopus::octave_sin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sqrt_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sqrt",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sqrt_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sqrt = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sqrt_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sqrt",0,0)
  result = (Octopus::Function *)&Octopus::octave_sqrt;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sum_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sum",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sum_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sum = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sum_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sum",0,0)
  result = (Octopus::Function *)&Octopus::octave_sum;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sumsq_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sumsq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sumsq",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sumsq_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sumsq = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sumsq_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sumsq",0,0)
  result = (Octopus::Function *)&Octopus::octave_sumsq;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tan_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_tan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_tan",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_tan_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_tan = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tan_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_tan",0,0)
  result = (Octopus::Function *)&Octopus::octave_tan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tanh_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_tanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_tanh",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_tanh_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_tanh = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tanh_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_tanh",0,0)
  result = (Octopus::Function *)&Octopus::octave_tanh;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sinh_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_sinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_sinh",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_sinh_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_sinh = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_sinh_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_sinh",0,0)
  result = (Octopus::Function *)&Octopus::octave_sinh;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bin_values_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_bin_values",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_bin_values",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_bin_values_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_bin_values = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_bin_values_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_bin_values",0,0)
  result = (Octopus::Function *)&Octopus::octave_bin_values;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_catmullrom_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_catmullrom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_catmullrom",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_catmullrom_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_catmullrom = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_catmullrom_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_catmullrom",0,0)
  result = (Octopus::Function *)&Octopus::octave_catmullrom;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csape_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_csape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_csape",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_csape_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_csape = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csape_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_csape",0,0)
  result = (Octopus::Function *)&Octopus::octave_csape;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csapi_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_csapi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_csapi",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_csapi_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_csapi = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csapi_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_csapi",0,0)
  result = (Octopus::Function *)&Octopus::octave_csapi;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csaps_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_csaps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_csaps",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_csaps_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_csaps = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csaps_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_csaps",0,0)
  result = (Octopus::Function *)&Octopus::octave_csaps;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csaps_sel_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_csaps_sel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_csaps_sel",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_csaps_sel_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_csaps_sel = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_csaps_sel_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_csaps_sel",0,0)
  result = (Octopus::Function *)&Octopus::octave_csaps_sel;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dedup_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dedup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dedup",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dedup_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dedup = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dedup_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dedup",0,0)
  result = (Octopus::Function *)&Octopus::octave_dedup;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fnder_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fnder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fnder",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fnder_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fnder = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fnder_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fnder",0,0)
  result = (Octopus::Function *)&Octopus::octave_fnder;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fnplt_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fnplt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fnplt",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fnplt_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fnplt = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fnplt_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fnplt",0,0)
  result = (Octopus::Function *)&Octopus::octave_fnplt;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fnval_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fnval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fnval",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fnval_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fnval = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fnval_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fnval",0,0)
  result = (Octopus::Function *)&Octopus::octave_fnval;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_regularization_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_regularization",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_regularization",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_regularization_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_regularization = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_regularization_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_regularization",0,0)
  result = (Octopus::Function *)&Octopus::octave_regularization;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_regularization2D_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_regularization2D",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_regularization2D",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_regularization2D_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_regularization2D = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_regularization2D_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_regularization2D",0,0)
  result = (Octopus::Function *)&Octopus::octave_regularization2D;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tpaps_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_tpaps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_tpaps",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_tpaps_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_tpaps = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tpaps_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_tpaps",0,0)
  result = (Octopus::Function *)&Octopus::octave_tpaps;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tps_val_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_tps_val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_tps_val",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_tps_val_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_tps_val = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tps_val_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_tps_val",0,0)
  result = (Octopus::Function *)&Octopus::octave_tps_val;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tps_val_der_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_tps_val_der",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_tps_val_der",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_tps_val_der_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_tps_val_der = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_tps_val_der_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_tps_val_der",0,0)
  result = (Octopus::Function *)&Octopus::octave_tps_val_der;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_normalize_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_normalize",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_normalize_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_normalize = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_normalize_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_normalize",0,0)
  result = (Octopus::Function *)&Octopus::octave_normalize;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gaindb_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_gaindb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_gaindb",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_gaindb_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_gaindb = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_gaindb_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_gaindb",0,0)
  result = (Octopus::Function *)&Octopus::octave_gaindb;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_crestfactor_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_crestfactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_crestfactor",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_crestfactor_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_crestfactor = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_crestfactor_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_crestfactor",0,0)
  result = (Octopus::Function *)&Octopus::octave_crestfactor;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_uquant_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_uquant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_uquant",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_uquant_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_uquant = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_uquant_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_uquant",0,0)
  result = (Octopus::Function *)&Octopus::octave_uquant;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_firwin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_firwin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_firwin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_firwin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_firwin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_firwin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_firwin",0,0)
  result = (Octopus::Function *)&Octopus::octave_firwin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_firkaiser_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_firkaiser",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_firkaiser",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_firkaiser_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_firkaiser = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_firkaiser_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_firkaiser",0,0)
  result = (Octopus::Function *)&Octopus::octave_firkaiser;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fir2long_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_fir2long",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_fir2long",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_fir2long_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_fir2long = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_fir2long_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_fir2long",0,0)
  result = (Octopus::Function *)&Octopus::octave_fir2long;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_long2fir_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_long2fir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_long2fir",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_long2fir_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_long2fir = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_long2fir_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_long2fir",0,0)
  result = (Octopus::Function *)&Octopus::octave_long2fir;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freqwin_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_freqwin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_freqwin",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_freqwin_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_freqwin = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freqwin_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_freqwin",0,0)
  result = (Octopus::Function *)&Octopus::octave_freqwin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_firfilter_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_firfilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_firfilter",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_firfilter_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_firfilter = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_firfilter_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_firfilter",0,0)
  result = (Octopus::Function *)&Octopus::octave_firfilter;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_blfilter_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_blfilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_blfilter",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_blfilter_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_blfilter = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_blfilter_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_blfilter",0,0)
  result = (Octopus::Function *)&Octopus::octave_blfilter;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_warpedblfilter_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_warpedblfilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_warpedblfilter",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_warpedblfilter_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_warpedblfilter = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_warpedblfilter_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_warpedblfilter",0,0)
  result = (Octopus::Function *)&Octopus::octave_warpedblfilter;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freqfilter_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_freqfilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_freqfilter",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_freqfilter_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_freqfilter = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freqfilter_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_freqfilter",0,0)
  result = (Octopus::Function *)&Octopus::octave_freqfilter;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pfilt_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_pfilt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_pfilt",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_pfilt_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_pfilt = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pfilt_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_pfilt",0,0)
  result = (Octopus::Function *)&Octopus::octave_pfilt;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_magresp_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_magresp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_magresp",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_magresp_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_magresp = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_magresp_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_magresp",0,0)
  result = (Octopus::Function *)&Octopus::octave_magresp;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_transferfunction_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_transferfunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_transferfunction",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_transferfunction_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_transferfunction = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_transferfunction_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_transferfunction",0,0)
  result = (Octopus::Function *)&Octopus::octave_transferfunction;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pgrdelay_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_pgrdelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_pgrdelay",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_pgrdelay_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_pgrdelay = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_pgrdelay_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_pgrdelay",0,0)
  result = (Octopus::Function *)&Octopus::octave_pgrdelay;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_rampup_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_rampup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_rampup",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_rampup_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_rampup = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_rampup_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_rampup",0,0)
  result = (Octopus::Function *)&Octopus::octave_rampup;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_rampdown_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_rampdown",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_rampdown",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_rampdown_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_rampdown = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_rampdown_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_rampdown",0,0)
  result = (Octopus::Function *)&Octopus::octave_rampdown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_thresh_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_thresh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_thresh",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_thresh_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_thresh = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_thresh_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_thresh",0,0)
  result = (Octopus::Function *)&Octopus::octave_thresh;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_largestr_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_largestr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_largestr",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_largestr_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_largestr = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_largestr_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_largestr",0,0)
  result = (Octopus::Function *)&Octopus::octave_largestr;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_largestn_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_largestn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_largestn",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_largestn_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_largestn = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_largestn_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_largestn",0,0)
  result = (Octopus::Function *)&Octopus::octave_largestn;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dynlimit_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_dynlimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_dynlimit",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_dynlimit_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_dynlimit = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_dynlimit_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_dynlimit",0,0)
  result = (Octopus::Function *)&Octopus::octave_dynlimit;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_groupthresh_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_groupthresh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_groupthresh",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_groupthresh_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_groupthresh = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_groupthresh_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_groupthresh",0,0)
  result = (Octopus::Function *)&Octopus::octave_groupthresh;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_rgb2jpeg_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_rgb2jpeg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_rgb2jpeg",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_rgb2jpeg_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_rgb2jpeg = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_rgb2jpeg_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_rgb2jpeg",0,0)
  result = (Octopus::Function *)&Octopus::octave_rgb2jpeg;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_jpeg2rgb_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_jpeg2rgb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_jpeg2rgb",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_jpeg2rgb_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_jpeg2rgb = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_jpeg2rgb_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_jpeg2rgb",0,0)
  result = (Octopus::Function *)&Octopus::octave_jpeg2rgb;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_qam4_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_qam4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_qam4",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_qam4_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_qam4 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_qam4_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_qam4",0,0)
  result = (Octopus::Function *)&Octopus::octave_qam4;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_iqam4_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_iqam4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_iqam4",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_iqam4_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_iqam4 = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_iqam4_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_iqam4",0,0)
  result = (Octopus::Function *)&Octopus::octave_iqam4;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_semiaudplot_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_semiaudplot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_semiaudplot",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_semiaudplot_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_semiaudplot = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_semiaudplot_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_semiaudplot",0,0)
  result = (Octopus::Function *)&Octopus::octave_semiaudplot;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_audtofreq_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_audtofreq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_audtofreq",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_audtofreq_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_audtofreq = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_audtofreq_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_audtofreq",0,0)
  result = (Octopus::Function *)&Octopus::octave_audtofreq;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freqtoaud_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_freqtoaud",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_freqtoaud",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_freqtoaud_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_freqtoaud = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freqtoaud_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_freqtoaud",0,0)
  result = (Octopus::Function *)&Octopus::octave_freqtoaud;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_audspace_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_audspace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_audspace",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_audspace_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_audspace = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_audspace_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_audspace",0,0)
  result = (Octopus::Function *)&Octopus::octave_audspace;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_audspacebw_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_audspacebw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_audspacebw",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_audspacebw_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_audspacebw = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_audspacebw_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_audspacebw",0,0)
  result = (Octopus::Function *)&Octopus::octave_audspacebw;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_erbtofreq_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_erbtofreq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_erbtofreq",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_erbtofreq_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_erbtofreq = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_erbtofreq_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_erbtofreq",0,0)
  result = (Octopus::Function *)&Octopus::octave_erbtofreq;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freqtoerb_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_freqtoerb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_freqtoerb",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_freqtoerb_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_freqtoerb = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_freqtoerb_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_freqtoerb",0,0)
  result = (Octopus::Function *)&Octopus::octave_freqtoerb;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_erbspace_set(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *arg1 = (Octopus::Function *) 0 ;
  
  SWIG_check_num_args("Octopus::octave_erbspace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Octopus::octave_erbspace",1,"Octopus::Function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Octopus__Function,0))){
    SWIG_fail_ptr("octave_erbspace_set",1,SWIGTYPE_p_Octopus__Function);
  }
  
  Octopus::octave_erbspace = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_erbspace_get(lua_State* L) {
  int SWIG_arg = 0;
  Octopus::Function *result = 0 ;
  
  SWIG_check_num_args("Octopus::octave_erbspace",0,0)
  result = (Octopus::Function *)&Octopus::octave_erbspace;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__Function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_evalFunc__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  Octopus::OctopusValueList *arg2 = 0 ;
  int arg3 ;
  std::string temp1 ;
  Octopus::OctopusValueList result;
  
  SWIG_check_num_args("Octopus::evalFunc",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Octopus::evalFunc",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::evalFunc",2,"Octopus::OctopusValueList const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Octopus::evalFunc",3,"int");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("evalFunc",2,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  {
    try
    {
      result = Octopus::evalFunc((std::string const &)*arg1,(Octopus::OctopusValueList const &)*arg2,arg3);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValueList * resultptr = new Octopus::OctopusValueList((const Octopus::OctopusValueList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_evalFunc__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  Octopus::OctopusValueList *arg2 = 0 ;
  std::string temp1 ;
  Octopus::OctopusValueList result;
  
  SWIG_check_num_args("Octopus::evalFunc",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Octopus::evalFunc",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Octopus::evalFunc",2,"Octopus::OctopusValueList const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Octopus__OctopusValueList,0))){
    SWIG_fail_ptr("evalFunc",2,SWIGTYPE_p_Octopus__OctopusValueList);
  }
  
  {
    try
    {
      result = Octopus::evalFunc((std::string const &)*arg1,(Octopus::OctopusValueList const &)*arg2);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  {
    Octopus::OctopusValueList * resultptr = new Octopus::OctopusValueList((const Octopus::OctopusValueList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Octopus__OctopusValueList,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_evalFunc(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_evalFunc__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Octopus__OctopusValueList, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_evalFunc__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'evalFunc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Octopus::evalFunc(std::string const &,Octopus::OctopusValueList const &,int)\n"
    "    Octopus::evalFunc(std::string const &,Octopus::OctopusValueList const &)\n");
  lua_error(L);return 0;
}


static int _wrap_convert_octave_value_list(lua_State* L) {
  int SWIG_arg = 0;
  lua_State *arg1 = (lua_State *) 0 ;
  Octopus::OctopusValueList *result = 0 ;
  
  arg1 = L;
  SWIG_check_num_args("convert_octave_value_list",0,0)
  {
    try
    {
      result = (Octopus::OctopusValueList *)convert_octave_value_list(arg1);
    }
    catch (const std::invalid_argument& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(const std::runtime_error& e)
    {
      SWIG_exception(SWIG_ValueError, e.what());
    }
    catch(...)
    {
      std::cout << "unknown exception\n";
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Octopus__OctopusValueList,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "octave_fft", _wrap_octave_fft_get, _wrap_octave_fft_set },
    { "octave_ifft", _wrap_octave_ifft_get, _wrap_octave_ifft_set },
    { "octave_fft2", _wrap_octave_fft2_get, _wrap_octave_fft2_set },
    { "octave_ifft2", _wrap_octave_ifft2_get, _wrap_octave_ifft2_set },
    { "octave_fftconv", _wrap_octave_fftconv_get, _wrap_octave_fftconv_set },
    { "octave_fftfilt", _wrap_octave_fftfilt_get, _wrap_octave_fftfilt_set },
    { "octave_fftn", _wrap_octave_fftn_get, _wrap_octave_fftn_set },
    { "octave_fftshift", _wrap_octave_fftshift_get, _wrap_octave_fftshift_set },
    { "octave_fftw", _wrap_octave_fftw_get, _wrap_octave_fftw_set },
    { "octave_ifftn", _wrap_octave_ifftn_get, _wrap_octave_ifftn_set },
    { "octave_ifftshift", _wrap_octave_ifftshift_get, _wrap_octave_ifftshift_set },
    { "octave_ifht", _wrap_octave_ifht_get, _wrap_octave_ifht_set },
    { "octave_ifourier", _wrap_octave_ifourier_get, _wrap_octave_ifourier_set },
    { "octave_ifwht", _wrap_octave_ifwht_get, _wrap_octave_ifwht_set },
    { "octave_ifwt", _wrap_octave_ifwt_get, _wrap_octave_ifwt_set },
    { "octave_ifwt2", _wrap_octave_ifwt2_get, _wrap_octave_ifwt2_set },
    { "octave_buffer", _wrap_octave_buffer_get, _wrap_octave_buffer_set },
    { "octave_chirp", _wrap_octave_chirp_get, _wrap_octave_chirp_set },
    { "octave_cmorwavf", _wrap_octave_cmorwavf_get, _wrap_octave_cmorwavf_set },
    { "octave_gauspuls", _wrap_octave_gauspuls_get, _wrap_octave_gauspuls_set },
    { "octave_gmonopuls", _wrap_octave_gmonopuls_get, _wrap_octave_gmonopuls_set },
    { "octave_mexihat", _wrap_octave_mexihat_get, _wrap_octave_mexihat_set },
    { "octave_meyeraux", _wrap_octave_meyeraux_get, _wrap_octave_meyeraux_set },
    { "octave_morlet", _wrap_octave_morlet_get, _wrap_octave_morlet_set },
    { "octave_pulstran", _wrap_octave_pulstran_get, _wrap_octave_pulstran_set },
    { "octave_rectpuls", _wrap_octave_rectpuls_get, _wrap_octave_rectpuls_set },
    { "octave_sawtooth", _wrap_octave_sawtooth_get, _wrap_octave_sawtooth_set },
    { "octave_shanwavf", _wrap_octave_shanwavf_get, _wrap_octave_shanwavf_set },
    { "octave_shiftdata", _wrap_octave_shiftdata_get, _wrap_octave_shiftdata_set },
    { "octave_sigmoid_train", _wrap_octave_sigmoid_train_get, _wrap_octave_sigmoid_train_set },
    { "octave_specgram", _wrap_octave_specgram_get, _wrap_octave_specgram_set },
    { "octave_square", _wrap_octave_square_get, _wrap_octave_square_set },
    { "octave_tripuls", _wrap_octave_tripuls_get, _wrap_octave_tripuls_set },
    { "octave_udecode", _wrap_octave_udecode_get, _wrap_octave_udecode_set },
    { "octave_uencoder", _wrap_octave_uencoder_get, _wrap_octave_uencoder_set },
    { "octave_unshiftdata", _wrap_octave_unshiftdata_get, _wrap_octave_unshiftdata_set },
    { "octave_findpeaks", _wrap_octave_findpeaks_get, _wrap_octave_findpeaks_set },
    { "octave_peak2peak", _wrap_octave_peak2peak_get, _wrap_octave_peak2peak_set },
    { "octave_peak2rms", _wrap_octave_peak2rms_get, _wrap_octave_peak2rms_set },
    { "octave_rms", _wrap_octave_rms_get, _wrap_octave_rms_set },
    { "octave_rssq", _wrap_octave_rssq_get, _wrap_octave_rssq_set },
    { "octave_cconv", _wrap_octave_cconv_get, _wrap_octave_cconv_set },
    { "octave_convmtx", _wrap_octave_convmtx_get, _wrap_octave_convmtx_set },
    { "octave_wconv", _wrap_octave_wconv_get, _wrap_octave_wconv_set },
    { "octave_xcorr", _wrap_octave_xcorr_get, _wrap_octave_xcorr_set },
    { "octave_xcorr2", _wrap_octave_xcorr2_get, _wrap_octave_xcorr2_set },
    { "octave_xcov", _wrap_octave_xcov_get, _wrap_octave_xcov_set },
    { "octave_filtfilt", _wrap_octave_filtfilt_get, _wrap_octave_filtfilt_set },
    { "octave_fltic", _wrap_octave_fltic_get, _wrap_octave_fltic_set },
    { "octave_medfilt1", _wrap_octave_medfilt1_get, _wrap_octave_medfilt1_set },
    { "octave_movingrms", _wrap_octave_movingrms_get, _wrap_octave_movingrms_set },
    { "octave_sgolayfilt", _wrap_octave_sgolayfilt_get, _wrap_octave_sgolayfilt_set },
    { "octave_sosfilt", _wrap_octave_sosfilt_get, _wrap_octave_sosfilt_set },
    { "octave_freqs", _wrap_octave_freqs_get, _wrap_octave_freqs_set },
    { "octave_freqs_plot", _wrap_octave_freqs_plot_get, _wrap_octave_freqs_plot_set },
    { "octave_freqz", _wrap_octave_freqz_get, _wrap_octave_freqz_set },
    { "octave_freqz_plot", _wrap_octave_freqz_plot_get, _wrap_octave_freqz_plot_set },
    { "octave_impz", _wrap_octave_impz_get, _wrap_octave_impz_set },
    { "octave_zplane", _wrap_octave_zplane_get, _wrap_octave_zplane_set },
    { "octave_filter", _wrap_octave_filter_get, _wrap_octave_filter_set },
    { "octave_filter2", _wrap_octave_filter2_get, _wrap_octave_filter2_set },
    { "octave_fir1", _wrap_octave_fir1_get, _wrap_octave_fir1_set },
    { "octave_fir2", _wrap_octave_fir2_get, _wrap_octave_fir2_set },
    { "octave_firls", _wrap_octave_firls_get, _wrap_octave_firls_set },
    { "octave_sinc", _wrap_octave_sinc_get, _wrap_octave_sinc_set },
    { "octave_unwrap", _wrap_octave_unwrap_get, _wrap_octave_unwrap_set },
    { "octave_bartlett", _wrap_octave_bartlett_get, _wrap_octave_bartlett_set },
    { "octave_blackman", _wrap_octave_blackman_get, _wrap_octave_blackman_set },
    { "octave_blackmanharris", _wrap_octave_blackmanharris_get, _wrap_octave_blackmanharris_set },
    { "octave_blackmannuttal", _wrap_octave_blackmannuttal_get, _wrap_octave_blackmannuttal_set },
    { "octave_dftmtx", _wrap_octave_dftmtx_get, _wrap_octave_dftmtx_set },
    { "octave_hamming", _wrap_octave_hamming_get, _wrap_octave_hamming_set },
    { "octave_hann", _wrap_octave_hann_get, _wrap_octave_hann_set },
    { "octave_hanning", _wrap_octave_hanning_get, _wrap_octave_hanning_set },
    { "octave_pchip", _wrap_octave_pchip_get, _wrap_octave_pchip_set },
    { "octave_periodogram", _wrap_octave_periodogram_get, _wrap_octave_periodogram_set },
    { "octave_sinetone", _wrap_octave_sinetone_get, _wrap_octave_sinetone_set },
    { "octave_sinewave", _wrap_octave_sinewave_get, _wrap_octave_sinewave_set },
    { "octave_spectral_adf", _wrap_octave_spectral_adf_get, _wrap_octave_spectral_adf_set },
    { "octave_spectral_xdf", _wrap_octave_spectral_xdf_get, _wrap_octave_spectral_xdf_set },
    { "octave_spencer", _wrap_octave_spencer_get, _wrap_octave_spencer_set },
    { "octave_stft", _wrap_octave_stft_get, _wrap_octave_stft_set },
    { "octave_synthesis", _wrap_octave_synthesis_get, _wrap_octave_synthesis_set },
    { "octave_yulewalker", _wrap_octave_yulewalker_get, _wrap_octave_yulewalker_set },
    { "octave_polystab", _wrap_octave_polystab_get, _wrap_octave_polystab_set },
    { "octave_residued", _wrap_octave_residued_get, _wrap_octave_residued_set },
    { "octave_residuez", _wrap_octave_residuez_get, _wrap_octave_residuez_set },
    { "octave_sos2ss", _wrap_octave_sos2ss_get, _wrap_octave_sos2ss_set },
    { "octave_sos2tf", _wrap_octave_sos2tf_get, _wrap_octave_sos2tf_set },
    { "octave_sos2zp", _wrap_octave_sos2zp_get, _wrap_octave_sos2zp_set },
    { "octave_ss2tf", _wrap_octave_ss2tf_get, _wrap_octave_ss2tf_set },
    { "octave_ss2zp", _wrap_octave_ss2zp_get, _wrap_octave_ss2zp_set },
    { "octave_tf2sos", _wrap_octave_tf2sos_get, _wrap_octave_tf2sos_set },
    { "octave_tf2ss", _wrap_octave_tf2ss_get, _wrap_octave_tf2ss_set },
    { "octave_tf2zp", _wrap_octave_tf2zp_get, _wrap_octave_tf2zp_set },
    { "octave_zp2sos", _wrap_octave_zp2sos_get, _wrap_octave_zp2sos_set },
    { "octave_zp2ss", _wrap_octave_zp2ss_get, _wrap_octave_zp2ss_set },
    { "octave_zp2tf", _wrap_octave_zp2tf_get, _wrap_octave_zp2tf_set },
    { "octave_besselap", _wrap_octave_besselap_get, _wrap_octave_besselap_set },
    { "octave_besself", _wrap_octave_besself_get, _wrap_octave_besself_set },
    { "octave_bilinear", _wrap_octave_bilinear_get, _wrap_octave_bilinear_set },
    { "octave_buttap", _wrap_octave_buttap_get, _wrap_octave_buttap_set },
    { "octave_butter", _wrap_octave_butter_get, _wrap_octave_butter_set },
    { "octave_buttord", _wrap_octave_buttord_get, _wrap_octave_buttord_set },
    { "octave_cheb", _wrap_octave_cheb_get, _wrap_octave_cheb_set },
    { "octave_cheb1ap", _wrap_octave_cheb1ap_get, _wrap_octave_cheb1ap_set },
    { "octave_cheb1ord", _wrap_octave_cheb1ord_get, _wrap_octave_cheb1ord_set },
    { "octave_cheb2ap", _wrap_octave_cheb2ap_get, _wrap_octave_cheb2ap_set },
    { "octave_cheb2ord", _wrap_octave_cheb2ord_get, _wrap_octave_cheb2ord_set },
    { "octave_chebywin", _wrap_octave_chebywin_get, _wrap_octave_chebywin_set },
    { "octave_cheby1", _wrap_octave_cheby1_get, _wrap_octave_cheby1_set },
    { "octave_cheby2", _wrap_octave_cheby2_get, _wrap_octave_cheby2_set },
    { "octave_ellip", _wrap_octave_ellip_get, _wrap_octave_ellip_set },
    { "octave_ellipap", _wrap_octave_ellipap_get, _wrap_octave_ellipap_set },
    { "octave_ellipord", _wrap_octave_ellipord_get, _wrap_octave_ellipord_set },
    { "octave_impinvar", _wrap_octave_impinvar_get, _wrap_octave_impinvar_set },
    { "octave_ncauer", _wrap_octave_ncauer_get, _wrap_octave_ncauer_set },
    { "octave_pei_tseng_notch", _wrap_octave_pei_tseng_notch_get, _wrap_octave_pei_tseng_notch_set },
    { "octave_sftrans", _wrap_octave_sftrans_get, _wrap_octave_sftrans_set },
    { "octave_cl2bp", _wrap_octave_cl2bp_get, _wrap_octave_cl2bp_set },
    { "octave_kaiserord", _wrap_octave_kaiserord_get, _wrap_octave_kaiserord_set },
    { "octave_qp_kaiser", _wrap_octave_qp_kaiser_get, _wrap_octave_qp_kaiser_set },
    { "octave_remez", _wrap_octave_remez_get, _wrap_octave_remez_set },
    { "octave_sgplay", _wrap_octave_sgplay_get, _wrap_octave_sgplay_set },
    { "octave_bitrevorder", _wrap_octave_bitrevorder_get, _wrap_octave_bitrevorder_set },
    { "octave_cceps", _wrap_octave_cceps_get, _wrap_octave_cceps_set },
    { "octave_cplxreal", _wrap_octave_cplxreal_get, _wrap_octave_cplxreal_set },
    { "octave_czt", _wrap_octave_czt_get, _wrap_octave_czt_set },
    { "octave_dct", _wrap_octave_dct_get, _wrap_octave_dct_set },
    { "octave_dct2", _wrap_octave_dct2_get, _wrap_octave_dct2_set },
    { "octave_dctmtx", _wrap_octave_dctmtx_get, _wrap_octave_dctmtx_set },
    { "octave_digitrevorder", _wrap_octave_digitrevorder_get, _wrap_octave_digitrevorder_set },
    { "octave_dst", _wrap_octave_dst_get, _wrap_octave_dst_set },
    { "octave_dwt", _wrap_octave_dwt_get, _wrap_octave_dwt_set },
    { "octave_rceps", _wrap_octave_rceps_get, _wrap_octave_rceps_set },
    { "octave_ar_psd", _wrap_octave_ar_psd_get, _wrap_octave_ar_psd_set },
    { "octave_cohere", _wrap_octave_cohere_get, _wrap_octave_cohere_set },
    { "octave_cpsd", _wrap_octave_cpsd_get, _wrap_octave_cpsd_set },
    { "octave_csd", _wrap_octave_csd_get, _wrap_octave_csd_set },
    { "octave_db2pow", _wrap_octave_db2pow_get, _wrap_octave_db2pow_set },
    { "octave_mscohere", _wrap_octave_mscohere_get, _wrap_octave_mscohere_set },
    { "octave_pburg", _wrap_octave_pburg_get, _wrap_octave_pburg_set },
    { "octave_pow2db", _wrap_octave_pow2db_get, _wrap_octave_pow2db_set },
    { "octave_pwelch", _wrap_octave_pwelch_get, _wrap_octave_pwelch_set },
    { "octave_pyulear", _wrap_octave_pyulear_get, _wrap_octave_pyulear_set },
    { "octave_tfe", _wrap_octave_tfe_get, _wrap_octave_tfe_set },
    { "octave_tfestimate", _wrap_octave_tfestimate_get, _wrap_octave_tfestimate_set },
    { "octave___power", _wrap_octave___power_get, _wrap_octave___power_set },
    { "octave_barthannwin", _wrap_octave_barthannwin_get, _wrap_octave_barthannwin_set },
    { "octave_bohmanwin", _wrap_octave_bohmanwin_get, _wrap_octave_bohmanwin_set },
    { "octave_boxcar", _wrap_octave_boxcar_get, _wrap_octave_boxcar_set },
    { "octave_flattopwin", _wrap_octave_flattopwin_get, _wrap_octave_flattopwin_set },
    { "octave_chebwin", _wrap_octave_chebwin_get, _wrap_octave_chebwin_set },
    { "octave_gaussian", _wrap_octave_gaussian_get, _wrap_octave_gaussian_set },
    { "octave_gausswin", _wrap_octave_gausswin_get, _wrap_octave_gausswin_set },
    { "octave_kaiser", _wrap_octave_kaiser_get, _wrap_octave_kaiser_set },
    { "octave_nuttalwin", _wrap_octave_nuttalwin_get, _wrap_octave_nuttalwin_set },
    { "octave_parzenwin", _wrap_octave_parzenwin_get, _wrap_octave_parzenwin_set },
    { "octave_rectwin", _wrap_octave_rectwin_get, _wrap_octave_rectwin_set },
    { "octave_tukeywin", _wrap_octave_tukeywin_get, _wrap_octave_tukeywin_set },
    { "octave_ultrwin", _wrap_octave_ultrwin_get, _wrap_octave_ultrwin_set },
    { "octave_welchwin", _wrap_octave_welchwin_get, _wrap_octave_welchwin_set },
    { "octave_window", _wrap_octave_window_get, _wrap_octave_window_set },
    { "octave_arburg", _wrap_octave_arburg_get, _wrap_octave_arburg_set },
    { "octave_aryule", _wrap_octave_aryule_get, _wrap_octave_aryule_set },
    { "octave_invfreq", _wrap_octave_invfreq_get, _wrap_octave_invfreq_set },
    { "octave_invfreqz", _wrap_octave_invfreqz_get, _wrap_octave_invfreqz_set },
    { "octave_invfreqs", _wrap_octave_invfreqs_get, _wrap_octave_invfreqs_set },
    { "octave_levinson", _wrap_octave_levinson_get, _wrap_octave_levinson_set },
    { "octave_data2fun", _wrap_octave_data2fun_get, _wrap_octave_data2fun_set },
    { "octave_decimate", _wrap_octave_decimate_get, _wrap_octave_decimate_set },
    { "octave_interp", _wrap_octave_interp_get, _wrap_octave_interp_set },
    { "octave_resample", _wrap_octave_resample_get, _wrap_octave_resample_set },
    { "octave_upfirdn", _wrap_octave_upfirdn_get, _wrap_octave_upfirdn_set },
    { "octave_upsample", _wrap_octave_upsample_get, _wrap_octave_upsample_set },
    { "octave_clustersegment", _wrap_octave_clustersegment_get, _wrap_octave_clustersegment_set },
    { "octave_fracshift", _wrap_octave_fracshift_get, _wrap_octave_fracshift_set },
    { "octave_marcumq", _wrap_octave_marcumq_get, _wrap_octave_marcumq_set },
    { "octave_primitive", _wrap_octave_primitive_get, _wrap_octave_primitive_set },
    { "octave_sampled2continuous", _wrap_octave_sampled2continuous_get, _wrap_octave_sampled2continuous_set },
    { "octave_schtrig", _wrap_octave_schtrig_get, _wrap_octave_schtrig_set },
    { "octave_upsamplefill", _wrap_octave_upsamplefill_get, _wrap_octave_upsamplefill_set },
    { "octave_wkeep", _wrap_octave_wkeep_get, _wrap_octave_wkeep_set },
    { "octave_wrev", _wrap_octave_wrev_get, _wrap_octave_wrev_set },
    { "octave_zerocrossing", _wrap_octave_zerocrossing_get, _wrap_octave_zerocrossing_set },
    { "octave_fht", _wrap_octave_fht_get, _wrap_octave_fht_set },
    { "octave_fwht", _wrap_octave_fwht_get, _wrap_octave_fwht_set },
    { "octave_hilbert", _wrap_octave_hilbert_get, _wrap_octave_hilbert_set },
    { "octave_idct", _wrap_octave_idct_get, _wrap_octave_idct_set },
    { "octave_idct2", _wrap_octave_idct2_get, _wrap_octave_idct2_set },
    { "octave_max", _wrap_octave_max_get, _wrap_octave_max_set },
    { "octave_mean", _wrap_octave_mean_get, _wrap_octave_mean_set },
    { "octave_meansq", _wrap_octave_meansq_get, _wrap_octave_meansq_set },
    { "octave_median", _wrap_octave_median_get, _wrap_octave_median_set },
    { "octave_min", _wrap_octave_min_get, _wrap_octave_min_set },
    { "octave_plot", _wrap_octave_plot_get, _wrap_octave_plot_set },
    { "octave_pause", _wrap_octave_pause_get, _wrap_octave_pause_set },
    { "octave_abs", _wrap_octave_abs_get, _wrap_octave_abs_set },
    { "octave_accumarray", _wrap_octave_accumarray_get, _wrap_octave_accumarray_set },
    { "octave_accumdim", _wrap_octave_accumdim_get, _wrap_octave_accumdim_set },
    { "octave_acos", _wrap_octave_acos_get, _wrap_octave_acos_set },
    { "octave_acosd", _wrap_octave_acosd_get, _wrap_octave_acosd_set },
    { "octave_acosh", _wrap_octave_acosh_get, _wrap_octave_acosh_set },
    { "octave_acot", _wrap_octave_acot_get, _wrap_octave_acot_set },
    { "octave_acotd", _wrap_octave_acotd_get, _wrap_octave_acotd_set },
    { "octave_acoth", _wrap_octave_acoth_get, _wrap_octave_acoth_set },
    { "octave_acsc", _wrap_octave_acsc_get, _wrap_octave_acsc_set },
    { "octave_acsch", _wrap_octave_acsch_get, _wrap_octave_acsch_set },
    { "octave_acscd", _wrap_octave_acscd_get, _wrap_octave_acscd_set },
    { "octave_airy", _wrap_octave_airy_get, _wrap_octave_airy_set },
    { "octave_adjoint", _wrap_octave_adjoint_get, _wrap_octave_adjoint_set },
    { "octave_all", _wrap_octave_all_get, _wrap_octave_all_set },
    { "octave_allow_non_integer_range_as_index", _wrap_octave_allow_non_integer_range_as_index_get, _wrap_octave_allow_non_integer_range_as_index_set },
    { "octave_amd", _wrap_octave_amd_get, _wrap_octave_amd_set },
    { "octave_ancestor", _wrap_octave_ancestor_get, _wrap_octave_ancestor_set },
    { "octave_and", _wrap_octave_and_get, _wrap_octave_and_set },
    { "octave_angle", _wrap_octave_angle_get, _wrap_octave_angle_set },
    { "octave_annotation", _wrap_octave_annotation_get, _wrap_octave_annotation_set },
    { "octave_anova", _wrap_octave_anova_get, _wrap_octave_anova_set },
    { "octave_ans", _wrap_octave_ans_get, _wrap_octave_ans_set },
    { "octave_any", _wrap_octave_any_get, _wrap_octave_any_set },
    { "octave_arch_fit", _wrap_octave_arch_fit_get, _wrap_octave_arch_fit_set },
    { "octave_arch_rnd", _wrap_octave_arch_rnd_get, _wrap_octave_arch_rnd_set },
    { "octave_arch_test", _wrap_octave_arch_test_get, _wrap_octave_arch_test_set },
    { "octave_area", _wrap_octave_area_get, _wrap_octave_area_set },
    { "octave_arg", _wrap_octave_arg_get, _wrap_octave_arg_set },
    { "octave_arrayfun", _wrap_octave_arrayfun_get, _wrap_octave_arrayfun_set },
    { "octave_asec", _wrap_octave_asec_get, _wrap_octave_asec_set },
    { "octave_asecd", _wrap_octave_asecd_get, _wrap_octave_asecd_set },
    { "octave_asech", _wrap_octave_asech_get, _wrap_octave_asech_set },
    { "octave_asin", _wrap_octave_asin_get, _wrap_octave_asin_set },
    { "octave_asind", _wrap_octave_asind_get, _wrap_octave_asind_set },
    { "octave_asinh", _wrap_octave_asinh_get, _wrap_octave_asinh_set },
    { "octave_assume", _wrap_octave_assume_get, _wrap_octave_assume_set },
    { "octave_assumptions", _wrap_octave_assumptions_get, _wrap_octave_assumptions_set },
    { "octave_atan", _wrap_octave_atan_get, _wrap_octave_atan_set },
    { "octave_atand", _wrap_octave_atand_get, _wrap_octave_atand_set },
    { "octave_atanh", _wrap_octave_atanh_get, _wrap_octave_atanh_set },
    { "octave_atan2", _wrap_octave_atan2_get, _wrap_octave_atan2_set },
    { "octave_audiodevinfo", _wrap_octave_audiodevinfo_get, _wrap_octave_audiodevinfo_set },
    { "octave_audioformats", _wrap_octave_audioformats_get, _wrap_octave_audioformats_set },
    { "octave_audioinfo", _wrap_octave_audioinfo_get, _wrap_octave_audioinfo_set },
    { "octave_audioread", _wrap_octave_audioread_get, _wrap_octave_audioread_set },
    { "octave_audiowrite", _wrap_octave_audiowrite_get, _wrap_octave_audiowrite_set },
    { "octave_autoreg_matrix", _wrap_octave_autoreg_matrix_get, _wrap_octave_autoreg_matrix_set },
    { "octave_autumn", _wrap_octave_autumn_get, _wrap_octave_autumn_set },
    { "octave_axes", _wrap_octave_axes_get, _wrap_octave_axes_set },
    { "octave_axis", _wrap_octave_axis_get, _wrap_octave_axis_set },
    { "octave_balance", _wrap_octave_balance_get, _wrap_octave_balance_set },
    { "octave_bandwidth", _wrap_octave_bandwidth_get, _wrap_octave_bandwidth_set },
    { "octave_bar", _wrap_octave_bar_get, _wrap_octave_bar_set },
    { "octave_barh", _wrap_octave_barh_get, _wrap_octave_barh_set },
    { "octave_bathannwin", _wrap_octave_bathannwin_get, _wrap_octave_bathannwin_set },
    { "octave_bartlett_test", _wrap_octave_bartlett_test_get, _wrap_octave_bartlett_test_set },
    { "octave_base2dec", _wrap_octave_base2dec_get, _wrap_octave_base2dec_set },
    { "octave_base64_decode", _wrap_octave_base64_decode_get, _wrap_octave_base64_decode_set },
    { "octave_base64_encode", _wrap_octave_base64_encode_get, _wrap_octave_base64_encode_set },
    { "octave_beep", _wrap_octave_beep_get, _wrap_octave_beep_set },
    { "octave_beep_on_error", _wrap_octave_beep_on_error_get, _wrap_octave_beep_on_error_set },
    { "octave_bernoulli", _wrap_octave_bernoulli_get, _wrap_octave_bernoulli_set },
    { "octave_besseli", _wrap_octave_besseli_get, _wrap_octave_besseli_set },
    { "octave_besseljn", _wrap_octave_besseljn_get, _wrap_octave_besseljn_set },
    { "octave_besselk", _wrap_octave_besselk_get, _wrap_octave_besselk_set },
    { "octave_bessely", _wrap_octave_bessely_get, _wrap_octave_bessely_set },
    { "octave_beta", _wrap_octave_beta_get, _wrap_octave_beta_set },
    { "octave_betacdf", _wrap_octave_betacdf_get, _wrap_octave_betacdf_set },
    { "octave_betainc", _wrap_octave_betainc_get, _wrap_octave_betainc_set },
    { "octave_betaincinv", _wrap_octave_betaincinv_get, _wrap_octave_betaincinv_set },
    { "octave_betainv", _wrap_octave_betainv_get, _wrap_octave_betainv_set },
    { "octave_betain", _wrap_octave_betain_get, _wrap_octave_betain_set },
    { "octave_betapdf", _wrap_octave_betapdf_get, _wrap_octave_betapdf_set },
    { "octave_betarnd", _wrap_octave_betarnd_get, _wrap_octave_betarnd_set },
    { "octave_bicg", _wrap_octave_bicg_get, _wrap_octave_bicg_set },
    { "octave_bicgstab", _wrap_octave_bicgstab_get, _wrap_octave_bicgstab_set },
    { "octave_bin2dec", _wrap_octave_bin2dec_get, _wrap_octave_bin2dec_set },
    { "octave_bincoeff", _wrap_octave_bincoeff_get, _wrap_octave_bincoeff_set },
    { "octave_binocdf", _wrap_octave_binocdf_get, _wrap_octave_binocdf_set },
    { "octave_binoinv", _wrap_octave_binoinv_get, _wrap_octave_binoinv_set },
    { "octave_binopdf", _wrap_octave_binopdf_get, _wrap_octave_binopdf_set },
    { "octave_binornd", _wrap_octave_binornd_get, _wrap_octave_binornd_set },
    { "octave_bitand", _wrap_octave_bitand_get, _wrap_octave_bitand_set },
    { "octave_bitcmp", _wrap_octave_bitcmp_get, _wrap_octave_bitcmp_set },
    { "octave_bitget", _wrap_octave_bitget_get, _wrap_octave_bitget_set },
    { "octave_bitor", _wrap_octave_bitor_get, _wrap_octave_bitor_set },
    { "octave_bitpack", _wrap_octave_bitpack_get, _wrap_octave_bitpack_set },
    { "octave_bitset", _wrap_octave_bitset_get, _wrap_octave_bitset_set },
    { "octave_bitshift", _wrap_octave_bitshift_get, _wrap_octave_bitshift_set },
    { "octave_bitunpack", _wrap_octave_bitunpack_get, _wrap_octave_bitunpack_set },
    { "octave_bitxor", _wrap_octave_bitxor_get, _wrap_octave_bitxor_set },
    { "octave_blanks", _wrap_octave_blanks_get, _wrap_octave_blanks_set },
    { "octave_blkdiag", _wrap_octave_blkdiag_get, _wrap_octave_blkdiag_set },
    { "octave_blkmm", _wrap_octave_blkmm_get, _wrap_octave_blkmm_set },
    { "octave_bone", _wrap_octave_bone_get, _wrap_octave_bone_set },
    { "octave_box", _wrap_octave_box_get, _wrap_octave_box_set },
    { "octave_brighten", _wrap_octave_brighten_get, _wrap_octave_brighten_set },
    { "octave_bsxfun", _wrap_octave_bsxfun_get, _wrap_octave_bsxfun_set },
    { "octave_builtin", _wrap_octave_builtin_get, _wrap_octave_builtin_set },
    { "octave_bzip2", _wrap_octave_bzip2_get, _wrap_octave_bzip2_set },
    { "octave_calendar", _wrap_octave_calendar_get, _wrap_octave_calendar_set },
    { "octave_camlight", _wrap_octave_camlight_get, _wrap_octave_camlight_set },
    { "octave_cart2pol", _wrap_octave_cart2pol_get, _wrap_octave_cart2pol_set },
    { "octave_cart2sph", _wrap_octave_cart2sph_get, _wrap_octave_cart2sph_set },
    { "octave_cast", _wrap_octave_cast_get, _wrap_octave_cast_set },
    { "octave_cat", _wrap_octave_cat_get, _wrap_octave_cat_set },
    { "octave_catalan", _wrap_octave_catalan_get, _wrap_octave_catalan_set },
    { "octave_cauchy", _wrap_octave_cauchy_get, _wrap_octave_cauchy_set },
    { "octave_cauchy_cdf", _wrap_octave_cauchy_cdf_get, _wrap_octave_cauchy_cdf_set },
    { "octave_cauchy_inv", _wrap_octave_cauchy_inv_get, _wrap_octave_cauchy_inv_set },
    { "octave_cauchy_pdf", _wrap_octave_cauchy_pdf_get, _wrap_octave_cauchy_pdf_set },
    { "octave_cauchy_rnd", _wrap_octave_cauchy_rnd_get, _wrap_octave_cauchy_rnd_set },
    { "octave_caxis", _wrap_octave_caxis_get, _wrap_octave_caxis_set },
    { "octave_cbrt", _wrap_octave_cbrt_get, _wrap_octave_cbrt_set },
    { "octave_ccode", _wrap_octave_ccode_get, _wrap_octave_ccode_set },
    { "octave_ccolamd", _wrap_octave_ccolamd_get, _wrap_octave_ccolamd_set },
    { "octave_ceil", _wrap_octave_ceil_get, _wrap_octave_ceil_set },
    { "octave_center", _wrap_octave_center_get, _wrap_octave_center_set },
    { "octave_centroid", _wrap_octave_centroid_get, _wrap_octave_centroid_set },
    { "octave_cgs", _wrap_octave_cgs_get, _wrap_octave_cgs_set },
    { "octave_chi2cdf", _wrap_octave_chi2cdf_get, _wrap_octave_chi2cdf_set },
    { "octave_chi2inv", _wrap_octave_chi2inv_get, _wrap_octave_chi2inv_set },
    { "octave_chi2pdf", _wrap_octave_chi2pdf_get, _wrap_octave_chi2pdf_set },
    { "octave_chi2rnd", _wrap_octave_chi2rnd_get, _wrap_octave_chi2rnd_set },
    { "octave_children", _wrap_octave_children_get, _wrap_octave_children_set },
    { "octave_chisquare_test_homogeneity", _wrap_octave_chisquare_test_homogeneity_get, _wrap_octave_chisquare_test_homogeneity_set },
    { "octave_chebyshevpoly", _wrap_octave_chebyshevpoly_get, _wrap_octave_chebyshevpoly_set },
    { "octave_chebyshevT", _wrap_octave_chebyshevT_get, _wrap_octave_chebyshevT_set },
    { "octave_chebyshevU", _wrap_octave_chebyshevU_get, _wrap_octave_chebyshevU_set },
    { "octave_chol", _wrap_octave_chol_get, _wrap_octave_chol_set },
    { "octave_chol2inv", _wrap_octave_chol2inv_get, _wrap_octave_chol2inv_set },
    { "octave_choldelete", _wrap_octave_choldelete_get, _wrap_octave_choldelete_set },
    { "octave_cholinsert", _wrap_octave_cholinsert_get, _wrap_octave_cholinsert_set },
    { "octave_colinv", _wrap_octave_colinv_get, _wrap_octave_colinv_set },
    { "octave_cholshift", _wrap_octave_cholshift_get, _wrap_octave_cholshift_set },
    { "octave_cholupdate", _wrap_octave_cholupdate_get, _wrap_octave_cholupdate_set },
    { "octave_chop", _wrap_octave_chop_get, _wrap_octave_chop_set },
    { "octave_circshift", _wrap_octave_circshift_get, _wrap_octave_circshift_set },
    { "octave_cla", _wrap_octave_cla_get, _wrap_octave_cla_set },
    { "octave_clabel", _wrap_octave_clabel_get, _wrap_octave_clabel_set },
    { "octave_clc", _wrap_octave_clc_get, _wrap_octave_clc_set },
    { "octave_clf", _wrap_octave_clf_get, _wrap_octave_clf_set },
    { "octave_clock", _wrap_octave_clock_get, _wrap_octave_clock_set },
    { "octave_cloglog", _wrap_octave_cloglog_get, _wrap_octave_cloglog_set },
    { "octave_cmpermute", _wrap_octave_cmpermute_get, _wrap_octave_cmpermute_set },
    { "octave_cmunique", _wrap_octave_cmunique_get, _wrap_octave_cmunique_set },
    { "octave_coeffs", _wrap_octave_coeffs_get, _wrap_octave_coeffs_set },
    { "octave_colamd", _wrap_octave_colamd_get, _wrap_octave_colamd_set },
    { "octave_colloc", _wrap_octave_colloc_get, _wrap_octave_colloc_set },
    { "octave_colon", _wrap_octave_colon_get, _wrap_octave_colon_set },
    { "octave_colorbar", _wrap_octave_colorbar_get, _wrap_octave_colorbar_set },
    { "octave_colorcube", _wrap_octave_colorcube_get, _wrap_octave_colorcube_set },
    { "octave_colormap", _wrap_octave_colormap_get, _wrap_octave_colormap_set },
    { "octave_colperm", _wrap_octave_colperm_get, _wrap_octave_colperm_set },
    { "octave_columns", _wrap_octave_columns_get, _wrap_octave_columns_set },
    { "octave_comet", _wrap_octave_comet_get, _wrap_octave_comet_set },
    { "octave_compan", _wrap_octave_compan_get, _wrap_octave_compan_set },
    { "octave_compass", _wrap_octave_compass_get, _wrap_octave_compass_set },
    { "octave_complex", _wrap_octave_complex_get, _wrap_octave_complex_set },
    { "octave_computer", _wrap_octave_computer_get, _wrap_octave_computer_set },
    { "octave_cond", _wrap_octave_cond_get, _wrap_octave_cond_set },
    { "octave_condeig", _wrap_octave_condeig_get, _wrap_octave_condeig_set },
    { "octave_condest", _wrap_octave_condest_get, _wrap_octave_condest_set },
    { "octave_conj", _wrap_octave_conj_get, _wrap_octave_conj_set },
    { "octave_contour", _wrap_octave_contour_get, _wrap_octave_contour_set },
    { "octave_contour3", _wrap_octave_contour3_get, _wrap_octave_contour3_set },
    { "octave_contourc", _wrap_octave_contourc_get, _wrap_octave_contourc_set },
    { "octave_contourf", _wrap_octave_contourf_get, _wrap_octave_contourf_set },
    { "octave_contrast", _wrap_octave_contrast_get, _wrap_octave_contrast_set },
    { "octave_conv", _wrap_octave_conv_get, _wrap_octave_conv_set },
    { "octave_conv2", _wrap_octave_conv2_get, _wrap_octave_conv2_set },
    { "octave_convhull", _wrap_octave_convhull_get, _wrap_octave_convhull_set },
    { "octave_convhulln", _wrap_octave_convhulln_get, _wrap_octave_convhulln_set },
    { "octave_cool", _wrap_octave_cool_get, _wrap_octave_cool_set },
    { "octave_copper", _wrap_octave_copper_get, _wrap_octave_copper_set },
    { "octave_copyfile", _wrap_octave_copyfile_get, _wrap_octave_copyfile_set },
    { "octave_copyobj", _wrap_octave_copyobj_get, _wrap_octave_copyobj_set },
    { "octave_cor_test", _wrap_octave_cor_test_get, _wrap_octave_cor_test_set },
    { "octave_cos", _wrap_octave_cos_get, _wrap_octave_cos_set },
    { "octave_cosd", _wrap_octave_cosd_get, _wrap_octave_cosd_set },
    { "octave_cosh", _wrap_octave_cosh_get, _wrap_octave_cosh_set },
    { "octave_coshint", _wrap_octave_coshint_get, _wrap_octave_coshint_set },
    { "octave_cosint", _wrap_octave_cosint_get, _wrap_octave_cosint_set },
    { "octave_cot", _wrap_octave_cot_get, _wrap_octave_cot_set },
    { "octave_cotd", _wrap_octave_cotd_get, _wrap_octave_cotd_set },
    { "octave_coth", _wrap_octave_coth_get, _wrap_octave_coth_set },
    { "octave_cov", _wrap_octave_cov_get, _wrap_octave_cov_set },
    { "octave_cplxpair", _wrap_octave_cplxpair_get, _wrap_octave_cplxpair_set },
    { "octave_cputime", _wrap_octave_cputime_get, _wrap_octave_cputime_set },
    { "octave_cross", _wrap_octave_cross_get, _wrap_octave_cross_set },
    { "octave_csc", _wrap_octave_csc_get, _wrap_octave_csc_set },
    { "octave_cscd", _wrap_octave_cscd_get, _wrap_octave_cscd_set },
    { "octave_csch", _wrap_octave_csch_get, _wrap_octave_csch_set },
    { "octave_cstrcat", _wrap_octave_cstrcat_get, _wrap_octave_cstrcat_set },
    { "octave_cstrcmp", _wrap_octave_cstrcmp_get, _wrap_octave_cstrcmp_set },
    { "octave_csvread", _wrap_octave_csvread_get, _wrap_octave_csvread_set },
    { "octave_csvwrite", _wrap_octave_csvwrite_get, _wrap_octave_csvwrite_set },
    { "octave_csymamd", _wrap_octave_csymamd_get, _wrap_octave_csymamd_set },
    { "octave_ctime", _wrap_octave_ctime_get, _wrap_octave_ctime_set },
    { "octave_ctranspose", _wrap_octave_ctranspose_get, _wrap_octave_ctranspose_set },
    { "octave_cubehelix", _wrap_octave_cubehelix_get, _wrap_octave_cubehelix_set },
    { "octave_cummax", _wrap_octave_cummax_get, _wrap_octave_cummax_set },
    { "octave_cummin", _wrap_octave_cummin_get, _wrap_octave_cummin_set },
    { "octave_cumprod", _wrap_octave_cumprod_get, _wrap_octave_cumprod_set },
    { "octave_cumsum", _wrap_octave_cumsum_get, _wrap_octave_cumsum_set },
    { "octave_cumtrapz", _wrap_octave_cumtrapz_get, _wrap_octave_cumtrapz_set },
    { "octave_cylinder", _wrap_octave_cylinder_get, _wrap_octave_cylinder_set },
    { "octave_daspect", _wrap_octave_daspect_get, _wrap_octave_daspect_set },
    { "octave_daspk", _wrap_octave_daspk_get, _wrap_octave_daspk_set },
    { "octave_dasrt_options", _wrap_octave_dasrt_options_get, _wrap_octave_dasrt_options_set },
    { "octave_dassl", _wrap_octave_dassl_get, _wrap_octave_dassl_set },
    { "octave_dassl_options", _wrap_octave_dassl_options_get, _wrap_octave_dassl_options_set },
    { "octave_date", _wrap_octave_date_get, _wrap_octave_date_set },
    { "octave_datenum", _wrap_octave_datenum_get, _wrap_octave_datenum_set },
    { "octave_datestr", _wrap_octave_datestr_get, _wrap_octave_datestr_set },
    { "octave_datetick", _wrap_octave_datetick_get, _wrap_octave_datetick_set },
    { "octave_dawson", _wrap_octave_dawson_get, _wrap_octave_dawson_set },
    { "octave_dbclear", _wrap_octave_dbclear_get, _wrap_octave_dbclear_set },
    { "octave_dbcont", _wrap_octave_dbcont_get, _wrap_octave_dbcont_set },
    { "octave_dbdown", _wrap_octave_dbdown_get, _wrap_octave_dbdown_set },
    { "octave_dblist", _wrap_octave_dblist_get, _wrap_octave_dblist_set },
    { "octave_dblquad", _wrap_octave_dblquad_get, _wrap_octave_dblquad_set },
    { "octave_dbquit", _wrap_octave_dbquit_get, _wrap_octave_dbquit_set },
    { "octave_dbstack", _wrap_octave_dbstack_get, _wrap_octave_dbstack_set },
    { "octave_dbstatus", _wrap_octave_dbstatus_get, _wrap_octave_dbstatus_set },
    { "octave_dbstep", _wrap_octave_dbstep_get, _wrap_octave_dbstep_set },
    { "octave_dbstop", _wrap_octave_dbstop_get, _wrap_octave_dbstop_set },
    { "octave_dbtype", _wrap_octave_dbtype_get, _wrap_octave_dbtype_set },
    { "octave_dbup", _wrap_octave_dbup_get, _wrap_octave_dbup_set },
    { "octave_dbwhere", _wrap_octave_dbwhere_get, _wrap_octave_dbwhere_set },
    { "octave_deal", _wrap_octave_deal_get, _wrap_octave_deal_set },
    { "octave_deblank", _wrap_octave_deblank_get, _wrap_octave_deblank_set },
    { "octave_dec2base", _wrap_octave_dec2base_get, _wrap_octave_dec2base_set },
    { "octave_dec2hex", _wrap_octave_dec2hex_get, _wrap_octave_dec2hex_set },
    { "octave_deconv", _wrap_octave_deconv_get, _wrap_octave_deconv_set },
    { "octave_deg2rad", _wrap_octave_deg2rad_get, _wrap_octave_deg2rad_set },
    { "octave_del2", _wrap_octave_del2_get, _wrap_octave_del2_set },
    { "octave_delaunay", _wrap_octave_delaunay_get, _wrap_octave_delaunay_set },
    { "octave_delaunayn", _wrap_octave_delaunayn_get, _wrap_octave_delaunayn_set },
    { "octave_det", _wrap_octave_det_get, _wrap_octave_det_set },
    { "octave_detrend", _wrap_octave_detrend_get, _wrap_octave_detrend_set },
    { "octave_diag", _wrap_octave_diag_get, _wrap_octave_diag_set },
    { "octave_diff", _wrap_octave_diff_get, _wrap_octave_diff_set },
    { "octave_diffpara", _wrap_octave_diffpara_get, _wrap_octave_diffpara_set },
    { "octave_diffuse", _wrap_octave_diffuse_get, _wrap_octave_diffuse_set },
    { "octave_digits", _wrap_octave_digits_get, _wrap_octave_digits_set },
    { "octave_dilog", _wrap_octave_dilog_get, _wrap_octave_dilog_set },
    { "octave_dir", _wrap_octave_dir_get, _wrap_octave_dir_set },
    { "octave_dirac", _wrap_octave_dirac_get, _wrap_octave_dirac_set },
    { "octave_discrete_cdf", _wrap_octave_discrete_cdf_get, _wrap_octave_discrete_cdf_set },
    { "octave_discrete_inv", _wrap_octave_discrete_inv_get, _wrap_octave_discrete_inv_set },
    { "octave_discrete_pdf", _wrap_octave_discrete_pdf_get, _wrap_octave_discrete_pdf_set },
    { "octave_discrete_rnd", _wrap_octave_discrete_rnd_get, _wrap_octave_discrete_rnd_set },
    { "octave_disp", _wrap_octave_disp_get, _wrap_octave_disp_set },
    { "octave_display", _wrap_octave_display_get, _wrap_octave_display_set },
    { "octave_divergence", _wrap_octave_divergence_get, _wrap_octave_divergence_set },
    { "octave_dimread", _wrap_octave_dimread_get, _wrap_octave_dimread_set },
    { "octave_dimwrite", _wrap_octave_dimwrite_get, _wrap_octave_dimwrite_set },
    { "octave_dmperm", _wrap_octave_dmperm_get, _wrap_octave_dmperm_set },
    { "octave_do_string_escapes", _wrap_octave_do_string_escapes_get, _wrap_octave_do_string_escapes_set },
    { "octave_doc", _wrap_octave_doc_get, _wrap_octave_doc_set },
    { "octave_dot", _wrap_octave_dot_get, _wrap_octave_dot_set },
    { "octave_double", _wrap_octave_double_get, _wrap_octave_double_set },
    { "octave_downsample", _wrap_octave_downsample_get, _wrap_octave_downsample_set },
    { "octave_dsearch", _wrap_octave_dsearch_get, _wrap_octave_dsearch_set },
    { "octave_dsearchn", _wrap_octave_dsearchn_get, _wrap_octave_dsearchn_set },
    { "octave_dsolve", _wrap_octave_dsolve_get, _wrap_octave_dsolve_set },
    { "octave_dup2", _wrap_octave_dup2_get, _wrap_octave_dup2_set },
    { "octave_duplication_matrix", _wrap_octave_duplication_matrix_get, _wrap_octave_duplication_matrix_set },
    { "octave_durblevinson", _wrap_octave_durblevinson_get, _wrap_octave_durblevinson_set },
    { "octave_e", _wrap_octave_e_get, _wrap_octave_e_set },
    { "octave_ei", _wrap_octave_ei_get, _wrap_octave_ei_set },
    { "octave_eig", _wrap_octave_eig_get, _wrap_octave_eig_set },
    { "octave_ellipke", _wrap_octave_ellipke_get, _wrap_octave_ellipke_set },
    { "octave_ellipsoid", _wrap_octave_ellipsoid_get, _wrap_octave_ellipsoid_set },
    { "octave_ellipticCE", _wrap_octave_ellipticCE_get, _wrap_octave_ellipticCE_set },
    { "octave_ellipticCK", _wrap_octave_ellipticCK_get, _wrap_octave_ellipticCK_set },
    { "octave_ellipticCPi", _wrap_octave_ellipticCPi_get, _wrap_octave_ellipticCPi_set },
    { "octave_ellipticE", _wrap_octave_ellipticE_get, _wrap_octave_ellipticE_set },
    { "octave_ellipticF", _wrap_octave_ellipticF_get, _wrap_octave_ellipticF_set },
    { "octave_ellipticK", _wrap_octave_ellipticK_get, _wrap_octave_ellipticK_set },
    { "octave_ellipticPi", _wrap_octave_ellipticPi_get, _wrap_octave_ellipticPi_set },
    { "octave_empirical_cdf", _wrap_octave_empirical_cdf_get, _wrap_octave_empirical_cdf_set },
    { "octave_empirical_inv", _wrap_octave_empirical_inv_get, _wrap_octave_empirical_inv_set },
    { "octave_empirical_pdf", _wrap_octave_empirical_pdf_get, _wrap_octave_empirical_pdf_set },
    { "octave_empirical_rnd", _wrap_octave_empirical_rnd_get, _wrap_octave_empirical_rnd_set },
    { "octave_end", _wrap_octave_end_get, _wrap_octave_end_set },
    { "octave_endgrent", _wrap_octave_endgrent_get, _wrap_octave_endgrent_set },
    { "octave_endpwent", _wrap_octave_endpwent_get, _wrap_octave_endpwent_set },
    { "octave_eomday", _wrap_octave_eomday_get, _wrap_octave_eomday_set },
    { "octave_eps", _wrap_octave_eps_get, _wrap_octave_eps_set },
    { "octave_eq", _wrap_octave_eq_get, _wrap_octave_eq_set },
    { "octave_equationsToMatrix", _wrap_octave_equationsToMatrix_get, _wrap_octave_equationsToMatrix_set },
    { "octave_erf", _wrap_octave_erf_get, _wrap_octave_erf_set },
    { "octave_erfc", _wrap_octave_erfc_get, _wrap_octave_erfc_set },
    { "octave_erfinv", _wrap_octave_erfinv_get, _wrap_octave_erfinv_set },
    { "octave_erfi", _wrap_octave_erfi_get, _wrap_octave_erfi_set },
    { "octave_errno", _wrap_octave_errno_get, _wrap_octave_errno_set },
    { "octave_error", _wrap_octave_error_get, _wrap_octave_error_set },
    { "octave_error_ids", _wrap_octave_error_ids_get, _wrap_octave_error_ids_set },
    { "octave_errorbar", _wrap_octave_errorbar_get, _wrap_octave_errorbar_set },
    { "octave_etime", _wrap_octave_etime_get, _wrap_octave_etime_set },
    { "octave_etree", _wrap_octave_etree_get, _wrap_octave_etree_set },
    { "octave_etreeplot", _wrap_octave_etreeplot_get, _wrap_octave_etreeplot_set },
    { "octave_eulier", _wrap_octave_eulier_get, _wrap_octave_eulier_set },
    { "octave_eulergamma", _wrap_octave_eulergamma_get, _wrap_octave_eulergamma_set },
    { "octave_evalin", _wrap_octave_evalin_get, _wrap_octave_evalin_set },
    { "octave_exp", _wrap_octave_exp_get, _wrap_octave_exp_set },
    { "octave_expand", _wrap_octave_expand_get, _wrap_octave_expand_set },
    { "octave_expcdf", _wrap_octave_expcdf_get, _wrap_octave_expcdf_set },
    { "octave_expint", _wrap_octave_expint_get, _wrap_octave_expint_set },
    { "octave_expinv", _wrap_octave_expinv_get, _wrap_octave_expinv_set },
    { "octave_expm", _wrap_octave_expm_get, _wrap_octave_expm_set },
    { "octave_expm1", _wrap_octave_expm1_get, _wrap_octave_expm1_set },
    { "octave_exppdf", _wrap_octave_exppdf_get, _wrap_octave_exppdf_set },
    { "octave_exprnd", _wrap_octave_exprnd_get, _wrap_octave_exprnd_set },
    { "octave_eye", _wrap_octave_eye_get, _wrap_octave_eye_set },
    { "octave_ezcontour", _wrap_octave_ezcontour_get, _wrap_octave_ezcontour_set },
    { "octave_ezcontourf", _wrap_octave_ezcontourf_get, _wrap_octave_ezcontourf_set },
    { "octave_ezmesh", _wrap_octave_ezmesh_get, _wrap_octave_ezmesh_set },
    { "octave_explot", _wrap_octave_explot_get, _wrap_octave_explot_set },
    { "octave_ezplot3", _wrap_octave_ezplot3_get, _wrap_octave_ezplot3_set },
    { "octave_ezsurf", _wrap_octave_ezsurf_get, _wrap_octave_ezsurf_set },
    { "octave_ezpolar", _wrap_octave_ezpolar_get, _wrap_octave_ezpolar_set },
    { "octave_ezsurfc", _wrap_octave_ezsurfc_get, _wrap_octave_ezsurfc_set },
    { "octave_f_test_regression", _wrap_octave_f_test_regression_get, _wrap_octave_f_test_regression_set },
    { "octave_factor", _wrap_octave_factor_get, _wrap_octave_factor_set },
    { "octave_factorial", _wrap_octave_factorial_get, _wrap_octave_factorial_set },
    { "octave_false", _wrap_octave_false_get, _wrap_octave_false_set },
    { "octave_fcdf", _wrap_octave_fcdf_get, _wrap_octave_fcdf_set },
    { "octave_fclear", _wrap_octave_fclear_get, _wrap_octave_fclear_set },
    { "octave_fcntl", _wrap_octave_fcntl_get, _wrap_octave_fcntl_set },
    { "octave_fdisp", _wrap_octave_fdisp_get, _wrap_octave_fdisp_set },
    { "octave_feather", _wrap_octave_feather_get, _wrap_octave_feather_set },
    { "octave_ff2n", _wrap_octave_ff2n_get, _wrap_octave_ff2n_set },
    { "octave_fibonacci", _wrap_octave_fibonacci_get, _wrap_octave_fibonacci_set },
    { "octave_find", _wrap_octave_find_get, _wrap_octave_find_set },
    { "octave_findsym", _wrap_octave_findsym_get, _wrap_octave_findsym_set },
    { "octave_finiteset", _wrap_octave_finiteset_get, _wrap_octave_finiteset_set },
    { "octave_finv", _wrap_octave_finv_get, _wrap_octave_finv_set },
    { "octave_fix", _wrap_octave_fix_get, _wrap_octave_fix_set },
    { "octave_flintmax", _wrap_octave_flintmax_get, _wrap_octave_flintmax_set },
    { "octave_flip", _wrap_octave_flip_get, _wrap_octave_flip_set },
    { "octave_flipir", _wrap_octave_flipir_get, _wrap_octave_flipir_set },
    { "octave_flipud", _wrap_octave_flipud_get, _wrap_octave_flipud_set },
    { "octave_floor", _wrap_octave_floor_get, _wrap_octave_floor_set },
    { "octave_fminbnd", _wrap_octave_fminbnd_get, _wrap_octave_fminbnd_set },
    { "octave_fminunc", _wrap_octave_fminunc_get, _wrap_octave_fminunc_set },
    { "octave_formula", _wrap_octave_formula_get, _wrap_octave_formula_set },
    { "octave_fortran", _wrap_octave_fortran_get, _wrap_octave_fortran_set },
    { "octave_fourier", _wrap_octave_fourier_get, _wrap_octave_fourier_set },
    { "octave_fpdf", _wrap_octave_fpdf_get, _wrap_octave_fpdf_set },
    { "octave_fplot", _wrap_octave_fplot_get, _wrap_octave_fplot_set },
    { "octave_frac", _wrap_octave_frac_get, _wrap_octave_frac_set },
    { "octave_fractdiff", _wrap_octave_fractdiff_get, _wrap_octave_fractdiff_set },
    { "octave_frame2im", _wrap_octave_frame2im_get, _wrap_octave_frame2im_set },
    { "octave_freport", _wrap_octave_freport_get, _wrap_octave_freport_set },
    { "octave_fresneic", _wrap_octave_fresneic_get, _wrap_octave_fresneic_set },
    { "octave_frnd", _wrap_octave_frnd_get, _wrap_octave_frnd_set },
    { "octave_fskipl", _wrap_octave_fskipl_get, _wrap_octave_fskipl_set },
    { "octave_fsolve", _wrap_octave_fsolve_get, _wrap_octave_fsolve_set },
    { "octave_full", _wrap_octave_full_get, _wrap_octave_full_set },
    { "octave_fwhm", _wrap_octave_fwhm_get, _wrap_octave_fwhm_set },
    { "octave_fzero", _wrap_octave_fzero_get, _wrap_octave_fzero_set },
    { "octave_gallery", _wrap_octave_gallery_get, _wrap_octave_gallery_set },
    { "octave_gamcdf", _wrap_octave_gamcdf_get, _wrap_octave_gamcdf_set },
    { "octave_gaminv", _wrap_octave_gaminv_get, _wrap_octave_gaminv_set },
    { "octave_gamma", _wrap_octave_gamma_get, _wrap_octave_gamma_set },
    { "octave_gammainc", _wrap_octave_gammainc_get, _wrap_octave_gammainc_set },
    { "octave_gammaln", _wrap_octave_gammaln_get, _wrap_octave_gammaln_set },
    { "octave_gca", _wrap_octave_gca_get, _wrap_octave_gca_set },
    { "octave_gcbf", _wrap_octave_gcbf_get, _wrap_octave_gcbf_set },
    { "octave_gcbo", _wrap_octave_gcbo_get, _wrap_octave_gcbo_set },
    { "octave_gcd", _wrap_octave_gcd_get, _wrap_octave_gcd_set },
    { "octave_ge", _wrap_octave_ge_get, _wrap_octave_ge_set },
    { "octave_geocdf", _wrap_octave_geocdf_get, _wrap_octave_geocdf_set },
    { "octave_geoinv", _wrap_octave_geoinv_get, _wrap_octave_geoinv_set },
    { "octave_geopdf", _wrap_octave_geopdf_get, _wrap_octave_geopdf_set },
    { "octave_geornd", _wrap_octave_geornd_get, _wrap_octave_geornd_set },
    { "octave_givens", _wrap_octave_givens_get, _wrap_octave_givens_set },
    { "octave_glpk", _wrap_octave_glpk_get, _wrap_octave_glpk_set },
    { "octave_gmres", _wrap_octave_gmres_get, _wrap_octave_gmres_set },
    { "octave_gmtime", _wrap_octave_gmtime_get, _wrap_octave_gmtime_set },
    { "octave_gnplot_binary", _wrap_octave_gnplot_binary_get, _wrap_octave_gnplot_binary_set },
    { "octave_gplot", _wrap_octave_gplot_get, _wrap_octave_gplot_set },
    { "octave_gradient", _wrap_octave_gradient_get, _wrap_octave_gradient_set },
    { "octave_gray", _wrap_octave_gray_get, _wrap_octave_gray_set },
    { "octave_gray2ind", _wrap_octave_gray2ind_get, _wrap_octave_gray2ind_set },
    { "octave_gt", _wrap_octave_gt_get, _wrap_octave_gt_set },
    { "octave_gunzip", _wrap_octave_gunzip_get, _wrap_octave_gunzip_set },
    { "octave_gzip", _wrap_octave_gzip_get, _wrap_octave_gzip_set },
    { "octave_hadamard", _wrap_octave_hadamard_get, _wrap_octave_hadamard_set },
    { "octave_hankel", _wrap_octave_hankel_get, _wrap_octave_hankel_set },
    { "octave_harmonic", _wrap_octave_harmonic_get, _wrap_octave_harmonic_set },
    { "octave_has", _wrap_octave_has_get, _wrap_octave_has_set },
    { "octave_hash", _wrap_octave_hash_get, _wrap_octave_hash_set },
    { "octave_heaviside", _wrap_octave_heaviside_get, _wrap_octave_heaviside_set },
    { "octave_help", _wrap_octave_help_get, _wrap_octave_help_set },
    { "octave_hess", _wrap_octave_hess_get, _wrap_octave_hess_set },
    { "octave_hex2dec", _wrap_octave_hex2dec_get, _wrap_octave_hex2dec_set },
    { "octave_hex2num", _wrap_octave_hex2num_get, _wrap_octave_hex2num_set },
    { "octave_hilb", _wrap_octave_hilb_get, _wrap_octave_hilb_set },
    { "octave_hilbert_curve", _wrap_octave_hilbert_curve_get, _wrap_octave_hilbert_curve_set },
    { "octave_hist", _wrap_octave_hist_get, _wrap_octave_hist_set },
    { "octave_horner", _wrap_octave_horner_get, _wrap_octave_horner_set },
    { "octave_horzcat", _wrap_octave_horzcat_get, _wrap_octave_horzcat_set },
    { "octave_hot", _wrap_octave_hot_get, _wrap_octave_hot_set },
    { "octave_housh", _wrap_octave_housh_get, _wrap_octave_housh_set },
    { "octave_hsv2rgb", _wrap_octave_hsv2rgb_get, _wrap_octave_hsv2rgb_set },
    { "octave_hurst", _wrap_octave_hurst_get, _wrap_octave_hurst_set },
    { "octave_hygecdf", _wrap_octave_hygecdf_get, _wrap_octave_hygecdf_set },
    { "octave_hygeinv", _wrap_octave_hygeinv_get, _wrap_octave_hygeinv_set },
    { "octave_hygepdf", _wrap_octave_hygepdf_get, _wrap_octave_hygepdf_set },
    { "octave_hygernd", _wrap_octave_hygernd_get, _wrap_octave_hygernd_set },
    { "octave_hypergeom", _wrap_octave_hypergeom_get, _wrap_octave_hypergeom_set },
    { "octave_hypot", _wrap_octave_hypot_get, _wrap_octave_hypot_set },
    { "octave_I", _wrap_octave_I_get, _wrap_octave_I_set },
    { "octave_ichol", _wrap_octave_ichol_get, _wrap_octave_ichol_set },
    { "octave_idist", _wrap_octave_idist_get, _wrap_octave_idist_set },
    { "octave_idivide", _wrap_octave_idivide_get, _wrap_octave_idivide_set },
    { "octave_igamma", _wrap_octave_igamma_get, _wrap_octave_igamma_set },
    { "octave_ilaplace", _wrap_octave_ilaplace_get, _wrap_octave_ilaplace_set },
    { "octave_ilu", _wrap_octave_ilu_get, _wrap_octave_ilu_set },
    { "octave_im2double", _wrap_octave_im2double_get, _wrap_octave_im2double_set },
    { "octave_im2frame", _wrap_octave_im2frame_get, _wrap_octave_im2frame_set },
    { "octave_im2int16", _wrap_octave_im2int16_get, _wrap_octave_im2int16_set },
    { "octave_im2single", _wrap_octave_im2single_get, _wrap_octave_im2single_set },
    { "octave_im2uint16", _wrap_octave_im2uint16_get, _wrap_octave_im2uint16_set },
    { "octave_im2uint8", _wrap_octave_im2uint8_get, _wrap_octave_im2uint8_set },
    { "octave_imag", _wrap_octave_imag_get, _wrap_octave_imag_set },
    { "octave_image", _wrap_octave_image_get, _wrap_octave_image_set },
    { "octave_imagesc", _wrap_octave_imagesc_get, _wrap_octave_imagesc_set },
    { "octave_imfinfo", _wrap_octave_imfinfo_get, _wrap_octave_imfinfo_set },
    { "octave_imformats", _wrap_octave_imformats_get, _wrap_octave_imformats_set },
    { "octave_importdata", _wrap_octave_importdata_get, _wrap_octave_importdata_set },
    { "octave_imread", _wrap_octave_imread_get, _wrap_octave_imread_set },
    { "octave_imshow", _wrap_octave_imshow_get, _wrap_octave_imshow_set },
    { "octave_imwrite", _wrap_octave_imwrite_get, _wrap_octave_imwrite_set },
    { "octave_ind2gray", _wrap_octave_ind2gray_get, _wrap_octave_ind2gray_set },
    { "octave_ind2rgb", _wrap_octave_ind2rgb_get, _wrap_octave_ind2rgb_set },
    { "octave_int2sub", _wrap_octave_int2sub_get, _wrap_octave_int2sub_set },
    { "octave_index", _wrap_octave_index_get, _wrap_octave_index_set },
    { "octave_inf", _wrap_octave_inf_get, _wrap_octave_inf_set },
    { "octave_inpolygon", _wrap_octave_inpolygon_get, _wrap_octave_inpolygon_set },
    { "octave_input", _wrap_octave_input_get, _wrap_octave_input_set },
    { "octave_interp1", _wrap_octave_interp1_get, _wrap_octave_interp1_set },
    { "octave_interp2", _wrap_octave_interp2_get, _wrap_octave_interp2_set },
    { "octave_interp3", _wrap_octave_interp3_get, _wrap_octave_interp3_set },
    { "octave_intersect", _wrap_octave_intersect_get, _wrap_octave_intersect_set },
    { "octave_intmin", _wrap_octave_intmin_get, _wrap_octave_intmin_set },
    { "octave_inv", _wrap_octave_inv_get, _wrap_octave_inv_set },
    { "octave_invhilb", _wrap_octave_invhilb_get, _wrap_octave_invhilb_set },
    { "octave_inimpinvar", _wrap_octave_inimpinvar_get, _wrap_octave_inimpinvar_set },
    { "octave_ipermute", _wrap_octave_ipermute_get, _wrap_octave_ipermute_set },
    { "octave_iqr", _wrap_octave_iqr_get, _wrap_octave_iqr_set },
    { "octave_isa", _wrap_octave_isa_get, _wrap_octave_isa_set },
    { "octave_isequal", _wrap_octave_isequal_get, _wrap_octave_isequal_set },
    { "octave_ishermitian", _wrap_octave_ishermitian_get, _wrap_octave_ishermitian_set },
    { "octave_isprime", _wrap_octave_isprime_get, _wrap_octave_isprime_set },
    { "octave_jit_enable", _wrap_octave_jit_enable_get, _wrap_octave_jit_enable_set },
    { "octave_kbhit", _wrap_octave_kbhit_get, _wrap_octave_kbhit_set },
    { "octave_kendall", _wrap_octave_kendall_get, _wrap_octave_kendall_set },
    { "octave_kron", _wrap_octave_kron_get, _wrap_octave_kron_set },
    { "octave_kurtosis", _wrap_octave_kurtosis_get, _wrap_octave_kurtosis_set },
    { "octave_laplace", _wrap_octave_laplace_get, _wrap_octave_laplace_set },
    { "octave_laplace_cdf", _wrap_octave_laplace_cdf_get, _wrap_octave_laplace_cdf_set },
    { "octave_laplace_inv", _wrap_octave_laplace_inv_get, _wrap_octave_laplace_inv_set },
    { "octave_laplace_pdf", _wrap_octave_laplace_pdf_get, _wrap_octave_laplace_pdf_set },
    { "octave_laplace_rnd", _wrap_octave_laplace_rnd_get, _wrap_octave_laplace_rnd_set },
    { "octave_laplacian", _wrap_octave_laplacian_get, _wrap_octave_laplacian_set },
    { "octave_lcm", _wrap_octave_lcm_get, _wrap_octave_lcm_set },
    { "octave_ldivide", _wrap_octave_ldivide_get, _wrap_octave_ldivide_set },
    { "octave_le", _wrap_octave_le_get, _wrap_octave_le_set },
    { "octave_legendre", _wrap_octave_legendre_get, _wrap_octave_legendre_set },
    { "octave_length", _wrap_octave_length_get, _wrap_octave_length_set },
    { "octave_lgamma", _wrap_octave_lgamma_get, _wrap_octave_lgamma_set },
    { "octave_limit", _wrap_octave_limit_get, _wrap_octave_limit_set },
    { "octave_line", _wrap_octave_line_get, _wrap_octave_line_set },
    { "octave_linprog", _wrap_octave_linprog_get, _wrap_octave_linprog_set },
    { "octave_linsolve", _wrap_octave_linsolve_get, _wrap_octave_linsolve_set },
    { "octave_linspace", _wrap_octave_linspace_get, _wrap_octave_linspace_set },
    { "octave_load", _wrap_octave_load_get, _wrap_octave_load_set },
    { "octave_log", _wrap_octave_log_get, _wrap_octave_log_set },
    { "octave_log10", _wrap_octave_log10_get, _wrap_octave_log10_set },
    { "octave_log1p", _wrap_octave_log1p_get, _wrap_octave_log1p_set },
    { "octave_log2", _wrap_octave_log2_get, _wrap_octave_log2_set },
    { "octave_logical", _wrap_octave_logical_get, _wrap_octave_logical_set },
    { "octave_logistic_cdf", _wrap_octave_logistic_cdf_get, _wrap_octave_logistic_cdf_set },
    { "octave_logistic_inv", _wrap_octave_logistic_inv_get, _wrap_octave_logistic_inv_set },
    { "octave_logistic_pdf", _wrap_octave_logistic_pdf_get, _wrap_octave_logistic_pdf_set },
    { "octave_logistic_regression", _wrap_octave_logistic_regression_get, _wrap_octave_logistic_regression_set },
    { "octave_logit", _wrap_octave_logit_get, _wrap_octave_logit_set },
    { "octave_loglog", _wrap_octave_loglog_get, _wrap_octave_loglog_set },
    { "octave_loglogerr", _wrap_octave_loglogerr_get, _wrap_octave_loglogerr_set },
    { "octave_logm", _wrap_octave_logm_get, _wrap_octave_logm_set },
    { "octave_logncdf", _wrap_octave_logncdf_get, _wrap_octave_logncdf_set },
    { "octave_logninv", _wrap_octave_logninv_get, _wrap_octave_logninv_set },
    { "octave_lognpdf", _wrap_octave_lognpdf_get, _wrap_octave_lognpdf_set },
    { "octave_lognrnd", _wrap_octave_lognrnd_get, _wrap_octave_lognrnd_set },
    { "octave_lognspace", _wrap_octave_lognspace_get, _wrap_octave_lognspace_set },
    { "octave_lookup", _wrap_octave_lookup_get, _wrap_octave_lookup_set },
    { "octave_lscov", _wrap_octave_lscov_get, _wrap_octave_lscov_set },
    { "octave_lsode", _wrap_octave_lsode_get, _wrap_octave_lsode_set },
    { "octave_lsqnonneg", _wrap_octave_lsqnonneg_get, _wrap_octave_lsqnonneg_set },
    { "octave_lt", _wrap_octave_lt_get, _wrap_octave_lt_set },
    { "octave_magic", _wrap_octave_magic_get, _wrap_octave_magic_set },
    { "octave_manova", _wrap_octave_manova_get, _wrap_octave_manova_set },
    { "octave_minus", _wrap_octave_minus_get, _wrap_octave_minus_set },
    { "octave_mkpp", _wrap_octave_mkpp_get, _wrap_octave_mkpp_set },
    { "octave_mldivide", _wrap_octave_mldivide_get, _wrap_octave_mldivide_set },
    { "octave_mod", _wrap_octave_mod_get, _wrap_octave_mod_set },
    { "octave_moment", _wrap_octave_moment_get, _wrap_octave_moment_set },
    { "octave_mpoles", _wrap_octave_mpoles_get, _wrap_octave_mpoles_set },
    { "octave_mpower", _wrap_octave_mpower_get, _wrap_octave_mpower_set },
    { "octave_mrdivide", _wrap_octave_mrdivide_get, _wrap_octave_mrdivide_set },
    { "octave_mu2lin", _wrap_octave_mu2lin_get, _wrap_octave_mu2lin_set },
    { "octave_na", _wrap_octave_na_get, _wrap_octave_na_set },
    { "octave_nan", _wrap_octave_nan_get, _wrap_octave_nan_set },
    { "octave_nextpow2", _wrap_octave_nextpow2_get, _wrap_octave_nextpow2_set },
    { "octave_nnz", _wrap_octave_nnz_get, _wrap_octave_nnz_set },
    { "octave_nonzeros", _wrap_octave_nonzeros_get, _wrap_octave_nonzeros_set },
    { "octave_norm", _wrap_octave_norm_get, _wrap_octave_norm_set },
    { "octave_normcdf", _wrap_octave_normcdf_get, _wrap_octave_normcdf_set },
    { "octave_normest", _wrap_octave_normest_get, _wrap_octave_normest_set },
    { "octave_normest1", _wrap_octave_normest1_get, _wrap_octave_normest1_set },
    { "octave_norminv", _wrap_octave_norminv_get, _wrap_octave_norminv_set },
    { "octave_normpdf", _wrap_octave_normpdf_get, _wrap_octave_normpdf_set },
    { "octave_normrnd", _wrap_octave_normrnd_get, _wrap_octave_normrnd_set },
    { "octave_nth_element", _wrap_octave_nth_element_get, _wrap_octave_nth_element_set },
    { "octave_nth_root", _wrap_octave_nth_root_get, _wrap_octave_nth_root_set },
    { "octave_null", _wrap_octave_null_get, _wrap_octave_null_set },
    { "octave_numel", _wrap_octave_numel_get, _wrap_octave_numel_set },
    { "octave_ode23", _wrap_octave_ode23_get, _wrap_octave_ode23_set },
    { "octave_ode45", _wrap_octave_ode45_get, _wrap_octave_ode45_set },
    { "octave_ols", _wrap_octave_ols_get, _wrap_octave_ols_set },
    { "octave_ones", _wrap_octave_ones_get, _wrap_octave_ones_set },
    { "octave_prod", _wrap_octave_prod_get, _wrap_octave_prod_set },
    { "octave_power", _wrap_octave_power_get, _wrap_octave_power_set },
    { "octave_sin", _wrap_octave_sin_get, _wrap_octave_sin_set },
    { "octave_sqrt", _wrap_octave_sqrt_get, _wrap_octave_sqrt_set },
    { "octave_sum", _wrap_octave_sum_get, _wrap_octave_sum_set },
    { "octave_sumsq", _wrap_octave_sumsq_get, _wrap_octave_sumsq_set },
    { "octave_tan", _wrap_octave_tan_get, _wrap_octave_tan_set },
    { "octave_tanh", _wrap_octave_tanh_get, _wrap_octave_tanh_set },
    { "octave_sinh", _wrap_octave_sinh_get, _wrap_octave_sinh_set },
    { "octave_bin_values", _wrap_octave_bin_values_get, _wrap_octave_bin_values_set },
    { "octave_catmullrom", _wrap_octave_catmullrom_get, _wrap_octave_catmullrom_set },
    { "octave_csape", _wrap_octave_csape_get, _wrap_octave_csape_set },
    { "octave_csapi", _wrap_octave_csapi_get, _wrap_octave_csapi_set },
    { "octave_csaps", _wrap_octave_csaps_get, _wrap_octave_csaps_set },
    { "octave_csaps_sel", _wrap_octave_csaps_sel_get, _wrap_octave_csaps_sel_set },
    { "octave_dedup", _wrap_octave_dedup_get, _wrap_octave_dedup_set },
    { "octave_fnder", _wrap_octave_fnder_get, _wrap_octave_fnder_set },
    { "octave_fnplt", _wrap_octave_fnplt_get, _wrap_octave_fnplt_set },
    { "octave_fnval", _wrap_octave_fnval_get, _wrap_octave_fnval_set },
    { "octave_regularization", _wrap_octave_regularization_get, _wrap_octave_regularization_set },
    { "octave_regularization2D", _wrap_octave_regularization2D_get, _wrap_octave_regularization2D_set },
    { "octave_tpaps", _wrap_octave_tpaps_get, _wrap_octave_tpaps_set },
    { "octave_tps_val", _wrap_octave_tps_val_get, _wrap_octave_tps_val_set },
    { "octave_tps_val_der", _wrap_octave_tps_val_der_get, _wrap_octave_tps_val_der_set },
    { "octave_normalize", _wrap_octave_normalize_get, _wrap_octave_normalize_set },
    { "octave_gaindb", _wrap_octave_gaindb_get, _wrap_octave_gaindb_set },
    { "octave_crestfactor", _wrap_octave_crestfactor_get, _wrap_octave_crestfactor_set },
    { "octave_uquant", _wrap_octave_uquant_get, _wrap_octave_uquant_set },
    { "octave_firwin", _wrap_octave_firwin_get, _wrap_octave_firwin_set },
    { "octave_firkaiser", _wrap_octave_firkaiser_get, _wrap_octave_firkaiser_set },
    { "octave_fir2long", _wrap_octave_fir2long_get, _wrap_octave_fir2long_set },
    { "octave_long2fir", _wrap_octave_long2fir_get, _wrap_octave_long2fir_set },
    { "octave_freqwin", _wrap_octave_freqwin_get, _wrap_octave_freqwin_set },
    { "octave_firfilter", _wrap_octave_firfilter_get, _wrap_octave_firfilter_set },
    { "octave_blfilter", _wrap_octave_blfilter_get, _wrap_octave_blfilter_set },
    { "octave_warpedblfilter", _wrap_octave_warpedblfilter_get, _wrap_octave_warpedblfilter_set },
    { "octave_freqfilter", _wrap_octave_freqfilter_get, _wrap_octave_freqfilter_set },
    { "octave_pfilt", _wrap_octave_pfilt_get, _wrap_octave_pfilt_set },
    { "octave_magresp", _wrap_octave_magresp_get, _wrap_octave_magresp_set },
    { "octave_transferfunction", _wrap_octave_transferfunction_get, _wrap_octave_transferfunction_set },
    { "octave_pgrdelay", _wrap_octave_pgrdelay_get, _wrap_octave_pgrdelay_set },
    { "octave_rampup", _wrap_octave_rampup_get, _wrap_octave_rampup_set },
    { "octave_rampdown", _wrap_octave_rampdown_get, _wrap_octave_rampdown_set },
    { "octave_thresh", _wrap_octave_thresh_get, _wrap_octave_thresh_set },
    { "octave_largestr", _wrap_octave_largestr_get, _wrap_octave_largestr_set },
    { "octave_largestn", _wrap_octave_largestn_get, _wrap_octave_largestn_set },
    { "octave_dynlimit", _wrap_octave_dynlimit_get, _wrap_octave_dynlimit_set },
    { "octave_groupthresh", _wrap_octave_groupthresh_get, _wrap_octave_groupthresh_set },
    { "octave_rgb2jpeg", _wrap_octave_rgb2jpeg_get, _wrap_octave_rgb2jpeg_set },
    { "octave_jpeg2rgb", _wrap_octave_jpeg2rgb_get, _wrap_octave_jpeg2rgb_set },
    { "octave_qam4", _wrap_octave_qam4_get, _wrap_octave_qam4_set },
    { "octave_iqam4", _wrap_octave_iqam4_get, _wrap_octave_iqam4_set },
    { "octave_semiaudplot", _wrap_octave_semiaudplot_get, _wrap_octave_semiaudplot_set },
    { "octave_audtofreq", _wrap_octave_audtofreq_get, _wrap_octave_audtofreq_set },
    { "octave_freqtoaud", _wrap_octave_freqtoaud_get, _wrap_octave_freqtoaud_set },
    { "octave_audspace", _wrap_octave_audspace_get, _wrap_octave_audspace_set },
    { "octave_audspacebw", _wrap_octave_audspacebw_get, _wrap_octave_audspacebw_set },
    { "octave_erbtofreq", _wrap_octave_erbtofreq_get, _wrap_octave_erbtofreq_set },
    { "octave_freqtoerb", _wrap_octave_freqtoerb_get, _wrap_octave_freqtoerb_set },
    { "octave_erbspace", _wrap_octave_erbspace_get, _wrap_octave_erbspace_set },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("char_bit", CHAR_BIT)},
    {SWIG_LUA_CONSTTAB_INT("schar_min", SCHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("schar_max", SCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uchar_max", UCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("char_min", CHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("char_max", CHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("mb_len_max", MB_LEN_MAX)},
    {SWIG_LUA_CONSTTAB_INT("shrt_min", SHRT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("shrt_max", SHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ushrt_max", USHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("int_min", INT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("int_max", INT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uint_max", UINT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("long_min", LONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("long_max", LONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ulong_max", ULONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("llong_min", LLONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("llong_max", LLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ullong_max", ULLONG_MAX)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "crealf", _wrap_crealf},
    { "cimagf", _wrap_cimagf},
    { "cabsf", _wrap_cabsf},
    { "cargf", _wrap_cargf},
    { "cnormf", _wrap_cnormf},
    { "cprojf", _wrap_cprojf},
    { "cpolarf", _wrap_cpolarf},
    { "csinf", _wrap_csinf},
    { "ccosf", _wrap_ccosf},
    { "ctanf", _wrap_ctanf},
    { "casinf", _wrap_casinf},
    { "cacosf", _wrap_cacosf},
    { "catanf", _wrap_catanf},
    { "csinhf", _wrap_csinhf},
    { "ccoshf", _wrap_ccoshf},
    { "ctanhf", _wrap_ctanhf},
    { "casinhf", _wrap_casinhf},
    { "cacoshf", _wrap_cacoshf},
    { "catanhf", _wrap_catanhf},
    { "Huge", _wrap_Huge},
    { "Hugef", _wrap_Hugef},
    { "Infinity", _wrap_Infinity},
    { "NaN", _wrap_NaN},
    { "absf", _wrap_absf},
    { "cubef", _wrap_cubef},
    { "sqrtf", _wrap_sqrtf},
    { "expf", _wrap_expf},
    { "exp2f", _wrap_exp2f},
    { "logf", _wrap_logf},
    { "log10f", _wrap_log10f},
    { "log2f", _wrap_log2f},
    { "logbf", _wrap_logbf},
    { "powf", _wrap_powf},
    { "floorf", _wrap_floorf},
    { "acosf", _wrap_acosf},
    { "asinf", _wrap_asinf},
    { "atanf", _wrap_atanf},
    { "atan2f", _wrap_atan2f},
    { "cosf", _wrap_cosf},
    { "sinf", _wrap_sinf},
    { "tanf", _wrap_tanf},
    { "coshf", _wrap_coshf},
    { "sinhf", _wrap_sinhf},
    { "tanhf", _wrap_tanhf},
    { "lgammaf", _wrap_lgammaf},
    { "acoshf", _wrap_acoshf},
    { "asinhf", _wrap_asinhf},
    { "atanhf", _wrap_atanhf},
    { "cbrtf", _wrap_cbrtf},
    { "ceilf", _wrap_ceilf},
    { "copysignf", _wrap_copysignf},
    { "erff", _wrap_erff},
    { "erfcf", _wrap_erfcf},
    { "expm1f", _wrap_expm1f},
    { "fdimf", _wrap_fdimf},
    { "fmaf", _wrap_fmaf},
    { "fmaxf", _wrap_fmaxf},
    { "fminf", _wrap_fminf},
    { "fmodf", _wrap_fmodf},
    { "fpclassifyf", _wrap_fpclassifyf},
    { "hypotf", _wrap_hypotf},
    { "ilogbf", _wrap_ilogbf},
    { "isfinitef", _wrap_isfinitef},
    { "isgreaterf", _wrap_isgreaterf},
    { "isgreaterequalf", _wrap_isgreaterequalf},
    { "isinff", _wrap_isinff},
    { "islessf", _wrap_islessf},
    { "islessequalf", _wrap_islessequalf},
    { "isnanf", _wrap_isnanf},
    { "isnormalf", _wrap_isnormalf},
    { "isunorderedf", _wrap_isunorderedf},
    { "ldexpf", _wrap_ldexpf},
    { "llrintf", _wrap_llrintf},
    { "llroundf", _wrap_llroundf},
    { "log1pf", _wrap_log1pf},
    { "lrintf", _wrap_lrintf},
    { "lroundf", _wrap_lroundf},
    { "nanf", _wrap_nanf},
    { "nanff", _wrap_nanff},
    { "nanlf", _wrap_nanlf},
    { "nearbyintf", _wrap_nearbyintf},
    { "nextafterf", _wrap_nextafterf},
    { "nexttowardf", _wrap_nexttowardf},
    { "remainderf", _wrap_remainderf},
    { "rintf", _wrap_rintf},
    { "roundf", _wrap_roundf},
    { "scalblnf", _wrap_scalblnf},
    { "scalbnf", _wrap_scalbnf},
    { "squaref", _wrap_squaref},
    { "tgammaf", _wrap_tgammaf},
    { "truncf", _wrap_truncf},
    { "absd", _wrap_absd},
    { "sqrtd", _wrap_sqrtd},
    { "expd", _wrap_expd},
    { "exp2d", _wrap_exp2d},
    { "logd", _wrap_logd},
    { "log10d", _wrap_log10d},
    { "log2d", _wrap_log2d},
    { "logbd", _wrap_logbd},
    { "powd", _wrap_powd},
    { "floord", _wrap_floord},
    { "acosd", _wrap_acosd},
    { "asind", _wrap_asind},
    { "atand", _wrap_atand},
    { "atan2d", _wrap_atan2d},
    { "cosd", _wrap_cosd},
    { "sind", _wrap_sind},
    { "tand", _wrap_tand},
    { "coshd", _wrap_coshd},
    { "sinhd", _wrap_sinhd},
    { "tanhd", _wrap_tanhd},
    { "lgammad", _wrap_lgammad},
    { "acoshd", _wrap_acoshd},
    { "asinhd", _wrap_asinhd},
    { "atanhd", _wrap_atanhd},
    { "cbrtd", _wrap_cbrtd},
    { "ceild", _wrap_ceild},
    { "copysignd", _wrap_copysignd},
    { "erfd", _wrap_erfd},
    { "erfcd", _wrap_erfcd},
    { "expm1d", _wrap_expm1d},
    { "fdimd", _wrap_fdimd},
    { "fmad", _wrap_fmad},
    { "fmaxd", _wrap_fmaxd},
    { "fmind", _wrap_fmind},
    { "fmodd", _wrap_fmodd},
    { "fpclassifyd", _wrap_fpclassifyd},
    { "hypotd", _wrap_hypotd},
    { "ilogbd", _wrap_ilogbd},
    { "isfinited", _wrap_isfinited},
    { "isgreaterd", _wrap_isgreaterd},
    { "isgreaterequald", _wrap_isgreaterequald},
    { "isinfd", _wrap_isinfd},
    { "islessd", _wrap_islessd},
    { "islessequald", _wrap_islessequald},
    { "isnand", _wrap_isnand},
    { "isnormald", _wrap_isnormald},
    { "isunorderedd", _wrap_isunorderedd},
    { "ldexpd", _wrap_ldexpd},
    { "llrintd", _wrap_llrintd},
    { "llroundd", _wrap_llroundd},
    { "log1pd", _wrap_log1pd},
    { "lrintd", _wrap_lrintd},
    { "lroundd", _wrap_lroundd},
    { "nand", _wrap_nand},
    { "nanfd", _wrap_nanfd},
    { "nanld", _wrap_nanld},
    { "nearbyintd", _wrap_nearbyintd},
    { "nextafterd", _wrap_nextafterd},
    { "nexttowardd", _wrap_nexttowardd},
    { "remainderd", _wrap_remainderd},
    { "rintd", _wrap_rintd},
    { "roundd", _wrap_roundd},
    { "scalblnd", _wrap_scalblnd},
    { "scalbnd", _wrap_scalbnd},
    { "squared", _wrap_squared},
    { "tgammad", _wrap_tgammad},
    { "truncd", _wrap_truncd},
    { "evalFunc", _wrap_evalFunc},
    { "convert_octave_value_list", _wrap_convert_octave_value_list},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_float_numeric_limits,
&_wrap_class_double_numeric_limits,
&_wrap_class_int_numeric_limits,
&_wrap_class_uint_numeric_limits,
&_wrap_class_short_numeric_limits,
&_wrap_class_ushort_numeric_limits,
&_wrap_class_long_numeric_limits,
&_wrap_class_ulong_numeric_limits,
&_wrap_class_llong_numeric_limits,
&_wrap_class_ullong_numeric_limits,
&_wrap_class_string,
&_wrap_class_float_vector,
&_wrap_class_double_vector,
&_wrap_class_OctopusRowVectorXf,
&_wrap_class_OctopusRowVectorXd,
&_wrap_class_OctopusRowVectorXcf,
&_wrap_class_OctopusRowVectorXcd,
&_wrap_class_OctopusColVectorXf,
&_wrap_class_OctopusColVectorXd,
&_wrap_class_OctopusColVectorXcf,
&_wrap_class_OctopusColVectorXcd,
&_wrap_class_MatrixViewXf,
&_wrap_class_OctopusMatrixXf,
&_wrap_class_MatrixViewXd,
&_wrap_class_OctopusMatrixXd,
&_wrap_class_MatrixViewXcf,
&_wrap_class_OctopusMatrixXcf,
&_wrap_class_MatrixViewXcd,
&_wrap_class_OctopusMatrixXcd,
&_wrap_class_OctopusValue,
&_wrap_class_OctopusValueList,
&_wrap_class_OctaveInterpreter,
&_wrap_class_OctopusVar,
&_wrap_class_OctopusFunction,
&_wrap_class_Function,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "octopus",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Octopus__OctopusRowVectorXcdTo_p_ComplexRowVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ComplexRowVector *)  ((Octopus::OctopusRowVectorXcd *) x));
}
static void *_p_Octopus__OctopusRowVectorXcfTo_p_FloatComplexRowVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FloatComplexRowVector *)  ((Octopus::OctopusRowVectorXcf *) x));
}
static void *_p_Octopus__OctopusRowVectorXfTo_p_FloatRowVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FloatRowVector *)  ((Octopus::OctopusRowVectorXf *) x));
}
static void *_p_Octopus__OctopusRowVectorXdTo_p_RowVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RowVector *)  ((Octopus::OctopusRowVectorXd *) x));
}
static void *_p_Octopus__OctopusMatrixXcfTo_p_FloatComplexMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FloatComplexMatrix *)  ((Octopus::OctopusMatrixXcf *) x));
}
static void *_p_Octopus__OctopusMatrixXdTo_p_Matrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Matrix *)  ((Octopus::OctopusMatrixXd *) x));
}
static void *_p_Octopus__OctopusMatrixXfTo_p_FloatMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FloatMatrix *)  ((Octopus::OctopusMatrixXf *) x));
}
static void *_p_Octopus__OctopusMatrixXcdTo_p_ComplexMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ComplexMatrix *)  ((Octopus::OctopusMatrixXcd *) x));
}
static void *_p_Octopus__OctopusColVectorXcdTo_p_ComplexColumnVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ComplexColumnVector *)  ((Octopus::OctopusColVectorXcd *) x));
}
static void *_p_Octopus__OctopusColVectorXcfTo_p_FloatComplexColumnVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FloatComplexColumnVector *)  ((Octopus::OctopusColVectorXcf *) x));
}
static void *_p_Octopus__OctopusColVectorXdTo_p_ColumnVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ColumnVector *)  ((Octopus::OctopusColVectorXd *) x));
}
static void *_p_Octopus__OctopusColVectorXfTo_p_FloatColumnVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FloatColumnVector *)  ((Octopus::OctopusColVectorXf *) x));
}
static void *_p_Octopus__OctopusValueTo_p_octave_value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((octave_value *)  ((Octopus::OctopusValue *) x));
}
static swig_type_info _swigt__p_ArrayT_double_t = {"_p_ArrayT_double_t", "ArrayXd *|Array< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_float_t = {"_p_ArrayT_float_t", "Array< float > *|ArrayXf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_std__complexT_double_t_t = {"_p_ArrayT_std__complexT_double_t_t", "Array< std::complex< double > > *|ArrayXcd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_std__complexT_float_t_t = {"_p_ArrayT_std__complexT_float_t_t", "ArrayXcf *|Array< std::complex< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ColumnVector = {"_p_ColumnVector", "ColVectorXd *|ColumnVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ComplexColumnVector = {"_p_ComplexColumnVector", "ColVectorXcd *|ComplexColumnVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ComplexMatrix = {"_p_ComplexMatrix", "MatrixXcd *|ComplexMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ComplexRowVector = {"_p_ComplexRowVector", "VectorXcd *|ComplexRowVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FloatColumnVector = {"_p_FloatColumnVector", "ColVectorXf *|FloatColumnVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FloatComplexColumnVector = {"_p_FloatComplexColumnVector", "ColVectorXcf *|FloatComplexColumnVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FloatComplexMatrix = {"_p_FloatComplexMatrix", "FloatComplexMatrix *|MatrixXcf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FloatComplexRowVector = {"_p_FloatComplexRowVector", "VectorXcf *|FloatComplexRowVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FloatMatrix = {"_p_FloatMatrix", "MatrixXf *|FloatMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FloatRowVector = {"_p_FloatRowVector", "VectorXf *|FloatRowVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix = {"_p_Matrix", "Matrix *|MatrixXd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Octopus__Function = {"_p_Octopus__Function", "Octopus::Function *", 0, 0, (void*)&_wrap_class_Function, 0};
static swig_type_info _swigt__p_Octopus__MatrixViewXcd = {"_p_Octopus__MatrixViewXcd", "Octopus::MatrixViewXcd *", 0, 0, (void*)&_wrap_class_MatrixViewXcd, 0};
static swig_type_info _swigt__p_Octopus__MatrixViewXcf = {"_p_Octopus__MatrixViewXcf", "Octopus::MatrixViewXcf *", 0, 0, (void*)&_wrap_class_MatrixViewXcf, 0};
static swig_type_info _swigt__p_Octopus__MatrixViewXd = {"_p_Octopus__MatrixViewXd", "Octopus::MatrixViewXd *", 0, 0, (void*)&_wrap_class_MatrixViewXd, 0};
static swig_type_info _swigt__p_Octopus__MatrixViewXf = {"_p_Octopus__MatrixViewXf", "Octopus::MatrixViewXf *", 0, 0, (void*)&_wrap_class_MatrixViewXf, 0};
static swig_type_info _swigt__p_Octopus__OctaveInterpreter = {"_p_Octopus__OctaveInterpreter", "Octopus::OctaveInterpreter *", 0, 0, (void*)&_wrap_class_OctaveInterpreter, 0};
static swig_type_info _swigt__p_Octopus__OctopusColVectorXcd = {"_p_Octopus__OctopusColVectorXcd", "Octopus::OctopusColVectorXcd *", 0, 0, (void*)&_wrap_class_OctopusColVectorXcd, 0};
static swig_type_info _swigt__p_Octopus__OctopusColVectorXcf = {"_p_Octopus__OctopusColVectorXcf", "Octopus::OctopusColVectorXcf *", 0, 0, (void*)&_wrap_class_OctopusColVectorXcf, 0};
static swig_type_info _swigt__p_Octopus__OctopusColVectorXd = {"_p_Octopus__OctopusColVectorXd", "Octopus::OctopusColVectorXd *", 0, 0, (void*)&_wrap_class_OctopusColVectorXd, 0};
static swig_type_info _swigt__p_Octopus__OctopusColVectorXf = {"_p_Octopus__OctopusColVectorXf", "Octopus::OctopusColVectorXf *", 0, 0, (void*)&_wrap_class_OctopusColVectorXf, 0};
static swig_type_info _swigt__p_Octopus__OctopusFunction = {"_p_Octopus__OctopusFunction", "Octopus::OctopusFunction *", 0, 0, (void*)&_wrap_class_OctopusFunction, 0};
static swig_type_info _swigt__p_Octopus__OctopusMatrixXcd = {"_p_Octopus__OctopusMatrixXcd", "Octopus::OctopusMatrixXcd *", 0, 0, (void*)&_wrap_class_OctopusMatrixXcd, 0};
static swig_type_info _swigt__p_Octopus__OctopusMatrixXcf = {"_p_Octopus__OctopusMatrixXcf", "Octopus::OctopusMatrixXcf *", 0, 0, (void*)&_wrap_class_OctopusMatrixXcf, 0};
static swig_type_info _swigt__p_Octopus__OctopusMatrixXd = {"_p_Octopus__OctopusMatrixXd", "Octopus::OctopusMatrixXd *", 0, 0, (void*)&_wrap_class_OctopusMatrixXd, 0};
static swig_type_info _swigt__p_Octopus__OctopusMatrixXf = {"_p_Octopus__OctopusMatrixXf", "Octopus::OctopusMatrixXf *", 0, 0, (void*)&_wrap_class_OctopusMatrixXf, 0};
static swig_type_info _swigt__p_Octopus__OctopusRowVectorXcd = {"_p_Octopus__OctopusRowVectorXcd", "Octopus::OctopusRowVectorXcd *", 0, 0, (void*)&_wrap_class_OctopusRowVectorXcd, 0};
static swig_type_info _swigt__p_Octopus__OctopusRowVectorXcf = {"_p_Octopus__OctopusRowVectorXcf", "Octopus::OctopusRowVectorXcf *", 0, 0, (void*)&_wrap_class_OctopusRowVectorXcf, 0};
static swig_type_info _swigt__p_Octopus__OctopusRowVectorXd = {"_p_Octopus__OctopusRowVectorXd", "Octopus::OctopusRowVectorXd *", 0, 0, (void*)&_wrap_class_OctopusRowVectorXd, 0};
static swig_type_info _swigt__p_Octopus__OctopusRowVectorXf = {"_p_Octopus__OctopusRowVectorXf", "Octopus::OctopusRowVectorXf *", 0, 0, (void*)&_wrap_class_OctopusRowVectorXf, 0};
static swig_type_info _swigt__p_Octopus__OctopusValue = {"_p_Octopus__OctopusValue", "Octopus::OctopusValue *", 0, 0, (void*)&_wrap_class_OctopusValue, 0};
static swig_type_info _swigt__p_Octopus__OctopusValueList = {"_p_Octopus__OctopusValueList", "Octopus::OctopusValueList *", 0, 0, (void*)&_wrap_class_OctopusValueList, 0};
static swig_type_info _swigt__p_Octopus__OctopusVar = {"_p_Octopus__OctopusVar", "Octopus::OctopusVar *", 0, 0, (void*)&_wrap_class_OctopusVar, 0};
static swig_type_info _swigt__p_RowVector = {"_p_RowVector", "VectorXd *|RowVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "int64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lua_State = {"_p_lua_State", "lua_State *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave__interpreter = {"_p_octave__interpreter", "octave::interpreter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_value = {"_p_octave_value", "octave_value *|Value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_value_list = {"_p_octave_value_list", "octave_value_list *|ValueList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_double_t = {"_p_std__numeric_limitsT_double_t", "std::numeric_limits< double > *", 0, 0, (void*)&_wrap_class_double_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_float_t = {"_p_std__numeric_limitsT_float_t", "std::numeric_limits< float > *", 0, 0, (void*)&_wrap_class_float_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_int_t = {"_p_std__numeric_limitsT_int_t", "std::numeric_limits< int > *", 0, 0, (void*)&_wrap_class_int_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_long_t = {"_p_std__numeric_limitsT_long_long_t", "std::numeric_limits< long long > *", 0, 0, (void*)&_wrap_class_llong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_t = {"_p_std__numeric_limitsT_long_t", "std::numeric_limits< long > *", 0, 0, (void*)&_wrap_class_long_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_short_t = {"_p_std__numeric_limitsT_short_t", "std::numeric_limits< short > *", 0, 0, (void*)&_wrap_class_short_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_int_t = {"_p_std__numeric_limitsT_unsigned_int_t", "std::numeric_limits< unsigned int > *", 0, 0, (void*)&_wrap_class_uint_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_long_t = {"_p_std__numeric_limitsT_unsigned_long_long_t", "std::numeric_limits< unsigned long long > *", 0, 0, (void*)&_wrap_class_ullong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_t = {"_p_std__numeric_limitsT_unsigned_long_t", "std::numeric_limits< unsigned long > *", 0, 0, (void*)&_wrap_class_ulong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_short_t = {"_p_std__numeric_limitsT_unsigned_short_t", "std::numeric_limits< unsigned short > *", 0, 0, (void*)&_wrap_class_ushort_numeric_limits, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)&_wrap_class_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t = {"_p_std__vectorT_float_std__allocatorT_float_t_t", "std::vector< float > *|std::vector< float,std::allocator< float > > *", 0, 0, (void*)&_wrap_class_float_vector, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_double_std__allocatorT_double_t_t = {"_p_std__vector_iteratorT_double_std__allocatorT_double_t_t", "std::vector_iterator< double,std::allocator< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_float_std__allocatorT_float_t_t = {"_p_std__vector_iteratorT_float_std__allocatorT_float_t_t", "std::vector_iterator< float,std::allocator< float > > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ArrayT_double_t,
  &_swigt__p_ArrayT_float_t,
  &_swigt__p_ArrayT_std__complexT_double_t_t,
  &_swigt__p_ArrayT_std__complexT_float_t_t,
  &_swigt__p_ColumnVector,
  &_swigt__p_ComplexColumnVector,
  &_swigt__p_ComplexMatrix,
  &_swigt__p_ComplexRowVector,
  &_swigt__p_FloatColumnVector,
  &_swigt__p_FloatComplexColumnVector,
  &_swigt__p_FloatComplexMatrix,
  &_swigt__p_FloatComplexRowVector,
  &_swigt__p_FloatMatrix,
  &_swigt__p_FloatRowVector,
  &_swigt__p_Matrix,
  &_swigt__p_Octopus__Function,
  &_swigt__p_Octopus__MatrixViewXcd,
  &_swigt__p_Octopus__MatrixViewXcf,
  &_swigt__p_Octopus__MatrixViewXd,
  &_swigt__p_Octopus__MatrixViewXf,
  &_swigt__p_Octopus__OctaveInterpreter,
  &_swigt__p_Octopus__OctopusColVectorXcd,
  &_swigt__p_Octopus__OctopusColVectorXcf,
  &_swigt__p_Octopus__OctopusColVectorXd,
  &_swigt__p_Octopus__OctopusColVectorXf,
  &_swigt__p_Octopus__OctopusFunction,
  &_swigt__p_Octopus__OctopusMatrixXcd,
  &_swigt__p_Octopus__OctopusMatrixXcf,
  &_swigt__p_Octopus__OctopusMatrixXd,
  &_swigt__p_Octopus__OctopusMatrixXf,
  &_swigt__p_Octopus__OctopusRowVectorXcd,
  &_swigt__p_Octopus__OctopusRowVectorXcf,
  &_swigt__p_Octopus__OctopusRowVectorXd,
  &_swigt__p_Octopus__OctopusRowVectorXf,
  &_swigt__p_Octopus__OctopusValue,
  &_swigt__p_Octopus__OctopusValueList,
  &_swigt__p_Octopus__OctopusVar,
  &_swigt__p_RowVector,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int32_t,
  &_swigt__p_int64_t,
  &_swigt__p_lua_State,
  &_swigt__p_octave__interpreter,
  &_swigt__p_octave_value,
  &_swigt__p_octave_value_list,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__numeric_limitsT_double_t,
  &_swigt__p_std__numeric_limitsT_float_t,
  &_swigt__p_std__numeric_limitsT_int_t,
  &_swigt__p_std__numeric_limitsT_long_long_t,
  &_swigt__p_std__numeric_limitsT_long_t,
  &_swigt__p_std__numeric_limitsT_short_t,
  &_swigt__p_std__numeric_limitsT_unsigned_int_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_short_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t,
  &_swigt__p_std__vector_iteratorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vector_iteratorT_float_std__allocatorT_float_t_t,
};

static swig_cast_info _swigc__p_ArrayT_double_t[] = {  {&_swigt__p_ArrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_float_t[] = {  {&_swigt__p_ArrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_std__complexT_double_t_t[] = {  {&_swigt__p_ArrayT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_std__complexT_float_t_t[] = {  {&_swigt__p_ArrayT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ColumnVector[] = {  {&_swigt__p_ColumnVector, 0, 0, 0},  {&_swigt__p_Octopus__OctopusColVectorXd, _p_Octopus__OctopusColVectorXdTo_p_ColumnVector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComplexColumnVector[] = {  {&_swigt__p_ComplexColumnVector, 0, 0, 0},  {&_swigt__p_Octopus__OctopusColVectorXcd, _p_Octopus__OctopusColVectorXcdTo_p_ComplexColumnVector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComplexMatrix[] = {  {&_swigt__p_ComplexMatrix, 0, 0, 0},  {&_swigt__p_Octopus__OctopusMatrixXcd, _p_Octopus__OctopusMatrixXcdTo_p_ComplexMatrix, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComplexRowVector[] = {  {&_swigt__p_ComplexRowVector, 0, 0, 0},  {&_swigt__p_Octopus__OctopusRowVectorXcd, _p_Octopus__OctopusRowVectorXcdTo_p_ComplexRowVector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatColumnVector[] = {  {&_swigt__p_FloatColumnVector, 0, 0, 0},  {&_swigt__p_Octopus__OctopusColVectorXf, _p_Octopus__OctopusColVectorXfTo_p_FloatColumnVector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatComplexColumnVector[] = {  {&_swigt__p_FloatComplexColumnVector, 0, 0, 0},  {&_swigt__p_Octopus__OctopusColVectorXcf, _p_Octopus__OctopusColVectorXcfTo_p_FloatComplexColumnVector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatComplexMatrix[] = {  {&_swigt__p_FloatComplexMatrix, 0, 0, 0},  {&_swigt__p_Octopus__OctopusMatrixXcf, _p_Octopus__OctopusMatrixXcfTo_p_FloatComplexMatrix, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatComplexRowVector[] = {  {&_swigt__p_FloatComplexRowVector, 0, 0, 0},  {&_swigt__p_Octopus__OctopusRowVectorXcf, _p_Octopus__OctopusRowVectorXcfTo_p_FloatComplexRowVector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatMatrix[] = {  {&_swigt__p_Octopus__OctopusMatrixXf, _p_Octopus__OctopusMatrixXfTo_p_FloatMatrix, 0, 0},  {&_swigt__p_FloatMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatRowVector[] = {  {&_swigt__p_FloatRowVector, 0, 0, 0},  {&_swigt__p_Octopus__OctopusRowVectorXf, _p_Octopus__OctopusRowVectorXfTo_p_FloatRowVector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix[] = {  {&_swigt__p_Matrix, 0, 0, 0},  {&_swigt__p_Octopus__OctopusMatrixXd, _p_Octopus__OctopusMatrixXdTo_p_Matrix, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__Function[] = {  {&_swigt__p_Octopus__Function, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__MatrixViewXcd[] = {  {&_swigt__p_Octopus__MatrixViewXcd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__MatrixViewXcf[] = {  {&_swigt__p_Octopus__MatrixViewXcf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__MatrixViewXd[] = {  {&_swigt__p_Octopus__MatrixViewXd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__MatrixViewXf[] = {  {&_swigt__p_Octopus__MatrixViewXf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctaveInterpreter[] = {  {&_swigt__p_Octopus__OctaveInterpreter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctopusColVectorXcd[] = {  {&_swigt__p_Octopus__OctopusColVectorXcd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctopusColVectorXcf[] = {  {&_swigt__p_Octopus__OctopusColVectorXcf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctopusColVectorXd[] = {  {&_swigt__p_Octopus__OctopusColVectorXd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctopusColVectorXf[] = {  {&_swigt__p_Octopus__OctopusColVectorXf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctopusFunction[] = {  {&_swigt__p_Octopus__OctopusFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctopusMatrixXcd[] = {  {&_swigt__p_Octopus__OctopusMatrixXcd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctopusMatrixXcf[] = {  {&_swigt__p_Octopus__OctopusMatrixXcf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctopusMatrixXd[] = {  {&_swigt__p_Octopus__OctopusMatrixXd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctopusMatrixXf[] = {  {&_swigt__p_Octopus__OctopusMatrixXf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctopusRowVectorXcd[] = {  {&_swigt__p_Octopus__OctopusRowVectorXcd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctopusRowVectorXcf[] = {  {&_swigt__p_Octopus__OctopusRowVectorXcf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctopusRowVectorXd[] = {  {&_swigt__p_Octopus__OctopusRowVectorXd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctopusRowVectorXf[] = {  {&_swigt__p_Octopus__OctopusRowVectorXf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctopusValue[] = {  {&_swigt__p_Octopus__OctopusValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctopusValueList[] = {  {&_swigt__p_Octopus__OctopusValueList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Octopus__OctopusVar[] = {  {&_swigt__p_Octopus__OctopusVar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RowVector[] = {  {&_swigt__p_RowVector, 0, 0, 0},  {&_swigt__p_Octopus__OctopusRowVectorXd, _p_Octopus__OctopusRowVectorXdTo_p_RowVector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lua_State[] = {  {&_swigt__p_lua_State, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave__interpreter[] = {  {&_swigt__p_octave__interpreter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_value[] = {  {&_swigt__p_octave_value, 0, 0, 0},  {&_swigt__p_Octopus__OctopusValue, _p_Octopus__OctopusValueTo_p_octave_value, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_value_list[] = {  {&_swigt__p_octave_value_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_double_t[] = {  {&_swigt__p_std__numeric_limitsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_float_t[] = {  {&_swigt__p_std__numeric_limitsT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_int_t[] = {  {&_swigt__p_std__numeric_limitsT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_short_t[] = {  {&_swigt__p_std__numeric_limitsT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_int_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_short_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vector_iteratorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vector_iteratorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ArrayT_double_t,
  _swigc__p_ArrayT_float_t,
  _swigc__p_ArrayT_std__complexT_double_t_t,
  _swigc__p_ArrayT_std__complexT_float_t_t,
  _swigc__p_ColumnVector,
  _swigc__p_ComplexColumnVector,
  _swigc__p_ComplexMatrix,
  _swigc__p_ComplexRowVector,
  _swigc__p_FloatColumnVector,
  _swigc__p_FloatComplexColumnVector,
  _swigc__p_FloatComplexMatrix,
  _swigc__p_FloatComplexRowVector,
  _swigc__p_FloatMatrix,
  _swigc__p_FloatRowVector,
  _swigc__p_Matrix,
  _swigc__p_Octopus__Function,
  _swigc__p_Octopus__MatrixViewXcd,
  _swigc__p_Octopus__MatrixViewXcf,
  _swigc__p_Octopus__MatrixViewXd,
  _swigc__p_Octopus__MatrixViewXf,
  _swigc__p_Octopus__OctaveInterpreter,
  _swigc__p_Octopus__OctopusColVectorXcd,
  _swigc__p_Octopus__OctopusColVectorXcf,
  _swigc__p_Octopus__OctopusColVectorXd,
  _swigc__p_Octopus__OctopusColVectorXf,
  _swigc__p_Octopus__OctopusFunction,
  _swigc__p_Octopus__OctopusMatrixXcd,
  _swigc__p_Octopus__OctopusMatrixXcf,
  _swigc__p_Octopus__OctopusMatrixXd,
  _swigc__p_Octopus__OctopusMatrixXf,
  _swigc__p_Octopus__OctopusRowVectorXcd,
  _swigc__p_Octopus__OctopusRowVectorXcf,
  _swigc__p_Octopus__OctopusRowVectorXd,
  _swigc__p_Octopus__OctopusRowVectorXf,
  _swigc__p_Octopus__OctopusValue,
  _swigc__p_Octopus__OctopusValueList,
  _swigc__p_Octopus__OctopusVar,
  _swigc__p_RowVector,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int32_t,
  _swigc__p_int64_t,
  _swigc__p_lua_State,
  _swigc__p_octave__interpreter,
  _swigc__p_octave_value,
  _swigc__p_octave_value_list,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__numeric_limitsT_double_t,
  _swigc__p_std__numeric_limitsT_float_t,
  _swigc__p_std__numeric_limitsT_int_t,
  _swigc__p_std__numeric_limitsT_long_long_t,
  _swigc__p_std__numeric_limitsT_long_t,
  _swigc__p_std__numeric_limitsT_short_t,
  _swigc__p_std__numeric_limitsT_unsigned_int_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_short_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t,
  _swigc__p_std__vector_iteratorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vector_iteratorT_float_std__allocatorT_float_t_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

