/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGOCTAVE
#define SWIGOCTAVE
#endif

#define SWIG_name_d      "stk"
#define SWIG_name        stk

#define SWIG_global_name      "cvar"
#define SWIG_op_prefix        "op_"


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

//
// This header includes all C++ headers required for generated Octave wrapper code.
// Using a single header file allows pre-compilation of Octave headers, as follows:
// * Check out this header file:
//     swig -octave -co octheaders.hpp
// * Pre-compile header file into octheaders.hpp.gch:
//     g++ -c ... octheaders.hpp
// * Use pre-compiled header file:
//     g++ -c -include octheaders.hpp ...
//

#if !defined(_SWIG_OCTAVE_OCTHEADERS_HPP)
#define _SWIG_OCTAVE_OCTHEADERS_HPP

// Required C++ headers
#include <cstdlib>
#include <climits>
#include <iostream>
#include <exception>
#include <functional>
#include <complex>
#include <string>
#include <vector>
#include <map>

// Minimal headers to define Octave version
#include <octave/oct.h>
#include <octave/version.h>

// Macro for enabling features which require Octave version >= major.minor.patch
// - Use (OCTAVE_PATCH_VERSION + 0) to handle both '<digit>' (released) and '<digit>+' (in development) patch numbers
#define SWIG_OCTAVE_PREREQ(major, minor, patch) \
  ( (OCTAVE_MAJOR_VERSION<<16) + (OCTAVE_MINOR_VERSION<<8) + (OCTAVE_PATCH_VERSION + 0) >= ((major)<<16) + ((minor)<<8) + (patch) )

// Reconstruct Octave major, minor, and patch versions for releases prior to 3.8.1
#if !defined(OCTAVE_MAJOR_VERSION)

# if !defined(OCTAVE_API_VERSION_NUMBER)

// Hack to distinguish between Octave 3.8.0, which removed OCTAVE_API_VERSION_NUMBER but did not yet
// introduce OCTAVE_MAJOR_VERSION, and Octave <= 3.2, which did not define OCTAVE_API_VERSION_NUMBER
#  include <octave/ov.h>
#  if defined(octave_ov_h)
#   define OCTAVE_MAJOR_VERSION 3
#   define OCTAVE_MINOR_VERSION 8
#   define OCTAVE_PATCH_VERSION 0
#  else

// Hack to distinguish between Octave 3.2 and earlier versions, before OCTAVE_API_VERSION_NUMBER existed
#   define ComplexLU __ignore
#   include <octave/CmplxLU.h>
#   undef ComplexLU
#   if defined(octave_Complex_LU_h)

// We know only that this version is prior to Octave 3.2, i.e. OCTAVE_API_VERSION_NUMBER < 37
#    define OCTAVE_MAJOR_VERSION 3
#    define OCTAVE_MINOR_VERSION 1
#    define OCTAVE_PATCH_VERSION 99

#   else

// OCTAVE_API_VERSION_NUMBER == 37
#    define OCTAVE_MAJOR_VERSION 3
#    define OCTAVE_MINOR_VERSION 2
#    define OCTAVE_PATCH_VERSION 0

#   endif // defined(octave_Complex_LU_h)

#  endif // defined(octave_ov_h)

// Correlation between Octave API and version numbers extracted from Octave's
// ChangeLogs; version is the *earliest* released Octave with that API number
# elif OCTAVE_API_VERSION_NUMBER >= 48
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 6
#  define OCTAVE_PATCH_VERSION 0

# elif OCTAVE_API_VERSION_NUMBER >= 45
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 4
#  define OCTAVE_PATCH_VERSION 1

# elif OCTAVE_API_VERSION_NUMBER >= 42
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 3
#  define OCTAVE_PATCH_VERSION 54

# elif OCTAVE_API_VERSION_NUMBER >= 41
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 3
#  define OCTAVE_PATCH_VERSION 53

# elif OCTAVE_API_VERSION_NUMBER >= 40
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 3
#  define OCTAVE_PATCH_VERSION 52

# elif OCTAVE_API_VERSION_NUMBER >= 39
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 3
#  define OCTAVE_PATCH_VERSION 51

# else // OCTAVE_API_VERSION_NUMBER == 38
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 3
#  define OCTAVE_PATCH_VERSION 50

# endif // !defined(OCTAVE_API_VERSION_NUMBER)

#endif // !defined(OCTAVE_MAJOR_VERSION)

// Required Octave headers
#include <octave/Cell.h>
#include <octave/dynamic-ld.h>
#include <octave/oct-env.h>
#include <octave/oct-map.h>
#include <octave/ov-scalar.h>
#include <octave/ov-fcn-handle.h>
#include <octave/parse.h>
#if SWIG_OCTAVE_PREREQ(4,2,0)
#include <octave/interpreter.h>
#else
#include <octave/toplev.h>
#endif
#include <octave/unwind-prot.h>
#if SWIG_OCTAVE_PREREQ(4,2,0)
#include <octave/call-stack.h>
#endif

#endif // !defined(_SWIG_OCTAVE_OCTHEADERS_HPP)

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#if !SWIG_OCTAVE_PREREQ(3,2,0)
#define SWIG_DEFUN(cname, wname, doc) DEFUNX_DLD(#cname, wname, FS ## cname, args, nargout, doc)
#else
#define SWIG_DEFUN(cname, wname, doc) DEFUNX_DLD(#cname, wname, G ## cname, args, nargout, doc)
#endif

SWIGRUNTIME bool SWIG_check_num_args(const char *func_name, int num_args, int max_args, int min_args, int varargs) {
  if (num_args > max_args && !varargs)
    error("function %s takes at most %i arguments", func_name, max_args);
  else if (num_args < min_args)
    error("function %s requires at least %i arguments", func_name, min_args);
  else
    return true;
  return false;
}

SWIGRUNTIME octave_value_list *SWIG_Octave_AppendOutput(octave_value_list *ovl, const octave_value &ov) {
  ovl->append(ov);
  return ovl;
}

SWIGRUNTIME octave_value SWIG_ErrorType(int code) {
  switch (code) {
  case SWIG_MemoryError:
    return "SWIG_MemoryError";
  case SWIG_IOError:
    return "SWIG_IOError";
  case SWIG_RuntimeError:
    return "SWIG_RuntimeError";
  case SWIG_IndexError:
    return "SWIG_IndexError";
  case SWIG_TypeError:
    return "SWIG_TypeError";
  case SWIG_DivisionByZero:
    return "SWIG_DivisionByZero";
  case SWIG_OverflowError:
    return "SWIG_OverflowError";
  case SWIG_SyntaxError:
    return "SWIG_SyntaxError";
  case SWIG_ValueError:
    return "SWIG_ValueError";
  case SWIG_SystemError:
    return "SWIG_SystemError";
  case SWIG_AttributeError:
    return "SWIG_AttributeError";
  }
  return "SWIG unknown error";
}

SWIGRUNTIME octave_value SWIG_Error(int code, const char *msg) {
  octave_value type(SWIG_ErrorType(code));
  std::string r = msg;
  r += " (" + type.string_value() + ")";
  error("%s", r.c_str());
  return octave_value(r);
}

#define SWIG_fail                                       goto fail

#define SWIG_Octave_ConvertPtr(obj, pptr, type, flags)  SWIG_Octave_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Octave_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Octave_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Octave_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Octave_NewPointerObj(ptr, type, flags)
#define swig_owntype                                    int

#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Octave_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Octave_NewPackedObj(ptr, sz, type)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Octave_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Octave_NewPackedObj(ptr, sz, type)

#define SWIG_GetModule(clientdata) SWIG_Octave_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) SWIG_Octave_SetModule(clientdata,pointer);
#define SWIG_MODULE_CLIENTDATA_TYPE void*

#define Octave_Error_Occurred() 0
#define SWIG_Octave_AddErrorMsg(msg) {;}

SWIGRUNTIME swig_module_info *SWIG_Octave_GetModule(void *clientdata);
SWIGRUNTIME void SWIG_Octave_SetModule(void *clientdata, swig_module_info *pointer);

// For backward compatibility only
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      0

// Runtime API implementation

typedef octave_value_list(*octave_func) (const octave_value_list &, int);
class octave_swig_type;

namespace Swig {

#ifdef SWIG_DIRECTORS

  class Director;

  typedef std::map < void *, Director * > rtdir_map;
  SWIGINTERN rtdir_map* get_rtdir_map();
  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *d);
  SWIGINTERNINLINE void erase_rtdir(void *vptr);
  SWIGINTERNINLINE Director *get_rtdir(void *vptr);

  SWIGRUNTIME void swig_director_destroyed(octave_swig_type *self, Director *d);
  SWIGRUNTIME octave_swig_type *swig_director_get_self(Director *d);
  SWIGRUNTIME void swig_director_set_self(Director *d, octave_swig_type *self);

#endif

  SWIGRUNTIME octave_base_value *swig_value_ref(octave_swig_type *ost);
  SWIGRUNTIME octave_swig_type *swig_value_deref(octave_value ov);
  SWIGRUNTIME octave_swig_type *swig_value_deref(const octave_base_value &ov);
}

#ifdef SWIG_DIRECTORS
SWIGRUNTIME void swig_acquire_ownership(void *vptr);
SWIGRUNTIME void swig_acquire_ownership_array(void *vptr);
SWIGRUNTIME void swig_acquire_ownership_obj(void *vptr, int own);
#endif

  struct swig_octave_member {
    const char *name;
    octave_func method;
    octave_func get_method;
    octave_func set_method;
    int flags;			// 1 static, 2 global
    const char *doc;
    bool is_static() const {
      return flags &1;
    } bool is_global() const {
      return flags &2;
    }
  };

  struct swig_octave_class {
    const char *name;
    swig_type_info **type;
    int director;
    octave_func constructor;
    const char *constructor_doc;
    octave_func destructor;
    const swig_octave_member *members;
    const char **base_names;
    const swig_type_info **base;
  };

#if SWIG_OCTAVE_PREREQ(4,4,0)
  // in Octave 4.4 behaviour of octave_builtin() appears to have changed and 'self' argument is no longer passed
  // to function (maybe because this is now a 'method'??) so need to create our own octave_function subclass
#define SWIG_OCTAVE_BOUND_FUNC(func, args) octave_value(new octave_swig_bound_func(func, args))
  class octave_swig_bound_func : public octave_function {
  public:

    octave_swig_bound_func(void) : octave_function(), method(0), first_args()
      { }

    octave_swig_bound_func(octave_function* _method, octave_value_list _first_args)
      : octave_function("", ""), method(_method), first_args(_first_args)
      { }

    octave_swig_bound_func(const octave_swig_bound_func& f) = delete;

    octave_swig_bound_func& operator= (const octave_swig_bound_func& f) = delete;

    ~octave_swig_bound_func(void) = default;

    bool is_function(void) const { return true; }

    octave_function* function_value(bool = false) { return this; }

#if SWIG_OCTAVE_PREREQ(6,0,0)
    octave_value_list call(octave::tree_evaluator& tw, int nargout = 0, const octave_value_list& args = octave_value_list()) {
      return execute(tw,nargout,args);
    }
#endif
#if SWIG_OCTAVE_PREREQ(6,0,0)
    octave_value_list execute(octave::tree_evaluator& tw, int nargout = 0, const octave_value_list& args = octave_value_list()) {
#else
    octave_value_list call(octave::tree_evaluator& tw, int nargout = 0, const octave_value_list& args = octave_value_list()) {
#endif
      octave_value_list all_args;
      all_args.append(first_args);
      all_args.append(args);
      return method->call(tw, nargout, all_args);
    }

    octave_value subsref(const std::string &ops, const std::list < octave_value_list > &idx) {
      octave_value_list ovl = subsref(ops, idx, 1);
      return ovl.length() ? ovl(0) : octave_value();
    }

    octave_value_list subsref(const std::string &ops, const std::list < octave_value_list > &idx, int nargout) {
      assert(ops.size() > 0);
      assert(ops.size() == idx.size());
      if (ops != "(")
        error("invalid function call");
      octave::tree_evaluator& tw = octave::interpreter::the_interpreter()->get_evaluator();
      return call(tw, nargout, *idx.begin());
    }

  protected:

    octave_function* method;
    octave_value_list first_args;

    std::set<std::string> dispatch_classes;

  };
#else
#define SWIG_OCTAVE_BOUND_FUNC(func, args) octave_value(func)
#endif

  // octave_swig_type plays the role of both the shadow class and the class 
  // representation within Octave, since there is no support for classes.
  //
  // These should really be decoupled, with the class support added to Octave
  // and the shadow class given by an m-file script. That would dramatically 
  // reduce the runtime complexity, and be more in line w/ other modules.

  class octave_swig_type:public octave_base_value {
    struct cpp_ptr {
      void *ptr;
      bool destroyed;
      cpp_ptr(void *_ptr):ptr(_ptr), destroyed(false) {
      }};
    typedef std::pair < const swig_type_info *, cpp_ptr > type_ptr_pair;

    mutable swig_module_info *module;

    const swig_type_info *construct_type;	// type of special type object
    std::vector < type_ptr_pair > types;	// our c++ base classes
    int own;			// whether we call c++ destructors when we die

    typedef std::pair < const swig_octave_member *, octave_value > member_value_pair;
    typedef std::map < std::string, member_value_pair > member_map;
    member_map members;
    bool always_static;

    const swig_octave_member *find_member(const swig_type_info *type, const std::string &name) {
      if (!type->clientdata)
	return 0;
      swig_octave_class *c = (swig_octave_class *) type->clientdata;
      const swig_octave_member *m;
      for (m = c->members; m->name; ++m)
	if (m->name == name)
	  return m;
      for (int j = 0; c->base_names[j]; ++j) {
	if (!c->base[j]) {
	  if (!module)
	    module = SWIG_GetModule(0);
	  assert(module);
	  c->base[j] = SWIG_MangledTypeQueryModule(module, module, c->base_names[j]);
	}
	if (!c->base[j])
	  return 0;
	if ((m = find_member(c->base[j], name)))
	  return m;
      }
      return 0;
    }

    member_value_pair *find_member(const std::string &name, bool insert_if_not_found) {
      member_map::iterator it = members.find(name);
      if (it != members.end())
	return &it->second;
      const swig_octave_member *m;
      for (unsigned int j = 0; j < types.size(); ++j)
	if ((m = find_member(types[j].first, name)))
	  return &members.insert(std::make_pair(name, std::make_pair(m, octave_value()))).first->second;
      if (!insert_if_not_found)
	return 0;
      return &members[name];
    }

    const swig_type_info *find_base(const std::string &name, const swig_type_info *base) {
      if (!base) {
	for (unsigned int j = 0; j < types.size(); ++j) {
	  assert(types[j].first->clientdata);
	  swig_octave_class *cj = (swig_octave_class *) types[j].first->clientdata;
	  if (cj->name == name)
	    return types[j].first;
	}
	return 0;
      }
      assert(base->clientdata);
      swig_octave_class *c = (swig_octave_class *) base->clientdata;
      for (int j = 0; c->base_names[j]; ++j) {
	if (!c->base[j]) {
	  if (!module)
	    module = SWIG_GetModule(0);
	  assert(module);
	  c->base[j] = SWIG_MangledTypeQueryModule(module, module, c->base_names[j]);
	}
	if (!c->base[j])
	  return 0;
	assert(c->base[j]->clientdata);
	swig_octave_class *cj = (swig_octave_class *) c->base[j]->clientdata;
	if (cj->name == name)
	  return c->base[j];
      }
      return 0;
    }

    void load_members(const swig_octave_class* c,member_map& out) const {
      for (const swig_octave_member *m = c->members; m->name; ++m) {
	if (out.find(m->name) == out.end())
	  out.insert(std::make_pair(m->name, std::make_pair(m, octave_value())));
      }
      for (int j = 0; c->base_names[j]; ++j) {
	if (!c->base[j]) {
	  if (!module)
	    module = SWIG_GetModule(0);
	  assert(module);
	  c->base[j] = SWIG_MangledTypeQueryModule(module, module, c->base_names[j]);
	}
	if (!c->base[j])
	  continue;
	assert(c->base[j]->clientdata);
	const swig_octave_class *cj =
	  (const swig_octave_class *) c->base[j]->clientdata;
	load_members(cj,out);
      }
    }

    void load_members(member_map& out) const {
      out=members;
      for (unsigned int j = 0; j < types.size(); ++j)
	if (types[j].first->clientdata)
	  load_members((const swig_octave_class *) types[j].first->clientdata, out);
    }

    octave_value_list member_invoke(member_value_pair *m, const octave_value_list &args, int nargout) {
      if (m->second.is_defined())
	return m->second.subsref("(", std::list < octave_value_list > (1, args), nargout);
      else if (m->first && m->first->method)
	return m->first->method(args, nargout);
      error("member not defined or not invocable");
      return octave_value_list();
    }

    bool dispatch_unary_op(const std::string &symbol, octave_value &ret) const {
      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
      member_value_pair *m = nc_this->find_member(symbol, false);
      if (!m || m->first->is_static() || m->first->is_global())
	return false;
      octave_value_list args;
      args.append(nc_this->as_value());
      octave_value_list argout(nc_this->member_invoke(m, args, 1));
      if (argout.length() < 1)
	return false;
      ret = argout(0);
      return true;
    }

    bool dispatch_binary_op(const std::string &symbol, const octave_base_value &rhs, octave_value &ret) const {
      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
      member_value_pair *m = nc_this->find_member(symbol, false);
      if (!m || m->first->is_static() || m->first->is_global())
	return false;
      octave_value_list args;
      args.append(nc_this->as_value());
      args.append(make_value_hack(rhs));
      octave_value_list argout(nc_this->member_invoke(m, args, 1));
      if (argout.length() < 1)
	return false;
      ret = argout(0);
      return true;
    }

    bool dispatch_index_op(const std::string &symbol, const octave_value_list &rhs, octave_value_list &ret) const {
      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
      member_value_pair *m = nc_this->find_member(symbol, false);
      if (!m || m->first->is_static() || m->first->is_global())
	return false;
      octave_value_list args;
      args.append(nc_this->as_value());
      args.append(rhs);
      octave_value_list argout(nc_this->member_invoke(m, args, 1));
      if (argout.length() >= 1)
	ret = argout(0);
      return true;
    }

    octave_value_list member_deref(member_value_pair *m, const octave_value_list &args) {
      if (m->second.is_defined()) {
        if (m->second.is_function() || m->second.is_function_handle()) {
          return SWIG_OCTAVE_BOUND_FUNC(m->second.function_value(), args);
        } else {
          return m->second;
        }
      } else if (m->first) {
	if (m->first->get_method)
	  return m->first->get_method(args, 1);
	else if (m->first->method)
          return SWIG_OCTAVE_BOUND_FUNC(new octave_builtin(m->first->method), args);
      }
      error("undefined member");
      return octave_value_list();
    }

    static octave_value make_value_hack(const octave_base_value &x) {
      ((octave_swig_type &) x).count++;
      return octave_value((octave_base_value *) &x);
    }

    octave_swig_type(const octave_swig_type &x);
    octave_swig_type &operator=(const octave_swig_type &rhs);
  public:

    octave_swig_type(void *_ptr = 0, const swig_type_info *_type = 0, int _own = 0,
		     bool _always_static = false)
      :	module(0), construct_type(_ptr ? 0 : _type), own(_own), 
      always_static(_always_static) {
      if (_type || _ptr)
	types.push_back(std::make_pair(_type, _ptr));
#ifdef SWIG_DIRECTORS
      if (_ptr) {
	Swig::Director *d = Swig::get_rtdir(_ptr);
	if (d)
	  Swig::swig_director_set_self(d, this);
      }
#endif
    }

    ~octave_swig_type() {
      if (own) {
	++count;
	for (unsigned int j = 0; j < types.size(); ++j) {
	  if (!types[j].first || !types[j].first->clientdata)
	    continue;
	  swig_octave_class *c = (swig_octave_class *) types[j].first->clientdata;
	  if (c->destructor && !types[j].second.destroyed && types[j].second.ptr) {
	    c->destructor(as_value(), 0);
	  }
	}
      }
#ifdef SWIG_DIRECTORS
      for (unsigned int j = 0; j < types.size(); ++j)
	Swig::erase_rtdir(types[j].second.ptr);
#endif
    }

    dim_vector dims(void) const {
      octave_value out;
      if (!dispatch_unary_op("__dims__", out))
        return dim_vector(1,1);

      // Return value should be cell or matrix of integers
#if SWIG_OCTAVE_PREREQ(4,4,0)
      if (out.iscell()) {
#else
      if (out.is_cell()) {
#endif
        const Cell & c=out.cell_value();
        int ndim = c.rows();
        if (ndim==1 && c.columns()!=1) ndim = c.columns();

        dim_vector d;
        d.resize(ndim < 2 ? 2 : ndim);
        d(0) = d(1) = 1;

        // Fill in dim_vector 
        for (int k=0;k<ndim;k++) {
          const octave_value& obj = c(k);
#if SWIG_OCTAVE_PREREQ(6,0,0)
          try {
            d.elem(k) = obj.int_value();
          }
          catch (octave::execution_exception& oee) {
            // __dims__ should return a cell filled with integers
            return dim_vector(1,1);
          }
#else
          d.elem(k) = obj.int_value();
          
          // __dims__ should return a cell filled with integers
          if (error_state) return dim_vector(1,1);
#endif
        }
        return d;
#if SWIG_OCTAVE_PREREQ(4,4,0)
      } else if (out.is_matrix_type() || out.isnumeric() ) {
#else
      } else if (out.is_matrix_type() || out.is_numeric_type() ) {
#endif
        if (out.rows()==1 || out.columns()==1) {
#if SWIG_OCTAVE_PREREQ(6,0,0)
           Array<int> a;
           try {
             a = out.int_vector_value();
           }
           catch (octave::execution_exception& oee) {
             return dim_vector(1,1);
           }
#else
           Array<int> a = out.int_vector_value();
           if (error_state) return dim_vector(1,1);
#endif
           dim_vector d;
           d.resize(a.numel() < 2 ? 2 : a.numel());
           d(0) = d(1) = 1;
           for (int k=0;k<a.numel();k++) {
              d.elem(k) = a(k);
           }
           return d;
        } else {
          return dim_vector(1,1);
        }
      } else {
        return dim_vector(1,1);
      }
    }

    octave_value as_value() {
      ++count;
      return Swig::swig_value_ref(this);
    }

    void incref() {
      ++count;
    }

    void decref() {
      if (!--count)
	delete this;
    }

    size_t swig_this() const {
      if (!types.size())
	return (size_t) this;
      return (size_t) types[0].second.ptr;
    }
    const char* help_text() const {
      if (!types.size())
	return 0;
      if (!types[0].first->clientdata)
	return 0;
      swig_octave_class *c = (swig_octave_class *) types[0].first->clientdata;
      return c->constructor_doc;
    }

    std::string swig_type_name() const {
      // * need some way to manually name subclasses.
      // * eg optional first arg to subclass(), or named_subclass()
      std::string ret;
      for (unsigned int j = 0; j < types.size(); ++j) {
	if (j)
	  ret += "_";
	if (types[j].first->clientdata) {
	  swig_octave_class *c = (swig_octave_class *) types[j].first->clientdata;
	  ret += c->name;
	} else
	  ret += types[j].first->name;
      }
      return ret;
    }

    void merge(octave_swig_type &rhs) {
      rhs.own = 0;
      for (unsigned int j = 0; j < rhs.types.size(); ++j) {
	assert(!rhs.types[j].second.destroyed);
#ifdef SWIG_DIRECTORS
	Swig::Director *d = Swig::get_rtdir(rhs.types[j].second.ptr);
	if (d)
	  Swig::swig_director_set_self(d, this);
#endif
      }
      types.insert(types.end(), rhs.types.begin(), rhs.types.end());
      members.insert(rhs.members.begin(), rhs.members.end());
#if SWIG_OCTAVE_PREREQ(4,4,0)
      assign(rhs.swig_type_name(), rhs.as_value());
#else
      rhs.types.clear();
      rhs.members.clear();
#endif
    }

    typedef member_map::const_iterator swig_member_const_iterator;
    swig_member_const_iterator swig_members_begin() { return members.begin(); }
    swig_member_const_iterator swig_members_end() { return members.end(); }

    int cast(void **vptr, swig_type_info *type, int *_own, int flags) {
      int res = SWIG_ERROR;
      if (_own)
	*_own = own;
      if (flags &SWIG_POINTER_DISOWN)
	own = 0;
      if (!type && types.size()) {
	if(vptr)
          *vptr = types[0].second.ptr;
        return SWIG_OK;
      }
      for (unsigned int j = 0; j < types.size(); ++j)
	if (type == types[j].first) {
	  if(vptr)
            *vptr = types[j].second.ptr;
          return SWIG_OK;
        }
      for (unsigned int j = 0; j < types.size(); ++j) {
	swig_cast_info *tc = SWIG_TypeCheck(types[j].first->name, type);
	if (!tc)
	  continue;
        if(vptr) {
	  int newmemory = 0;
	  *vptr = SWIG_TypeCast(tc, types[j].second.ptr, &newmemory);
	    if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(_own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (_own)
                *_own = *_own | SWIG_CAST_NEW_MEMORY;
            }
        }
        res = SWIG_OK;
        break;
      }
      return res;
    }

    bool is_owned() const {
      return own;
    }

#ifdef SWIG_DIRECTORS
    void director_destroyed(Swig::Director *d) {
      bool found = false;
      for (unsigned int j = 0; j < types.size(); ++j) {
	Swig::Director *dj = Swig::get_rtdir(types[j].second.ptr);
	if (dj == d) {
	  types[j].second.destroyed = true;
	  found = true;
	}
      }
      assert(found);
    }
#endif

    void assign(const std::string &name, const octave_value &ov) {
      members[name] = std::make_pair((const swig_octave_member *) 0, ov);
    }

    void assign(const std::string &name, const swig_octave_member *m) {
      members[name] = std::make_pair(m, octave_value());
    }

    octave_base_value *clone() const {
      // pass-by-value is probably not desired, and is harder;
      // requires calling copy constructors of contained types etc.
      assert(0);
      *(int *) 0 = 0;
      return 0;
    }

    octave_base_value *empty_clone() const {
      return new octave_swig_type();
    }

    bool is_defined() const {
      return true;
    }

#if SWIG_OCTAVE_PREREQ(6,0,0)
    virtual bool isstruct() const {
#else
    virtual bool is_map() const {
#endif
      return true;
    }

    virtual octave_value subsref(const std::string &ops, const std::list < octave_value_list > &idx) {
      octave_value_list ovl = subsref(ops, idx, 1);
      return ovl.length()? ovl(0) : octave_value();
    }

    virtual octave_value_list subsref(const std::string &ops, const std::list < octave_value_list > &idx, int nargout) {
      assert(ops.size() > 0);
      assert(ops.size() == idx.size());

      std::list < octave_value_list >::const_iterator idx_it = idx.begin();
      int skip = 0;
      octave_value_list sub_ovl;

      // constructor invocation
      if (ops[skip] == '(' && construct_type) {
	assert(construct_type->clientdata);
	swig_octave_class *c = (swig_octave_class *) construct_type->clientdata;
	if (!c->constructor) {
	  error("cannot create instance");
	  return octave_value_list();
	}
	octave_value_list args;
	if (c->director)
	  args.append(Swig::swig_value_ref(new octave_swig_type(this, 0, 0)));
	args.append(*idx_it++);
	++skip;
	sub_ovl = c->constructor(args, nargout);
      }
      // member dereference or invocation
      else if (ops[skip] == '.') {
	std::string subname;
	const swig_type_info *base = 0;	// eg, a.base.base_cpp_mem
	for (;;) {
	  octave_value_list subname_ovl(*idx_it++);
	  ++skip;
	  assert(subname_ovl.length() == 1 && subname_ovl(0).is_string());
	  subname = subname_ovl(0).string_value();

	  const swig_type_info *next_base = find_base(subname, base);
	  if (!next_base || skip >= (int) ops.size() || ops[skip] != '.')
	    break;
	  base = next_base;
	}

	member_value_pair tmp, *m = &tmp;
	if (!base || !(m->first = find_member(base, subname)))
	  m = find_member(subname, false);
	if (!m) {
	  error("member not found");
	  return octave_value_list();
	}

	octave_value_list args;
	if (!always_static &&
	    (!m->first || (!m->first->is_static() && !m->first->is_global())))
	  args.append(as_value());
	if (skip < (int) ops.size() && ops[skip] == '(' && 
	    ((m->first && m->first->method) || m->second.is_function() || 
	     m->second.is_function_handle())) {
	  args.append(*idx_it++);
	  ++skip;
	  sub_ovl = member_invoke(m, args, nargout);
	} else {
	  sub_ovl = member_deref(m, args);
	}
      }
      // index operator
      else {
	if (ops[skip] == '(' || ops[skip] == '{') {
	  const char *op_name = ops[skip] == '(' ? "__paren__" : "__brace__";
	  octave_value_list args;
	  args.append(*idx_it++);
	  ++skip;
	  if (!dispatch_index_op(op_name, args, sub_ovl)) {
	    error("error evaluating index operator");
	    return octave_value_list();
	  }
	} else {
	  error("unsupported subsref");
	  return octave_value_list();
	}
      }

      if (skip >= (int) ops.size())
	return sub_ovl;
      if (sub_ovl.length() < 1) {
	error("bad subs ref");
	return octave_value_list();
      }
      return sub_ovl(0).next_subsref(nargout, ops, idx, skip);
    }

    octave_value subsasgn(const std::string &ops, const std::list < octave_value_list > &idx, const octave_value &rhs) {
      assert(ops.size() > 0);
      assert(ops.size() == idx.size());

      std::list < octave_value_list >::const_iterator idx_it = idx.begin();
      int skip = 0;

      if (ops.size() > 1) {
	std::list < octave_value_list >::const_iterator last = idx.end();
	--last;
	std::list < octave_value_list > next_idx(idx.begin(), last);
	octave_value next_ov = subsref(ops.substr(0, ops.size() - 1), next_idx);
	next_ov.subsasgn(ops.substr(ops.size() - 1), std::list < octave_value_list > (1, *last), rhs);
      }

      else if (ops[skip] == '(' || ops[skip] == '{') {
	const char *op_name = ops[skip] == '(' ? "__paren_asgn__" : "__brace_asgn__";
	member_value_pair *m = find_member(op_name, false);
	if (m) {
	  octave_value_list args;
	  args.append(as_value());
	  args.append(*idx_it);
	  args.append(rhs);
	  member_invoke(m, args, 1);
	} else
	  error("%s member not found", op_name);
      }

      else if (ops[skip] == '.') {
	octave_value_list subname_ovl(*idx_it++);
	++skip;
	assert(subname_ovl.length() == 1 &&subname_ovl(0).is_string());
	std::string subname = subname_ovl(0).string_value();

	member_value_pair *m = find_member(subname, true);
	if (!m->first || !m->first->set_method) {
	  m->first = 0;
	  m->second = rhs;
	} else if (m->first->set_method) {
	  octave_value_list args;
	  if (!m->first->is_static() && !m->first->is_global())
	    args.append(as_value());
	  args.append(rhs);
	  m->first->set_method(args, 1);
	} else
	  error("member not assignable");
      } else
	error("unsupported subsasgn");

      return as_value();
    }

#if SWIG_OCTAVE_PREREQ(4,4,0)
    virtual bool isobject() const {
#else
    virtual bool is_object() const {
#endif
      return true;
    }

    virtual bool is_string() const {
      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
      return !!nc_this->find_member("__str__", false);
    }

    virtual std::string string_value(bool force = false) const {
      octave_value ret;
      if (!dispatch_unary_op("__str__", ret)) {
        error("__str__ method not defined");
        return std::string();
      }
      if (!ret.is_string()) {
	error("__str__ method did not return a string");
	return std::string();
      }
      return ret.string_value();
    }

    virtual double scalar_value(bool frc_str_conv = false) const {
      octave_value ret;
      if (!dispatch_unary_op("__float__", ret)) {
        error("__float__ method not defined");
      }
      return ret.scalar_value();
    }

#if SWIG_OCTAVE_PREREQ(4,2,0)
    virtual octave_value as_double(void) const {
      octave_value ret;
      if (!dispatch_unary_op("__float__", ret)) {
        error("__float__ method not defined");
      }
      return ret.as_double();
    }

    virtual octave_value as_single(void) const {
      octave_value ret;
      if (!dispatch_unary_op("__float__", ret)) {
        error("__float__ method not defined");
      }
      return ret.as_single();
    }
#endif

#if SWIG_OCTAVE_PREREQ(3,8,0)
    virtual octave_value map(octave_base_value::unary_mapper_t umap) const {
      const std::string opname = std::string("__") + octave_base_value::get_umap_name(umap) + std::string("__");
      octave_value ret;
      if (!dispatch_unary_op(opname, ret)) {
        error("%s", (opname + std::string(" method not found")).c_str());
        return octave_value();
      }
      return ret;
    }
#endif

#if SWIG_OCTAVE_PREREQ(3,3,52)
    virtual octave_map map_value() const {
      return octave_map();
    }
#else
    virtual Octave_map map_value() const {
      return Octave_map();
    }
#endif

    virtual string_vector map_keys() const {
      member_map tmp;
      load_members(tmp);

      string_vector keys(tmp.size());
      int k = 0;
      for (member_map::iterator it = tmp.begin(); it != tmp.end(); ++it)
	keys(k++) = it->first;

      return keys;
    }

    virtual bool save_ascii (std::ostream& os) {
      return true;
    }

    virtual bool load_ascii (std::istream& is) {
      return true;
    }

    virtual bool save_binary (std::ostream& os, bool& save_as_floats) {
      return true;
    }

    virtual bool load_binary (std::istream& is, bool swap, 
#if SWIG_OCTAVE_PREREQ(6,0,0)
			      octave::mach_info::float_format fmt) {
#else
                             oct_mach_info::float_format fmt) {
#endif
      return true;
    }

#if defined (HAVE_HDF5)
# if SWIG_OCTAVE_PREREQ(4,0,0)
    virtual bool
      save_hdf5 (octave_hdf5_id loc_id, const char *name, bool save_as_floats) {
      return true;
    }

    virtual bool
      load_hdf5 (octave_hdf5_id loc_id, const char *name, bool have_h5giterate_bug) {
      return true;
    }
# else
    virtual bool
      save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats) {
      return true;
    }

    virtual bool
      load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug) {
      return true;
    }
# endif
#endif

    virtual octave_value convert_to_str(bool pad = false, bool force = false, char type = '"') const {
      return string_value();
    }

    virtual octave_value convert_to_str_internal(bool pad, bool force, char type) const {
      return string_value();
    }

    static bool dispatch_global_op(const std::string &symbol, const octave_value_list &args, octave_value &ret) {
      // we assume that SWIG_op_prefix-prefixed functions are installed in global namespace
      // (rather than any module namespace).

      octave_function *fcn = is_valid_function(symbol, std::string(), false);
      if (!fcn)
	return false;
#if SWIG_OCTAVE_PREREQ(4,4,0)
      octave::tree_evaluator& tw = octave::interpreter::the_interpreter()->get_evaluator();
      octave_value_list retval = fcn->call(tw, 1, args);
      if (retval.length() == 1)
        ret = retval(0);
#else
      ret = fcn->do_multi_index_op(1, args)(0);
#endif
      return true;
    }

    static octave_value dispatch_unary_op(const octave_base_value &x, const char *op_name) {
      octave_swig_type *ost = Swig::swig_value_deref(x);
      assert(ost);

      octave_value ret;
      if (ost->dispatch_unary_op(std::string("__") + op_name + std::string("__"), ret))
	return ret;
      std::string symbol = SWIG_op_prefix + ost->swig_type_name() + "_" + op_name;
      octave_value_list args;
      args.append(make_value_hack(x));
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      error("could not dispatch unary operator");
      return octave_value();
    }

    static octave_value dispatch_binary_op(const octave_base_value &lhs, const octave_base_value &rhs, const char *op_name) {
      octave_swig_type *lhs_ost = Swig::swig_value_deref(lhs);
      octave_swig_type *rhs_ost = Swig::swig_value_deref(rhs);

      octave_value ret;
      if (lhs_ost && lhs_ost->dispatch_binary_op(std::string("__") + op_name + std::string("__"), rhs, ret))
	return ret;
      if (rhs_ost) {
        if (strlen(op_name) == 2  && (op_name[1] == 't' || op_name[1] == 'e')) {
          if (op_name[0] == 'l' && rhs_ost->dispatch_binary_op(std::string("__g") + op_name[1] + std::string("__"), lhs, ret))
            return ret;
          if (op_name[0] == 'g' && rhs_ost->dispatch_binary_op(std::string("__l") + op_name[1] + std::string("__"), lhs, ret))
            return ret;
        }
        if (rhs_ost->dispatch_binary_op(std::string("__r") + op_name + std::string("__"), lhs, ret))
          return ret;
      }

      std::string symbol;
      octave_value_list args;
      args.append(make_value_hack(lhs));
      args.append(make_value_hack(rhs));

      symbol = SWIG_op_prefix;
      symbol += lhs_ost ? lhs_ost->swig_type_name() : lhs.type_name();
      symbol += "_";
      symbol += op_name;
      symbol += "_";
      symbol += rhs_ost ? rhs_ost->swig_type_name() : rhs.type_name();
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      symbol = SWIG_op_prefix;
      symbol += lhs_ost ? lhs_ost->swig_type_name() : lhs.type_name();
      symbol += "_";
      symbol += op_name;
      symbol += "_";
      symbol += "any";
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      symbol = SWIG_op_prefix;
      symbol += "any";
      symbol += "_";
      symbol += op_name;
      symbol += "_";
      symbol += rhs_ost ? rhs_ost->swig_type_name() : rhs.type_name();
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      error("could not dispatch binary operator");
      return octave_value();
    }

#if SWIG_OCTAVE_PREREQ(4,0,0)
    void print(std::ostream &os, bool pr_as_read_syntax = false)
#else
    void print(std::ostream &os, bool pr_as_read_syntax = false) const
#endif
    {
      if (is_string()) {
	os << string_value();
	return;
      }

      member_map tmp;
      load_members(tmp);

      indent(os);
      os << "{"; newline(os);
      increment_indent_level();
      for (unsigned int j = 0; j < types.size(); ++j) {
        indent(os);
	if (types[j].first->clientdata) {
	  const swig_octave_class *c = (const swig_octave_class *) types[j].first->clientdata;
	  os << c->name << ", ptr = " << types[j].second.ptr; newline(os);
	} else {
	  os << types[j].first->name << ", ptr = " << types[j].second.ptr; newline(os);
	}
      }
      for (member_map::const_iterator it = tmp.begin(); it != tmp.end(); ++it) {
        indent(os);
	if (it->second.first) {
	  const char *objtype = it->second.first->method ? "method" : "variable";
	  const char *modifier = (it->second.first->flags &1) ? "static " : (it->second.first->flags &2) ? "global " : "";
	  os << it->second.first->name << " (" << modifier << objtype << ")"; newline(os);
	  assert(it->second.first->name == it->first);
	} else {
	  os << it->first; newline(os);
	}
      }
      decrement_indent_level();
      indent(os);
      os << "}"; newline(os);
    }
  };

  // Octave tries hard to preserve pass-by-value semantics. Eg, assignments
  // will call clone() via make_unique() if there is more than one outstanding 
  // reference to the lhs, and forces the clone's reference count to 1 
  // (so you can't just increment your own count and return this).
  //
  // One way to fix this (without modifying Octave) is to add a level of
  // indirection such that clone copies ref-counted pointer and we keep 
  // pass-by-ref semantics (which are more natural/expected for C++ bindings).
  //
  // Supporting both pass-by-{ref,value} and toggling via %feature/option 
  // might be nice.

  class octave_swig_ref:public octave_base_value {
    octave_swig_type *ptr;
  public:
    octave_swig_ref(octave_swig_type *_ptr = 0)
      :ptr(_ptr)
      {
        // Ensure type_id() is set correctly
        if (t_id == -1) {
          t_id = octave_swig_ref::static_type_id();
        }
      }

    ~octave_swig_ref()
      { if (ptr) ptr->decref(); }

    octave_swig_type *get_ptr() const
      { return ptr; }

    octave_base_value *clone() const
      { if (ptr) ptr->incref(); return new octave_swig_ref(ptr); }

    octave_base_value *empty_clone() const
      { return new octave_swig_ref(0); }

    dim_vector dims(void) const 
      { return ptr->dims(); }

    bool is_defined() const
      { return ptr->is_defined(); }

#if SWIG_OCTAVE_PREREQ(6,0,0)
    virtual bool isstruct() const
      { return ptr->isstruct(); }
#else
    virtual bool is_map() const 
      { return ptr->is_map(); }
#endif

    virtual octave_value subsref(const std::string &ops, const std::list < octave_value_list > &idx) 
      { return ptr->subsref(ops, idx); }

    virtual octave_value_list subsref(const std::string &ops, const std::list < octave_value_list > &idx, int nargout)
      { return ptr->subsref(ops, idx, nargout); }

    octave_value subsasgn(const std::string &ops, const std::list < octave_value_list > &idx, const octave_value &rhs)
      { return ptr->subsasgn(ops, idx, rhs); }

#if SWIG_OCTAVE_PREREQ(4,4,0)
    virtual bool isobject() const
      { return ptr->isobject(); }
#else
    virtual bool is_object() const 
      { return ptr->is_object(); }
#endif

    virtual bool is_string() const 
      { return ptr->is_string(); }

    virtual std::string string_value(bool force = false) const 
      { return ptr->string_value(force); }

    virtual double scalar_value(bool frc_str_conv = false) const
      { return ptr->scalar_value(frc_str_conv); }

#if SWIG_OCTAVE_PREREQ(4,2,0)
    virtual octave_value as_double(void) const
      { return ptr->as_double(); }

    virtual octave_value as_single(void) const
      { return ptr->as_single(); }
#endif

#if SWIG_OCTAVE_PREREQ(3,8,0)
    virtual octave_value map(octave_base_value::unary_mapper_t umap) const
      { return ptr->map(umap); }
#endif

#if SWIG_OCTAVE_PREREQ(3,3,52)
    virtual octave_map map_value() const
      { return ptr->map_value(); }
#else
    virtual Octave_map map_value() const
      { return ptr->map_value(); }
#endif

    virtual string_vector map_keys() const
      { return ptr->map_keys(); }

    virtual bool save_ascii (std::ostream& os)
      { return ptr->save_ascii(os); }

    virtual bool load_ascii (std::istream& is)
      { return ptr->load_ascii(is); }

    virtual bool save_binary (std::ostream& os, bool& save_as_floats)
      { return ptr->save_binary(os, save_as_floats); }

    virtual bool load_binary (std::istream& is, bool swap, 
#if SWIG_OCTAVE_PREREQ(6,0,0)
			      octave::mach_info::float_format fmt)
#else
                             oct_mach_info::float_format fmt)
#endif
      { return ptr->load_binary(is, swap, fmt); }

#if defined (HAVE_HDF5)
# if SWIG_OCTAVE_PREREQ(4,0,0)
    virtual bool
      save_hdf5 (octave_hdf5_id loc_id, const char *name, bool save_as_floats)
      { return ptr->save_hdf5(loc_id, name, save_as_floats); }

    virtual bool
      load_hdf5 (octave_hdf5_id loc_id, const char *name, bool have_h5giterate_bug)
      { return ptr->load_hdf5(loc_id, name, have_h5giterate_bug); }
# else
    virtual bool
      save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats)
      { return ptr->save_hdf5(loc_id, name, save_as_floats); }

    virtual bool
      load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug)
      { return ptr->load_hdf5(loc_id, name, have_h5giterate_bug); }
# endif
#endif

    virtual octave_value convert_to_str(bool pad = false, bool force = false, char type = '"') const
      { return ptr->convert_to_str(pad, force, type); }

    virtual octave_value convert_to_str_internal(bool pad, bool force, char type) const
      { return ptr->convert_to_str_internal(pad, force, type); }

#if SWIG_OCTAVE_PREREQ(4,0,0)
    void print(std::ostream &os, bool pr_as_read_syntax = false)
#else
    void print(std::ostream &os, bool pr_as_read_syntax = false) const
#endif
      { return ptr->print(os, pr_as_read_syntax); }

#if SWIG_OCTAVE_PREREQ(4,4,0)
      static void set_type_id(int type_id) { t_id=type_id; }
#endif

    virtual type_conv_info numeric_conversion_function(void) const {
      return octave_base_value::type_conv_info (default_numeric_conversion_function,
                                                octave_scalar::static_type_id ());
    }

  private:
    static octave_base_value *default_numeric_conversion_function (const octave_base_value& a) {
      const octave_swig_ref& v = dynamic_cast<const octave_swig_ref&>(a);
      return new octave_scalar(v.scalar_value());
    }

#if !SWIG_OCTAVE_PREREQ(4,0,0)
    DECLARE_OCTAVE_ALLOCATOR;
#endif
    DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA;
  };
#if !SWIG_OCTAVE_PREREQ(4,0,0)
  DEFINE_OCTAVE_ALLOCATOR(octave_swig_ref);
#endif
  DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_swig_ref, "swig_ref", "swig_ref");

  class octave_swig_packed:public octave_base_value {
    swig_type_info *type;
    std::vector < char > buf;
  public:

    octave_swig_packed(swig_type_info *_type = 0, const void *_buf = 0, size_t _buf_len = 0)
      :	type(_type), buf((const char*)_buf, (const char*)_buf + _buf_len)
      {
        // Ensure type_id() is set correctly
        if (t_id == -1) {
          t_id = octave_swig_packed::static_type_id();
        }
      }

    bool copy(swig_type_info *outtype, void *ptr, size_t sz) const {
      if (outtype && outtype != type)
	return false;
      assert(sz <= buf.size());
      std::copy(buf.begin(), buf.begin()+sz, (char*)ptr);
      return true;
    }

    octave_base_value *clone() const {
      return new octave_swig_packed(*this);
    }

    octave_base_value *empty_clone() const {
      return new octave_swig_packed();
    }

    bool is_defined() const {
      return true;
    }

#if SWIG_OCTAVE_PREREQ(4,0,0)
    void print(std::ostream &os, bool pr_as_read_syntax = false)
#else
    void print(std::ostream &os, bool pr_as_read_syntax = false) const
#endif
    {
      indent(os);
      os << "swig packed type: name = " << (type ? type->name : std::string()) << ", len = " << buf.size(); newline(os);
    }


    virtual bool save_ascii (std::ostream& os) {
      return true;
    }

    virtual bool load_ascii (std::istream& is) {
      return true;
    }

    virtual bool save_binary (std::ostream& os, bool& save_as_floats) {
      return true;
    }

    virtual bool load_binary (std::istream& is, bool swap, 
#if SWIG_OCTAVE_PREREQ(6,0,0)
			      octave::mach_info::float_format fmt) {
#else
                             oct_mach_info::float_format fmt) {
#endif
      return true;
    }

#if defined (HAVE_HDF5)
# if SWIG_OCTAVE_PREREQ(4,0,0)
    virtual bool
      save_hdf5 (octave_hdf5_id loc_id, const char *name, bool save_as_floats) {
      return true;
    }

    virtual bool
      load_hdf5 (octave_hdf5_id loc_id, const char *name, bool have_h5giterate_bug) {
      return true;
    }
# else
    virtual bool
      save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats) {
      return true;
    }

    virtual bool
      load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug) {
      return true;
    }
# endif
#endif

#if SWIG_OCTAVE_PREREQ(4,4,0)
    static void set_type_id(int type_id) { t_id=type_id; }
#endif

  private:
#if !SWIG_OCTAVE_PREREQ(4,0,0)
    DECLARE_OCTAVE_ALLOCATOR;
#endif
    DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA;
  };
#if !SWIG_OCTAVE_PREREQ(4,0,0)
  DEFINE_OCTAVE_ALLOCATOR(octave_swig_packed);
#endif
  DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_swig_packed, "swig_packed", "swig_packed");

  SWIGRUNTIME octave_value_list octave_set_immutable(const octave_value_list &args, int nargout) {
    error("attempt to set immutable member variable");
    return octave_value_list();
  }

  struct octave_value_ref {
    const octave_value_list &ovl;
    int j;

    octave_value_ref(const octave_value_list &_ovl, int _j)
      :ovl(_ovl), j(_j) { }

    operator  octave_value() const {
      return ovl(j);
    }

    octave_value operator*() const {
      return ovl(j);
    }
  };


namespace Swig {

  SWIGRUNTIME octave_base_value *swig_value_ref(octave_swig_type *ost) {
    return new octave_swig_ref(ost);
  }

  SWIGRUNTIME octave_swig_type *swig_value_deref(octave_value ov) {
    if (
#if SWIG_OCTAVE_PREREQ(4,4,0)
      ov.iscell()
#else
      ov.is_cell()
#endif
      && ov.rows() == 1 && ov.columns() == 1)
      ov = ov.cell_value()(0);
    return swig_value_deref(*ov.internal_rep());
  }

  SWIGRUNTIME octave_swig_type *swig_value_deref(const octave_base_value &ov) {
    if (ov.type_id() != octave_swig_ref::static_type_id())
      return 0;
    const octave_swig_ref *osr = static_cast < const octave_swig_ref *>(&ov);
    return osr->get_ptr();
  }

}


#define swig_unary_op(name) \
SWIGRUNTIME octave_value swig_unary_op_##name(const octave_base_value &x) { \
  return octave_swig_type::dispatch_unary_op(x,#name); \
}
#define swig_binary_op(name) \
SWIGRUNTIME octave_value swig_binary_op_##name(const octave_base_value&lhs,const octave_base_value &rhs) { \
  return octave_swig_type::dispatch_binary_op(lhs,rhs,#name); \
}
#if SWIG_OCTAVE_PREREQ(4,4,0)
#define swigreg_unary_op(name) \
if (!octave_value_typeinfo::lookup_unary_op(octave_value::op_##name,tid)) \
typeinfo.register_unary_op(octave_value::op_##name,tid,swig_unary_op_##name);
#else
#define swigreg_unary_op(name) \
if (!octave_value_typeinfo::lookup_unary_op(octave_value::op_##name,tid)) \
octave_value_typeinfo::register_unary_op(octave_value::op_##name,tid,swig_unary_op_##name);
#endif
#if SWIG_OCTAVE_PREREQ(4,4,0)
#define swigreg_binary_op(name) \
if (!octave_value_typeinfo::lookup_binary_op(octave_value::op_##name,tid1,tid2)) \
typeinfo.register_binary_op(octave_value::op_##name,tid1,tid2,swig_binary_op_##name);
#else
#define swigreg_binary_op(name) \
if (!octave_value_typeinfo::lookup_binary_op(octave_value::op_##name,tid1,tid2)) \
octave_value_typeinfo::register_binary_op(octave_value::op_##name,tid1,tid2,swig_binary_op_##name);
#endif

  swig_unary_op(not);
  swig_unary_op(uplus);
  swig_unary_op(uminus);
  swig_unary_op(transpose);
  swig_unary_op(hermitian);
  swig_unary_op(incr);
  swig_unary_op(decr);

  swig_binary_op(add);
  swig_binary_op(sub);
  swig_binary_op(mul);
  swig_binary_op(div);
  swig_binary_op(pow);
  swig_binary_op(ldiv);
#if !SWIG_OCTAVE_PREREQ(4,2,0)
  swig_binary_op(lshift);
  swig_binary_op(rshift);
#endif
  swig_binary_op(lt);
  swig_binary_op(le);
  swig_binary_op(eq);
  swig_binary_op(ge);
  swig_binary_op(gt);
  swig_binary_op(ne);
  swig_binary_op(el_mul);
  swig_binary_op(el_div);
  swig_binary_op(el_pow);
  swig_binary_op(el_ldiv);
  swig_binary_op(el_and);
  swig_binary_op(el_or);

  SWIGRUNTIME void SWIG_InstallUnaryOps(int tid) {
#if SWIG_OCTAVE_PREREQ(4,4,0)
    octave::type_info& typeinfo = octave::interpreter::the_interpreter()->get_type_info();
#endif
    swigreg_unary_op(not);
    swigreg_unary_op(uplus);
    swigreg_unary_op(uminus);
    swigreg_unary_op(transpose);
    swigreg_unary_op(hermitian);
    swigreg_unary_op(incr);
    swigreg_unary_op(decr);
  }
  SWIGRUNTIME void SWIG_InstallBinaryOps(int tid1, int tid2) {
#if SWIG_OCTAVE_PREREQ(4,4,0)
    octave::type_info& typeinfo = octave::interpreter::the_interpreter()->get_type_info();
#endif
    swigreg_binary_op(add);
    swigreg_binary_op(sub);
    swigreg_binary_op(mul);
    swigreg_binary_op(div);
    swigreg_binary_op(pow);
    swigreg_binary_op(ldiv);
#if !SWIG_OCTAVE_PREREQ(4,2,0)
    swigreg_binary_op(lshift);
    swigreg_binary_op(rshift);
#endif
    swigreg_binary_op(lt);
    swigreg_binary_op(le);
    swigreg_binary_op(eq);
    swigreg_binary_op(ge);
    swigreg_binary_op(gt);
    swigreg_binary_op(ne);
    swigreg_binary_op(el_mul);
    swigreg_binary_op(el_div);
    swigreg_binary_op(el_pow);
    swigreg_binary_op(el_ldiv);
    swigreg_binary_op(el_and);
    swigreg_binary_op(el_or);
  }
  SWIGRUNTIME void SWIG_InstallOps(int tid) {
    // here we assume that tid are conseq integers increasing from zero, and 
    // that our tid is the last one. might be better to have explicit string 
    // list of types we should bind to, and use lookup_type to resolve their tid.

    SWIG_InstallUnaryOps(tid);
    SWIG_InstallBinaryOps(tid, tid);
    for (int j = 0; j < tid; ++j) {
      SWIG_InstallBinaryOps(j, tid);
      SWIG_InstallBinaryOps(tid, j);
    }
  }

SWIGRUNTIME octave_value SWIG_Octave_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  int own = (flags &SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;

#ifdef SWIG_DIRECTORS
  Swig::Director *d = Swig::get_rtdir(ptr);
  if (d && Swig::swig_director_get_self(d))
    return Swig::swig_director_get_self(d)->as_value();
#endif
  return Swig::swig_value_ref(new octave_swig_type(ptr, type, own));
}

SWIGRUNTIME int SWIG_Octave_ConvertPtrAndOwn(octave_value ov, void **ptr, swig_type_info *type, int flags, int *own) {
    if (
#if SWIG_OCTAVE_PREREQ(4,4,0)
      ov.iscell()
#else
      ov.is_cell()
#endif
      && ov.rows() == 1 && ov.columns() == 1)
    ov = ov.cell_value()(0);
  if (!ov.is_defined() ||
      (ov.is_matrix_type() && ov.rows() == 0 && ov.columns() == 0) ) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (ov.type_id() != octave_swig_ref::static_type_id())
    return SWIG_ERROR;
  octave_swig_ref *osr = static_cast < octave_swig_ref *>(ov.internal_rep());
  octave_swig_type *ost = osr->get_ptr();
  return ost->cast(ptr, type, own, flags);
}

SWIGRUNTIME octave_value SWIG_Octave_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return new octave_swig_packed(type, (char *) ptr, sz);
}

SWIGRUNTIME int SWIG_Octave_ConvertPacked(const octave_value &ov, void *ptr, size_t sz, swig_type_info *type) {
  if (!ov.is_defined())
    return SWIG_ERROR;
  if (ov.type_id() != octave_swig_packed::static_type_id())
    return SWIG_ERROR;
  octave_swig_packed *ost = static_cast < octave_swig_packed *>(ov.internal_rep());
  return ost->copy(type, (char *) ptr, sz) ? SWIG_OK : SWIG_ERROR;
}

SWIGRUNTIMEINLINE void SWIG_Octave_SetConstant(octave_swig_type *module_ns, const std::string &name, const octave_value &ov) {
  module_ns->assign(name, ov);
}

SWIGRUNTIMEINLINE octave_value SWIG_Octave_GetGlobalValue(std::string name) {
#if SWIG_OCTAVE_PREREQ(6,0,0)
  octave::interpreter *interp = octave::interpreter::the_interpreter ();
  return interp->global_varval(name);
#else
#if SWIG_OCTAVE_PREREQ(4,4,0)
  octave::symbol_table& symtab = octave::interpreter::the_interpreter()->get_symbol_table();
  return symtab.global_varval(name);
#else
  return get_global_value(name, true);
#endif
#endif
}

SWIGRUNTIME void SWIG_Octave_SetGlobalValue(std::string name, const octave_value& value) {
#if SWIG_OCTAVE_PREREQ(6,0,0)
  octave::interpreter *interp = octave::interpreter::the_interpreter ();
  interp->global_assign(name, value);
#elif SWIG_OCTAVE_PREREQ(4,4,0)
  octave::symbol_table& symtab = octave::interpreter::the_interpreter()->get_symbol_table();
  symtab.global_assign(name, value);
#else
  set_global_value(name, value);
#endif
}

SWIGRUNTIME void SWIG_Octave_LinkGlobalValue(std::string name) {
#if SWIG_OCTAVE_PREREQ(4,4,0)
  octave::symbol_scope symscope = octave::interpreter::the_interpreter()->get_current_scope();
#if SWIG_OCTAVE_PREREQ(6,0,0)
  octave::interpreter *interp = octave::interpreter::the_interpreter ();
  interp->assign(name, interp->global_varval(name));
  octave::tree_evaluator& tree_eval = interp->get_evaluator();
  octave::call_stack& callStack = tree_eval.get_call_stack();
  std::shared_ptr<octave::stack_frame> stackFrame = callStack.get_current_stack_frame();
  octave::symbol_record sym=symscope.lookup_symbol(name);
  stackFrame->mark_global(sym);
#else
  octave::symbol_table& symtab = octave::interpreter::the_interpreter()->get_symbol_table();
  symscope.assign(name, symtab.global_varval(name));
  symscope.mark_global(name);
#endif
#else
#if !SWIG_OCTAVE_PREREQ(3,2,0)
  link_to_global_variable(curr_sym_tab->lookup(name, true));
#else
#if !SWIG_OCTAVE_PREREQ(3,8,0)
  symbol_table::varref(name);
#endif
  symbol_table::mark_global(name);
#endif
#endif
}

SWIGRUNTIME swig_module_info *SWIG_Octave_GetModule(void *clientdata) {
  octave_value ov = SWIG_Octave_GetGlobalValue("__SWIG_MODULE__" SWIG_TYPE_TABLE_NAME SWIG_RUNTIME_VERSION);
  if (!ov.is_defined() ||
      ov.type_id() != octave_swig_packed::static_type_id())
    return 0;
  const octave_swig_packed* osp = 
    static_cast < const octave_swig_packed *> (ov.internal_rep());
  swig_module_info *pointer = 0;
  osp->copy(0, &pointer, sizeof(swig_module_info *));
  return pointer;
}

SWIGRUNTIME void SWIG_Octave_SetModule(void *clientdata, swig_module_info *pointer) {
  octave_value ov = new octave_swig_packed(0, &pointer, sizeof(swig_module_info *));
  SWIG_Octave_SetGlobalValue("__SWIG_MODULE__" SWIG_TYPE_TABLE_NAME SWIG_RUNTIME_VERSION, ov);
}



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FILE_TYPE swig_types[0]
#define SWIGTYPE_p_Skini__Message swig_types[1]
#define SWIGTYPE_p_THREAD_FUNCTION swig_types[2]
#define SWIGTYPE_p_Vector3D swig_types[3]
#define SWIGTYPE_p_char swig_types[4]
#define SWIGTYPE_p_double swig_types[5]
#define SWIGTYPE_p_float swig_types[6]
#define SWIGTYPE_p_int swig_types[7]
#define SWIGTYPE_p_long_long swig_types[8]
#define SWIGTYPE_p_p_char swig_types[9]
#define SWIGTYPE_p_short swig_types[10]
#define SWIGTYPE_p_signed_char swig_types[11]
#define SWIGTYPE_p_std__string swig_types[12]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[13]
#define SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t swig_types[14]
#define SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t swig_types[15]
#define SWIGTYPE_p_stk__ADSR swig_types[16]
#define SWIGTYPE_p_stk__Asymp swig_types[17]
#define SWIGTYPE_p_stk__BandedWG swig_types[18]
#define SWIGTYPE_p_stk__BeeThree swig_types[19]
#define SWIGTYPE_p_stk__BiQuad swig_types[20]
#define SWIGTYPE_p_stk__Blit swig_types[21]
#define SWIGTYPE_p_stk__BlitSaw swig_types[22]
#define SWIGTYPE_p_stk__BlitSquare swig_types[23]
#define SWIGTYPE_p_stk__BlowBotl swig_types[24]
#define SWIGTYPE_p_stk__BlowHole swig_types[25]
#define SWIGTYPE_p_stk__BowTable swig_types[26]
#define SWIGTYPE_p_stk__Bowed swig_types[27]
#define SWIGTYPE_p_stk__Brass swig_types[28]
#define SWIGTYPE_p_stk__Chorus swig_types[29]
#define SWIGTYPE_p_stk__Clarinet swig_types[30]
#define SWIGTYPE_p_stk__Cubic swig_types[31]
#define SWIGTYPE_p_stk__Delay swig_types[32]
#define SWIGTYPE_p_stk__DelayA swig_types[33]
#define SWIGTYPE_p_stk__DelayL swig_types[34]
#define SWIGTYPE_p_stk__Drummer swig_types[35]
#define SWIGTYPE_p_stk__Echo swig_types[36]
#define SWIGTYPE_p_stk__Effect swig_types[37]
#define SWIGTYPE_p_stk__Envelope swig_types[38]
#define SWIGTYPE_p_stk__FM swig_types[39]
#define SWIGTYPE_p_stk__FMVoices swig_types[40]
#define SWIGTYPE_p_stk__FileLoop swig_types[41]
#define SWIGTYPE_p_stk__FileRead swig_types[42]
#define SWIGTYPE_p_stk__FileWrite swig_types[43]
#define SWIGTYPE_p_stk__FileWvIn swig_types[44]
#define SWIGTYPE_p_stk__FileWvOut swig_types[45]
#define SWIGTYPE_p_stk__Filter swig_types[46]
#define SWIGTYPE_p_stk__Fir swig_types[47]
#define SWIGTYPE_p_stk__Flute swig_types[48]
#define SWIGTYPE_p_stk__FormSwep swig_types[49]
#define SWIGTYPE_p_stk__FreeVerb swig_types[50]
#define SWIGTYPE_p_stk__Function swig_types[51]
#define SWIGTYPE_p_stk__Generator swig_types[52]
#define SWIGTYPE_p_stk__Granulate swig_types[53]
#define SWIGTYPE_p_stk__Guitar swig_types[54]
#define SWIGTYPE_p_stk__HevyMetl swig_types[55]
#define SWIGTYPE_p_stk__Iir swig_types[56]
#define SWIGTYPE_p_stk__InetWvIn swig_types[57]
#define SWIGTYPE_p_stk__InetWvOut swig_types[58]
#define SWIGTYPE_p_stk__Instrmnt swig_types[59]
#define SWIGTYPE_p_stk__JCRev swig_types[60]
#define SWIGTYPE_p_stk__JetTable swig_types[61]
#define SWIGTYPE_p_stk__LentPitShift swig_types[62]
#define SWIGTYPE_p_stk__Mandolin swig_types[63]
#define SWIGTYPE_p_stk__Mesh2D swig_types[64]
#define SWIGTYPE_p_stk__Messager swig_types[65]
#define SWIGTYPE_p_stk__MidiFileIn swig_types[66]
#define SWIGTYPE_p_stk__Modal swig_types[67]
#define SWIGTYPE_p_stk__ModalBar swig_types[68]
#define SWIGTYPE_p_stk__Modulate swig_types[69]
#define SWIGTYPE_p_stk__Moog swig_types[70]
#define SWIGTYPE_p_stk__Mutex swig_types[71]
#define SWIGTYPE_p_stk__NRev swig_types[72]
#define SWIGTYPE_p_stk__Noise swig_types[73]
#define SWIGTYPE_p_stk__OnePole swig_types[74]
#define SWIGTYPE_p_stk__OneZero swig_types[75]
#define SWIGTYPE_p_stk__PRCRev swig_types[76]
#define SWIGTYPE_p_stk__PercFlut swig_types[77]
#define SWIGTYPE_p_stk__Phonemes swig_types[78]
#define SWIGTYPE_p_stk__PitShift swig_types[79]
#define SWIGTYPE_p_stk__Plucked swig_types[80]
#define SWIGTYPE_p_stk__PoleZero swig_types[81]
#define SWIGTYPE_p_stk__Recorder swig_types[82]
#define SWIGTYPE_p_stk__ReedTable swig_types[83]
#define SWIGTYPE_p_stk__Resonate swig_types[84]
#define SWIGTYPE_p_stk__Rhodey swig_types[85]
#define SWIGTYPE_p_stk__RtWvIn swig_types[86]
#define SWIGTYPE_p_stk__RtWvOut swig_types[87]
#define SWIGTYPE_p_stk__Sampler swig_types[88]
#define SWIGTYPE_p_stk__Saxofony swig_types[89]
#define SWIGTYPE_p_stk__Shakers swig_types[90]
#define SWIGTYPE_p_stk__Simple swig_types[91]
#define SWIGTYPE_p_stk__SineWave swig_types[92]
#define SWIGTYPE_p_stk__SingWave swig_types[93]
#define SWIGTYPE_p_stk__Sitar swig_types[94]
#define SWIGTYPE_p_stk__Socket swig_types[95]
#define SWIGTYPE_p_stk__Sphere swig_types[96]
#define SWIGTYPE_p_stk__StifKarp swig_types[97]
#define SWIGTYPE_p_stk__Stk swig_types[98]
#define SWIGTYPE_p_stk__StkError swig_types[99]
#define SWIGTYPE_p_stk__StkFrames swig_types[100]
#define SWIGTYPE_p_stk__TapDelay swig_types[101]
#define SWIGTYPE_p_stk__TcpClient swig_types[102]
#define SWIGTYPE_p_stk__TcpServer swig_types[103]
#define SWIGTYPE_p_stk__Thread swig_types[104]
#define SWIGTYPE_p_stk__TubeBell swig_types[105]
#define SWIGTYPE_p_stk__Twang swig_types[106]
#define SWIGTYPE_p_stk__TwoPole swig_types[107]
#define SWIGTYPE_p_stk__TwoZero swig_types[108]
#define SWIGTYPE_p_stk__UdpSocket swig_types[109]
#define SWIGTYPE_p_stk__Vector3D swig_types[110]
#define SWIGTYPE_p_stk__VoicForm swig_types[111]
#define SWIGTYPE_p_stk__Voicer swig_types[112]
#define SWIGTYPE_p_stk__Whistle swig_types[113]
#define SWIGTYPE_p_stk__Wurley swig_types[114]
#define SWIGTYPE_p_unsigned_char swig_types[115]
#define SWIGTYPE_p_unsigned_int swig_types[116]
#define SWIGTYPE_p_unsigned_long_long swig_types[117]
#define SWIGTYPE_p_unsigned_short swig_types[118]
static swig_type_info *swig_types[120];
static swig_module_info swig_module = {swig_types, 119, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


#define SWIGVERSION 0x040100 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#define __OS_LINUX__
#include <Stk.h>
#include <Generator.h>
#include <Instrmnt.h>
#include <FM.h>
#include <Filter.h>
#include <Effect.h>
#include <Function.h>

#include <WvIn.h>
#include <WvOut.h>
#include <Sampler.h>
#include <ADSR.h>
#include <Asymp.h>
#include <BandedWG.h>
#include <BeeThree.h>
#include <BiQuad.h>
#include <Blit.h>
#include <BlitSaw.h>
#include <BlitSquare.h>
#include <BlowBotl.h>
#include <BlowHole.h>
#include <BowTable.h>
#include <Bowed.h>
#include <Brass.h>
#include <Chorus.h>
#include <Clarinet.h>
#include <Cubic.h>
#include <Delay.h>
#include <DelayA.h>
#include <DelayL.h>
#include <Drummer.h>
#include <Echo.h>
#include <Effect.h>
#include <Envelope.h>
#include <FMVoices.h>
#include <FileRead.h>
#include <FileWrite.h>
#include <FileWvIn.h>
#include <FileWvOut.h>
#include <FileLoop.h>
#include <Filter.h>
#include <Fir.h>
#include <Flute.h>
#include <FormSwep.h>
#include <FreeVerb.h>
#include <Granulate.h>
#include <Guitar.h>
#include <HevyMetl.h>
#include <Iir.h>
#include <JCRev.h>
#include <JetTable.h>
#include <LentPitShift.h>
#include <Mandolin.h>
#include <Mesh2D.h>
#include <Messager.h>
#include <MidiFileIn.h>
#include <Modal.h>
#include <ModalBar.h>
#include <Modulate.h>
#include <Moog.h>
#include <NRev.h>
#include <Noise.h>
#include <OnePole.h>
#include <OneZero.h>
#include <PRCRev.h>
#include <PercFlut.h>
#include <Phonemes.h>
#include <PitShift.h>
#include <Plucked.h>
#include <PoleZero.h>
#include <Recorder.h>
#include <ReedTable.h>
#include <Resonate.h>
#include <Rhodey.h>
#include <Saxofony.h>
#include <Shakers.h>
#include <Simple.h>
#include <SineWave.h>
#include <SingWave.h>
#include <Sitar.h>
#include <Sphere.h>
#include <StifKarp.h>
#include <TapDelay.h>
#include <TubeBell.h>
#include <Twang.h>
#include <TwoPole.h>
#include <TwoZero.h>
#include <Vector3D.h>
#include <VoicForm.h>
#include <Voicer.h>
#include <Whistle.h>
#include <Wurley.h>
#include <Socket.h>
#include <Mutex.h>
#include <Thread.h>
#include <InetWvIn.h>
#include <InetWvOut.h>
#include <TcpClient.h>
#include <TcpServer.h>
#include <UdpSocket.h>
#include <RtWvIn.h>
#include <RtWvOut.h>

using namespace stk;
using namespace stk;


#include <stdint.h>		// Use the C99 official header


#include <typeinfo>
#include <stdexcept>


#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T, class Alloc = std::allocator<T>>
    struct vector_iterator
    {
        typename std::vector<T,Alloc>::iterator iter;
        std::vector<T,Alloc> v;

        vector_iterator(const std::vector<T,Alloc> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T,Alloc> & vec, const typename std::vector<T,Alloc>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T,Alloc>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T,Alloc>& operator = (const vector_iterator<T,Alloc>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}

#include "Effect.h"
#include "Filter.h"
#include "Generator.h"
#include "Instrmnt.h"
#include "Filter.h"
#include "Function.h"
#include "FM.h"


  SWIGINTERNINLINE octave_value SWIG_From_long    (long value)
    {    
      return octave_value(value);
    }


SWIGINTERNINLINE octave_value
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  SWIGINTERN int SWIG_AsVal_long (const octave_value& ov, long* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (ov.is_double_type()||ov.is_single_type()) {
	double v=ov.double_value();
	if (v!=floor(v))
	  return SWIG_TypeError;
      }
      if (val)
	*val = ov.long_value();
      return SWIG_OK;
    }


SWIGINTERN int
SWIG_AsVal_int (octave_value obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE octave_value
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return std::string(carray,carray+size);
}


SWIGINTERNINLINE octave_value 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


  SWIGINTERN int SWIG_AsVal_unsigned_SS_long (const octave_value& ov, unsigned long* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (ov.is_double_type()||ov.is_single_type()) {
	double v=ov.double_value();
	if (v<0)
	  return SWIG_OverflowError;  
	if (v!=floor(v))
	  return SWIG_TypeError;
      }
      if (ov.is_int8_type()||ov.is_int16_type()||
	  ov.is_int32_type()) {
	long v=ov.long_value();
	if (v<0)
	  return SWIG_OverflowError;  
      }
      if (ov.is_int64_type()) {
	long long v=ov.int64_scalar_value().value();
	if (v<0)
	  return SWIG_OverflowError;  
      }
      if (val)
	*val = ov.ulong_value();
      return SWIG_OK;
    }


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (octave_value obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


#include <float.h>


#include <math.h>


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


  SWIGINTERN int SWIG_AsVal_double (const octave_value& ov, double* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (val)
	*val = ov.double_value();
      return SWIG_OK;
    }


SWIGINTERN int
SWIG_AsVal_float (octave_value obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
  SWIGINTERN int SWIG_AsVal_unsigned_SS_long_SS_long (const octave_value& ov, unsigned long long* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (ov.is_double_type()||ov.is_single_type()) {
	double v=ov.double_value();
	if (v<0)
	  return SWIG_OverflowError;  
	if (v!=floor(v))
	  return SWIG_TypeError;
      }
      if (ov.is_int8_type()||ov.is_int16_type()||
	  ov.is_int32_type()) {
	long v=ov.long_value();
	if (v<0)
	  return SWIG_OverflowError;  
      }
      if (ov.is_int64_type()) {
	long long v=ov.int64_scalar_value().value();
	if (v<0)
	  return SWIG_OverflowError;  
      }
      if (val) {
	if (ov.is_int64_type())
	  *val = ov.int64_scalar_value().value();
	else if (ov.is_uint64_type())
	  *val = ov.uint64_scalar_value().value();
	else
	  *val = ov.long_value();
      }
      return SWIG_OK;
    }
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (octave_value obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}

SWIGINTERN stk::StkFloat stk_StkFrames___getitem____SWIG(stk::StkFrames *self,size_t n){ return (*self)[n]; }

  SWIGINTERNINLINE octave_value SWIG_From_double    (double value)
    {    
      return octave_value(value);
    }


SWIGINTERNINLINE octave_value
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}

SWIGINTERN void stk_StkFrames___setitem____SWIG(stk::StkFrames *self,size_t n,stk::StkFloat value){ (*self)[n] = value; }
SWIGINTERN stk::StkFloat &stk_StkFrames_get__SWIG(stk::StkFrames *self,size_t frame,unsigned int channel){ return (*self)(frame,channel); }

  SWIGINTERNINLINE octave_value SWIG_From_unsigned_SS_long    (unsigned long value)
    {    
      return octave_value(value);
    }


#ifdef SWIG_LONG_LONG_AVAILABLE
  SWIGINTERNINLINE octave_value SWIG_From_unsigned_SS_long_SS_long    (unsigned long long value)
    {    
      return octave_uint64(value);
    }
#endif


SWIGINTERNINLINE octave_value
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


SWIGINTERNINLINE octave_value
  SWIG_From_bool  (bool value)
{
  return octave_value(value);
}


SWIGINTERNINLINE octave_value
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


#include "ADSR.h"    


#include "Asymp.h"


#include "BandedWG.h"


#include "BeeThree.h"


#include "BiQuad.h"


SWIGINTERN int
SWIG_AsVal_bool (const octave_value& ov, bool *val)
{
#if SWIG_OCTAVE_PREREQ(4,4,0)
  if (!ov.islogical())
#else
  if (!ov.is_bool_type())
#endif
    return SWIG_ERROR;
  if (val)
    *val = ov.bool_value();
  return SWIG_OK;
}


#include "Blit.h"


#include "BlitSaw.h"


#include "BlitSquare.h"


#include "BlowBotl.h"


#include "BlowHole.h"


#include "BowTable.h"


#include "Bowed.h"


#include "Brass.h"


#include "Chorus.h"


#include "Clarinet.h"    


#include "Cubic.h"


#include "Delay.h"


#include "DelayA.h"


#include "DelayL.h"


#include "Drummer.h"


#include "Echo.h"


#include "Envelope.h"


#include "FMVoices.h"


#include "FileRead.h"


#include "FileWrite.h"


#include "FileWvIn.h"


#include "FileWvOut.h"    


#include "FileLoop.h"


#include "Fir.h"


#include "Flute.h"


#include "FormSwep.h"


#include "FreeVerb.h"


#include "Granulate.h"


#include "Guitar.h"


#include "HevyMetl.h"


#include "Iir.h"


#include "JCRev.h"


#include "JetTable.h"


#include "LentPitShift.h"


#include "Mandolin.h"


#include "Mesh2D.h"


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (octave_value obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


#include "Messager.h"


SWIGINTERN int
SWIG_AsCharPtrAndSize(octave_value ov, char** cptr, size_t* psize, int *alloc)
{
  if (
#if SWIG_OCTAVE_PREREQ(4,4,0)
    ov.iscell()
#else
    ov.is_cell()
#endif
    && ov.rows() == 1 && ov.columns() == 1)
    ov = ov.cell_value()(0);
  if (!ov.is_string())
    return SWIG_TypeError;
  
  std::string str=ov.string_value();
  size_t len=str.size();
  char* cstr=(char*)str.c_str();
  if (alloc) {
    *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
    *alloc = SWIG_NEWOBJ;
  } else if (cptr)
    *cptr = cstr;
  if (psize)
    *psize = len + 1;
  return SWIG_OK;
}





#include "MidiFileIn.h"


#include "Modal.h"


#include "Modulate.h"


#include "Moog.h"


#include "NRev.h"


#include "Noise.h"


#include "OnePole.h"


#include "OneZero.h"


#include "PRCRev.h"


#include "PercFlut.h"


#include "Phonemes.h"


#include "PitShift.h"


#include "Plucked.h"

    
    #include "PoleZero.h"


#include "Recorder.h"


#include "ReedTable.h"


#include "Resonate.h"


#include "Rhodey.h"


#include "Saxofony.h"


#include "Shakers.h"


#include "Simple.h"


#include "SineWave.h"


#include "SingWave.h"


#include "Sitar.h"


#include "Sphere.h"


#include "StifKarp.h"


#include "TapDelay.h"


#include "TubeBell.h"


#include "Twang.h"


#include "TwoPole.h"


#include "TwoZero.h"


#include "Vector3D.h"


#include "VoicForm.h"


#include "Voicer.h"


#include "Whistle.h"


#include "Wurley.h"


    #include "Socket.h"
    #include "TcpClient.h"
    #include "TcpServer.h"
    #include "UdpSocket.h"


#include "Mutex.h"


#include "Mutex.h"



#include "InetWvIn.h"


#include "InetWvOut.h"


#include "TcpClient.h"


#include "TcpServer.h"


#include "UdpSocket.h"


#include "RtWvIn.h"


#include "RtWvOut.h"


#include "Sampler.h"


static octave_value_list _wrap_new_StkError__SWIG_0 (const octave_value_list& args, int nargout) {
  std::string *arg1 = 0 ;
  stk::StkError::Type arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkError *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_StkError",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StkError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StkError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = reinterpret_cast< std::string * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_StkError" "', argument " "2"" of type '" "stk::StkError::Type""'");
    } 
    arg2 = static_cast< stk::StkError::Type >(val2);
    result = (stk::StkError *)new stk::StkError((std::string const &)*arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkError, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_StkError__SWIG_1 (const octave_value_list& args, int nargout) {
  std::string *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkError *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_StkError",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StkError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StkError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = reinterpret_cast< std::string * >(argp1);
    result = (stk::StkError *)new stk::StkError((std::string const &)*arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkError, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_StkError, _wrap_new_StkError, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StkError__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_StkError__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_StkError, _wrap_delete_StkError, std::string() ) {
  stk::StkError *arg1 = (stk::StkError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_StkError",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkError, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StkError" "', argument " "1"" of type '" "stk::StkError *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkError * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkError_printMessage, _wrap_StkError_printMessage, std::string() ) {
  stk::StkError *arg1 = (stk::StkError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("StkError_printMessage",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkError, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkError_printMessage" "', argument " "1"" of type '" "stk::StkError *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkError * >(argp1);
    (arg1)->printMessage();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkError_getType, _wrap_StkError_getType, std::string() ) {
  stk::StkError *arg1 = (stk::StkError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkError::Type *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("StkError_getType",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkError, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkError_getType" "', argument " "1"" of type '" "stk::StkError *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkError * >(argp1);
    result = (stk::StkError::Type *) &(arg1)->getType();
    _outv = SWIG_From_int(static_cast< int >(*result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkError_getMessage, _wrap_StkError_getMessage, std::string() ) {
  stk::StkError *arg1 = (stk::StkError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  std::string *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("StkError_getMessage",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkError, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkError_getMessage" "', argument " "1"" of type '" "stk::StkError *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkError * >(argp1);
    result = (std::string *) &(arg1)->getMessage();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkError_getMessageCString, _wrap_StkError_getMessageCString, std::string() ) {
  stk::StkError *arg1 = (stk::StkError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("StkError_getMessageCString",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkError, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkError_getMessageCString" "', argument " "1"" of type '" "stk::StkError *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkError * >(argp1);
    result = (char *)(arg1)->getMessageCString();
    _outv = SWIG_FromCharPtr((const char *)result);
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkError_what, _wrap_StkError_what, std::string() ) {
  stk::StkError *arg1 = (stk::StkError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("StkError_what",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkError, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkError_what" "', argument " "1"" of type '" "stk::StkError const *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkError * >(argp1);
    result = (char *)((stk::StkError const *)arg1)->what();
    _outv = SWIG_FromCharPtr((const char *)result);
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_StkError_members[] = {
{"printMessage",_wrap_StkError_printMessage,0,0,0,0},
{"getType",_wrap_StkError_getType,0,0,0,0},
{"getMessage",_wrap_StkError_getMessage,0,0,0,0},
{"getMessageCString",_wrap_StkError_getMessageCString,0,0,0,0},
{"what",_wrap_StkError_what,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_StkError_base_names[] = {0};
static const swig_type_info *swig_StkError_base[] = {0};
static swig_octave_class _wrap_class_StkError = {"StkError", &SWIGTYPE_p_stk__StkError,0,_wrap_new_StkError,0,_wrap_delete_StkError,swig_StkError_members,swig_StkError_base_names,swig_StkError_base };

static octave_value_list _wrap_new_StkFrames__SWIG_0 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_StkFrames",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StkFrames" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_StkFrames" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFrames *)new stk::StkFrames(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_StkFrames__SWIG_1 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_StkFrames",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StkFrames" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    result = (stk::StkFrames *)new stk::StkFrames(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_StkFrames__SWIG_2 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_StkFrames",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::StkFrames *)new stk::StkFrames();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_StkFrames__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::StkFloat *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  stk::StkFloat temp1 ;
  float val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_StkFrames",args.length(),3,3,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StkFrames" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    temp1 = static_cast< stk::StkFloat >(val1);
    arg1 = &temp1;
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_StkFrames" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_StkFrames" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *)new stk::StkFrames((stk::StkFloat const &)*arg1,arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_StkFrames, _wrap_delete_StkFrames, std::string() ) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_StkFrames",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StkFrames" "', argument " "1"" of type '" "stk::StkFrames *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_StkFrames__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::StkFrames *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_StkFrames",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StkFrames" "', argument " "1"" of type '" "stk::StkFrames const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StkFrames" "', argument " "1"" of type '" "stk::StkFrames const &""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    result = (stk::StkFrames *)new stk::StkFrames((stk::StkFrames const &)*arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_StkFrames, _wrap_new_StkFrames, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 0) {
    return _wrap_new_StkFrames__SWIG_2(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StkFrames__SWIG_4(args, nargout);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StkFrames__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_StkFrames__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_StkFrames__SWIG_3(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( StkFrames___getitem__, _wrap_StkFrames___getitem__, std::string() ) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("StkFrames___getitem__",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames___getitem__" "', argument " "1"" of type '" "stk::StkFrames *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    ecode2 = SWIG_AsVal_size_t(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StkFrames___getitem__" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    result = (stk::StkFloat)stk_StkFrames___getitem____SWIG(arg1,arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkFrames___setitem__, _wrap_StkFrames___setitem__, std::string() ) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  size_t arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("StkFrames___setitem__",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames___setitem__" "', argument " "1"" of type '" "stk::StkFrames *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    ecode2 = SWIG_AsVal_size_t(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StkFrames___setitem__" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StkFrames___setitem__" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    stk_StkFrames___setitem____SWIG(arg1,arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkFrames___add__, _wrap_StkFrames___add__, std::string() ) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames result;
  
  try {
    if (!SWIG_check_num_args("StkFrames___add__",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames___add__" "', argument " "1"" of type '" "stk::StkFrames const *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StkFrames___add__" "', argument " "2"" of type '" "stk::StkFrames const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StkFrames___add__" "', argument " "2"" of type '" "stk::StkFrames const &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = ((stk::StkFrames const *)arg1)->operator +((stk::StkFrames const &)*arg2);
    _outv = SWIG_NewPointerObj((new stk::StkFrames(static_cast< const stk::StkFrames& >(result))), SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_OWN |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkFrames___mul__, _wrap_StkFrames___mul__, std::string() ) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames result;
  
  try {
    if (!SWIG_check_num_args("StkFrames___mul__",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames___mul__" "', argument " "1"" of type '" "stk::StkFrames const *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StkFrames___mul__" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = ((stk::StkFrames const *)arg1)->operator *(arg2);
    _outv = SWIG_NewPointerObj((new stk::StkFrames(static_cast< const stk::StkFrames& >(result))), SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_OWN |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkFrames_get, _wrap_StkFrames_get, std::string() ) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("StkFrames_get",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames_get" "', argument " "1"" of type '" "stk::StkFrames *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    ecode2 = SWIG_AsVal_size_t(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StkFrames_get" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StkFrames_get" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFloat *) &stk_StkFrames_get__SWIG(arg1,arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_StkFrames_interpolate__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  stk::StkFloat arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("StkFrames_interpolate",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames_interpolate" "', argument " "1"" of type '" "stk::StkFrames const *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StkFrames_interpolate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StkFrames_interpolate" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFloat)((stk::StkFrames const *)arg1)->interpolate(arg2,arg3);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_StkFrames_interpolate__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("StkFrames_interpolate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames_interpolate" "', argument " "1"" of type '" "stk::StkFrames const *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StkFrames_interpolate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)((stk::StkFrames const *)arg1)->interpolate(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkFrames_interpolate, _wrap_StkFrames_interpolate, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__StkFrames, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StkFrames_interpolate__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__StkFrames, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StkFrames_interpolate__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( StkFrames_size, _wrap_StkFrames_size, std::string() ) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  size_t result;
  
  try {
    if (!SWIG_check_num_args("StkFrames_size",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames_size" "', argument " "1"" of type '" "stk::StkFrames const *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    result = ((stk::StkFrames const *)arg1)->size();
    _outv = SWIG_From_size_t(static_cast< size_t >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkFrames_empty, _wrap_StkFrames_empty, std::string() ) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  try {
    if (!SWIG_check_num_args("StkFrames_empty",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames_empty" "', argument " "1"" of type '" "stk::StkFrames const *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    result = (bool)((stk::StkFrames const *)arg1)->empty();
    _outv = SWIG_From_bool(static_cast< bool >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_StkFrames_resize__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("StkFrames_resize",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames_resize" "', argument " "1"" of type '" "stk::StkFrames *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    ecode2 = SWIG_AsVal_size_t(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StkFrames_resize" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StkFrames_resize" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    (arg1)->resize(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_StkFrames_resize__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("StkFrames_resize",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames_resize" "', argument " "1"" of type '" "stk::StkFrames *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    ecode2 = SWIG_AsVal_size_t(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StkFrames_resize" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    (arg1)->resize(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_StkFrames_resize__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  stk::StkFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("StkFrames_resize",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames_resize" "', argument " "1"" of type '" "stk::StkFrames *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    ecode2 = SWIG_AsVal_size_t(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StkFrames_resize" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StkFrames_resize" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "StkFrames_resize" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    (arg1)->resize(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkFrames_resize, _wrap_StkFrames_resize, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__StkFrames, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StkFrames_resize__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__StkFrames, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StkFrames_resize__SWIG_0(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__StkFrames, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_StkFrames_resize__SWIG_2(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( StkFrames_getChannel, _wrap_StkFrames_getChannel, std::string() ) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  unsigned int arg2 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("StkFrames_getChannel",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames_getChannel" "', argument " "1"" of type '" "stk::StkFrames const *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StkFrames_getChannel" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StkFrames_getChannel" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StkFrames_getChannel" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "StkFrames_getChannel" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &((stk::StkFrames const *)arg1)->getChannel(arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkFrames_setChannel, _wrap_StkFrames_setChannel, std::string() ) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  unsigned int arg2 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("StkFrames_setChannel",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames_setChannel" "', argument " "1"" of type '" "stk::StkFrames *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StkFrames_setChannel" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StkFrames_setChannel" "', argument " "3"" of type '" "stk::StkFrames const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StkFrames_setChannel" "', argument " "3"" of type '" "stk::StkFrames const &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "StkFrames_setChannel" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    (arg1)->setChannel(arg2,(stk::StkFrames const &)*arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkFrames_channels, _wrap_StkFrames_channels, std::string() ) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned int result;
  
  try {
    if (!SWIG_check_num_args("StkFrames_channels",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames_channels" "', argument " "1"" of type '" "stk::StkFrames const *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    result = (unsigned int)((stk::StkFrames const *)arg1)->channels();
    _outv = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkFrames_frames, _wrap_StkFrames_frames, std::string() ) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned int result;
  
  try {
    if (!SWIG_check_num_args("StkFrames_frames",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames_frames" "', argument " "1"" of type '" "stk::StkFrames const *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    result = (unsigned int)((stk::StkFrames const *)arg1)->frames();
    _outv = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkFrames_setDataRate, _wrap_StkFrames_setDataRate, std::string() ) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("StkFrames_setDataRate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames_setDataRate" "', argument " "1"" of type '" "stk::StkFrames *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StkFrames_setDataRate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setDataRate(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StkFrames_dataRate, _wrap_StkFrames_dataRate, std::string() ) {
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("StkFrames_dataRate",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StkFrames_dataRate" "', argument " "1"" of type '" "stk::StkFrames const *""'"); 
    }
    arg1 = reinterpret_cast< stk::StkFrames * >(argp1);
    result = (stk::StkFloat)((stk::StkFrames const *)arg1)->dataRate();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_StkFrames_members[] = {
{"__getitem__",_wrap_StkFrames___getitem__,0,0,0,0},
{"__setitem__",_wrap_StkFrames___setitem__,0,0,0,0},
{"__add__",_wrap_StkFrames___add__,0,0,0,0},
{"__mul__",_wrap_StkFrames___mul__,0,0,0,0},
{"get",_wrap_StkFrames_get,0,0,0,0},
{"interpolate",_wrap_StkFrames_interpolate,0,0,0,0},
{"size",_wrap_StkFrames_size,0,0,0,0},
{"empty",_wrap_StkFrames_empty,0,0,0,0},
{"resize",_wrap_StkFrames_resize,0,0,0,0},
{"getChannel",_wrap_StkFrames_getChannel,0,0,0,0},
{"setChannel",_wrap_StkFrames_setChannel,0,0,0,0},
{"channels",_wrap_StkFrames_channels,0,0,0,0},
{"frames",_wrap_StkFrames_frames,0,0,0,0},
{"setDataRate",_wrap_StkFrames_setDataRate,0,0,0,0},
{"dataRate",_wrap_StkFrames_dataRate,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_StkFrames_base_names[] = {0};
static const swig_type_info *swig_StkFrames_base[] = {0};
static swig_octave_class _wrap_class_StkFrames = {"StkFrames", &SWIGTYPE_p_stk__StkFrames,0,_wrap_new_StkFrames,0,_wrap_delete_StkFrames,swig_StkFrames_members,swig_StkFrames_base_names,swig_StkFrames_base };

SWIG_DEFUN( SRATE_set, _wrap_SRATE_set, std::string() ) {
  if (!SWIG_check_num_args("SRATE_set",args.length(),1,1,0)) return octave_value_list();return octave_set_immutable(args,nargout);
}


SWIG_DEFUN( SRATE_get, _wrap_SRATE_get, std::string() ) {
  octave_value obj;
  
  obj = SWIG_From_float(static_cast< float >(stk::SRATE));
  return obj;
}


SWIG_DEFUN( RT_BUFFER_SIZE_set, _wrap_RT_BUFFER_SIZE_set, std::string() ) {
  if (!SWIG_check_num_args("RT_BUFFER_SIZE_set",args.length(),1,1,0)) return octave_value_list();return octave_set_immutable(args,nargout);
}


SWIG_DEFUN( RT_BUFFER_SIZE_get, _wrap_RT_BUFFER_SIZE_get, std::string() ) {
  octave_value obj;
  
  obj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(stk::RT_BUFFER_SIZE));
  return obj;
}


SWIG_DEFUN( PI_set, _wrap_PI_set, std::string() ) {
  if (!SWIG_check_num_args("PI_set",args.length(),1,1,0)) return octave_value_list();return octave_set_immutable(args,nargout);
}


SWIG_DEFUN( PI_get, _wrap_PI_get, std::string() ) {
  octave_value obj;
  
  obj = SWIG_From_float(static_cast< float >(stk::PI));
  return obj;
}


SWIG_DEFUN( TWO_PI_set, _wrap_TWO_PI_set, std::string() ) {
  if (!SWIG_check_num_args("TWO_PI_set",args.length(),1,1,0)) return octave_value_list();return octave_set_immutable(args,nargout);
}


SWIG_DEFUN( TWO_PI_get, _wrap_TWO_PI_get, std::string() ) {
  octave_value obj;
  
  obj = SWIG_From_float(static_cast< float >(stk::TWO_PI));
  return obj;
}


SWIG_DEFUN( ONE_OVER_128_set, _wrap_ONE_OVER_128_set, std::string() ) {
  if (!SWIG_check_num_args("ONE_OVER_128_set",args.length(),1,1,0)) return octave_value_list();return octave_set_immutable(args,nargout);
}


SWIG_DEFUN( ONE_OVER_128_get, _wrap_ONE_OVER_128_get, std::string() ) {
  octave_value obj;
  
  obj = SWIG_From_float(static_cast< float >(stk::ONE_OVER_128));
  return obj;
}


SWIG_DEFUN( Effect_channelsOut, _wrap_Effect_channelsOut, std::string() ) {
  stk::Effect *arg1 = (stk::Effect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned int result;
  
  try {
    if (!SWIG_check_num_args("Effect_channelsOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Effect, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Effect_channelsOut" "', argument " "1"" of type '" "stk::Effect const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Effect * >(argp1);
    result = (unsigned int)((stk::Effect const *)arg1)->channelsOut();
    _outv = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Effect_lastFrame, _wrap_Effect_lastFrame, std::string() ) {
  stk::Effect *arg1 = (stk::Effect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Effect_lastFrame",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Effect, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Effect_lastFrame" "', argument " "1"" of type '" "stk::Effect const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Effect * >(argp1);
    result = (stk::StkFrames *) &((stk::Effect const *)arg1)->lastFrame();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Effect_clear, _wrap_Effect_clear, std::string() ) {
  stk::Effect *arg1 = (stk::Effect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Effect_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Effect, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Effect_clear" "', argument " "1"" of type '" "stk::Effect *""'"); 
    }
    arg1 = reinterpret_cast< stk::Effect * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Effect_setEffectMix, _wrap_Effect_setEffectMix, std::string() ) {
  stk::Effect *arg1 = (stk::Effect *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Effect_setEffectMix",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Effect, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Effect_setEffectMix" "', argument " "1"" of type '" "stk::Effect *""'"); 
    }
    arg1 = reinterpret_cast< stk::Effect * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Effect_setEffectMix" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setEffectMix(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Effect, _wrap_delete_Effect, std::string() ) {
  stk::Effect *arg1 = (stk::Effect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Effect",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Effect, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Effect" "', argument " "1"" of type '" "stk::Effect *""'"); 
    }
    arg1 = reinterpret_cast< stk::Effect * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Effect_members[] = {
{"channelsOut",_wrap_Effect_channelsOut,0,0,0,0},
{"lastFrame",_wrap_Effect_lastFrame,0,0,0,0},
{"clear",_wrap_Effect_clear,0,0,0,0},
{"setEffectMix",_wrap_Effect_setEffectMix,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Effect_base_names[] = {0};
static const swig_type_info *swig_Effect_base[] = {0};
static swig_octave_class _wrap_class_Effect = {"Effect", &SWIGTYPE_p_stk__Effect,0,0,0,_wrap_delete_Effect,swig_Effect_members,swig_Effect_base_names,swig_Effect_base };

SWIG_DEFUN( Filter_channelsIn, _wrap_Filter_channelsIn, std::string() ) {
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned int result;
  
  try {
    if (!SWIG_check_num_args("Filter_channelsIn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_channelsIn" "', argument " "1"" of type '" "stk::Filter const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Filter * >(argp1);
    result = (unsigned int)((stk::Filter const *)arg1)->channelsIn();
    _outv = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Filter_channelsOut, _wrap_Filter_channelsOut, std::string() ) {
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned int result;
  
  try {
    if (!SWIG_check_num_args("Filter_channelsOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_channelsOut" "', argument " "1"" of type '" "stk::Filter const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Filter * >(argp1);
    result = (unsigned int)((stk::Filter const *)arg1)->channelsOut();
    _outv = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Filter_clear, _wrap_Filter_clear, std::string() ) {
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Filter_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_clear" "', argument " "1"" of type '" "stk::Filter *""'"); 
    }
    arg1 = reinterpret_cast< stk::Filter * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Filter_setGain, _wrap_Filter_setGain, std::string() ) {
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Filter_setGain",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_setGain" "', argument " "1"" of type '" "stk::Filter *""'"); 
    }
    arg1 = reinterpret_cast< stk::Filter * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Filter_setGain" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setGain(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Filter_getGain, _wrap_Filter_getGain, std::string() ) {
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Filter_getGain",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_getGain" "', argument " "1"" of type '" "stk::Filter const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Filter * >(argp1);
    result = (stk::StkFloat)((stk::Filter const *)arg1)->getGain();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Filter_phaseDelay, _wrap_Filter_phaseDelay, std::string() ) {
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Filter_phaseDelay",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_phaseDelay" "', argument " "1"" of type '" "stk::Filter *""'"); 
    }
    arg1 = reinterpret_cast< stk::Filter * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Filter_phaseDelay" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->phaseDelay(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Filter_lastFrame, _wrap_Filter_lastFrame, std::string() ) {
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Filter_lastFrame",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_lastFrame" "', argument " "1"" of type '" "stk::Filter const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Filter * >(argp1);
    result = (stk::StkFrames *) &((stk::Filter const *)arg1)->lastFrame();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Filter_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Filter_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_tick" "', argument " "1"" of type '" "stk::Filter *""'"); 
    }
    arg1 = reinterpret_cast< stk::Filter * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Filter_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Filter_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Filter_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Filter_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Filter_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Filter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_tick" "', argument " "1"" of type '" "stk::Filter *""'"); 
    }
    arg1 = reinterpret_cast< stk::Filter * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Filter_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Filter_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Filter_tick, _wrap_Filter_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Filter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Filter_tick__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Filter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Filter_tick__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Filter, _wrap_delete_Filter, std::string() ) {
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Filter",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Filter, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Filter" "', argument " "1"" of type '" "stk::Filter *""'"); 
    }
    arg1 = reinterpret_cast< stk::Filter * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Filter_members[] = {
{"channelsIn",_wrap_Filter_channelsIn,0,0,0,0},
{"channelsOut",_wrap_Filter_channelsOut,0,0,0,0},
{"clear",_wrap_Filter_clear,0,0,0,0},
{"setGain",_wrap_Filter_setGain,0,0,0,0},
{"getGain",_wrap_Filter_getGain,0,0,0,0},
{"phaseDelay",_wrap_Filter_phaseDelay,0,0,0,0},
{"lastFrame",_wrap_Filter_lastFrame,0,0,0,0},
{"tick",_wrap_Filter_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Filter_base_names[] = {0};
static const swig_type_info *swig_Filter_base[] = {0};
static swig_octave_class _wrap_class_Filter = {"Filter", &SWIGTYPE_p_stk__Filter,0,0,0,_wrap_delete_Filter,swig_Filter_members,swig_Filter_base_names,swig_Filter_base };

SWIG_DEFUN( Generator_channelsOut, _wrap_Generator_channelsOut, std::string() ) {
  stk::Generator *arg1 = (stk::Generator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned int result;
  
  try {
    if (!SWIG_check_num_args("Generator_channelsOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Generator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_channelsOut" "', argument " "1"" of type '" "stk::Generator const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Generator * >(argp1);
    result = (unsigned int)((stk::Generator const *)arg1)->channelsOut();
    _outv = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Generator_lastFrame, _wrap_Generator_lastFrame, std::string() ) {
  stk::Generator *arg1 = (stk::Generator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Generator_lastFrame",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Generator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_lastFrame" "', argument " "1"" of type '" "stk::Generator const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Generator * >(argp1);
    result = (stk::StkFrames *) &((stk::Generator const *)arg1)->lastFrame();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Generator_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Generator *arg1 = (stk::Generator *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Generator_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Generator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_tick" "', argument " "1"" of type '" "stk::Generator *""'"); 
    }
    arg1 = reinterpret_cast< stk::Generator * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Generator_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Generator_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Generator_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Generator_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Generator *arg1 = (stk::Generator *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Generator_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Generator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Generator_tick" "', argument " "1"" of type '" "stk::Generator *""'"); 
    }
    arg1 = reinterpret_cast< stk::Generator * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Generator_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Generator_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Generator_tick, _wrap_Generator_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Generator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Generator_tick__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Generator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Generator_tick__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Generator, _wrap_delete_Generator, std::string() ) {
  stk::Generator *arg1 = (stk::Generator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Generator",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Generator, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Generator" "', argument " "1"" of type '" "stk::Generator *""'"); 
    }
    arg1 = reinterpret_cast< stk::Generator * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Generator_members[] = {
{"channelsOut",_wrap_Generator_channelsOut,0,0,0,0},
{"lastFrame",_wrap_Generator_lastFrame,0,0,0,0},
{"tick",_wrap_Generator_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Generator_base_names[] = {0};
static const swig_type_info *swig_Generator_base[] = {0};
static swig_octave_class _wrap_class_Generator = {"Generator", &SWIGTYPE_p_stk__Generator,0,0,0,_wrap_delete_Generator,swig_Generator_members,swig_Generator_base_names,swig_Generator_base };

SWIG_DEFUN( Instrmnt_clear, _wrap_Instrmnt_clear, std::string() ) {
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Instrmnt_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Instrmnt, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instrmnt_clear" "', argument " "1"" of type '" "stk::Instrmnt *""'"); 
    }
    arg1 = reinterpret_cast< stk::Instrmnt * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Instrmnt_noteOn, _wrap_Instrmnt_noteOn, std::string() ) {
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Instrmnt_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Instrmnt, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instrmnt_noteOn" "', argument " "1"" of type '" "stk::Instrmnt *""'"); 
    }
    arg1 = reinterpret_cast< stk::Instrmnt * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instrmnt_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Instrmnt_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Instrmnt_noteOff, _wrap_Instrmnt_noteOff, std::string() ) {
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Instrmnt_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Instrmnt, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instrmnt_noteOff" "', argument " "1"" of type '" "stk::Instrmnt *""'"); 
    }
    arg1 = reinterpret_cast< stk::Instrmnt * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instrmnt_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Instrmnt_setFrequency, _wrap_Instrmnt_setFrequency, std::string() ) {
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Instrmnt_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Instrmnt, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instrmnt_setFrequency" "', argument " "1"" of type '" "stk::Instrmnt *""'"); 
    }
    arg1 = reinterpret_cast< stk::Instrmnt * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instrmnt_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Instrmnt_controlChange, _wrap_Instrmnt_controlChange, std::string() ) {
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Instrmnt_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Instrmnt, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instrmnt_controlChange" "', argument " "1"" of type '" "stk::Instrmnt *""'"); 
    }
    arg1 = reinterpret_cast< stk::Instrmnt * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instrmnt_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Instrmnt_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Instrmnt_channelsOut, _wrap_Instrmnt_channelsOut, std::string() ) {
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned int result;
  
  try {
    if (!SWIG_check_num_args("Instrmnt_channelsOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Instrmnt, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instrmnt_channelsOut" "', argument " "1"" of type '" "stk::Instrmnt const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Instrmnt * >(argp1);
    result = (unsigned int)((stk::Instrmnt const *)arg1)->channelsOut();
    _outv = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Instrmnt_lastFrame, _wrap_Instrmnt_lastFrame, std::string() ) {
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Instrmnt_lastFrame",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Instrmnt, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instrmnt_lastFrame" "', argument " "1"" of type '" "stk::Instrmnt const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Instrmnt * >(argp1);
    result = (stk::StkFrames *) &((stk::Instrmnt const *)arg1)->lastFrame();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Instrmnt_lastOut__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Instrmnt_lastOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Instrmnt, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instrmnt_lastOut" "', argument " "1"" of type '" "stk::Instrmnt *""'"); 
    }
    arg1 = reinterpret_cast< stk::Instrmnt * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instrmnt_lastOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->lastOut(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Instrmnt_lastOut__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Instrmnt_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Instrmnt, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instrmnt_lastOut" "', argument " "1"" of type '" "stk::Instrmnt *""'"); 
    }
    arg1 = reinterpret_cast< stk::Instrmnt * >(argp1);
    result = (stk::StkFloat)(arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Instrmnt_lastOut, _wrap_Instrmnt_lastOut, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Instrmnt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Instrmnt_lastOut__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Instrmnt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Instrmnt_lastOut__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Instrmnt_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Instrmnt_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Instrmnt, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instrmnt_tick" "', argument " "1"" of type '" "stk::Instrmnt *""'"); 
    }
    arg1 = reinterpret_cast< stk::Instrmnt * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instrmnt_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Instrmnt_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Instrmnt_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Instrmnt, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instrmnt_tick" "', argument " "1"" of type '" "stk::Instrmnt *""'"); 
    }
    arg1 = reinterpret_cast< stk::Instrmnt * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Instrmnt_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Instrmnt_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Instrmnt, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instrmnt_tick" "', argument " "1"" of type '" "stk::Instrmnt *""'"); 
    }
    arg1 = reinterpret_cast< stk::Instrmnt * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instrmnt_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instrmnt_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Instrmnt_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Instrmnt_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Instrmnt_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Instrmnt, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instrmnt_tick" "', argument " "1"" of type '" "stk::Instrmnt *""'"); 
    }
    arg1 = reinterpret_cast< stk::Instrmnt * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instrmnt_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instrmnt_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Instrmnt_tick, _wrap_Instrmnt_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Instrmnt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Instrmnt_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Instrmnt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Instrmnt_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Instrmnt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Instrmnt_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Instrmnt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Instrmnt_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Instrmnt, _wrap_delete_Instrmnt, std::string() ) {
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Instrmnt",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Instrmnt, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Instrmnt" "', argument " "1"" of type '" "stk::Instrmnt *""'"); 
    }
    arg1 = reinterpret_cast< stk::Instrmnt * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Instrmnt_members[] = {
{"clear",_wrap_Instrmnt_clear,0,0,0,0},
{"noteOn",_wrap_Instrmnt_noteOn,0,0,0,0},
{"noteOff",_wrap_Instrmnt_noteOff,0,0,0,0},
{"setFrequency",_wrap_Instrmnt_setFrequency,0,0,0,0},
{"controlChange",_wrap_Instrmnt_controlChange,0,0,0,0},
{"channelsOut",_wrap_Instrmnt_channelsOut,0,0,0,0},
{"lastFrame",_wrap_Instrmnt_lastFrame,0,0,0,0},
{"lastOut",_wrap_Instrmnt_lastOut,0,0,0,0},
{"tick",_wrap_Instrmnt_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Instrmnt_base_names[] = {0};
static const swig_type_info *swig_Instrmnt_base[] = {0};
static swig_octave_class _wrap_class_Instrmnt = {"Instrmnt", &SWIGTYPE_p_stk__Instrmnt,0,0,0,_wrap_delete_Instrmnt,swig_Instrmnt_members,swig_Instrmnt_base_names,swig_Instrmnt_base };

SWIG_DEFUN( Function_lastOut, _wrap_Function_lastOut, std::string() ) {
  stk::Function *arg1 = (stk::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Function_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Function, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_lastOut" "', argument " "1"" of type '" "stk::Function const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Function * >(argp1);
    result = (stk::StkFloat)((stk::Function const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Function_tick, _wrap_Function_tick, std::string() ) {
  stk::Function *arg1 = (stk::Function *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Function_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Function, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_tick" "', argument " "1"" of type '" "stk::Function *""'"); 
    }
    arg1 = reinterpret_cast< stk::Function * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Function_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Function, _wrap_delete_Function, std::string() ) {
  stk::Function *arg1 = (stk::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Function",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Function, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Function" "', argument " "1"" of type '" "stk::Function *""'"); 
    }
    arg1 = reinterpret_cast< stk::Function * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Function_members[] = {
{"lastOut",_wrap_Function_lastOut,0,0,0,0},
{"tick",_wrap_Function_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Function_base_names[] = {0};
static const swig_type_info *swig_Function_base[] = {0};
static swig_octave_class _wrap_class_Function = {"Function", &SWIGTYPE_p_stk__Function,0,0,0,_wrap_delete_Function,swig_Function_members,swig_Function_base_names,swig_Function_base };

SWIG_DEFUN( delete_FM, _wrap_delete_FM, std::string() ) {
  stk::FM *arg1 = (stk::FM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_FM",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FM, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FM" "', argument " "1"" of type '" "stk::FM *""'"); 
    }
    arg1 = reinterpret_cast< stk::FM * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FM_loadWaves, _wrap_FM_loadWaves, std::string() ) {
  stk::FM *arg1 = (stk::FM *) 0 ;
  char **arg2 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FM_loadWaves",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FM_loadWaves" "', argument " "1"" of type '" "stk::FM *""'"); 
    }
    arg1 = reinterpret_cast< stk::FM * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_p_char, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FM_loadWaves" "', argument " "2"" of type '" "char const **""'"); 
    }
    arg2 = reinterpret_cast< char ** >(argp2);
    (arg1)->loadWaves((char const **)arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FM_setFrequency, _wrap_FM_setFrequency, std::string() ) {
  stk::FM *arg1 = (stk::FM *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FM_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FM_setFrequency" "', argument " "1"" of type '" "stk::FM *""'"); 
    }
    arg1 = reinterpret_cast< stk::FM * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FM_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FM_setRatio, _wrap_FM_setRatio, std::string() ) {
  stk::FM *arg1 = (stk::FM *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FM_setRatio",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FM_setRatio" "', argument " "1"" of type '" "stk::FM *""'"); 
    }
    arg1 = reinterpret_cast< stk::FM * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FM_setRatio" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FM_setRatio" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setRatio(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FM_setGain, _wrap_FM_setGain, std::string() ) {
  stk::FM *arg1 = (stk::FM *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FM_setGain",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FM_setGain" "', argument " "1"" of type '" "stk::FM *""'"); 
    }
    arg1 = reinterpret_cast< stk::FM * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FM_setGain" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FM_setGain" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setGain(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FM_setModulationSpeed, _wrap_FM_setModulationSpeed, std::string() ) {
  stk::FM *arg1 = (stk::FM *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FM_setModulationSpeed",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FM_setModulationSpeed" "', argument " "1"" of type '" "stk::FM *""'"); 
    }
    arg1 = reinterpret_cast< stk::FM * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FM_setModulationSpeed" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setModulationSpeed(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FM_setModulationDepth, _wrap_FM_setModulationDepth, std::string() ) {
  stk::FM *arg1 = (stk::FM *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FM_setModulationDepth",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FM_setModulationDepth" "', argument " "1"" of type '" "stk::FM *""'"); 
    }
    arg1 = reinterpret_cast< stk::FM * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FM_setModulationDepth" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setModulationDepth(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FM_setControl1, _wrap_FM_setControl1, std::string() ) {
  stk::FM *arg1 = (stk::FM *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FM_setControl1",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FM_setControl1" "', argument " "1"" of type '" "stk::FM *""'"); 
    }
    arg1 = reinterpret_cast< stk::FM * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FM_setControl1" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setControl1(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FM_setControl2, _wrap_FM_setControl2, std::string() ) {
  stk::FM *arg1 = (stk::FM *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FM_setControl2",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FM_setControl2" "', argument " "1"" of type '" "stk::FM *""'"); 
    }
    arg1 = reinterpret_cast< stk::FM * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FM_setControl2" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setControl2(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FM_keyOn, _wrap_FM_keyOn, std::string() ) {
  stk::FM *arg1 = (stk::FM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FM_keyOn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FM_keyOn" "', argument " "1"" of type '" "stk::FM *""'"); 
    }
    arg1 = reinterpret_cast< stk::FM * >(argp1);
    (arg1)->keyOn();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FM_keyOff, _wrap_FM_keyOff, std::string() ) {
  stk::FM *arg1 = (stk::FM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FM_keyOff",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FM_keyOff" "', argument " "1"" of type '" "stk::FM *""'"); 
    }
    arg1 = reinterpret_cast< stk::FM * >(argp1);
    (arg1)->keyOff();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FM_noteOff, _wrap_FM_noteOff, std::string() ) {
  stk::FM *arg1 = (stk::FM *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FM_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FM_noteOff" "', argument " "1"" of type '" "stk::FM *""'"); 
    }
    arg1 = reinterpret_cast< stk::FM * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FM_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FM_controlChange, _wrap_FM_controlChange, std::string() ) {
  stk::FM *arg1 = (stk::FM *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FM_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FM_controlChange" "', argument " "1"" of type '" "stk::FM *""'"); 
    }
    arg1 = reinterpret_cast< stk::FM * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FM_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FM_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FM_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FM *arg1 = (stk::FM *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FM_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FM_tick" "', argument " "1"" of type '" "stk::FM *""'"); 
    }
    arg1 = reinterpret_cast< stk::FM * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FM_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FM_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FM *arg1 = (stk::FM *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FM_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FM_tick" "', argument " "1"" of type '" "stk::FM *""'"); 
    }
    arg1 = reinterpret_cast< stk::FM * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FM_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FM_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FM_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FM_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::FM *arg1 = (stk::FM *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FM_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FM_tick" "', argument " "1"" of type '" "stk::FM *""'"); 
    }
    arg1 = reinterpret_cast< stk::FM * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FM_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FM_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FM_tick, _wrap_FM_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FM_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FM_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FM_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_FM_members[] = {
{"loadWaves",_wrap_FM_loadWaves,0,0,0,0},
{"setFrequency",_wrap_FM_setFrequency,0,0,0,0},
{"setRatio",_wrap_FM_setRatio,0,0,0,0},
{"setGain",_wrap_FM_setGain,0,0,0,0},
{"setModulationSpeed",_wrap_FM_setModulationSpeed,0,0,0,0},
{"setModulationDepth",_wrap_FM_setModulationDepth,0,0,0,0},
{"setControl1",_wrap_FM_setControl1,0,0,0,0},
{"setControl2",_wrap_FM_setControl2,0,0,0,0},
{"keyOn",_wrap_FM_keyOn,0,0,0,0},
{"keyOff",_wrap_FM_keyOff,0,0,0,0},
{"noteOff",_wrap_FM_noteOff,0,0,0,0},
{"controlChange",_wrap_FM_controlChange,0,0,0,0},
{"tick",_wrap_FM_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_FM_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_FM_base[] = {0,0};
static swig_octave_class _wrap_class_FM = {"FM", &SWIGTYPE_p_stk__FM,0,0,0,_wrap_delete_FM,swig_FM_members,swig_FM_base_names,swig_FM_base };

SWIG_DEFUN( new_ADSR, _wrap_new_ADSR, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::ADSR *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_ADSR",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::ADSR *)new stk::ADSR();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__ADSR, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_ADSR, _wrap_delete_ADSR, std::string() ) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_ADSR",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ADSR" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ADSR_keyOn, _wrap_ADSR_keyOn, std::string() ) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ADSR_keyOn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_keyOn" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    (arg1)->keyOn();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ADSR_keyOff, _wrap_ADSR_keyOff, std::string() ) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ADSR_keyOff",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_keyOff" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    (arg1)->keyOff();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ADSR_setAttackRate, _wrap_ADSR_setAttackRate, std::string() ) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ADSR_setAttackRate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_setAttackRate" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ADSR_setAttackRate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setAttackRate(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ADSR_setAttackTarget, _wrap_ADSR_setAttackTarget, std::string() ) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ADSR_setAttackTarget",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_setAttackTarget" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ADSR_setAttackTarget" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setAttackTarget(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ADSR_setDecayRate, _wrap_ADSR_setDecayRate, std::string() ) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ADSR_setDecayRate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_setDecayRate" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ADSR_setDecayRate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setDecayRate(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ADSR_setSustainLevel, _wrap_ADSR_setSustainLevel, std::string() ) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ADSR_setSustainLevel",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_setSustainLevel" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ADSR_setSustainLevel" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setSustainLevel(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ADSR_setReleaseRate, _wrap_ADSR_setReleaseRate, std::string() ) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ADSR_setReleaseRate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_setReleaseRate" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ADSR_setReleaseRate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setReleaseRate(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ADSR_setAttackTime, _wrap_ADSR_setAttackTime, std::string() ) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ADSR_setAttackTime",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_setAttackTime" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ADSR_setAttackTime" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setAttackTime(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ADSR_setDecayTime, _wrap_ADSR_setDecayTime, std::string() ) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ADSR_setDecayTime",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_setDecayTime" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ADSR_setDecayTime" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setDecayTime(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ADSR_setReleaseTime, _wrap_ADSR_setReleaseTime, std::string() ) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ADSR_setReleaseTime",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_setReleaseTime" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ADSR_setReleaseTime" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setReleaseTime(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ADSR_setAllTimes, _wrap_ADSR_setAllTimes, std::string() ) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  stk::StkFloat arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ADSR_setAllTimes",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_setAllTimes" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ADSR_setAllTimes" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ADSR_setAllTimes" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ADSR_setAllTimes" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    ecode5 = SWIG_AsVal_float(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ADSR_setAllTimes" "', argument " "5"" of type '" "stk::StkFloat""'");
    } 
    arg5 = static_cast< stk::StkFloat >(val5);
    (arg1)->setAllTimes(arg2,arg3,arg4,arg5);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ADSR_setTarget, _wrap_ADSR_setTarget, std::string() ) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ADSR_setTarget",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_setTarget" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ADSR_setTarget" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setTarget(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ADSR_getState, _wrap_ADSR_getState, std::string() ) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("ADSR_getState",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_getState" "', argument " "1"" of type '" "stk::ADSR const *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    result = (int)((stk::ADSR const *)arg1)->getState();
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ADSR_setValue, _wrap_ADSR_setValue, std::string() ) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ADSR_setValue",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_setValue" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ADSR_setValue" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setValue(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ADSR_lastOut, _wrap_ADSR_lastOut, std::string() ) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("ADSR_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_lastOut" "', argument " "1"" of type '" "stk::ADSR const *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    result = (stk::StkFloat)((stk::ADSR const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_ADSR_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("ADSR_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_tick" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_ADSR_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("ADSR_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_tick" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ADSR_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ADSR_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ADSR_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_ADSR_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("ADSR_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ADSR, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ADSR_tick" "', argument " "1"" of type '" "stk::ADSR *""'"); 
    }
    arg1 = reinterpret_cast< stk::ADSR * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ADSR_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ADSR_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ADSR_tick, _wrap_ADSR_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__ADSR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ADSR_tick__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__ADSR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ADSR_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__ADSR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ADSR_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_ADSR_members[] = {
{"keyOn",_wrap_ADSR_keyOn,0,0,0,0},
{"keyOff",_wrap_ADSR_keyOff,0,0,0,0},
{"setAttackRate",_wrap_ADSR_setAttackRate,0,0,0,0},
{"setAttackTarget",_wrap_ADSR_setAttackTarget,0,0,0,0},
{"setDecayRate",_wrap_ADSR_setDecayRate,0,0,0,0},
{"setSustainLevel",_wrap_ADSR_setSustainLevel,0,0,0,0},
{"setReleaseRate",_wrap_ADSR_setReleaseRate,0,0,0,0},
{"setAttackTime",_wrap_ADSR_setAttackTime,0,0,0,0},
{"setDecayTime",_wrap_ADSR_setDecayTime,0,0,0,0},
{"setReleaseTime",_wrap_ADSR_setReleaseTime,0,0,0,0},
{"setAllTimes",_wrap_ADSR_setAllTimes,0,0,0,0},
{"setTarget",_wrap_ADSR_setTarget,0,0,0,0},
{"getState",_wrap_ADSR_getState,0,0,0,0},
{"setValue",_wrap_ADSR_setValue,0,0,0,0},
{"lastOut",_wrap_ADSR_lastOut,0,0,0,0},
{"tick",_wrap_ADSR_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_ADSR_base_names[] = {"_p_stk__Generator",0};
static const swig_type_info *swig_ADSR_base[] = {0,0};
static swig_octave_class _wrap_class_ADSR = {"ADSR", &SWIGTYPE_p_stk__ADSR,0,_wrap_new_ADSR,0,_wrap_delete_ADSR,swig_ADSR_members,swig_ADSR_base_names,swig_ADSR_base };

SWIG_DEFUN( TARGET_THRESHOLD_set, _wrap_TARGET_THRESHOLD_set, std::string() ) {
  if (!SWIG_check_num_args("TARGET_THRESHOLD_set",args.length(),1,1,0)) return octave_value_list();return octave_set_immutable(args,nargout);
}


SWIG_DEFUN( TARGET_THRESHOLD_get, _wrap_TARGET_THRESHOLD_get, std::string() ) {
  octave_value obj;
  
  obj = SWIG_From_float(static_cast< float >(stk::TARGET_THRESHOLD));
  return obj;
}


SWIG_DEFUN( new_Asymp, _wrap_new_Asymp, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Asymp *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Asymp",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Asymp *)new stk::Asymp();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Asymp, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Asymp, _wrap_delete_Asymp, std::string() ) {
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Asymp",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Asymp, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Asymp" "', argument " "1"" of type '" "stk::Asymp *""'"); 
    }
    arg1 = reinterpret_cast< stk::Asymp * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Asymp_keyOn, _wrap_Asymp_keyOn, std::string() ) {
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Asymp_keyOn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Asymp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Asymp_keyOn" "', argument " "1"" of type '" "stk::Asymp *""'"); 
    }
    arg1 = reinterpret_cast< stk::Asymp * >(argp1);
    (arg1)->keyOn();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Asymp_keyOff, _wrap_Asymp_keyOff, std::string() ) {
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Asymp_keyOff",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Asymp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Asymp_keyOff" "', argument " "1"" of type '" "stk::Asymp *""'"); 
    }
    arg1 = reinterpret_cast< stk::Asymp * >(argp1);
    (arg1)->keyOff();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Asymp_setTau, _wrap_Asymp_setTau, std::string() ) {
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Asymp_setTau",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Asymp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Asymp_setTau" "', argument " "1"" of type '" "stk::Asymp *""'"); 
    }
    arg1 = reinterpret_cast< stk::Asymp * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Asymp_setTau" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setTau(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Asymp_setTime, _wrap_Asymp_setTime, std::string() ) {
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Asymp_setTime",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Asymp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Asymp_setTime" "', argument " "1"" of type '" "stk::Asymp *""'"); 
    }
    arg1 = reinterpret_cast< stk::Asymp * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Asymp_setTime" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setTime(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Asymp_setT60, _wrap_Asymp_setT60, std::string() ) {
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Asymp_setT60",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Asymp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Asymp_setT60" "', argument " "1"" of type '" "stk::Asymp *""'"); 
    }
    arg1 = reinterpret_cast< stk::Asymp * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Asymp_setT60" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setT60(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Asymp_setTarget, _wrap_Asymp_setTarget, std::string() ) {
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Asymp_setTarget",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Asymp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Asymp_setTarget" "', argument " "1"" of type '" "stk::Asymp *""'"); 
    }
    arg1 = reinterpret_cast< stk::Asymp * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Asymp_setTarget" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setTarget(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Asymp_setValue, _wrap_Asymp_setValue, std::string() ) {
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Asymp_setValue",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Asymp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Asymp_setValue" "', argument " "1"" of type '" "stk::Asymp *""'"); 
    }
    arg1 = reinterpret_cast< stk::Asymp * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Asymp_setValue" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setValue(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Asymp_getState, _wrap_Asymp_getState, std::string() ) {
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("Asymp_getState",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Asymp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Asymp_getState" "', argument " "1"" of type '" "stk::Asymp const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Asymp * >(argp1);
    result = (int)((stk::Asymp const *)arg1)->getState();
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Asymp_lastOut, _wrap_Asymp_lastOut, std::string() ) {
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Asymp_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Asymp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Asymp_lastOut" "', argument " "1"" of type '" "stk::Asymp const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Asymp * >(argp1);
    result = (stk::StkFloat)((stk::Asymp const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Asymp_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Asymp_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Asymp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Asymp_tick" "', argument " "1"" of type '" "stk::Asymp *""'"); 
    }
    arg1 = reinterpret_cast< stk::Asymp * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Asymp_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Asymp_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Asymp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Asymp_tick" "', argument " "1"" of type '" "stk::Asymp *""'"); 
    }
    arg1 = reinterpret_cast< stk::Asymp * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Asymp_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Asymp_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Asymp_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Asymp_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Asymp_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Asymp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Asymp_tick" "', argument " "1"" of type '" "stk::Asymp *""'"); 
    }
    arg1 = reinterpret_cast< stk::Asymp * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Asymp_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Asymp_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Asymp_tick, _wrap_Asymp_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Asymp, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Asymp_tick__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Asymp, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Asymp_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Asymp, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Asymp_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Asymp_members[] = {
{"keyOn",_wrap_Asymp_keyOn,0,0,0,0},
{"keyOff",_wrap_Asymp_keyOff,0,0,0,0},
{"setTau",_wrap_Asymp_setTau,0,0,0,0},
{"setTime",_wrap_Asymp_setTime,0,0,0,0},
{"setT60",_wrap_Asymp_setT60,0,0,0,0},
{"setTarget",_wrap_Asymp_setTarget,0,0,0,0},
{"setValue",_wrap_Asymp_setValue,0,0,0,0},
{"getState",_wrap_Asymp_getState,0,0,0,0},
{"lastOut",_wrap_Asymp_lastOut,0,0,0,0},
{"tick",_wrap_Asymp_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Asymp_base_names[] = {"_p_stk__Generator",0};
static const swig_type_info *swig_Asymp_base[] = {0,0};
static swig_octave_class _wrap_class_Asymp = {"Asymp", &SWIGTYPE_p_stk__Asymp,0,_wrap_new_Asymp,0,_wrap_delete_Asymp,swig_Asymp_members,swig_Asymp_base_names,swig_Asymp_base };

SWIG_DEFUN( MAX_BANDED_MODES_set, _wrap_MAX_BANDED_MODES_set, std::string() ) {
  if (!SWIG_check_num_args("MAX_BANDED_MODES_set",args.length(),1,1,0)) return octave_value_list();return octave_set_immutable(args,nargout);
}


SWIG_DEFUN( MAX_BANDED_MODES_get, _wrap_MAX_BANDED_MODES_get, std::string() ) {
  octave_value obj;
  
  obj = SWIG_From_int(static_cast< int >(stk::MAX_BANDED_MODES));
  return obj;
}


SWIG_DEFUN( new_BandedWG, _wrap_new_BandedWG, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::BandedWG *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_BandedWG",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::BandedWG *)new stk::BandedWG();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__BandedWG, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_BandedWG, _wrap_delete_BandedWG, std::string() ) {
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_BandedWG",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BandedWG, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BandedWG" "', argument " "1"" of type '" "stk::BandedWG *""'"); 
    }
    arg1 = reinterpret_cast< stk::BandedWG * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BandedWG_clear, _wrap_BandedWG_clear, std::string() ) {
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BandedWG_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BandedWG, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandedWG_clear" "', argument " "1"" of type '" "stk::BandedWG *""'"); 
    }
    arg1 = reinterpret_cast< stk::BandedWG * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BandedWG_setStrikePosition, _wrap_BandedWG_setStrikePosition, std::string() ) {
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BandedWG_setStrikePosition",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BandedWG, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandedWG_setStrikePosition" "', argument " "1"" of type '" "stk::BandedWG *""'"); 
    }
    arg1 = reinterpret_cast< stk::BandedWG * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandedWG_setStrikePosition" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setStrikePosition(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BandedWG_setPreset, _wrap_BandedWG_setPreset, std::string() ) {
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BandedWG_setPreset",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BandedWG, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandedWG_setPreset" "', argument " "1"" of type '" "stk::BandedWG *""'"); 
    }
    arg1 = reinterpret_cast< stk::BandedWG * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandedWG_setPreset" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    (arg1)->setPreset(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BandedWG_setFrequency, _wrap_BandedWG_setFrequency, std::string() ) {
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BandedWG_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BandedWG, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandedWG_setFrequency" "', argument " "1"" of type '" "stk::BandedWG *""'"); 
    }
    arg1 = reinterpret_cast< stk::BandedWG * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandedWG_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BandedWG_startBowing, _wrap_BandedWG_startBowing, std::string() ) {
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BandedWG_startBowing",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BandedWG, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandedWG_startBowing" "', argument " "1"" of type '" "stk::BandedWG *""'"); 
    }
    arg1 = reinterpret_cast< stk::BandedWG * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandedWG_startBowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BandedWG_startBowing" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->startBowing(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BandedWG_stopBowing, _wrap_BandedWG_stopBowing, std::string() ) {
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BandedWG_stopBowing",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BandedWG, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandedWG_stopBowing" "', argument " "1"" of type '" "stk::BandedWG *""'"); 
    }
    arg1 = reinterpret_cast< stk::BandedWG * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandedWG_stopBowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->stopBowing(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BandedWG_pluck, _wrap_BandedWG_pluck, std::string() ) {
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BandedWG_pluck",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BandedWG, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandedWG_pluck" "', argument " "1"" of type '" "stk::BandedWG *""'"); 
    }
    arg1 = reinterpret_cast< stk::BandedWG * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandedWG_pluck" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->pluck(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BandedWG_noteOn, _wrap_BandedWG_noteOn, std::string() ) {
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BandedWG_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BandedWG, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandedWG_noteOn" "', argument " "1"" of type '" "stk::BandedWG *""'"); 
    }
    arg1 = reinterpret_cast< stk::BandedWG * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandedWG_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BandedWG_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BandedWG_noteOff, _wrap_BandedWG_noteOff, std::string() ) {
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BandedWG_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BandedWG, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandedWG_noteOff" "', argument " "1"" of type '" "stk::BandedWG *""'"); 
    }
    arg1 = reinterpret_cast< stk::BandedWG * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandedWG_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BandedWG_controlChange, _wrap_BandedWG_controlChange, std::string() ) {
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BandedWG_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BandedWG, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandedWG_controlChange" "', argument " "1"" of type '" "stk::BandedWG *""'"); 
    }
    arg1 = reinterpret_cast< stk::BandedWG * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandedWG_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BandedWG_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BandedWG_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("BandedWG_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BandedWG, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandedWG_tick" "', argument " "1"" of type '" "stk::BandedWG *""'"); 
    }
    arg1 = reinterpret_cast< stk::BandedWG * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandedWG_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BandedWG_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("BandedWG_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BandedWG, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandedWG_tick" "', argument " "1"" of type '" "stk::BandedWG *""'"); 
    }
    arg1 = reinterpret_cast< stk::BandedWG * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BandedWG_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BandedWG_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BandedWG, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandedWG_tick" "', argument " "1"" of type '" "stk::BandedWG *""'"); 
    }
    arg1 = reinterpret_cast< stk::BandedWG * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BandedWG_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BandedWG_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BandedWG_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BandedWG_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BandedWG_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BandedWG, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandedWG_tick" "', argument " "1"" of type '" "stk::BandedWG *""'"); 
    }
    arg1 = reinterpret_cast< stk::BandedWG * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BandedWG_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BandedWG_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BandedWG_tick, _wrap_BandedWG_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BandedWG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BandedWG_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BandedWG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BandedWG_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BandedWG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BandedWG_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BandedWG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BandedWG_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_BandedWG_members[] = {
{"clear",_wrap_BandedWG_clear,0,0,0,0},
{"setStrikePosition",_wrap_BandedWG_setStrikePosition,0,0,0,0},
{"setPreset",_wrap_BandedWG_setPreset,0,0,0,0},
{"setFrequency",_wrap_BandedWG_setFrequency,0,0,0,0},
{"startBowing",_wrap_BandedWG_startBowing,0,0,0,0},
{"stopBowing",_wrap_BandedWG_stopBowing,0,0,0,0},
{"pluck",_wrap_BandedWG_pluck,0,0,0,0},
{"noteOn",_wrap_BandedWG_noteOn,0,0,0,0},
{"noteOff",_wrap_BandedWG_noteOff,0,0,0,0},
{"controlChange",_wrap_BandedWG_controlChange,0,0,0,0},
{"tick",_wrap_BandedWG_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_BandedWG_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_BandedWG_base[] = {0,0};
static swig_octave_class _wrap_class_BandedWG = {"BandedWG", &SWIGTYPE_p_stk__BandedWG,0,_wrap_new_BandedWG,0,_wrap_delete_BandedWG,swig_BandedWG_members,swig_BandedWG_base_names,swig_BandedWG_base };

SWIG_DEFUN( new_BeeThree, _wrap_new_BeeThree, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::BeeThree *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_BeeThree",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::BeeThree *)new stk::BeeThree();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__BeeThree, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_BeeThree, _wrap_delete_BeeThree, std::string() ) {
  stk::BeeThree *arg1 = (stk::BeeThree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_BeeThree",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BeeThree, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BeeThree" "', argument " "1"" of type '" "stk::BeeThree *""'"); 
    }
    arg1 = reinterpret_cast< stk::BeeThree * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BeeThree_noteOn, _wrap_BeeThree_noteOn, std::string() ) {
  stk::BeeThree *arg1 = (stk::BeeThree *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BeeThree_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BeeThree, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BeeThree_noteOn" "', argument " "1"" of type '" "stk::BeeThree *""'"); 
    }
    arg1 = reinterpret_cast< stk::BeeThree * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BeeThree_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BeeThree_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BeeThree_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::BeeThree *arg1 = (stk::BeeThree *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("BeeThree_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BeeThree, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BeeThree_tick" "', argument " "1"" of type '" "stk::BeeThree *""'"); 
    }
    arg1 = reinterpret_cast< stk::BeeThree * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BeeThree_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BeeThree_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::BeeThree *arg1 = (stk::BeeThree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("BeeThree_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BeeThree, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BeeThree_tick" "', argument " "1"" of type '" "stk::BeeThree *""'"); 
    }
    arg1 = reinterpret_cast< stk::BeeThree * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BeeThree_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::BeeThree *arg1 = (stk::BeeThree *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BeeThree_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BeeThree, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BeeThree_tick" "', argument " "1"" of type '" "stk::BeeThree *""'"); 
    }
    arg1 = reinterpret_cast< stk::BeeThree * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BeeThree_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BeeThree_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BeeThree_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BeeThree_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::BeeThree *arg1 = (stk::BeeThree *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BeeThree_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BeeThree, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BeeThree_tick" "', argument " "1"" of type '" "stk::BeeThree *""'"); 
    }
    arg1 = reinterpret_cast< stk::BeeThree * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BeeThree_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BeeThree_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BeeThree_tick, _wrap_BeeThree_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BeeThree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BeeThree_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BeeThree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BeeThree_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BeeThree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BeeThree_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BeeThree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BeeThree_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_BeeThree_members[] = {
{"noteOn",_wrap_BeeThree_noteOn,0,0,0,0},
{"tick",_wrap_BeeThree_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_BeeThree_base_names[] = {"_p_stk__FM",0};
static const swig_type_info *swig_BeeThree_base[] = {0,0};
static swig_octave_class _wrap_class_BeeThree = {"BeeThree", &SWIGTYPE_p_stk__BeeThree,0,_wrap_new_BeeThree,0,_wrap_delete_BeeThree,swig_BeeThree_members,swig_BeeThree_base_names,swig_BeeThree_base };

SWIG_DEFUN( new_BiQuad, _wrap_new_BiQuad, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::BiQuad *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_BiQuad",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::BiQuad *)new stk::BiQuad();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__BiQuad, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_BiQuad, _wrap_delete_BiQuad, std::string() ) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_BiQuad",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BiQuad" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BiQuad_ignoreSampleRateChange__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BiQuad_ignoreSampleRateChange",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_ignoreSampleRateChange" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BiQuad_ignoreSampleRateChange" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    (arg1)->ignoreSampleRateChange(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BiQuad_ignoreSampleRateChange__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BiQuad_ignoreSampleRateChange",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_ignoreSampleRateChange" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    (arg1)->ignoreSampleRateChange();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BiQuad_ignoreSampleRateChange, _wrap_BiQuad_ignoreSampleRateChange, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BiQuad, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BiQuad_ignoreSampleRateChange__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BiQuad, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BiQuad_ignoreSampleRateChange__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_BiQuad_setCoefficients__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  stk::StkFloat arg5 ;
  stk::StkFloat arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BiQuad_setCoefficients",args.length(),7,7,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_setCoefficients" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BiQuad_setCoefficients" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BiQuad_setCoefficients" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BiQuad_setCoefficients" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    ecode5 = SWIG_AsVal_float(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BiQuad_setCoefficients" "', argument " "5"" of type '" "stk::StkFloat""'");
    } 
    arg5 = static_cast< stk::StkFloat >(val5);
    ecode6 = SWIG_AsVal_float(args(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "BiQuad_setCoefficients" "', argument " "6"" of type '" "stk::StkFloat""'");
    } 
    arg6 = static_cast< stk::StkFloat >(val6);
    ecode7 = SWIG_AsVal_bool(args(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "BiQuad_setCoefficients" "', argument " "7"" of type '" "bool""'");
    } 
    arg7 = static_cast< bool >(val7);
    (arg1)->setCoefficients(arg2,arg3,arg4,arg5,arg6,arg7);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BiQuad_setCoefficients__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  stk::StkFloat arg5 ;
  stk::StkFloat arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BiQuad_setCoefficients",args.length(),6,6,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_setCoefficients" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BiQuad_setCoefficients" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BiQuad_setCoefficients" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BiQuad_setCoefficients" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    ecode5 = SWIG_AsVal_float(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BiQuad_setCoefficients" "', argument " "5"" of type '" "stk::StkFloat""'");
    } 
    arg5 = static_cast< stk::StkFloat >(val5);
    ecode6 = SWIG_AsVal_float(args(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "BiQuad_setCoefficients" "', argument " "6"" of type '" "stk::StkFloat""'");
    } 
    arg6 = static_cast< stk::StkFloat >(val6);
    (arg1)->setCoefficients(arg2,arg3,arg4,arg5,arg6);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BiQuad_setCoefficients, _wrap_BiQuad_setCoefficients, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[7]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4),octave_value_ref(args,5),octave_value_ref(args,6)
  };
  
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BiQuad, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_BiQuad_setCoefficients__SWIG_1(args, nargout);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BiQuad, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_BiQuad_setCoefficients__SWIG_0(args, nargout);
                }
              }
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( BiQuad_setB0, _wrap_BiQuad_setB0, std::string() ) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BiQuad_setB0",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_setB0" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BiQuad_setB0" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setB0(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BiQuad_setB1, _wrap_BiQuad_setB1, std::string() ) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BiQuad_setB1",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_setB1" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BiQuad_setB1" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setB1(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BiQuad_setB2, _wrap_BiQuad_setB2, std::string() ) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BiQuad_setB2",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_setB2" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BiQuad_setB2" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setB2(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BiQuad_setA1, _wrap_BiQuad_setA1, std::string() ) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BiQuad_setA1",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_setA1" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BiQuad_setA1" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setA1(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BiQuad_setA2, _wrap_BiQuad_setA2, std::string() ) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BiQuad_setA2",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_setA2" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BiQuad_setA2" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setA2(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BiQuad_setResonance__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BiQuad_setResonance",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_setResonance" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BiQuad_setResonance" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BiQuad_setResonance" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_bool(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BiQuad_setResonance" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
    (arg1)->setResonance(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BiQuad_setResonance__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BiQuad_setResonance",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_setResonance" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BiQuad_setResonance" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BiQuad_setResonance" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setResonance(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BiQuad_setResonance, _wrap_BiQuad_setResonance, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BiQuad, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BiQuad_setResonance__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BiQuad, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BiQuad_setResonance__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( BiQuad_setNotch, _wrap_BiQuad_setNotch, std::string() ) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BiQuad_setNotch",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_setNotch" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BiQuad_setNotch" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BiQuad_setNotch" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setNotch(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BiQuad_setEqualGainZeroes, _wrap_BiQuad_setEqualGainZeroes, std::string() ) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BiQuad_setEqualGainZeroes",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_setEqualGainZeroes" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    (arg1)->setEqualGainZeroes();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BiQuad_lastOut, _wrap_BiQuad_lastOut, std::string() ) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("BiQuad_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_lastOut" "', argument " "1"" of type '" "stk::BiQuad const *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    result = (stk::StkFloat)((stk::BiQuad const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BiQuad_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("BiQuad_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_tick" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BiQuad_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BiQuad_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BiQuad_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_tick" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BiQuad_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BiQuad_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BiQuad_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BiQuad_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BiQuad_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_tick" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BiQuad_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BiQuad_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BiQuad_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BiQuad_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_tick" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BiQuad_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BiQuad_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BiQuad_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BiQuad_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BiQuad_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BiQuad_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BiQuad_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BiQuad_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_tick" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BiQuad_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BiQuad_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BiQuad_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BiQuad_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BiQuad_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BiQuad_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BiQuad_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BiQuad, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BiQuad_tick" "', argument " "1"" of type '" "stk::BiQuad *""'"); 
    }
    arg1 = reinterpret_cast< stk::BiQuad * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BiQuad_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BiQuad_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BiQuad_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BiQuad_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BiQuad_tick, _wrap_BiQuad_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BiQuad, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BiQuad_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BiQuad, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BiQuad_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BiQuad, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BiQuad_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BiQuad, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BiQuad_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BiQuad, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BiQuad_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BiQuad, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_BiQuad_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_BiQuad_members[] = {
{"ignoreSampleRateChange",_wrap_BiQuad_ignoreSampleRateChange,0,0,0,0},
{"setCoefficients",_wrap_BiQuad_setCoefficients,0,0,0,0},
{"setB0",_wrap_BiQuad_setB0,0,0,0,0},
{"setB1",_wrap_BiQuad_setB1,0,0,0,0},
{"setB2",_wrap_BiQuad_setB2,0,0,0,0},
{"setA1",_wrap_BiQuad_setA1,0,0,0,0},
{"setA2",_wrap_BiQuad_setA2,0,0,0,0},
{"setResonance",_wrap_BiQuad_setResonance,0,0,0,0},
{"setNotch",_wrap_BiQuad_setNotch,0,0,0,0},
{"setEqualGainZeroes",_wrap_BiQuad_setEqualGainZeroes,0,0,0,0},
{"lastOut",_wrap_BiQuad_lastOut,0,0,0,0},
{"tick",_wrap_BiQuad_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_BiQuad_base_names[] = {"_p_stk__Filter",0};
static const swig_type_info *swig_BiQuad_base[] = {0,0};
static swig_octave_class _wrap_class_BiQuad = {"BiQuad", &SWIGTYPE_p_stk__BiQuad,0,_wrap_new_BiQuad,0,_wrap_delete_BiQuad,swig_BiQuad_members,swig_BiQuad_base_names,swig_BiQuad_base };

static octave_value_list _wrap_new_Blit__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Blit *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Blit",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Blit" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::Blit *)new stk::Blit(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Blit, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Blit__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Blit *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Blit",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Blit *)new stk::Blit();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Blit, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Blit, _wrap_new_Blit, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_Blit__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Blit__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Blit, _wrap_delete_Blit, std::string() ) {
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Blit",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Blit, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Blit" "', argument " "1"" of type '" "stk::Blit *""'"); 
    }
    arg1 = reinterpret_cast< stk::Blit * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Blit_reset, _wrap_Blit_reset, std::string() ) {
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Blit_reset",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Blit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blit_reset" "', argument " "1"" of type '" "stk::Blit *""'"); 
    }
    arg1 = reinterpret_cast< stk::Blit * >(argp1);
    (arg1)->reset();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Blit_setPhase, _wrap_Blit_setPhase, std::string() ) {
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Blit_setPhase",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Blit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blit_setPhase" "', argument " "1"" of type '" "stk::Blit *""'"); 
    }
    arg1 = reinterpret_cast< stk::Blit * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Blit_setPhase" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setPhase(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Blit_getPhase, _wrap_Blit_getPhase, std::string() ) {
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Blit_getPhase",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Blit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blit_getPhase" "', argument " "1"" of type '" "stk::Blit const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Blit * >(argp1);
    result = (stk::StkFloat)((stk::Blit const *)arg1)->getPhase();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Blit_setFrequency, _wrap_Blit_setFrequency, std::string() ) {
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Blit_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Blit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blit_setFrequency" "', argument " "1"" of type '" "stk::Blit *""'"); 
    }
    arg1 = reinterpret_cast< stk::Blit * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Blit_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Blit_setHarmonics__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Blit_setHarmonics",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Blit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blit_setHarmonics" "', argument " "1"" of type '" "stk::Blit *""'"); 
    }
    arg1 = reinterpret_cast< stk::Blit * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Blit_setHarmonics" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    (arg1)->setHarmonics(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Blit_setHarmonics__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Blit_setHarmonics",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Blit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blit_setHarmonics" "', argument " "1"" of type '" "stk::Blit *""'"); 
    }
    arg1 = reinterpret_cast< stk::Blit * >(argp1);
    (arg1)->setHarmonics();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Blit_setHarmonics, _wrap_Blit_setHarmonics, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Blit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Blit_setHarmonics__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Blit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Blit_setHarmonics__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Blit_lastOut, _wrap_Blit_lastOut, std::string() ) {
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Blit_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Blit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blit_lastOut" "', argument " "1"" of type '" "stk::Blit const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Blit * >(argp1);
    result = (stk::StkFloat)((stk::Blit const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Blit_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Blit_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Blit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blit_tick" "', argument " "1"" of type '" "stk::Blit *""'"); 
    }
    arg1 = reinterpret_cast< stk::Blit * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Blit_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Blit_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Blit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blit_tick" "', argument " "1"" of type '" "stk::Blit *""'"); 
    }
    arg1 = reinterpret_cast< stk::Blit * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Blit_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Blit_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Blit_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Blit_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Blit_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Blit, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Blit_tick" "', argument " "1"" of type '" "stk::Blit *""'"); 
    }
    arg1 = reinterpret_cast< stk::Blit * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Blit_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Blit_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Blit_tick, _wrap_Blit_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Blit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Blit_tick__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Blit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Blit_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Blit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Blit_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Blit_members[] = {
{"reset",_wrap_Blit_reset,0,0,0,0},
{"setPhase",_wrap_Blit_setPhase,0,0,0,0},
{"getPhase",_wrap_Blit_getPhase,0,0,0,0},
{"setFrequency",_wrap_Blit_setFrequency,0,0,0,0},
{"setHarmonics",_wrap_Blit_setHarmonics,0,0,0,0},
{"lastOut",_wrap_Blit_lastOut,0,0,0,0},
{"tick",_wrap_Blit_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Blit_base_names[] = {"_p_stk__Generator",0};
static const swig_type_info *swig_Blit_base[] = {0,0};
static swig_octave_class _wrap_class_Blit = {"Blit", &SWIGTYPE_p_stk__Blit,0,_wrap_new_Blit,0,_wrap_delete_Blit,swig_Blit_members,swig_Blit_base_names,swig_Blit_base };

static octave_value_list _wrap_new_BlitSaw__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::BlitSaw *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_BlitSaw",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BlitSaw" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::BlitSaw *)new stk::BlitSaw(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__BlitSaw, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_BlitSaw__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::BlitSaw *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_BlitSaw",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::BlitSaw *)new stk::BlitSaw();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__BlitSaw, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_BlitSaw, _wrap_new_BlitSaw, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_BlitSaw__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BlitSaw__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_BlitSaw, _wrap_delete_BlitSaw, std::string() ) {
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_BlitSaw",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSaw, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlitSaw" "', argument " "1"" of type '" "stk::BlitSaw *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSaw * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlitSaw_reset, _wrap_BlitSaw_reset, std::string() ) {
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlitSaw_reset",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSaw, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSaw_reset" "', argument " "1"" of type '" "stk::BlitSaw *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSaw * >(argp1);
    (arg1)->reset();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlitSaw_setFrequency, _wrap_BlitSaw_setFrequency, std::string() ) {
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlitSaw_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSaw, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSaw_setFrequency" "', argument " "1"" of type '" "stk::BlitSaw *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSaw * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlitSaw_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlitSaw_setHarmonics__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlitSaw_setHarmonics",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSaw, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSaw_setHarmonics" "', argument " "1"" of type '" "stk::BlitSaw *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSaw * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlitSaw_setHarmonics" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    (arg1)->setHarmonics(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlitSaw_setHarmonics__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlitSaw_setHarmonics",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSaw, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSaw_setHarmonics" "', argument " "1"" of type '" "stk::BlitSaw *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSaw * >(argp1);
    (arg1)->setHarmonics();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlitSaw_setHarmonics, _wrap_BlitSaw_setHarmonics, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlitSaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BlitSaw_setHarmonics__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlitSaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BlitSaw_setHarmonics__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( BlitSaw_lastOut, _wrap_BlitSaw_lastOut, std::string() ) {
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("BlitSaw_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSaw, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSaw_lastOut" "', argument " "1"" of type '" "stk::BlitSaw const *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSaw * >(argp1);
    result = (stk::StkFloat)((stk::BlitSaw const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlitSaw_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("BlitSaw_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSaw, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSaw_tick" "', argument " "1"" of type '" "stk::BlitSaw *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSaw * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlitSaw_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BlitSaw_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSaw, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSaw_tick" "', argument " "1"" of type '" "stk::BlitSaw *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSaw * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlitSaw_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlitSaw_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlitSaw_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlitSaw_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BlitSaw_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSaw, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSaw_tick" "', argument " "1"" of type '" "stk::BlitSaw *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSaw * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlitSaw_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlitSaw_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlitSaw_tick, _wrap_BlitSaw_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlitSaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BlitSaw_tick__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlitSaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BlitSaw_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlitSaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BlitSaw_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_BlitSaw_members[] = {
{"reset",_wrap_BlitSaw_reset,0,0,0,0},
{"setFrequency",_wrap_BlitSaw_setFrequency,0,0,0,0},
{"setHarmonics",_wrap_BlitSaw_setHarmonics,0,0,0,0},
{"lastOut",_wrap_BlitSaw_lastOut,0,0,0,0},
{"tick",_wrap_BlitSaw_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_BlitSaw_base_names[] = {"_p_stk__Generator",0};
static const swig_type_info *swig_BlitSaw_base[] = {0,0};
static swig_octave_class _wrap_class_BlitSaw = {"BlitSaw", &SWIGTYPE_p_stk__BlitSaw,0,_wrap_new_BlitSaw,0,_wrap_delete_BlitSaw,swig_BlitSaw_members,swig_BlitSaw_base_names,swig_BlitSaw_base };

static octave_value_list _wrap_new_BlitSquare__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::BlitSquare *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_BlitSquare",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BlitSquare" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::BlitSquare *)new stk::BlitSquare(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__BlitSquare, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_BlitSquare__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::BlitSquare *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_BlitSquare",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::BlitSquare *)new stk::BlitSquare();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__BlitSquare, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_BlitSquare, _wrap_new_BlitSquare, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_BlitSquare__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BlitSquare__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_BlitSquare, _wrap_delete_BlitSquare, std::string() ) {
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_BlitSquare",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSquare, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlitSquare" "', argument " "1"" of type '" "stk::BlitSquare *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSquare * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlitSquare_reset, _wrap_BlitSquare_reset, std::string() ) {
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlitSquare_reset",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSquare, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSquare_reset" "', argument " "1"" of type '" "stk::BlitSquare *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSquare * >(argp1);
    (arg1)->reset();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlitSquare_setPhase, _wrap_BlitSquare_setPhase, std::string() ) {
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlitSquare_setPhase",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSquare, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSquare_setPhase" "', argument " "1"" of type '" "stk::BlitSquare *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSquare * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlitSquare_setPhase" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setPhase(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlitSquare_getPhase, _wrap_BlitSquare_getPhase, std::string() ) {
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("BlitSquare_getPhase",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSquare, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSquare_getPhase" "', argument " "1"" of type '" "stk::BlitSquare const *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSquare * >(argp1);
    result = (stk::StkFloat)((stk::BlitSquare const *)arg1)->getPhase();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlitSquare_setFrequency, _wrap_BlitSquare_setFrequency, std::string() ) {
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlitSquare_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSquare, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSquare_setFrequency" "', argument " "1"" of type '" "stk::BlitSquare *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSquare * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlitSquare_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlitSquare_setHarmonics__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlitSquare_setHarmonics",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSquare, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSquare_setHarmonics" "', argument " "1"" of type '" "stk::BlitSquare *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSquare * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlitSquare_setHarmonics" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    (arg1)->setHarmonics(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlitSquare_setHarmonics__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlitSquare_setHarmonics",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSquare, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSquare_setHarmonics" "', argument " "1"" of type '" "stk::BlitSquare *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSquare * >(argp1);
    (arg1)->setHarmonics();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlitSquare_setHarmonics, _wrap_BlitSquare_setHarmonics, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlitSquare, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BlitSquare_setHarmonics__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlitSquare, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BlitSquare_setHarmonics__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( BlitSquare_lastOut, _wrap_BlitSquare_lastOut, std::string() ) {
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("BlitSquare_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSquare, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSquare_lastOut" "', argument " "1"" of type '" "stk::BlitSquare const *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSquare * >(argp1);
    result = (stk::StkFloat)((stk::BlitSquare const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlitSquare_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("BlitSquare_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSquare, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSquare_tick" "', argument " "1"" of type '" "stk::BlitSquare *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSquare * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlitSquare_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BlitSquare_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSquare, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSquare_tick" "', argument " "1"" of type '" "stk::BlitSquare *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSquare * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlitSquare_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlitSquare_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlitSquare_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlitSquare_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BlitSquare_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlitSquare, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlitSquare_tick" "', argument " "1"" of type '" "stk::BlitSquare *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlitSquare * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlitSquare_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlitSquare_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlitSquare_tick, _wrap_BlitSquare_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlitSquare, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BlitSquare_tick__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlitSquare, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BlitSquare_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlitSquare, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BlitSquare_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_BlitSquare_members[] = {
{"reset",_wrap_BlitSquare_reset,0,0,0,0},
{"setPhase",_wrap_BlitSquare_setPhase,0,0,0,0},
{"getPhase",_wrap_BlitSquare_getPhase,0,0,0,0},
{"setFrequency",_wrap_BlitSquare_setFrequency,0,0,0,0},
{"setHarmonics",_wrap_BlitSquare_setHarmonics,0,0,0,0},
{"lastOut",_wrap_BlitSquare_lastOut,0,0,0,0},
{"tick",_wrap_BlitSquare_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_BlitSquare_base_names[] = {"_p_stk__Generator",0};
static const swig_type_info *swig_BlitSquare_base[] = {0,0};
static swig_octave_class _wrap_class_BlitSquare = {"BlitSquare", &SWIGTYPE_p_stk__BlitSquare,0,_wrap_new_BlitSquare,0,_wrap_delete_BlitSquare,swig_BlitSquare_members,swig_BlitSquare_base_names,swig_BlitSquare_base };

SWIG_DEFUN( new_BlowBotl, _wrap_new_BlowBotl, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::BlowBotl *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_BlowBotl",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::BlowBotl *)new stk::BlowBotl();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__BlowBotl, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_BlowBotl, _wrap_delete_BlowBotl, std::string() ) {
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_BlowBotl",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowBotl, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlowBotl" "', argument " "1"" of type '" "stk::BlowBotl *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowBotl * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowBotl_clear, _wrap_BlowBotl_clear, std::string() ) {
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlowBotl_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowBotl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowBotl_clear" "', argument " "1"" of type '" "stk::BlowBotl *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowBotl * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowBotl_setFrequency, _wrap_BlowBotl_setFrequency, std::string() ) {
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlowBotl_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowBotl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowBotl_setFrequency" "', argument " "1"" of type '" "stk::BlowBotl *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowBotl * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlowBotl_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowBotl_startBlowing, _wrap_BlowBotl_startBlowing, std::string() ) {
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlowBotl_startBlowing",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowBotl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowBotl_startBlowing" "', argument " "1"" of type '" "stk::BlowBotl *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowBotl * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlowBotl_startBlowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlowBotl_startBlowing" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->startBlowing(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowBotl_stopBlowing, _wrap_BlowBotl_stopBlowing, std::string() ) {
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlowBotl_stopBlowing",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowBotl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowBotl_stopBlowing" "', argument " "1"" of type '" "stk::BlowBotl *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowBotl * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlowBotl_stopBlowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->stopBlowing(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowBotl_noteOn, _wrap_BlowBotl_noteOn, std::string() ) {
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlowBotl_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowBotl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowBotl_noteOn" "', argument " "1"" of type '" "stk::BlowBotl *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowBotl * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlowBotl_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlowBotl_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowBotl_noteOff, _wrap_BlowBotl_noteOff, std::string() ) {
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlowBotl_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowBotl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowBotl_noteOff" "', argument " "1"" of type '" "stk::BlowBotl *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowBotl * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlowBotl_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowBotl_controlChange, _wrap_BlowBotl_controlChange, std::string() ) {
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlowBotl_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowBotl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowBotl_controlChange" "', argument " "1"" of type '" "stk::BlowBotl *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowBotl * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlowBotl_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlowBotl_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlowBotl_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("BlowBotl_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowBotl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowBotl_tick" "', argument " "1"" of type '" "stk::BlowBotl *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowBotl * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlowBotl_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlowBotl_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("BlowBotl_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowBotl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowBotl_tick" "', argument " "1"" of type '" "stk::BlowBotl *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowBotl * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlowBotl_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BlowBotl_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowBotl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowBotl_tick" "', argument " "1"" of type '" "stk::BlowBotl *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowBotl * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlowBotl_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlowBotl_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlowBotl_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlowBotl_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BlowBotl_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowBotl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowBotl_tick" "', argument " "1"" of type '" "stk::BlowBotl *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowBotl * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlowBotl_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlowBotl_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowBotl_tick, _wrap_BlowBotl_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlowBotl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BlowBotl_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlowBotl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BlowBotl_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlowBotl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BlowBotl_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlowBotl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BlowBotl_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_BlowBotl_members[] = {
{"clear",_wrap_BlowBotl_clear,0,0,0,0},
{"setFrequency",_wrap_BlowBotl_setFrequency,0,0,0,0},
{"startBlowing",_wrap_BlowBotl_startBlowing,0,0,0,0},
{"stopBlowing",_wrap_BlowBotl_stopBlowing,0,0,0,0},
{"noteOn",_wrap_BlowBotl_noteOn,0,0,0,0},
{"noteOff",_wrap_BlowBotl_noteOff,0,0,0,0},
{"controlChange",_wrap_BlowBotl_controlChange,0,0,0,0},
{"tick",_wrap_BlowBotl_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_BlowBotl_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_BlowBotl_base[] = {0,0};
static swig_octave_class _wrap_class_BlowBotl = {"BlowBotl", &SWIGTYPE_p_stk__BlowBotl,0,_wrap_new_BlowBotl,0,_wrap_delete_BlowBotl,swig_BlowBotl_members,swig_BlowBotl_base_names,swig_BlowBotl_base };

SWIG_DEFUN( new_BlowHole, _wrap_new_BlowHole, std::string() ) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::BlowHole *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_BlowHole",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BlowHole" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::BlowHole *)new stk::BlowHole(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__BlowHole, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_BlowHole, _wrap_delete_BlowHole, std::string() ) {
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_BlowHole",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowHole, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlowHole" "', argument " "1"" of type '" "stk::BlowHole *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowHole * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowHole_clear, _wrap_BlowHole_clear, std::string() ) {
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlowHole_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowHole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowHole_clear" "', argument " "1"" of type '" "stk::BlowHole *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowHole * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowHole_setFrequency, _wrap_BlowHole_setFrequency, std::string() ) {
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlowHole_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowHole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowHole_setFrequency" "', argument " "1"" of type '" "stk::BlowHole *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowHole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlowHole_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowHole_setTonehole, _wrap_BlowHole_setTonehole, std::string() ) {
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlowHole_setTonehole",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowHole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowHole_setTonehole" "', argument " "1"" of type '" "stk::BlowHole *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowHole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlowHole_setTonehole" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setTonehole(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowHole_setVent, _wrap_BlowHole_setVent, std::string() ) {
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlowHole_setVent",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowHole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowHole_setVent" "', argument " "1"" of type '" "stk::BlowHole *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowHole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlowHole_setVent" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setVent(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowHole_startBlowing, _wrap_BlowHole_startBlowing, std::string() ) {
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlowHole_startBlowing",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowHole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowHole_startBlowing" "', argument " "1"" of type '" "stk::BlowHole *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowHole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlowHole_startBlowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlowHole_startBlowing" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->startBlowing(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowHole_stopBlowing, _wrap_BlowHole_stopBlowing, std::string() ) {
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlowHole_stopBlowing",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowHole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowHole_stopBlowing" "', argument " "1"" of type '" "stk::BlowHole *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowHole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlowHole_stopBlowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->stopBlowing(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowHole_noteOn, _wrap_BlowHole_noteOn, std::string() ) {
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlowHole_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowHole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowHole_noteOn" "', argument " "1"" of type '" "stk::BlowHole *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowHole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlowHole_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlowHole_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowHole_noteOff, _wrap_BlowHole_noteOff, std::string() ) {
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlowHole_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowHole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowHole_noteOff" "', argument " "1"" of type '" "stk::BlowHole *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowHole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlowHole_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowHole_controlChange, _wrap_BlowHole_controlChange, std::string() ) {
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BlowHole_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowHole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowHole_controlChange" "', argument " "1"" of type '" "stk::BlowHole *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowHole * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlowHole_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlowHole_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlowHole_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("BlowHole_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowHole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowHole_tick" "', argument " "1"" of type '" "stk::BlowHole *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowHole * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlowHole_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlowHole_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("BlowHole_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowHole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowHole_tick" "', argument " "1"" of type '" "stk::BlowHole *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowHole * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlowHole_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BlowHole_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowHole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowHole_tick" "', argument " "1"" of type '" "stk::BlowHole *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowHole * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlowHole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlowHole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlowHole_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BlowHole_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BlowHole_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BlowHole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlowHole_tick" "', argument " "1"" of type '" "stk::BlowHole *""'"); 
    }
    arg1 = reinterpret_cast< stk::BlowHole * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlowHole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlowHole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BlowHole_tick, _wrap_BlowHole_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlowHole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BlowHole_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlowHole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BlowHole_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlowHole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BlowHole_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BlowHole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BlowHole_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_BlowHole_members[] = {
{"clear",_wrap_BlowHole_clear,0,0,0,0},
{"setFrequency",_wrap_BlowHole_setFrequency,0,0,0,0},
{"setTonehole",_wrap_BlowHole_setTonehole,0,0,0,0},
{"setVent",_wrap_BlowHole_setVent,0,0,0,0},
{"startBlowing",_wrap_BlowHole_startBlowing,0,0,0,0},
{"stopBlowing",_wrap_BlowHole_stopBlowing,0,0,0,0},
{"noteOn",_wrap_BlowHole_noteOn,0,0,0,0},
{"noteOff",_wrap_BlowHole_noteOff,0,0,0,0},
{"controlChange",_wrap_BlowHole_controlChange,0,0,0,0},
{"tick",_wrap_BlowHole_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_BlowHole_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_BlowHole_base[] = {0,0};
static swig_octave_class _wrap_class_BlowHole = {"BlowHole", &SWIGTYPE_p_stk__BlowHole,0,_wrap_new_BlowHole,0,_wrap_delete_BlowHole,swig_BlowHole_members,swig_BlowHole_base_names,swig_BlowHole_base };

SWIG_DEFUN( new_BowTable, _wrap_new_BowTable, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::BowTable *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_BowTable",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::BowTable *)new stk::BowTable();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__BowTable, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BowTable_setOffset, _wrap_BowTable_setOffset, std::string() ) {
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BowTable_setOffset",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BowTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BowTable_setOffset" "', argument " "1"" of type '" "stk::BowTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::BowTable * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BowTable_setOffset" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setOffset(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BowTable_setSlope, _wrap_BowTable_setSlope, std::string() ) {
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BowTable_setSlope",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BowTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BowTable_setSlope" "', argument " "1"" of type '" "stk::BowTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::BowTable * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BowTable_setSlope" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setSlope(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BowTable_setMinOutput, _wrap_BowTable_setMinOutput, std::string() ) {
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BowTable_setMinOutput",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BowTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BowTable_setMinOutput" "', argument " "1"" of type '" "stk::BowTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::BowTable * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BowTable_setMinOutput" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setMinOutput(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BowTable_setMaxOutput, _wrap_BowTable_setMaxOutput, std::string() ) {
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("BowTable_setMaxOutput",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BowTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BowTable_setMaxOutput" "', argument " "1"" of type '" "stk::BowTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::BowTable * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BowTable_setMaxOutput" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setMaxOutput(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BowTable_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("BowTable_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BowTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BowTable_tick" "', argument " "1"" of type '" "stk::BowTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::BowTable * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BowTable_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BowTable_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BowTable_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BowTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BowTable_tick" "', argument " "1"" of type '" "stk::BowTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::BowTable * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BowTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BowTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BowTable_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BowTable_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BowTable_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BowTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BowTable_tick" "', argument " "1"" of type '" "stk::BowTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::BowTable * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BowTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BowTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BowTable_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BowTable_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BowTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BowTable_tick" "', argument " "1"" of type '" "stk::BowTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::BowTable * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BowTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BowTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BowTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BowTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BowTable_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BowTable_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BowTable_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BowTable_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BowTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BowTable_tick" "', argument " "1"" of type '" "stk::BowTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::BowTable * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BowTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BowTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BowTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BowTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BowTable_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_BowTable_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("BowTable_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BowTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BowTable_tick" "', argument " "1"" of type '" "stk::BowTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::BowTable * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BowTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BowTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BowTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BowTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( BowTable_tick, _wrap_BowTable_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BowTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BowTable_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BowTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BowTable_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BowTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BowTable_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BowTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BowTable_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BowTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BowTable_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__BowTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_BowTable_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_BowTable, _wrap_delete_BowTable, std::string() ) {
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_BowTable",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__BowTable, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BowTable" "', argument " "1"" of type '" "stk::BowTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::BowTable * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_BowTable_members[] = {
{"setOffset",_wrap_BowTable_setOffset,0,0,0,0},
{"setSlope",_wrap_BowTable_setSlope,0,0,0,0},
{"setMinOutput",_wrap_BowTable_setMinOutput,0,0,0,0},
{"setMaxOutput",_wrap_BowTable_setMaxOutput,0,0,0,0},
{"tick",_wrap_BowTable_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_BowTable_base_names[] = {"_p_stk__Function",0};
static const swig_type_info *swig_BowTable_base[] = {0,0};
static swig_octave_class _wrap_class_BowTable = {"BowTable", &SWIGTYPE_p_stk__BowTable,0,_wrap_new_BowTable,0,_wrap_delete_BowTable,swig_BowTable_members,swig_BowTable_base_names,swig_BowTable_base };

SWIG_DEFUN( delete_Bowed, _wrap_delete_Bowed, std::string() ) {
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Bowed",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Bowed, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Bowed" "', argument " "1"" of type '" "stk::Bowed *""'"); 
    }
    arg1 = reinterpret_cast< stk::Bowed * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Bowed_clear, _wrap_Bowed_clear, std::string() ) {
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Bowed_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Bowed, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bowed_clear" "', argument " "1"" of type '" "stk::Bowed *""'"); 
    }
    arg1 = reinterpret_cast< stk::Bowed * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Bowed_setFrequency, _wrap_Bowed_setFrequency, std::string() ) {
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Bowed_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Bowed, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bowed_setFrequency" "', argument " "1"" of type '" "stk::Bowed *""'"); 
    }
    arg1 = reinterpret_cast< stk::Bowed * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bowed_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Bowed_setVibrato, _wrap_Bowed_setVibrato, std::string() ) {
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Bowed_setVibrato",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Bowed, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bowed_setVibrato" "', argument " "1"" of type '" "stk::Bowed *""'"); 
    }
    arg1 = reinterpret_cast< stk::Bowed * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bowed_setVibrato" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setVibrato(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Bowed_startBowing, _wrap_Bowed_startBowing, std::string() ) {
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Bowed_startBowing",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Bowed, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bowed_startBowing" "', argument " "1"" of type '" "stk::Bowed *""'"); 
    }
    arg1 = reinterpret_cast< stk::Bowed * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bowed_startBowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Bowed_startBowing" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->startBowing(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Bowed_stopBowing, _wrap_Bowed_stopBowing, std::string() ) {
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Bowed_stopBowing",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Bowed, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bowed_stopBowing" "', argument " "1"" of type '" "stk::Bowed *""'"); 
    }
    arg1 = reinterpret_cast< stk::Bowed * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bowed_stopBowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->stopBowing(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Bowed_noteOn, _wrap_Bowed_noteOn, std::string() ) {
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Bowed_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Bowed, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bowed_noteOn" "', argument " "1"" of type '" "stk::Bowed *""'"); 
    }
    arg1 = reinterpret_cast< stk::Bowed * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bowed_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Bowed_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Bowed_noteOff, _wrap_Bowed_noteOff, std::string() ) {
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Bowed_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Bowed, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bowed_noteOff" "', argument " "1"" of type '" "stk::Bowed *""'"); 
    }
    arg1 = reinterpret_cast< stk::Bowed * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bowed_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Bowed_controlChange, _wrap_Bowed_controlChange, std::string() ) {
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Bowed_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Bowed, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bowed_controlChange" "', argument " "1"" of type '" "stk::Bowed *""'"); 
    }
    arg1 = reinterpret_cast< stk::Bowed * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bowed_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Bowed_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Bowed_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Bowed_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Bowed, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bowed_tick" "', argument " "1"" of type '" "stk::Bowed *""'"); 
    }
    arg1 = reinterpret_cast< stk::Bowed * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bowed_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Bowed_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Bowed_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Bowed, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bowed_tick" "', argument " "1"" of type '" "stk::Bowed *""'"); 
    }
    arg1 = reinterpret_cast< stk::Bowed * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Bowed_tick, _wrap_Bowed_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Bowed, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Bowed_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Bowed, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Bowed_tick__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Bowed_members[] = {
{"clear",_wrap_Bowed_clear,0,0,0,0},
{"setFrequency",_wrap_Bowed_setFrequency,0,0,0,0},
{"setVibrato",_wrap_Bowed_setVibrato,0,0,0,0},
{"startBowing",_wrap_Bowed_startBowing,0,0,0,0},
{"stopBowing",_wrap_Bowed_stopBowing,0,0,0,0},
{"noteOn",_wrap_Bowed_noteOn,0,0,0,0},
{"noteOff",_wrap_Bowed_noteOff,0,0,0,0},
{"controlChange",_wrap_Bowed_controlChange,0,0,0,0},
{"tick",_wrap_Bowed_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Bowed_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Bowed_base[] = {0,0};
static swig_octave_class _wrap_class_Bowed = {"Bowed", &SWIGTYPE_p_stk__Bowed,0,0,0,_wrap_delete_Bowed,swig_Bowed_members,swig_Bowed_base_names,swig_Bowed_base };

static octave_value_list _wrap_new_Brass__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Brass *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Brass",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Brass" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::Brass *)new stk::Brass(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Brass, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Brass__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Brass *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Brass",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Brass *)new stk::Brass();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Brass, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Brass, _wrap_new_Brass, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_Brass__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Brass__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Brass, _wrap_delete_Brass, std::string() ) {
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Brass",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Brass, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Brass" "', argument " "1"" of type '" "stk::Brass *""'"); 
    }
    arg1 = reinterpret_cast< stk::Brass * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Brass_clear, _wrap_Brass_clear, std::string() ) {
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Brass_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Brass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brass_clear" "', argument " "1"" of type '" "stk::Brass *""'"); 
    }
    arg1 = reinterpret_cast< stk::Brass * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Brass_setFrequency, _wrap_Brass_setFrequency, std::string() ) {
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Brass_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Brass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brass_setFrequency" "', argument " "1"" of type '" "stk::Brass *""'"); 
    }
    arg1 = reinterpret_cast< stk::Brass * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brass_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Brass_setLip, _wrap_Brass_setLip, std::string() ) {
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Brass_setLip",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Brass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brass_setLip" "', argument " "1"" of type '" "stk::Brass *""'"); 
    }
    arg1 = reinterpret_cast< stk::Brass * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brass_setLip" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setLip(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Brass_startBlowing, _wrap_Brass_startBlowing, std::string() ) {
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Brass_startBlowing",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Brass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brass_startBlowing" "', argument " "1"" of type '" "stk::Brass *""'"); 
    }
    arg1 = reinterpret_cast< stk::Brass * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brass_startBlowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Brass_startBlowing" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->startBlowing(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Brass_stopBlowing, _wrap_Brass_stopBlowing, std::string() ) {
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Brass_stopBlowing",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Brass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brass_stopBlowing" "', argument " "1"" of type '" "stk::Brass *""'"); 
    }
    arg1 = reinterpret_cast< stk::Brass * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brass_stopBlowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->stopBlowing(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Brass_noteOn, _wrap_Brass_noteOn, std::string() ) {
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Brass_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Brass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brass_noteOn" "', argument " "1"" of type '" "stk::Brass *""'"); 
    }
    arg1 = reinterpret_cast< stk::Brass * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brass_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Brass_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Brass_noteOff, _wrap_Brass_noteOff, std::string() ) {
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Brass_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Brass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brass_noteOff" "', argument " "1"" of type '" "stk::Brass *""'"); 
    }
    arg1 = reinterpret_cast< stk::Brass * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brass_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Brass_controlChange, _wrap_Brass_controlChange, std::string() ) {
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Brass_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Brass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brass_controlChange" "', argument " "1"" of type '" "stk::Brass *""'"); 
    }
    arg1 = reinterpret_cast< stk::Brass * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brass_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Brass_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Brass_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Brass_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Brass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brass_tick" "', argument " "1"" of type '" "stk::Brass *""'"); 
    }
    arg1 = reinterpret_cast< stk::Brass * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Brass_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Brass_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Brass_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Brass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brass_tick" "', argument " "1"" of type '" "stk::Brass *""'"); 
    }
    arg1 = reinterpret_cast< stk::Brass * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Brass_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Brass_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Brass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brass_tick" "', argument " "1"" of type '" "stk::Brass *""'"); 
    }
    arg1 = reinterpret_cast< stk::Brass * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Brass_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Brass_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Brass_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Brass_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Brass_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Brass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Brass_tick" "', argument " "1"" of type '" "stk::Brass *""'"); 
    }
    arg1 = reinterpret_cast< stk::Brass * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Brass_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Brass_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Brass_tick, _wrap_Brass_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Brass, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Brass_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Brass, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Brass_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Brass, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Brass_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Brass, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Brass_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Brass_members[] = {
{"clear",_wrap_Brass_clear,0,0,0,0},
{"setFrequency",_wrap_Brass_setFrequency,0,0,0,0},
{"setLip",_wrap_Brass_setLip,0,0,0,0},
{"startBlowing",_wrap_Brass_startBlowing,0,0,0,0},
{"stopBlowing",_wrap_Brass_stopBlowing,0,0,0,0},
{"noteOn",_wrap_Brass_noteOn,0,0,0,0},
{"noteOff",_wrap_Brass_noteOff,0,0,0,0},
{"controlChange",_wrap_Brass_controlChange,0,0,0,0},
{"tick",_wrap_Brass_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Brass_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Brass_base[] = {0,0};
static swig_octave_class _wrap_class_Brass = {"Brass", &SWIGTYPE_p_stk__Brass,0,_wrap_new_Brass,0,_wrap_delete_Brass,swig_Brass_members,swig_Brass_base_names,swig_Brass_base };

static octave_value_list _wrap_new_Chorus__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Chorus *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Chorus",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Chorus" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::Chorus *)new stk::Chorus(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Chorus, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Chorus__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Chorus *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Chorus",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Chorus *)new stk::Chorus();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Chorus, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Chorus, _wrap_new_Chorus, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_Chorus__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Chorus__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Chorus_clear, _wrap_Chorus_clear, std::string() ) {
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Chorus_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Chorus, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Chorus_clear" "', argument " "1"" of type '" "stk::Chorus *""'"); 
    }
    arg1 = reinterpret_cast< stk::Chorus * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Chorus_setModDepth, _wrap_Chorus_setModDepth, std::string() ) {
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Chorus_setModDepth",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Chorus, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Chorus_setModDepth" "', argument " "1"" of type '" "stk::Chorus *""'"); 
    }
    arg1 = reinterpret_cast< stk::Chorus * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Chorus_setModDepth" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setModDepth(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Chorus_setModFrequency, _wrap_Chorus_setModFrequency, std::string() ) {
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Chorus_setModFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Chorus, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Chorus_setModFrequency" "', argument " "1"" of type '" "stk::Chorus *""'"); 
    }
    arg1 = reinterpret_cast< stk::Chorus * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Chorus_setModFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setModFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Chorus_lastOut__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Chorus_lastOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Chorus, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Chorus_lastOut" "', argument " "1"" of type '" "stk::Chorus *""'"); 
    }
    arg1 = reinterpret_cast< stk::Chorus * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Chorus_lastOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->lastOut(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Chorus_lastOut__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Chorus_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Chorus, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Chorus_lastOut" "', argument " "1"" of type '" "stk::Chorus *""'"); 
    }
    arg1 = reinterpret_cast< stk::Chorus * >(argp1);
    result = (stk::StkFloat)(arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Chorus_lastOut, _wrap_Chorus_lastOut, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Chorus, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Chorus_lastOut__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Chorus, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Chorus_lastOut__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Chorus_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFloat arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Chorus_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Chorus, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Chorus_tick" "', argument " "1"" of type '" "stk::Chorus *""'"); 
    }
    arg1 = reinterpret_cast< stk::Chorus * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Chorus_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Chorus_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFloat)(arg1)->tick(arg2,arg3);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Chorus_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Chorus_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Chorus, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Chorus_tick" "', argument " "1"" of type '" "stk::Chorus *""'"); 
    }
    arg1 = reinterpret_cast< stk::Chorus * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Chorus_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Chorus_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Chorus_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Chorus, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Chorus_tick" "', argument " "1"" of type '" "stk::Chorus *""'"); 
    }
    arg1 = reinterpret_cast< stk::Chorus * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Chorus_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Chorus_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Chorus_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Chorus_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Chorus_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Chorus, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Chorus_tick" "', argument " "1"" of type '" "stk::Chorus *""'"); 
    }
    arg1 = reinterpret_cast< stk::Chorus * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Chorus_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Chorus_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Chorus_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Chorus_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Chorus, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Chorus_tick" "', argument " "1"" of type '" "stk::Chorus *""'"); 
    }
    arg1 = reinterpret_cast< stk::Chorus * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Chorus_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Chorus_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Chorus_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Chorus_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Chorus_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Chorus_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Chorus_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Chorus_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Chorus, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Chorus_tick" "', argument " "1"" of type '" "stk::Chorus *""'"); 
    }
    arg1 = reinterpret_cast< stk::Chorus * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Chorus_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Chorus_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Chorus_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Chorus_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Chorus_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Chorus_tick__SWIG_6 (const octave_value_list& args, int nargout) {
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Chorus_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Chorus, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Chorus_tick" "', argument " "1"" of type '" "stk::Chorus *""'"); 
    }
    arg1 = reinterpret_cast< stk::Chorus * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Chorus_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Chorus_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Chorus_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Chorus_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Chorus_tick, _wrap_Chorus_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Chorus, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Chorus_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Chorus, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Chorus_tick__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Chorus, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Chorus_tick__SWIG_6(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Chorus, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Chorus_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Chorus, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Chorus_tick__SWIG_0(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Chorus, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Chorus_tick__SWIG_5(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Chorus, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Chorus_tick__SWIG_4(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Chorus, _wrap_delete_Chorus, std::string() ) {
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Chorus",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Chorus, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Chorus" "', argument " "1"" of type '" "stk::Chorus *""'"); 
    }
    arg1 = reinterpret_cast< stk::Chorus * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Chorus_members[] = {
{"clear",_wrap_Chorus_clear,0,0,0,0},
{"setModDepth",_wrap_Chorus_setModDepth,0,0,0,0},
{"setModFrequency",_wrap_Chorus_setModFrequency,0,0,0,0},
{"lastOut",_wrap_Chorus_lastOut,0,0,0,0},
{"tick",_wrap_Chorus_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Chorus_base_names[] = {"_p_stk__Effect",0};
static const swig_type_info *swig_Chorus_base[] = {0,0};
static swig_octave_class _wrap_class_Chorus = {"Chorus", &SWIGTYPE_p_stk__Chorus,0,_wrap_new_Chorus,0,_wrap_delete_Chorus,swig_Chorus_members,swig_Chorus_base_names,swig_Chorus_base };

static octave_value_list _wrap_new_Clarinet__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Clarinet *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Clarinet",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Clarinet" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::Clarinet *)new stk::Clarinet(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Clarinet, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Clarinet__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Clarinet *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Clarinet",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Clarinet *)new stk::Clarinet();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Clarinet, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Clarinet, _wrap_new_Clarinet, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_Clarinet__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Clarinet__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Clarinet, _wrap_delete_Clarinet, std::string() ) {
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Clarinet",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Clarinet, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Clarinet" "', argument " "1"" of type '" "stk::Clarinet *""'"); 
    }
    arg1 = reinterpret_cast< stk::Clarinet * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Clarinet_clear, _wrap_Clarinet_clear, std::string() ) {
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Clarinet_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Clarinet, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clarinet_clear" "', argument " "1"" of type '" "stk::Clarinet *""'"); 
    }
    arg1 = reinterpret_cast< stk::Clarinet * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Clarinet_setFrequency, _wrap_Clarinet_setFrequency, std::string() ) {
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Clarinet_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Clarinet, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clarinet_setFrequency" "', argument " "1"" of type '" "stk::Clarinet *""'"); 
    }
    arg1 = reinterpret_cast< stk::Clarinet * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Clarinet_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Clarinet_startBlowing, _wrap_Clarinet_startBlowing, std::string() ) {
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Clarinet_startBlowing",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Clarinet, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clarinet_startBlowing" "', argument " "1"" of type '" "stk::Clarinet *""'"); 
    }
    arg1 = reinterpret_cast< stk::Clarinet * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Clarinet_startBlowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Clarinet_startBlowing" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->startBlowing(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Clarinet_stopBlowing, _wrap_Clarinet_stopBlowing, std::string() ) {
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Clarinet_stopBlowing",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Clarinet, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clarinet_stopBlowing" "', argument " "1"" of type '" "stk::Clarinet *""'"); 
    }
    arg1 = reinterpret_cast< stk::Clarinet * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Clarinet_stopBlowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->stopBlowing(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Clarinet_noteOn, _wrap_Clarinet_noteOn, std::string() ) {
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Clarinet_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Clarinet, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clarinet_noteOn" "', argument " "1"" of type '" "stk::Clarinet *""'"); 
    }
    arg1 = reinterpret_cast< stk::Clarinet * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Clarinet_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Clarinet_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Clarinet_noteOff, _wrap_Clarinet_noteOff, std::string() ) {
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Clarinet_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Clarinet, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clarinet_noteOff" "', argument " "1"" of type '" "stk::Clarinet *""'"); 
    }
    arg1 = reinterpret_cast< stk::Clarinet * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Clarinet_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Clarinet_controlChange, _wrap_Clarinet_controlChange, std::string() ) {
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Clarinet_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Clarinet, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clarinet_controlChange" "', argument " "1"" of type '" "stk::Clarinet *""'"); 
    }
    arg1 = reinterpret_cast< stk::Clarinet * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Clarinet_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Clarinet_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Clarinet_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Clarinet_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Clarinet, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clarinet_tick" "', argument " "1"" of type '" "stk::Clarinet *""'"); 
    }
    arg1 = reinterpret_cast< stk::Clarinet * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Clarinet_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Clarinet_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Clarinet_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Clarinet, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clarinet_tick" "', argument " "1"" of type '" "stk::Clarinet *""'"); 
    }
    arg1 = reinterpret_cast< stk::Clarinet * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Clarinet_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Clarinet_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Clarinet, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clarinet_tick" "', argument " "1"" of type '" "stk::Clarinet *""'"); 
    }
    arg1 = reinterpret_cast< stk::Clarinet * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Clarinet_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clarinet_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Clarinet_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Clarinet_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Clarinet_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Clarinet, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clarinet_tick" "', argument " "1"" of type '" "stk::Clarinet *""'"); 
    }
    arg1 = reinterpret_cast< stk::Clarinet * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Clarinet_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clarinet_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Clarinet_tick, _wrap_Clarinet_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Clarinet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Clarinet_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Clarinet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Clarinet_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Clarinet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Clarinet_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Clarinet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Clarinet_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Clarinet_members[] = {
{"clear",_wrap_Clarinet_clear,0,0,0,0},
{"setFrequency",_wrap_Clarinet_setFrequency,0,0,0,0},
{"startBlowing",_wrap_Clarinet_startBlowing,0,0,0,0},
{"stopBlowing",_wrap_Clarinet_stopBlowing,0,0,0,0},
{"noteOn",_wrap_Clarinet_noteOn,0,0,0,0},
{"noteOff",_wrap_Clarinet_noteOff,0,0,0,0},
{"controlChange",_wrap_Clarinet_controlChange,0,0,0,0},
{"tick",_wrap_Clarinet_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Clarinet_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Clarinet_base[] = {0,0};
static swig_octave_class _wrap_class_Clarinet = {"Clarinet", &SWIGTYPE_p_stk__Clarinet,0,_wrap_new_Clarinet,0,_wrap_delete_Clarinet,swig_Clarinet_members,swig_Clarinet_base_names,swig_Clarinet_base };

SWIG_DEFUN( new_Cubic, _wrap_new_Cubic, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Cubic *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Cubic",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Cubic *)new stk::Cubic();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Cubic, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Cubic_setA1, _wrap_Cubic_setA1, std::string() ) {
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Cubic_setA1",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Cubic, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cubic_setA1" "', argument " "1"" of type '" "stk::Cubic *""'"); 
    }
    arg1 = reinterpret_cast< stk::Cubic * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cubic_setA1" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setA1(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Cubic_setA2, _wrap_Cubic_setA2, std::string() ) {
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Cubic_setA2",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Cubic, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cubic_setA2" "', argument " "1"" of type '" "stk::Cubic *""'"); 
    }
    arg1 = reinterpret_cast< stk::Cubic * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cubic_setA2" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setA2(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Cubic_setA3, _wrap_Cubic_setA3, std::string() ) {
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Cubic_setA3",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Cubic, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cubic_setA3" "', argument " "1"" of type '" "stk::Cubic *""'"); 
    }
    arg1 = reinterpret_cast< stk::Cubic * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cubic_setA3" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setA3(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Cubic_setGain, _wrap_Cubic_setGain, std::string() ) {
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Cubic_setGain",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Cubic, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cubic_setGain" "', argument " "1"" of type '" "stk::Cubic *""'"); 
    }
    arg1 = reinterpret_cast< stk::Cubic * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cubic_setGain" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setGain(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Cubic_setThreshold, _wrap_Cubic_setThreshold, std::string() ) {
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Cubic_setThreshold",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Cubic, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cubic_setThreshold" "', argument " "1"" of type '" "stk::Cubic *""'"); 
    }
    arg1 = reinterpret_cast< stk::Cubic * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cubic_setThreshold" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setThreshold(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Cubic_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Cubic_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Cubic, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cubic_tick" "', argument " "1"" of type '" "stk::Cubic *""'"); 
    }
    arg1 = reinterpret_cast< stk::Cubic * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cubic_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Cubic_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Cubic_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Cubic, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cubic_tick" "', argument " "1"" of type '" "stk::Cubic *""'"); 
    }
    arg1 = reinterpret_cast< stk::Cubic * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cubic_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cubic_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Cubic_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Cubic_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Cubic_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Cubic, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cubic_tick" "', argument " "1"" of type '" "stk::Cubic *""'"); 
    }
    arg1 = reinterpret_cast< stk::Cubic * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cubic_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cubic_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Cubic_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Cubic_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Cubic, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cubic_tick" "', argument " "1"" of type '" "stk::Cubic *""'"); 
    }
    arg1 = reinterpret_cast< stk::Cubic * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cubic_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cubic_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cubic_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cubic_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Cubic_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Cubic_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Cubic_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Cubic_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Cubic, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cubic_tick" "', argument " "1"" of type '" "stk::Cubic *""'"); 
    }
    arg1 = reinterpret_cast< stk::Cubic * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cubic_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cubic_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cubic_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cubic_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Cubic_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Cubic_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Cubic_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Cubic, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cubic_tick" "', argument " "1"" of type '" "stk::Cubic *""'"); 
    }
    arg1 = reinterpret_cast< stk::Cubic * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cubic_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cubic_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cubic_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cubic_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Cubic_tick, _wrap_Cubic_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Cubic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Cubic_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Cubic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Cubic_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Cubic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Cubic_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Cubic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Cubic_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Cubic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Cubic_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Cubic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Cubic_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Cubic, _wrap_delete_Cubic, std::string() ) {
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Cubic",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Cubic, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cubic" "', argument " "1"" of type '" "stk::Cubic *""'"); 
    }
    arg1 = reinterpret_cast< stk::Cubic * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Cubic_members[] = {
{"setA1",_wrap_Cubic_setA1,0,0,0,0},
{"setA2",_wrap_Cubic_setA2,0,0,0,0},
{"setA3",_wrap_Cubic_setA3,0,0,0,0},
{"setGain",_wrap_Cubic_setGain,0,0,0,0},
{"setThreshold",_wrap_Cubic_setThreshold,0,0,0,0},
{"tick",_wrap_Cubic_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Cubic_base_names[] = {"_p_stk__Function",0};
static const swig_type_info *swig_Cubic_base[] = {0,0};
static swig_octave_class _wrap_class_Cubic = {"Cubic", &SWIGTYPE_p_stk__Cubic,0,_wrap_new_Cubic,0,_wrap_delete_Cubic,swig_Cubic_members,swig_Cubic_base_names,swig_Cubic_base };

static octave_value_list _wrap_new_Delay__SWIG_0 (const octave_value_list& args, int nargout) {
  unsigned long arg1 ;
  unsigned long arg2 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Delay *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Delay",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Delay" "', argument " "1"" of type '" "unsigned long""'");
    } 
    arg1 = static_cast< unsigned long >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Delay" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    result = (stk::Delay *)new stk::Delay(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Delay, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Delay__SWIG_1 (const octave_value_list& args, int nargout) {
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Delay *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Delay",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Delay" "', argument " "1"" of type '" "unsigned long""'");
    } 
    arg1 = static_cast< unsigned long >(val1);
    result = (stk::Delay *)new stk::Delay(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Delay, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Delay__SWIG_2 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Delay *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Delay",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Delay *)new stk::Delay();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Delay, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Delay, _wrap_new_Delay, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_Delay__SWIG_2(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Delay__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Delay__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Delay, _wrap_delete_Delay, std::string() ) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Delay",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Delay" "', argument " "1"" of type '" "stk::Delay *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Delay_getMaximumDelay, _wrap_Delay_getMaximumDelay, std::string() ) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned long result;
  
  try {
    if (!SWIG_check_num_args("Delay_getMaximumDelay",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Delay_getMaximumDelay" "', argument " "1"" of type '" "stk::Delay *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    result = (unsigned long)(arg1)->getMaximumDelay();
    _outv = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Delay_setMaximumDelay, _wrap_Delay_setMaximumDelay, std::string() ) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Delay_setMaximumDelay",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Delay_setMaximumDelay" "', argument " "1"" of type '" "stk::Delay *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Delay_setMaximumDelay" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    (arg1)->setMaximumDelay(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Delay_setDelay, _wrap_Delay_setDelay, std::string() ) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Delay_setDelay",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Delay_setDelay" "', argument " "1"" of type '" "stk::Delay *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Delay_setDelay" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    (arg1)->setDelay(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Delay_getDelay, _wrap_Delay_getDelay, std::string() ) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned long result;
  
  try {
    if (!SWIG_check_num_args("Delay_getDelay",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Delay_getDelay" "', argument " "1"" of type '" "stk::Delay const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    result = (unsigned long)((stk::Delay const *)arg1)->getDelay();
    _outv = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Delay_tapOut, _wrap_Delay_tapOut, std::string() ) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Delay_tapOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Delay_tapOut" "', argument " "1"" of type '" "stk::Delay *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Delay_tapOut" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    result = (stk::StkFloat)(arg1)->tapOut(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Delay_tapIn, _wrap_Delay_tapIn, std::string() ) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFloat arg2 ;
  unsigned long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Delay_tapIn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Delay_tapIn" "', argument " "1"" of type '" "stk::Delay *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Delay_tapIn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Delay_tapIn" "', argument " "3"" of type '" "unsigned long""'");
    } 
    arg3 = static_cast< unsigned long >(val3);
    (arg1)->tapIn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Delay_addTo, _wrap_Delay_addTo, std::string() ) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFloat arg2 ;
  unsigned long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Delay_addTo",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Delay_addTo" "', argument " "1"" of type '" "stk::Delay *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Delay_addTo" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Delay_addTo" "', argument " "3"" of type '" "unsigned long""'");
    } 
    arg3 = static_cast< unsigned long >(val3);
    result = (stk::StkFloat)(arg1)->addTo(arg2,arg3);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Delay_lastOut, _wrap_Delay_lastOut, std::string() ) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Delay_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Delay_lastOut" "', argument " "1"" of type '" "stk::Delay const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    result = (stk::StkFloat)((stk::Delay const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Delay_nextOut, _wrap_Delay_nextOut, std::string() ) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Delay_nextOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Delay_nextOut" "', argument " "1"" of type '" "stk::Delay *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    result = (stk::StkFloat)(arg1)->nextOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Delay_energy, _wrap_Delay_energy, std::string() ) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Delay_energy",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Delay_energy" "', argument " "1"" of type '" "stk::Delay const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    result = (stk::StkFloat)((stk::Delay const *)arg1)->energy();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Delay_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Delay_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Delay_tick" "', argument " "1"" of type '" "stk::Delay *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Delay_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Delay_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Delay_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Delay_tick" "', argument " "1"" of type '" "stk::Delay *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Delay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Delay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Delay_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Delay_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Delay_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Delay_tick" "', argument " "1"" of type '" "stk::Delay *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Delay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Delay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Delay_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Delay_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Delay_tick" "', argument " "1"" of type '" "stk::Delay *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Delay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Delay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Delay_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Delay_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Delay_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Delay_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Delay_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Delay_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Delay_tick" "', argument " "1"" of type '" "stk::Delay *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Delay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Delay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Delay_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Delay_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Delay_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Delay_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Delay_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Delay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Delay_tick" "', argument " "1"" of type '" "stk::Delay *""'"); 
    }
    arg1 = reinterpret_cast< stk::Delay * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Delay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Delay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Delay_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Delay_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Delay_tick, _wrap_Delay_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Delay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Delay_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Delay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Delay_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Delay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Delay_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Delay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Delay_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Delay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Delay_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Delay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Delay_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Delay_members[] = {
{"getMaximumDelay",_wrap_Delay_getMaximumDelay,0,0,0,0},
{"setMaximumDelay",_wrap_Delay_setMaximumDelay,0,0,0,0},
{"setDelay",_wrap_Delay_setDelay,0,0,0,0},
{"getDelay",_wrap_Delay_getDelay,0,0,0,0},
{"tapOut",_wrap_Delay_tapOut,0,0,0,0},
{"tapIn",_wrap_Delay_tapIn,0,0,0,0},
{"addTo",_wrap_Delay_addTo,0,0,0,0},
{"lastOut",_wrap_Delay_lastOut,0,0,0,0},
{"nextOut",_wrap_Delay_nextOut,0,0,0,0},
{"energy",_wrap_Delay_energy,0,0,0,0},
{"tick",_wrap_Delay_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Delay_base_names[] = {"_p_stk__Filter",0};
static const swig_type_info *swig_Delay_base[] = {0,0};
static swig_octave_class _wrap_class_Delay = {"Delay", &SWIGTYPE_p_stk__Delay,0,_wrap_new_Delay,0,_wrap_delete_Delay,swig_Delay_members,swig_Delay_base_names,swig_Delay_base };

static octave_value_list _wrap_new_DelayA__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  unsigned long arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::DelayA *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_DelayA",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DelayA" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DelayA" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    result = (stk::DelayA *)new stk::DelayA(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__DelayA, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_DelayA__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::DelayA *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_DelayA",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DelayA" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::DelayA *)new stk::DelayA(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__DelayA, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_DelayA__SWIG_2 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::DelayA *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_DelayA",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::DelayA *)new stk::DelayA();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__DelayA, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_DelayA, _wrap_new_DelayA, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_DelayA__SWIG_2(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DelayA__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DelayA__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_DelayA, _wrap_delete_DelayA, std::string() ) {
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_DelayA",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayA, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DelayA" "', argument " "1"" of type '" "stk::DelayA *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayA * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayA_clear, _wrap_DelayA_clear, std::string() ) {
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("DelayA_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayA, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayA_clear" "', argument " "1"" of type '" "stk::DelayA *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayA * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayA_getMaximumDelay, _wrap_DelayA_getMaximumDelay, std::string() ) {
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned long result;
  
  try {
    if (!SWIG_check_num_args("DelayA_getMaximumDelay",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayA, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayA_getMaximumDelay" "', argument " "1"" of type '" "stk::DelayA *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayA * >(argp1);
    result = (unsigned long)(arg1)->getMaximumDelay();
    _outv = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayA_setMaximumDelay, _wrap_DelayA_setMaximumDelay, std::string() ) {
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("DelayA_setMaximumDelay",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayA, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayA_setMaximumDelay" "', argument " "1"" of type '" "stk::DelayA *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayA * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DelayA_setMaximumDelay" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    (arg1)->setMaximumDelay(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayA_setDelay, _wrap_DelayA_setDelay, std::string() ) {
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("DelayA_setDelay",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayA, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayA_setDelay" "', argument " "1"" of type '" "stk::DelayA *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayA * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DelayA_setDelay" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setDelay(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayA_getDelay, _wrap_DelayA_getDelay, std::string() ) {
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("DelayA_getDelay",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayA, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayA_getDelay" "', argument " "1"" of type '" "stk::DelayA const *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayA * >(argp1);
    result = (stk::StkFloat)((stk::DelayA const *)arg1)->getDelay();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayA_tapOut, _wrap_DelayA_tapOut, std::string() ) {
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("DelayA_tapOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayA, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayA_tapOut" "', argument " "1"" of type '" "stk::DelayA *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayA * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DelayA_tapOut" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    result = (stk::StkFloat)(arg1)->tapOut(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayA_lastOut, _wrap_DelayA_lastOut, std::string() ) {
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("DelayA_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayA, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayA_lastOut" "', argument " "1"" of type '" "stk::DelayA const *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayA * >(argp1);
    result = (stk::StkFloat)((stk::DelayA const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayA_nextOut, _wrap_DelayA_nextOut, std::string() ) {
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("DelayA_nextOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayA, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayA_nextOut" "', argument " "1"" of type '" "stk::DelayA *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayA * >(argp1);
    result = (stk::StkFloat)(arg1)->nextOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_DelayA_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("DelayA_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayA, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayA_tick" "', argument " "1"" of type '" "stk::DelayA *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayA * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DelayA_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_DelayA_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("DelayA_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayA, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayA_tick" "', argument " "1"" of type '" "stk::DelayA *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayA * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DelayA_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DelayA_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DelayA_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_DelayA_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("DelayA_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayA, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayA_tick" "', argument " "1"" of type '" "stk::DelayA *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayA * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DelayA_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DelayA_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_DelayA_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("DelayA_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayA, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayA_tick" "', argument " "1"" of type '" "stk::DelayA *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayA * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DelayA_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DelayA_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DelayA_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DelayA_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DelayA_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DelayA_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_DelayA_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("DelayA_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayA, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayA_tick" "', argument " "1"" of type '" "stk::DelayA *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayA * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DelayA_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DelayA_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DelayA_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DelayA_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DelayA_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_DelayA_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("DelayA_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayA, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayA_tick" "', argument " "1"" of type '" "stk::DelayA *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayA * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DelayA_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DelayA_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DelayA_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DelayA_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayA_tick, _wrap_DelayA_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__DelayA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DelayA_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__DelayA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DelayA_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__DelayA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DelayA_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__DelayA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DelayA_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__DelayA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DelayA_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__DelayA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_DelayA_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_DelayA_members[] = {
{"clear",_wrap_DelayA_clear,0,0,0,0},
{"getMaximumDelay",_wrap_DelayA_getMaximumDelay,0,0,0,0},
{"setMaximumDelay",_wrap_DelayA_setMaximumDelay,0,0,0,0},
{"setDelay",_wrap_DelayA_setDelay,0,0,0,0},
{"getDelay",_wrap_DelayA_getDelay,0,0,0,0},
{"tapOut",_wrap_DelayA_tapOut,0,0,0,0},
{"lastOut",_wrap_DelayA_lastOut,0,0,0,0},
{"nextOut",_wrap_DelayA_nextOut,0,0,0,0},
{"tick",_wrap_DelayA_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_DelayA_base_names[] = {"_p_stk__Filter",0};
static const swig_type_info *swig_DelayA_base[] = {0,0};
static swig_octave_class _wrap_class_DelayA = {"DelayA", &SWIGTYPE_p_stk__DelayA,0,_wrap_new_DelayA,0,_wrap_delete_DelayA,swig_DelayA_members,swig_DelayA_base_names,swig_DelayA_base };

static octave_value_list _wrap_new_DelayL__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  unsigned long arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::DelayL *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_DelayL",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DelayL" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DelayL" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    result = (stk::DelayL *)new stk::DelayL(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__DelayL, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_DelayL__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::DelayL *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_DelayL",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DelayL" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::DelayL *)new stk::DelayL(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__DelayL, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_DelayL__SWIG_2 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::DelayL *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_DelayL",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::DelayL *)new stk::DelayL();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__DelayL, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_DelayL, _wrap_new_DelayL, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_DelayL__SWIG_2(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DelayL__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DelayL__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_DelayL, _wrap_delete_DelayL, std::string() ) {
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_DelayL",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayL, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DelayL" "', argument " "1"" of type '" "stk::DelayL *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayL * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayL_getMaximumDelay, _wrap_DelayL_getMaximumDelay, std::string() ) {
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned long result;
  
  try {
    if (!SWIG_check_num_args("DelayL_getMaximumDelay",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayL_getMaximumDelay" "', argument " "1"" of type '" "stk::DelayL *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayL * >(argp1);
    result = (unsigned long)(arg1)->getMaximumDelay();
    _outv = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayL_setMaximumDelay, _wrap_DelayL_setMaximumDelay, std::string() ) {
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("DelayL_setMaximumDelay",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayL_setMaximumDelay" "', argument " "1"" of type '" "stk::DelayL *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayL * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DelayL_setMaximumDelay" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    (arg1)->setMaximumDelay(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayL_setDelay, _wrap_DelayL_setDelay, std::string() ) {
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("DelayL_setDelay",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayL_setDelay" "', argument " "1"" of type '" "stk::DelayL *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayL * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DelayL_setDelay" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setDelay(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayL_getDelay, _wrap_DelayL_getDelay, std::string() ) {
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("DelayL_getDelay",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayL_getDelay" "', argument " "1"" of type '" "stk::DelayL const *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayL * >(argp1);
    result = (stk::StkFloat)((stk::DelayL const *)arg1)->getDelay();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayL_tapOut, _wrap_DelayL_tapOut, std::string() ) {
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("DelayL_tapOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayL_tapOut" "', argument " "1"" of type '" "stk::DelayL *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayL * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DelayL_tapOut" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    result = (stk::StkFloat)(arg1)->tapOut(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayL_tapIn, _wrap_DelayL_tapIn, std::string() ) {
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFloat arg2 ;
  unsigned long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("DelayL_tapIn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayL_tapIn" "', argument " "1"" of type '" "stk::DelayL *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayL * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DelayL_tapIn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DelayL_tapIn" "', argument " "3"" of type '" "unsigned long""'");
    } 
    arg3 = static_cast< unsigned long >(val3);
    (arg1)->tapIn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayL_lastOut, _wrap_DelayL_lastOut, std::string() ) {
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("DelayL_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayL_lastOut" "', argument " "1"" of type '" "stk::DelayL const *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayL * >(argp1);
    result = (stk::StkFloat)((stk::DelayL const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayL_nextOut, _wrap_DelayL_nextOut, std::string() ) {
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("DelayL_nextOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayL_nextOut" "', argument " "1"" of type '" "stk::DelayL *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayL * >(argp1);
    result = (stk::StkFloat)(arg1)->nextOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_DelayL_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("DelayL_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayL_tick" "', argument " "1"" of type '" "stk::DelayL *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayL * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DelayL_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_DelayL_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("DelayL_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayL_tick" "', argument " "1"" of type '" "stk::DelayL *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayL * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DelayL_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DelayL_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DelayL_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_DelayL_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("DelayL_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayL_tick" "', argument " "1"" of type '" "stk::DelayL *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayL * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DelayL_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DelayL_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_DelayL_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("DelayL_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayL_tick" "', argument " "1"" of type '" "stk::DelayL *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayL * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DelayL_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DelayL_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DelayL_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DelayL_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DelayL_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DelayL_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_DelayL_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("DelayL_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayL_tick" "', argument " "1"" of type '" "stk::DelayL *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayL * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DelayL_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DelayL_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DelayL_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DelayL_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DelayL_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_DelayL_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("DelayL_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__DelayL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DelayL_tick" "', argument " "1"" of type '" "stk::DelayL *""'"); 
    }
    arg1 = reinterpret_cast< stk::DelayL * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DelayL_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DelayL_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DelayL_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DelayL_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( DelayL_tick, _wrap_DelayL_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__DelayL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DelayL_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__DelayL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DelayL_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__DelayL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DelayL_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__DelayL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DelayL_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__DelayL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DelayL_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__DelayL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_DelayL_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_DelayL_members[] = {
{"getMaximumDelay",_wrap_DelayL_getMaximumDelay,0,0,0,0},
{"setMaximumDelay",_wrap_DelayL_setMaximumDelay,0,0,0,0},
{"setDelay",_wrap_DelayL_setDelay,0,0,0,0},
{"getDelay",_wrap_DelayL_getDelay,0,0,0,0},
{"tapOut",_wrap_DelayL_tapOut,0,0,0,0},
{"tapIn",_wrap_DelayL_tapIn,0,0,0,0},
{"lastOut",_wrap_DelayL_lastOut,0,0,0,0},
{"nextOut",_wrap_DelayL_nextOut,0,0,0,0},
{"tick",_wrap_DelayL_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_DelayL_base_names[] = {"_p_stk__Filter",0};
static const swig_type_info *swig_DelayL_base[] = {0,0};
static swig_octave_class _wrap_class_DelayL = {"DelayL", &SWIGTYPE_p_stk__DelayL,0,_wrap_new_DelayL,0,_wrap_delete_DelayL,swig_DelayL_members,swig_DelayL_base_names,swig_DelayL_base };

SWIG_DEFUN( new_Drummer, _wrap_new_Drummer, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Drummer *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Drummer",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Drummer *)new stk::Drummer();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Drummer, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Drummer, _wrap_delete_Drummer, std::string() ) {
  stk::Drummer *arg1 = (stk::Drummer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Drummer",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Drummer, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Drummer" "', argument " "1"" of type '" "stk::Drummer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Drummer * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Drummer_noteOn, _wrap_Drummer_noteOn, std::string() ) {
  stk::Drummer *arg1 = (stk::Drummer *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Drummer_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Drummer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Drummer_noteOn" "', argument " "1"" of type '" "stk::Drummer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Drummer * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Drummer_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Drummer_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Drummer_noteOff, _wrap_Drummer_noteOff, std::string() ) {
  stk::Drummer *arg1 = (stk::Drummer *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Drummer_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Drummer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Drummer_noteOff" "', argument " "1"" of type '" "stk::Drummer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Drummer * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Drummer_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Drummer_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Drummer *arg1 = (stk::Drummer *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Drummer_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Drummer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Drummer_tick" "', argument " "1"" of type '" "stk::Drummer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Drummer * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Drummer_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Drummer_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Drummer *arg1 = (stk::Drummer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Drummer_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Drummer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Drummer_tick" "', argument " "1"" of type '" "stk::Drummer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Drummer * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Drummer_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Drummer *arg1 = (stk::Drummer *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Drummer_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Drummer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Drummer_tick" "', argument " "1"" of type '" "stk::Drummer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Drummer * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Drummer_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Drummer_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Drummer_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Drummer_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Drummer *arg1 = (stk::Drummer *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Drummer_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Drummer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Drummer_tick" "', argument " "1"" of type '" "stk::Drummer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Drummer * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Drummer_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Drummer_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Drummer_tick, _wrap_Drummer_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Drummer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Drummer_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Drummer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Drummer_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Drummer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Drummer_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Drummer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Drummer_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Drummer_members[] = {
{"noteOn",_wrap_Drummer_noteOn,0,0,0,0},
{"noteOff",_wrap_Drummer_noteOff,0,0,0,0},
{"tick",_wrap_Drummer_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Drummer_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Drummer_base[] = {0,0};
static swig_octave_class _wrap_class_Drummer = {"Drummer", &SWIGTYPE_p_stk__Drummer,0,_wrap_new_Drummer,0,_wrap_delete_Drummer,swig_Drummer_members,swig_Drummer_base_names,swig_Drummer_base };

static octave_value_list _wrap_new_Echo__SWIG_0 (const octave_value_list& args, int nargout) {
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Echo *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Echo",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Echo" "', argument " "1"" of type '" "unsigned long""'");
    } 
    arg1 = static_cast< unsigned long >(val1);
    result = (stk::Echo *)new stk::Echo(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Echo, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Echo__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Echo *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Echo",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Echo *)new stk::Echo();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Echo, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Echo, _wrap_new_Echo, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_Echo__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Echo__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Echo_clear, _wrap_Echo_clear, std::string() ) {
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Echo_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Echo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Echo_clear" "', argument " "1"" of type '" "stk::Echo *""'"); 
    }
    arg1 = reinterpret_cast< stk::Echo * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Echo_setMaximumDelay, _wrap_Echo_setMaximumDelay, std::string() ) {
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Echo_setMaximumDelay",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Echo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Echo_setMaximumDelay" "', argument " "1"" of type '" "stk::Echo *""'"); 
    }
    arg1 = reinterpret_cast< stk::Echo * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Echo_setMaximumDelay" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    (arg1)->setMaximumDelay(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Echo_setDelay, _wrap_Echo_setDelay, std::string() ) {
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Echo_setDelay",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Echo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Echo_setDelay" "', argument " "1"" of type '" "stk::Echo *""'"); 
    }
    arg1 = reinterpret_cast< stk::Echo * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Echo_setDelay" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    (arg1)->setDelay(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Echo_lastOut, _wrap_Echo_lastOut, std::string() ) {
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Echo_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Echo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Echo_lastOut" "', argument " "1"" of type '" "stk::Echo const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Echo * >(argp1);
    result = (stk::StkFloat)((stk::Echo const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Echo_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Echo_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Echo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Echo_tick" "', argument " "1"" of type '" "stk::Echo *""'"); 
    }
    arg1 = reinterpret_cast< stk::Echo * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Echo_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Echo_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Echo_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Echo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Echo_tick" "', argument " "1"" of type '" "stk::Echo *""'"); 
    }
    arg1 = reinterpret_cast< stk::Echo * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Echo_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Echo_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Echo_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Echo_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Echo_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Echo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Echo_tick" "', argument " "1"" of type '" "stk::Echo *""'"); 
    }
    arg1 = reinterpret_cast< stk::Echo * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Echo_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Echo_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Echo_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Echo_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Echo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Echo_tick" "', argument " "1"" of type '" "stk::Echo *""'"); 
    }
    arg1 = reinterpret_cast< stk::Echo * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Echo_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Echo_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Echo_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Echo_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Echo_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Echo_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Echo_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Echo_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Echo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Echo_tick" "', argument " "1"" of type '" "stk::Echo *""'"); 
    }
    arg1 = reinterpret_cast< stk::Echo * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Echo_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Echo_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Echo_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Echo_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Echo_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Echo_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Echo_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Echo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Echo_tick" "', argument " "1"" of type '" "stk::Echo *""'"); 
    }
    arg1 = reinterpret_cast< stk::Echo * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Echo_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Echo_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Echo_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Echo_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Echo_tick, _wrap_Echo_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Echo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Echo_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Echo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Echo_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Echo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Echo_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Echo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Echo_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Echo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Echo_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Echo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Echo_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Echo, _wrap_delete_Echo, std::string() ) {
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Echo",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Echo, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Echo" "', argument " "1"" of type '" "stk::Echo *""'"); 
    }
    arg1 = reinterpret_cast< stk::Echo * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Echo_members[] = {
{"clear",_wrap_Echo_clear,0,0,0,0},
{"setMaximumDelay",_wrap_Echo_setMaximumDelay,0,0,0,0},
{"setDelay",_wrap_Echo_setDelay,0,0,0,0},
{"lastOut",_wrap_Echo_lastOut,0,0,0,0},
{"tick",_wrap_Echo_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Echo_base_names[] = {"_p_stk__Effect",0};
static const swig_type_info *swig_Echo_base[] = {0,0};
static swig_octave_class _wrap_class_Echo = {"Echo", &SWIGTYPE_p_stk__Echo,0,_wrap_new_Echo,0,_wrap_delete_Echo,swig_Echo_members,swig_Echo_base_names,swig_Echo_base };

SWIG_DEFUN( new_Envelope, _wrap_new_Envelope, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Envelope *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Envelope",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Envelope *)new stk::Envelope();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Envelope, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Envelope, _wrap_delete_Envelope, std::string() ) {
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Envelope",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Envelope, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Envelope" "', argument " "1"" of type '" "stk::Envelope *""'"); 
    }
    arg1 = reinterpret_cast< stk::Envelope * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Envelope_keyOn__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Envelope_keyOn",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Envelope, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_keyOn" "', argument " "1"" of type '" "stk::Envelope *""'"); 
    }
    arg1 = reinterpret_cast< stk::Envelope * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Envelope_keyOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->keyOn(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Envelope_keyOn__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Envelope_keyOn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Envelope, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_keyOn" "', argument " "1"" of type '" "stk::Envelope *""'"); 
    }
    arg1 = reinterpret_cast< stk::Envelope * >(argp1);
    (arg1)->keyOn();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Envelope_keyOn, _wrap_Envelope_keyOn, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Envelope, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Envelope_keyOn__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Envelope, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Envelope_keyOn__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Envelope_keyOff__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Envelope_keyOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Envelope, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_keyOff" "', argument " "1"" of type '" "stk::Envelope *""'"); 
    }
    arg1 = reinterpret_cast< stk::Envelope * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Envelope_keyOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->keyOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Envelope_keyOff__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Envelope_keyOff",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Envelope, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_keyOff" "', argument " "1"" of type '" "stk::Envelope *""'"); 
    }
    arg1 = reinterpret_cast< stk::Envelope * >(argp1);
    (arg1)->keyOff();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Envelope_keyOff, _wrap_Envelope_keyOff, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Envelope, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Envelope_keyOff__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Envelope, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Envelope_keyOff__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Envelope_setRate, _wrap_Envelope_setRate, std::string() ) {
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Envelope_setRate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Envelope, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_setRate" "', argument " "1"" of type '" "stk::Envelope *""'"); 
    }
    arg1 = reinterpret_cast< stk::Envelope * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Envelope_setRate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setRate(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Envelope_setTime, _wrap_Envelope_setTime, std::string() ) {
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Envelope_setTime",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Envelope, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_setTime" "', argument " "1"" of type '" "stk::Envelope *""'"); 
    }
    arg1 = reinterpret_cast< stk::Envelope * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Envelope_setTime" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setTime(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Envelope_setTarget, _wrap_Envelope_setTarget, std::string() ) {
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Envelope_setTarget",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Envelope, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_setTarget" "', argument " "1"" of type '" "stk::Envelope *""'"); 
    }
    arg1 = reinterpret_cast< stk::Envelope * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Envelope_setTarget" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setTarget(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Envelope_setValue, _wrap_Envelope_setValue, std::string() ) {
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Envelope_setValue",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Envelope, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_setValue" "', argument " "1"" of type '" "stk::Envelope *""'"); 
    }
    arg1 = reinterpret_cast< stk::Envelope * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Envelope_setValue" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setValue(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Envelope_getState, _wrap_Envelope_getState, std::string() ) {
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("Envelope_getState",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Envelope, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_getState" "', argument " "1"" of type '" "stk::Envelope const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Envelope * >(argp1);
    result = (int)((stk::Envelope const *)arg1)->getState();
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Envelope_lastOut, _wrap_Envelope_lastOut, std::string() ) {
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Envelope_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Envelope, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_lastOut" "', argument " "1"" of type '" "stk::Envelope const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Envelope * >(argp1);
    result = (stk::StkFloat)((stk::Envelope const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Envelope_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Envelope_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Envelope, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_tick" "', argument " "1"" of type '" "stk::Envelope *""'"); 
    }
    arg1 = reinterpret_cast< stk::Envelope * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Envelope_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Envelope_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Envelope, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_tick" "', argument " "1"" of type '" "stk::Envelope *""'"); 
    }
    arg1 = reinterpret_cast< stk::Envelope * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Envelope_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Envelope_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Envelope_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Envelope_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Envelope_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Envelope, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Envelope_tick" "', argument " "1"" of type '" "stk::Envelope *""'"); 
    }
    arg1 = reinterpret_cast< stk::Envelope * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Envelope_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Envelope_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Envelope_tick, _wrap_Envelope_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Envelope, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Envelope_tick__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Envelope, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Envelope_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Envelope, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Envelope_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Envelope_members[] = {
{"keyOn",_wrap_Envelope_keyOn,0,0,0,0},
{"keyOff",_wrap_Envelope_keyOff,0,0,0,0},
{"setRate",_wrap_Envelope_setRate,0,0,0,0},
{"setTime",_wrap_Envelope_setTime,0,0,0,0},
{"setTarget",_wrap_Envelope_setTarget,0,0,0,0},
{"setValue",_wrap_Envelope_setValue,0,0,0,0},
{"getState",_wrap_Envelope_getState,0,0,0,0},
{"lastOut",_wrap_Envelope_lastOut,0,0,0,0},
{"tick",_wrap_Envelope_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Envelope_base_names[] = {"_p_stk__Generator",0};
static const swig_type_info *swig_Envelope_base[] = {0,0};
static swig_octave_class _wrap_class_Envelope = {"Envelope", &SWIGTYPE_p_stk__Envelope,0,_wrap_new_Envelope,0,_wrap_delete_Envelope,swig_Envelope_members,swig_Envelope_base_names,swig_Envelope_base };

SWIG_DEFUN( new_FMVoices, _wrap_new_FMVoices, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FMVoices *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FMVoices",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::FMVoices *)new stk::FMVoices();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FMVoices, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_FMVoices, _wrap_delete_FMVoices, std::string() ) {
  stk::FMVoices *arg1 = (stk::FMVoices *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_FMVoices",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FMVoices, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FMVoices" "', argument " "1"" of type '" "stk::FMVoices *""'"); 
    }
    arg1 = reinterpret_cast< stk::FMVoices * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FMVoices_setFrequency, _wrap_FMVoices_setFrequency, std::string() ) {
  stk::FMVoices *arg1 = (stk::FMVoices *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FMVoices_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FMVoices, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FMVoices_setFrequency" "', argument " "1"" of type '" "stk::FMVoices *""'"); 
    }
    arg1 = reinterpret_cast< stk::FMVoices * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FMVoices_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FMVoices_noteOn, _wrap_FMVoices_noteOn, std::string() ) {
  stk::FMVoices *arg1 = (stk::FMVoices *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FMVoices_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FMVoices, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FMVoices_noteOn" "', argument " "1"" of type '" "stk::FMVoices *""'"); 
    }
    arg1 = reinterpret_cast< stk::FMVoices * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FMVoices_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FMVoices_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FMVoices_controlChange, _wrap_FMVoices_controlChange, std::string() ) {
  stk::FMVoices *arg1 = (stk::FMVoices *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FMVoices_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FMVoices, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FMVoices_controlChange" "', argument " "1"" of type '" "stk::FMVoices *""'"); 
    }
    arg1 = reinterpret_cast< stk::FMVoices * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FMVoices_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FMVoices_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FMVoices_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FMVoices *arg1 = (stk::FMVoices *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FMVoices_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FMVoices, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FMVoices_tick" "', argument " "1"" of type '" "stk::FMVoices *""'"); 
    }
    arg1 = reinterpret_cast< stk::FMVoices * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FMVoices_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FMVoices_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FMVoices *arg1 = (stk::FMVoices *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FMVoices_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FMVoices, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FMVoices_tick" "', argument " "1"" of type '" "stk::FMVoices *""'"); 
    }
    arg1 = reinterpret_cast< stk::FMVoices * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FMVoices_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::FMVoices *arg1 = (stk::FMVoices *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FMVoices_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FMVoices, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FMVoices_tick" "', argument " "1"" of type '" "stk::FMVoices *""'"); 
    }
    arg1 = reinterpret_cast< stk::FMVoices * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FMVoices_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FMVoices_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FMVoices_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FMVoices_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::FMVoices *arg1 = (stk::FMVoices *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FMVoices_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FMVoices, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FMVoices_tick" "', argument " "1"" of type '" "stk::FMVoices *""'"); 
    }
    arg1 = reinterpret_cast< stk::FMVoices * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FMVoices_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FMVoices_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FMVoices_tick, _wrap_FMVoices_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FMVoices, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FMVoices_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FMVoices, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FMVoices_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FMVoices, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FMVoices_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FMVoices, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FMVoices_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_FMVoices_members[] = {
{"setFrequency",_wrap_FMVoices_setFrequency,0,0,0,0},
{"noteOn",_wrap_FMVoices_noteOn,0,0,0,0},
{"controlChange",_wrap_FMVoices_controlChange,0,0,0,0},
{"tick",_wrap_FMVoices_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_FMVoices_base_names[] = {"_p_stk__FM",0};
static const swig_type_info *swig_FMVoices_base[] = {0,0};
static swig_octave_class _wrap_class_FMVoices = {"FMVoices", &SWIGTYPE_p_stk__FMVoices,0,_wrap_new_FMVoices,0,_wrap_delete_FMVoices,swig_FMVoices_members,swig_FMVoices_base_names,swig_FMVoices_base };

static octave_value_list _wrap_new_FileRead__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileRead *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileRead",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::FileRead *)new stk::FileRead();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileRead, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileRead__SWIG_1 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  bool arg2 ;
  unsigned int arg3 ;
  stk::Stk::StkFormat arg4 ;
  stk::StkFloat arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileRead *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileRead",args.length(),5,5,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileRead" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileRead" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileRead" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FileRead" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FileRead" "', argument " "4"" of type '" "stk::Stk::StkFormat""'");
    } 
    arg4 = static_cast< stk::Stk::StkFormat >(val4);
    ecode5 = SWIG_AsVal_float(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_FileRead" "', argument " "5"" of type '" "stk::StkFloat""'");
    } 
    arg5 = static_cast< stk::StkFloat >(val5);
    result = (stk::FileRead *)new stk::FileRead(arg1,arg2,arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileRead, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileRead__SWIG_2 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  bool arg2 ;
  unsigned int arg3 ;
  stk::Stk::StkFormat arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileRead *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileRead",args.length(),4,4,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileRead" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileRead" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileRead" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FileRead" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FileRead" "', argument " "4"" of type '" "stk::Stk::StkFormat""'");
    } 
    arg4 = static_cast< stk::Stk::StkFormat >(val4);
    result = (stk::FileRead *)new stk::FileRead(arg1,arg2,arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileRead, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileRead__SWIG_3 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  bool arg2 ;
  unsigned int arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileRead *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileRead",args.length(),3,3,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileRead" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileRead" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileRead" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FileRead" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::FileRead *)new stk::FileRead(arg1,arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileRead, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileRead__SWIG_4 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileRead *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileRead",args.length(),2,2,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileRead" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileRead" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileRead" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    result = (stk::FileRead *)new stk::FileRead(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileRead, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileRead__SWIG_5 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileRead *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileRead",args.length(),1,1,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileRead" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileRead" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    result = (stk::FileRead *)new stk::FileRead(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileRead, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_FileRead, _wrap_new_FileRead, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 0) {
    return _wrap_new_FileRead__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileRead__SWIG_5(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FileRead__SWIG_4(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_FileRead__SWIG_3(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_FileRead__SWIG_2(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_FileRead__SWIG_1(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_FileRead, _wrap_delete_FileRead, std::string() ) {
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_FileRead",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileRead, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileRead" "', argument " "1"" of type '" "stk::FileRead *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileRead * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileRead_open__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  unsigned int arg4 ;
  stk::Stk::StkFormat arg5 ;
  stk::StkFloat arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileRead_open",args.length(),6,6,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileRead, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileRead_open" "', argument " "1"" of type '" "stk::FileRead *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileRead * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileRead_open" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileRead_open" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileRead_open" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FileRead_open" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_long(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FileRead_open" "', argument " "5"" of type '" "stk::Stk::StkFormat""'");
    } 
    arg5 = static_cast< stk::Stk::StkFormat >(val5);
    ecode6 = SWIG_AsVal_float(args(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FileRead_open" "', argument " "6"" of type '" "stk::StkFloat""'");
    } 
    arg6 = static_cast< stk::StkFloat >(val6);
    (arg1)->open(arg2,arg3,arg4,arg5,arg6);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileRead_open__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  unsigned int arg4 ;
  stk::Stk::StkFormat arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileRead_open",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileRead, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileRead_open" "', argument " "1"" of type '" "stk::FileRead *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileRead * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileRead_open" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileRead_open" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileRead_open" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FileRead_open" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_long(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FileRead_open" "', argument " "5"" of type '" "stk::Stk::StkFormat""'");
    } 
    arg5 = static_cast< stk::Stk::StkFormat >(val5);
    (arg1)->open(arg2,arg3,arg4,arg5);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileRead_open__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileRead_open",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileRead, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileRead_open" "', argument " "1"" of type '" "stk::FileRead *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileRead * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileRead_open" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileRead_open" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileRead_open" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FileRead_open" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    (arg1)->open(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileRead_open__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileRead_open",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileRead, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileRead_open" "', argument " "1"" of type '" "stk::FileRead *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileRead * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileRead_open" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileRead_open" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileRead_open" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    (arg1)->open(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileRead_open__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileRead_open",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileRead, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileRead_open" "', argument " "1"" of type '" "stk::FileRead *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileRead * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileRead_open" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileRead_open" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    (arg1)->open(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileRead_open, _wrap_FileRead_open, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[6]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4),octave_value_ref(args,5)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileRead, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FileRead_open__SWIG_4(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileRead, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FileRead_open__SWIG_3(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileRead, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FileRead_open__SWIG_2(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileRead, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_FileRead_open__SWIG_1(args, nargout);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileRead, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_FileRead_open__SWIG_0(args, nargout);
              }
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( FileRead_close, _wrap_FileRead_close, std::string() ) {
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileRead_close",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileRead, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileRead_close" "', argument " "1"" of type '" "stk::FileRead *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileRead * >(argp1);
    (arg1)->close();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileRead_isOpen, _wrap_FileRead_isOpen, std::string() ) {
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  try {
    if (!SWIG_check_num_args("FileRead_isOpen",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileRead, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileRead_isOpen" "', argument " "1"" of type '" "stk::FileRead *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileRead * >(argp1);
    result = (bool)(arg1)->isOpen();
    _outv = SWIG_From_bool(static_cast< bool >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileRead_fileSize, _wrap_FileRead_fileSize, std::string() ) {
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned long result;
  
  try {
    if (!SWIG_check_num_args("FileRead_fileSize",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileRead, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileRead_fileSize" "', argument " "1"" of type '" "stk::FileRead const *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileRead * >(argp1);
    result = (unsigned long)((stk::FileRead const *)arg1)->fileSize();
    _outv = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileRead_channels, _wrap_FileRead_channels, std::string() ) {
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned int result;
  
  try {
    if (!SWIG_check_num_args("FileRead_channels",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileRead, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileRead_channels" "', argument " "1"" of type '" "stk::FileRead const *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileRead * >(argp1);
    result = (unsigned int)((stk::FileRead const *)arg1)->channels();
    _outv = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileRead_format, _wrap_FileRead_format, std::string() ) {
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Stk::StkFormat result;
  
  try {
    if (!SWIG_check_num_args("FileRead_format",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileRead, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileRead_format" "', argument " "1"" of type '" "stk::FileRead const *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileRead * >(argp1);
    result = (stk::Stk::StkFormat)((stk::FileRead const *)arg1)->format();
    _outv = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileRead_fileRate, _wrap_FileRead_fileRate, std::string() ) {
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FileRead_fileRate",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileRead, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileRead_fileRate" "', argument " "1"" of type '" "stk::FileRead const *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileRead * >(argp1);
    result = (stk::StkFloat)((stk::FileRead const *)arg1)->fileRate();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileRead_read__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned long arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileRead_read",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileRead, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileRead_read" "', argument " "1"" of type '" "stk::FileRead *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileRead * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileRead_read" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileRead_read" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileRead_read" "', argument " "3"" of type '" "unsigned long""'");
    } 
    arg3 = static_cast< unsigned long >(val3);
    ecode4 = SWIG_AsVal_bool(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FileRead_read" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
    (arg1)->read(*arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileRead_read__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileRead_read",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileRead, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileRead_read" "', argument " "1"" of type '" "stk::FileRead *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileRead * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileRead_read" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileRead_read" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileRead_read" "', argument " "3"" of type '" "unsigned long""'");
    } 
    arg3 = static_cast< unsigned long >(val3);
    (arg1)->read(*arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileRead_read__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileRead_read",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileRead, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileRead_read" "', argument " "1"" of type '" "stk::FileRead *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileRead * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileRead_read" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileRead_read" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    (arg1)->read(*arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileRead_read, _wrap_FileRead_read, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileRead, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FileRead_read__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileRead, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FileRead_read__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileRead, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FileRead_read__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_FileRead_members[] = {
{"open",_wrap_FileRead_open,0,0,0,0},
{"close",_wrap_FileRead_close,0,0,0,0},
{"isOpen",_wrap_FileRead_isOpen,0,0,0,0},
{"fileSize",_wrap_FileRead_fileSize,0,0,0,0},
{"channels",_wrap_FileRead_channels,0,0,0,0},
{"format",_wrap_FileRead_format,0,0,0,0},
{"fileRate",_wrap_FileRead_fileRate,0,0,0,0},
{"read",_wrap_FileRead_read,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_FileRead_base_names[] = {0};
static const swig_type_info *swig_FileRead_base[] = {0};
static swig_octave_class _wrap_class_FileRead = {"FileRead", &SWIGTYPE_p_stk__FileRead,0,_wrap_new_FileRead,0,_wrap_delete_FileRead,swig_FileRead_members,swig_FileRead_base_names,swig_FileRead_base };

SWIG_DEFUN( FileWrite_FILE_RAW_set, _wrap_FileWrite_FILE_RAW_set, std::string() ) {
  if (!SWIG_check_num_args("FileWrite_FILE_RAW_set",args.length(),1,1,0)) return octave_value_list();return octave_set_immutable(args,nargout);
}


SWIG_DEFUN( FileWrite_FILE_RAW_get, _wrap_FileWrite_FILE_RAW_get, std::string() ) {
  octave_value obj;
  
  obj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(stk::FileWrite::FILE_RAW));
  return obj;
}


SWIG_DEFUN( FileWrite_FILE_WAV_set, _wrap_FileWrite_FILE_WAV_set, std::string() ) {
  if (!SWIG_check_num_args("FileWrite_FILE_WAV_set",args.length(),1,1,0)) return octave_value_list();return octave_set_immutable(args,nargout);
}


SWIG_DEFUN( FileWrite_FILE_WAV_get, _wrap_FileWrite_FILE_WAV_get, std::string() ) {
  octave_value obj;
  
  obj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(stk::FileWrite::FILE_WAV));
  return obj;
}


SWIG_DEFUN( FileWrite_FILE_SND_set, _wrap_FileWrite_FILE_SND_set, std::string() ) {
  if (!SWIG_check_num_args("FileWrite_FILE_SND_set",args.length(),1,1,0)) return octave_value_list();return octave_set_immutable(args,nargout);
}


SWIG_DEFUN( FileWrite_FILE_SND_get, _wrap_FileWrite_FILE_SND_get, std::string() ) {
  octave_value obj;
  
  obj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(stk::FileWrite::FILE_SND));
  return obj;
}


SWIG_DEFUN( FileWrite_FILE_AIF_set, _wrap_FileWrite_FILE_AIF_set, std::string() ) {
  if (!SWIG_check_num_args("FileWrite_FILE_AIF_set",args.length(),1,1,0)) return octave_value_list();return octave_set_immutable(args,nargout);
}


SWIG_DEFUN( FileWrite_FILE_AIF_get, _wrap_FileWrite_FILE_AIF_get, std::string() ) {
  octave_value obj;
  
  obj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(stk::FileWrite::FILE_AIF));
  return obj;
}


SWIG_DEFUN( FileWrite_FILE_MAT_set, _wrap_FileWrite_FILE_MAT_set, std::string() ) {
  if (!SWIG_check_num_args("FileWrite_FILE_MAT_set",args.length(),1,1,0)) return octave_value_list();return octave_set_immutable(args,nargout);
}


SWIG_DEFUN( FileWrite_FILE_MAT_get, _wrap_FileWrite_FILE_MAT_get, std::string() ) {
  octave_value obj;
  
  obj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(stk::FileWrite::FILE_MAT));
  return obj;
}


static octave_value_list _wrap_new_FileWrite__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWrite *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWrite",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::FileWrite *)new stk::FileWrite();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWrite, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWrite__SWIG_1 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  unsigned int arg2 ;
  stk::FileWrite::FILE_TYPE arg3 ;
  stk::Stk::StkFormat arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWrite *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWrite",args.length(),4,4,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileWrite" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileWrite" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileWrite" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FileWrite" "', argument " "3"" of type '" "stk::FileWrite::FILE_TYPE""'");
    } 
    arg3 = static_cast< stk::FileWrite::FILE_TYPE >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FileWrite" "', argument " "4"" of type '" "stk::Stk::StkFormat""'");
    } 
    arg4 = static_cast< stk::Stk::StkFormat >(val4);
    result = (stk::FileWrite *)new stk::FileWrite(arg1,arg2,arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWrite, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWrite__SWIG_2 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  unsigned int arg2 ;
  stk::FileWrite::FILE_TYPE arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWrite *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWrite",args.length(),3,3,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileWrite" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileWrite" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileWrite" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FileWrite" "', argument " "3"" of type '" "stk::FileWrite::FILE_TYPE""'");
    } 
    arg3 = static_cast< stk::FileWrite::FILE_TYPE >(val3);
    result = (stk::FileWrite *)new stk::FileWrite(arg1,arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWrite, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWrite__SWIG_3 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  unsigned int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWrite *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWrite",args.length(),2,2,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileWrite" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileWrite" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileWrite" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::FileWrite *)new stk::FileWrite(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWrite, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWrite__SWIG_4 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWrite *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWrite",args.length(),1,1,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileWrite" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileWrite" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    result = (stk::FileWrite *)new stk::FileWrite(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWrite, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_FileWrite, _wrap_new_FileWrite, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 0) {
    return _wrap_new_FileWrite__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileWrite__SWIG_4(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FileWrite__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_FileWrite__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_FileWrite__SWIG_1(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_FileWrite, _wrap_delete_FileWrite, std::string() ) {
  stk::FileWrite *arg1 = (stk::FileWrite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_FileWrite",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWrite, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileWrite" "', argument " "1"" of type '" "stk::FileWrite *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWrite * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWrite_open__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FileWrite *arg1 = (stk::FileWrite *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  stk::FileWrite::FILE_TYPE arg4 ;
  stk::Stk::StkFormat arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWrite_open",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWrite, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWrite_open" "', argument " "1"" of type '" "stk::FileWrite *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWrite * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileWrite_open" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileWrite_open" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileWrite_open" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FileWrite_open" "', argument " "4"" of type '" "stk::FileWrite::FILE_TYPE""'");
    } 
    arg4 = static_cast< stk::FileWrite::FILE_TYPE >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_long(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FileWrite_open" "', argument " "5"" of type '" "stk::Stk::StkFormat""'");
    } 
    arg5 = static_cast< stk::Stk::StkFormat >(val5);
    (arg1)->open(arg2,arg3,arg4,arg5);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWrite_open__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FileWrite *arg1 = (stk::FileWrite *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  stk::FileWrite::FILE_TYPE arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWrite_open",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWrite, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWrite_open" "', argument " "1"" of type '" "stk::FileWrite *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWrite * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileWrite_open" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileWrite_open" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileWrite_open" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FileWrite_open" "', argument " "4"" of type '" "stk::FileWrite::FILE_TYPE""'");
    } 
    arg4 = static_cast< stk::FileWrite::FILE_TYPE >(val4);
    (arg1)->open(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWrite_open__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::FileWrite *arg1 = (stk::FileWrite *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWrite_open",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWrite, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWrite_open" "', argument " "1"" of type '" "stk::FileWrite *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWrite * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileWrite_open" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileWrite_open" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileWrite_open" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    (arg1)->open(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWrite_open__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::FileWrite *arg1 = (stk::FileWrite *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWrite_open",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWrite, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWrite_open" "', argument " "1"" of type '" "stk::FileWrite *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWrite * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileWrite_open" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileWrite_open" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    (arg1)->open(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWrite_open, _wrap_FileWrite_open, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWrite, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FileWrite_open__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWrite, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FileWrite_open__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWrite, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FileWrite_open__SWIG_1(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWrite, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_FileWrite_open__SWIG_0(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( FileWrite_close, _wrap_FileWrite_close, std::string() ) {
  stk::FileWrite *arg1 = (stk::FileWrite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWrite_close",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWrite, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWrite_close" "', argument " "1"" of type '" "stk::FileWrite *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWrite * >(argp1);
    (arg1)->close();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWrite_isOpen, _wrap_FileWrite_isOpen, std::string() ) {
  stk::FileWrite *arg1 = (stk::FileWrite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  try {
    if (!SWIG_check_num_args("FileWrite_isOpen",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWrite, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWrite_isOpen" "', argument " "1"" of type '" "stk::FileWrite *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWrite * >(argp1);
    result = (bool)(arg1)->isOpen();
    _outv = SWIG_From_bool(static_cast< bool >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWrite_write, _wrap_FileWrite_write, std::string() ) {
  stk::FileWrite *arg1 = (stk::FileWrite *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWrite_write",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWrite, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWrite_write" "', argument " "1"" of type '" "stk::FileWrite *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWrite * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileWrite_write" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileWrite_write" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    (arg1)->write(*arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_FileWrite_members[] = {
{"FILE_RAW",0,_wrap_FileWrite_FILE_RAW_get,octave_set_immutable,1,0},
{"FILE_WAV",0,_wrap_FileWrite_FILE_WAV_get,octave_set_immutable,1,0},
{"FILE_SND",0,_wrap_FileWrite_FILE_SND_get,octave_set_immutable,1,0},
{"FILE_AIF",0,_wrap_FileWrite_FILE_AIF_get,octave_set_immutable,1,0},
{"FILE_MAT",0,_wrap_FileWrite_FILE_MAT_get,octave_set_immutable,1,0},
{"open",_wrap_FileWrite_open,0,0,0,0},
{"close",_wrap_FileWrite_close,0,0,0,0},
{"isOpen",_wrap_FileWrite_isOpen,0,0,0,0},
{"write",_wrap_FileWrite_write,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_FileWrite_base_names[] = {0};
static const swig_type_info *swig_FileWrite_base[] = {0};
static swig_octave_class _wrap_class_FileWrite = {"FileWrite", &SWIGTYPE_p_stk__FileWrite,0,_wrap_new_FileWrite,0,_wrap_delete_FileWrite,swig_FileWrite_members,swig_FileWrite_base_names,swig_FileWrite_base };

static octave_value_list _wrap_new_FileWvIn__SWIG_0 (const octave_value_list& args, int nargout) {
  unsigned long arg1 ;
  unsigned long arg2 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWvIn",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FileWvIn" "', argument " "1"" of type '" "unsigned long""'");
    } 
    arg1 = static_cast< unsigned long >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileWvIn" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    result = (stk::FileWvIn *)new stk::FileWvIn(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWvIn__SWIG_1 (const octave_value_list& args, int nargout) {
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWvIn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FileWvIn" "', argument " "1"" of type '" "unsigned long""'");
    } 
    arg1 = static_cast< unsigned long >(val1);
    result = (stk::FileWvIn *)new stk::FileWvIn(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWvIn__SWIG_2 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWvIn",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::FileWvIn *)new stk::FileWvIn();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWvIn__SWIG_3 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  unsigned long arg4 ;
  unsigned long arg5 ;
  bool arg6 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWvIn",args.length(),6,6,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileWvIn" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileWvIn" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileWvIn" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FileWvIn" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FileWvIn" "', argument " "4"" of type '" "unsigned long""'");
    } 
    arg4 = static_cast< unsigned long >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_long(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_FileWvIn" "', argument " "5"" of type '" "unsigned long""'");
    } 
    arg5 = static_cast< unsigned long >(val5);
    ecode6 = SWIG_AsVal_bool(args(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_FileWvIn" "', argument " "6"" of type '" "bool""'");
    } 
    arg6 = static_cast< bool >(val6);
    result = (stk::FileWvIn *)new stk::FileWvIn(arg1,arg2,arg3,arg4,arg5,arg6);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWvIn__SWIG_4 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  unsigned long arg4 ;
  unsigned long arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWvIn",args.length(),5,5,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileWvIn" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileWvIn" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileWvIn" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FileWvIn" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FileWvIn" "', argument " "4"" of type '" "unsigned long""'");
    } 
    arg4 = static_cast< unsigned long >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_long(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_FileWvIn" "', argument " "5"" of type '" "unsigned long""'");
    } 
    arg5 = static_cast< unsigned long >(val5);
    result = (stk::FileWvIn *)new stk::FileWvIn(arg1,arg2,arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWvIn__SWIG_5 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  unsigned long arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWvIn",args.length(),4,4,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileWvIn" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileWvIn" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileWvIn" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FileWvIn" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FileWvIn" "', argument " "4"" of type '" "unsigned long""'");
    } 
    arg4 = static_cast< unsigned long >(val4);
    result = (stk::FileWvIn *)new stk::FileWvIn(arg1,arg2,arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWvIn__SWIG_6 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWvIn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileWvIn" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileWvIn" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileWvIn" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FileWvIn" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    result = (stk::FileWvIn *)new stk::FileWvIn(arg1,arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWvIn__SWIG_7 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWvIn",args.length(),2,2,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileWvIn" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileWvIn" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileWvIn" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    result = (stk::FileWvIn *)new stk::FileWvIn(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWvIn__SWIG_8 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWvIn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileWvIn" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileWvIn" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    result = (stk::FileWvIn *)new stk::FileWvIn(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_FileWvIn, _wrap_new_FileWvIn, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[6]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4),octave_value_ref(args,5)
  };
  
  if (argc == 0) {
    return _wrap_new_FileWvIn__SWIG_2(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileWvIn__SWIG_8(args, nargout);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FileWvIn__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FileWvIn__SWIG_7(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FileWvIn__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_FileWvIn__SWIG_6(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_FileWvIn__SWIG_5(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_FileWvIn__SWIG_4(args, nargout);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_FileWvIn__SWIG_3(args, nargout);
              }
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_FileWvIn, _wrap_delete_FileWvIn, std::string() ) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_FileWvIn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileWvIn" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWvIn_openFile__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_openFile",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_openFile" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileWvIn_openFile" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileWvIn_openFile" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileWvIn_openFile" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    ecode4 = SWIG_AsVal_bool(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FileWvIn_openFile" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
    ecode5 = SWIG_AsVal_bool(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FileWvIn_openFile" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    (arg1)->openFile(arg2,arg3,arg4,arg5);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWvIn_openFile__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_openFile",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_openFile" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileWvIn_openFile" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileWvIn_openFile" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileWvIn_openFile" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    ecode4 = SWIG_AsVal_bool(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FileWvIn_openFile" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
    (arg1)->openFile(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWvIn_openFile__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_openFile",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_openFile" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileWvIn_openFile" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileWvIn_openFile" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileWvIn_openFile" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    (arg1)->openFile(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWvIn_openFile__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_openFile",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_openFile" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileWvIn_openFile" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileWvIn_openFile" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    (arg1)->openFile(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWvIn_openFile, _wrap_FileWvIn_openFile, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FileWvIn_openFile__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FileWvIn_openFile__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FileWvIn_openFile__SWIG_1(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_FileWvIn_openFile__SWIG_0(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( FileWvIn_closeFile, _wrap_FileWvIn_closeFile, std::string() ) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_closeFile",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_closeFile" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    (arg1)->closeFile();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWvIn_reset, _wrap_FileWvIn_reset, std::string() ) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_reset",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_reset" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    (arg1)->reset();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWvIn_normalize__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_normalize",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_normalize" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    (arg1)->normalize();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWvIn_normalize__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_normalize",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_normalize" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileWvIn_normalize" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->normalize(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWvIn_normalize, _wrap_FileWvIn_normalize, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FileWvIn_normalize__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FileWvIn_normalize__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( FileWvIn_getSize, _wrap_FileWvIn_getSize, std::string() ) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned long result;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_getSize",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_getSize" "', argument " "1"" of type '" "stk::FileWvIn const *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    result = (unsigned long)((stk::FileWvIn const *)arg1)->getSize();
    _outv = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWvIn_getFileRate, _wrap_FileWvIn_getFileRate, std::string() ) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_getFileRate",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_getFileRate" "', argument " "1"" of type '" "stk::FileWvIn const *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    result = (stk::StkFloat)((stk::FileWvIn const *)arg1)->getFileRate();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWvIn_isOpen, _wrap_FileWvIn_isOpen, std::string() ) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_isOpen",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_isOpen" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    result = (bool)(arg1)->isOpen();
    _outv = SWIG_From_bool(static_cast< bool >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWvIn_isFinished, _wrap_FileWvIn_isFinished, std::string() ) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_isFinished",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_isFinished" "', argument " "1"" of type '" "stk::FileWvIn const *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    result = (bool)((stk::FileWvIn const *)arg1)->isFinished();
    _outv = SWIG_From_bool(static_cast< bool >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWvIn_setRate, _wrap_FileWvIn_setRate, std::string() ) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_setRate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_setRate" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileWvIn_setRate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setRate(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWvIn_addTime, _wrap_FileWvIn_addTime, std::string() ) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_addTime",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_addTime" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileWvIn_addTime" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->addTime(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWvIn_setInterpolate, _wrap_FileWvIn_setInterpolate, std::string() ) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_setInterpolate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_setInterpolate" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileWvIn_setInterpolate" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    (arg1)->setInterpolate(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWvIn_lastOut__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_lastOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_lastOut" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileWvIn_lastOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->lastOut(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWvIn_lastOut__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_lastOut" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    result = (stk::StkFloat)(arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWvIn_lastOut, _wrap_FileWvIn_lastOut, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FileWvIn_lastOut__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FileWvIn_lastOut__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_FileWvIn_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_tick" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileWvIn_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWvIn_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_tick" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWvIn_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_tick" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileWvIn_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileWvIn_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileWvIn_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWvIn_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FileWvIn_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvIn_tick" "', argument " "1"" of type '" "stk::FileWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvIn * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileWvIn_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileWvIn_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWvIn_tick, _wrap_FileWvIn_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FileWvIn_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FileWvIn_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FileWvIn_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FileWvIn_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_FileWvIn_members[] = {
{"openFile",_wrap_FileWvIn_openFile,0,0,0,0},
{"closeFile",_wrap_FileWvIn_closeFile,0,0,0,0},
{"reset",_wrap_FileWvIn_reset,0,0,0,0},
{"normalize",_wrap_FileWvIn_normalize,0,0,0,0},
{"getSize",_wrap_FileWvIn_getSize,0,0,0,0},
{"getFileRate",_wrap_FileWvIn_getFileRate,0,0,0,0},
{"isOpen",_wrap_FileWvIn_isOpen,0,0,0,0},
{"isFinished",_wrap_FileWvIn_isFinished,0,0,0,0},
{"setRate",_wrap_FileWvIn_setRate,0,0,0,0},
{"addTime",_wrap_FileWvIn_addTime,0,0,0,0},
{"setInterpolate",_wrap_FileWvIn_setInterpolate,0,0,0,0},
{"lastOut",_wrap_FileWvIn_lastOut,0,0,0,0},
{"tick",_wrap_FileWvIn_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_FileWvIn_base_names[] = {0};
static const swig_type_info *swig_FileWvIn_base[] = {0};
static swig_octave_class _wrap_class_FileWvIn = {"FileWvIn", &SWIGTYPE_p_stk__FileWvIn,0,_wrap_new_FileWvIn,0,_wrap_delete_FileWvIn,swig_FileWvIn_members,swig_FileWvIn_base_names,swig_FileWvIn_base };

static octave_value_list _wrap_new_FileWvOut__SWIG_0 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWvOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FileWvOut" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    result = (stk::FileWvOut *)new stk::FileWvOut(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWvOut__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWvOut",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::FileWvOut *)new stk::FileWvOut();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWvOut__SWIG_2 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  unsigned int arg2 ;
  stk::FileWrite::FILE_TYPE arg3 ;
  stk::Stk::StkFormat arg4 ;
  unsigned int arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWvOut",args.length(),5,5,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileWvOut" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileWvOut" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileWvOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FileWvOut" "', argument " "3"" of type '" "stk::FileWrite::FILE_TYPE""'");
    } 
    arg3 = static_cast< stk::FileWrite::FILE_TYPE >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FileWvOut" "', argument " "4"" of type '" "stk::Stk::StkFormat""'");
    } 
    arg4 = static_cast< stk::Stk::StkFormat >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_FileWvOut" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::FileWvOut *)new stk::FileWvOut(arg1,arg2,arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWvOut__SWIG_3 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  unsigned int arg2 ;
  stk::FileWrite::FILE_TYPE arg3 ;
  stk::Stk::StkFormat arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWvOut",args.length(),4,4,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileWvOut" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileWvOut" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileWvOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FileWvOut" "', argument " "3"" of type '" "stk::FileWrite::FILE_TYPE""'");
    } 
    arg3 = static_cast< stk::FileWrite::FILE_TYPE >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FileWvOut" "', argument " "4"" of type '" "stk::Stk::StkFormat""'");
    } 
    arg4 = static_cast< stk::Stk::StkFormat >(val4);
    result = (stk::FileWvOut *)new stk::FileWvOut(arg1,arg2,arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWvOut__SWIG_4 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  unsigned int arg2 ;
  stk::FileWrite::FILE_TYPE arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWvOut",args.length(),3,3,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileWvOut" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileWvOut" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileWvOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FileWvOut" "', argument " "3"" of type '" "stk::FileWrite::FILE_TYPE""'");
    } 
    arg3 = static_cast< stk::FileWrite::FILE_TYPE >(val3);
    result = (stk::FileWvOut *)new stk::FileWvOut(arg1,arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWvOut__SWIG_5 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  unsigned int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWvOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileWvOut" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileWvOut" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileWvOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::FileWvOut *)new stk::FileWvOut(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileWvOut__SWIG_6 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileWvOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileWvOut" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileWvOut" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    result = (stk::FileWvOut *)new stk::FileWvOut(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_FileWvOut, _wrap_new_FileWvOut, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 0) {
    return _wrap_new_FileWvOut__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileWvOut__SWIG_6(args, nargout);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FileWvOut__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FileWvOut__SWIG_5(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_FileWvOut__SWIG_4(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_FileWvOut__SWIG_3(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_FileWvOut__SWIG_2(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_FileWvOut, _wrap_delete_FileWvOut, std::string() ) {
  stk::FileWvOut *arg1 = (stk::FileWvOut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_FileWvOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvOut, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileWvOut" "', argument " "1"" of type '" "stk::FileWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvOut * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWvOut_openFile, _wrap_FileWvOut_openFile, std::string() ) {
  stk::FileWvOut *arg1 = (stk::FileWvOut *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  stk::FileWrite::FILE_TYPE arg4 ;
  stk::Stk::StkFormat arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWvOut_openFile",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvOut_openFile" "', argument " "1"" of type '" "stk::FileWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvOut * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileWvOut_openFile" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileWvOut_openFile" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileWvOut_openFile" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FileWvOut_openFile" "', argument " "4"" of type '" "stk::FileWrite::FILE_TYPE""'");
    } 
    arg4 = static_cast< stk::FileWrite::FILE_TYPE >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_long(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FileWvOut_openFile" "', argument " "5"" of type '" "stk::Stk::StkFormat""'");
    } 
    arg5 = static_cast< stk::Stk::StkFormat >(val5);
    (arg1)->openFile(arg2,arg3,arg4,arg5);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWvOut_closeFile, _wrap_FileWvOut_closeFile, std::string() ) {
  stk::FileWvOut *arg1 = (stk::FileWvOut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWvOut_closeFile",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvOut_closeFile" "', argument " "1"" of type '" "stk::FileWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvOut * >(argp1);
    (arg1)->closeFile();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWvOut_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FileWvOut *arg1 = (stk::FileWvOut *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWvOut_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvOut_tick" "', argument " "1"" of type '" "stk::FileWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvOut * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileWvOut_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->tick(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileWvOut_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FileWvOut *arg1 = (stk::FileWvOut *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileWvOut_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileWvOut_tick" "', argument " "1"" of type '" "stk::FileWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileWvOut * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileWvOut_tick" "', argument " "2"" of type '" "stk::StkFrames const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileWvOut_tick" "', argument " "2"" of type '" "stk::StkFrames const &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    (arg1)->tick((stk::StkFrames const &)*arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileWvOut_tick, _wrap_FileWvOut_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWvOut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FileWvOut_tick__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileWvOut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FileWvOut_tick__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_FileWvOut_members[] = {
{"openFile",_wrap_FileWvOut_openFile,0,0,0,0},
{"closeFile",_wrap_FileWvOut_closeFile,0,0,0,0},
{"tick",_wrap_FileWvOut_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_FileWvOut_base_names[] = {0};
static const swig_type_info *swig_FileWvOut_base[] = {0};
static swig_octave_class _wrap_class_FileWvOut = {"FileWvOut", &SWIGTYPE_p_stk__FileWvOut,0,_wrap_new_FileWvOut,0,_wrap_delete_FileWvOut,swig_FileWvOut_members,swig_FileWvOut_base_names,swig_FileWvOut_base };

static octave_value_list _wrap_new_FileLoop__SWIG_0 (const octave_value_list& args, int nargout) {
  unsigned long arg1 ;
  unsigned long arg2 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileLoop *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileLoop",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FileLoop" "', argument " "1"" of type '" "unsigned long""'");
    } 
    arg1 = static_cast< unsigned long >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileLoop" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    result = (stk::FileLoop *)new stk::FileLoop(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileLoop, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileLoop__SWIG_1 (const octave_value_list& args, int nargout) {
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileLoop *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileLoop",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FileLoop" "', argument " "1"" of type '" "unsigned long""'");
    } 
    arg1 = static_cast< unsigned long >(val1);
    result = (stk::FileLoop *)new stk::FileLoop(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileLoop, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileLoop__SWIG_2 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileLoop *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileLoop",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::FileLoop *)new stk::FileLoop();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileLoop, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileLoop__SWIG_3 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  unsigned long arg4 ;
  unsigned long arg5 ;
  bool arg6 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileLoop *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileLoop",args.length(),6,6,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileLoop" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileLoop" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileLoop" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FileLoop" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FileLoop" "', argument " "4"" of type '" "unsigned long""'");
    } 
    arg4 = static_cast< unsigned long >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_long(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_FileLoop" "', argument " "5"" of type '" "unsigned long""'");
    } 
    arg5 = static_cast< unsigned long >(val5);
    ecode6 = SWIG_AsVal_bool(args(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_FileLoop" "', argument " "6"" of type '" "bool""'");
    } 
    arg6 = static_cast< bool >(val6);
    result = (stk::FileLoop *)new stk::FileLoop(arg1,arg2,arg3,arg4,arg5,arg6);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileLoop, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileLoop__SWIG_4 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  unsigned long arg4 ;
  unsigned long arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileLoop *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileLoop",args.length(),5,5,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileLoop" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileLoop" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileLoop" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FileLoop" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FileLoop" "', argument " "4"" of type '" "unsigned long""'");
    } 
    arg4 = static_cast< unsigned long >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_long(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_FileLoop" "', argument " "5"" of type '" "unsigned long""'");
    } 
    arg5 = static_cast< unsigned long >(val5);
    result = (stk::FileLoop *)new stk::FileLoop(arg1,arg2,arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileLoop, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileLoop__SWIG_5 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  unsigned long arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileLoop *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileLoop",args.length(),4,4,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileLoop" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileLoop" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileLoop" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FileLoop" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FileLoop" "', argument " "4"" of type '" "unsigned long""'");
    } 
    arg4 = static_cast< unsigned long >(val4);
    result = (stk::FileLoop *)new stk::FileLoop(arg1,arg2,arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileLoop, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileLoop__SWIG_6 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileLoop *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileLoop",args.length(),3,3,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileLoop" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileLoop" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileLoop" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FileLoop" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    result = (stk::FileLoop *)new stk::FileLoop(arg1,arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileLoop, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileLoop__SWIG_7 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileLoop *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileLoop",args.length(),2,2,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileLoop" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileLoop" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileLoop" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    result = (stk::FileLoop *)new stk::FileLoop(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileLoop, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_FileLoop__SWIG_8 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FileLoop *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FileLoop",args.length(),1,1,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileLoop" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileLoop" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    result = (stk::FileLoop *)new stk::FileLoop(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FileLoop, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_FileLoop, _wrap_new_FileLoop, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[6]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4),octave_value_ref(args,5)
  };
  
  if (argc == 0) {
    return _wrap_new_FileLoop__SWIG_2(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileLoop__SWIG_8(args, nargout);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FileLoop__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FileLoop__SWIG_7(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FileLoop__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_FileLoop__SWIG_6(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_FileLoop__SWIG_5(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_FileLoop__SWIG_4(args, nargout);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_FileLoop__SWIG_3(args, nargout);
              }
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_FileLoop, _wrap_delete_FileLoop, std::string() ) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_FileLoop",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileLoop" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileLoop_openFile__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileLoop_openFile",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_openFile" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileLoop_openFile" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileLoop_openFile" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileLoop_openFile" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    ecode4 = SWIG_AsVal_bool(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FileLoop_openFile" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
    ecode5 = SWIG_AsVal_bool(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FileLoop_openFile" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    (arg1)->openFile(arg2,arg3,arg4,arg5);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileLoop_openFile__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileLoop_openFile",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_openFile" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileLoop_openFile" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileLoop_openFile" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileLoop_openFile" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    ecode4 = SWIG_AsVal_bool(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FileLoop_openFile" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
    (arg1)->openFile(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileLoop_openFile__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileLoop_openFile",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_openFile" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileLoop_openFile" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileLoop_openFile" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileLoop_openFile" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    (arg1)->openFile(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileLoop_openFile__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileLoop_openFile",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_openFile" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileLoop_openFile" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileLoop_openFile" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    (arg1)->openFile(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileLoop_openFile, _wrap_FileLoop_openFile, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileLoop, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FileLoop_openFile__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileLoop, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FileLoop_openFile__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileLoop, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FileLoop_openFile__SWIG_1(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileLoop, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_FileLoop_openFile__SWIG_0(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( FileLoop_closeFile, _wrap_FileLoop_closeFile, std::string() ) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileLoop_closeFile",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_closeFile" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    (arg1)->closeFile();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileLoop_reset, _wrap_FileLoop_reset, std::string() ) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileLoop_reset",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_reset" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    (arg1)->reset();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileLoop_channelsOut, _wrap_FileLoop_channelsOut, std::string() ) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned int result;
  
  try {
    if (!SWIG_check_num_args("FileLoop_channelsOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_channelsOut" "', argument " "1"" of type '" "stk::FileLoop const *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    result = (unsigned int)((stk::FileLoop const *)arg1)->channelsOut();
    _outv = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileLoop_normalize__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileLoop_normalize",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_normalize" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    (arg1)->normalize();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileLoop_normalize__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileLoop_normalize",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_normalize" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileLoop_normalize" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->normalize(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileLoop_normalize, _wrap_FileLoop_normalize, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileLoop, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FileLoop_normalize__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileLoop, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FileLoop_normalize__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( FileLoop_getSize, _wrap_FileLoop_getSize, std::string() ) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned long result;
  
  try {
    if (!SWIG_check_num_args("FileLoop_getSize",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_getSize" "', argument " "1"" of type '" "stk::FileLoop const *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    result = (unsigned long)((stk::FileLoop const *)arg1)->getSize();
    _outv = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileLoop_getFileRate, _wrap_FileLoop_getFileRate, std::string() ) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FileLoop_getFileRate",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_getFileRate" "', argument " "1"" of type '" "stk::FileLoop const *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    result = (stk::StkFloat)((stk::FileLoop const *)arg1)->getFileRate();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileLoop_setRate, _wrap_FileLoop_setRate, std::string() ) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileLoop_setRate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_setRate" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileLoop_setRate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setRate(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileLoop_setFrequency, _wrap_FileLoop_setFrequency, std::string() ) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileLoop_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_setFrequency" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileLoop_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileLoop_addTime, _wrap_FileLoop_addTime, std::string() ) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileLoop_addTime",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_addTime" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileLoop_addTime" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->addTime(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileLoop_addPhase, _wrap_FileLoop_addPhase, std::string() ) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileLoop_addPhase",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_addPhase" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileLoop_addPhase" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->addPhase(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileLoop_addPhaseOffset, _wrap_FileLoop_addPhaseOffset, std::string() ) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FileLoop_addPhaseOffset",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_addPhaseOffset" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileLoop_addPhaseOffset" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->addPhaseOffset(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileLoop_lastOut__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FileLoop_lastOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_lastOut" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileLoop_lastOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->lastOut(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileLoop_lastOut__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FileLoop_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_lastOut" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    result = (stk::StkFloat)(arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileLoop_lastOut, _wrap_FileLoop_lastOut, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileLoop, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FileLoop_lastOut__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileLoop, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FileLoop_lastOut__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_FileLoop_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FileLoop_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_tick" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileLoop_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileLoop_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FileLoop_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_tick" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileLoop_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FileLoop_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_tick" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileLoop_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileLoop_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileLoop_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FileLoop_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FileLoop_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FileLoop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLoop_tick" "', argument " "1"" of type '" "stk::FileLoop *""'"); 
    }
    arg1 = reinterpret_cast< stk::FileLoop * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileLoop_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileLoop_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FileLoop_tick, _wrap_FileLoop_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileLoop, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FileLoop_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileLoop, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FileLoop_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileLoop, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FileLoop_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FileLoop, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FileLoop_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_FileLoop_members[] = {
{"openFile",_wrap_FileLoop_openFile,0,0,0,0},
{"closeFile",_wrap_FileLoop_closeFile,0,0,0,0},
{"reset",_wrap_FileLoop_reset,0,0,0,0},
{"channelsOut",_wrap_FileLoop_channelsOut,0,0,0,0},
{"normalize",_wrap_FileLoop_normalize,0,0,0,0},
{"getSize",_wrap_FileLoop_getSize,0,0,0,0},
{"getFileRate",_wrap_FileLoop_getFileRate,0,0,0,0},
{"setRate",_wrap_FileLoop_setRate,0,0,0,0},
{"setFrequency",_wrap_FileLoop_setFrequency,0,0,0,0},
{"addTime",_wrap_FileLoop_addTime,0,0,0,0},
{"addPhase",_wrap_FileLoop_addPhase,0,0,0,0},
{"addPhaseOffset",_wrap_FileLoop_addPhaseOffset,0,0,0,0},
{"lastOut",_wrap_FileLoop_lastOut,0,0,0,0},
{"tick",_wrap_FileLoop_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_FileLoop_base_names[] = {0};
static const swig_type_info *swig_FileLoop_base[] = {0};
static swig_octave_class _wrap_class_FileLoop = {"FileLoop", &SWIGTYPE_p_stk__FileLoop,0,_wrap_new_FileLoop,0,_wrap_delete_FileLoop,swig_FileLoop_members,swig_FileLoop_base_names,swig_FileLoop_base };

static octave_value_list _wrap_new_Fir__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Fir *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Fir",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Fir *)new stk::Fir();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Fir, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Fir__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Fir *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Fir",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Fir" "', argument " "1"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Fir" "', argument " "1"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    arg1 = reinterpret_cast< std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > * >(argp1);
    result = (stk::Fir *)new stk::Fir(*arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Fir, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Fir, _wrap_new_Fir, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_Fir__SWIG_0(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Fir__SWIG_1(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Fir, _wrap_delete_Fir, std::string() ) {
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Fir",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Fir, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Fir" "', argument " "1"" of type '" "stk::Fir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Fir * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Fir_setCoefficients__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Fir_setCoefficients",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Fir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fir_setCoefficients" "', argument " "1"" of type '" "stk::Fir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Fir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Fir_setCoefficients" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Fir_setCoefficients" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > * >(argp2);
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Fir_setCoefficients" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    (arg1)->setCoefficients(*arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Fir_setCoefficients__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Fir_setCoefficients",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Fir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fir_setCoefficients" "', argument " "1"" of type '" "stk::Fir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Fir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Fir_setCoefficients" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Fir_setCoefficients" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > * >(argp2);
    (arg1)->setCoefficients(*arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Fir_setCoefficients, _wrap_Fir_setCoefficients, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Fir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Fir_setCoefficients__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Fir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Fir_setCoefficients__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Fir_lastOut, _wrap_Fir_lastOut, std::string() ) {
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Fir_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Fir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fir_lastOut" "', argument " "1"" of type '" "stk::Fir const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Fir * >(argp1);
    result = (stk::StkFloat)((stk::Fir const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Fir_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Fir_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Fir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fir_tick" "', argument " "1"" of type '" "stk::Fir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Fir * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Fir_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Fir_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Fir_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Fir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fir_tick" "', argument " "1"" of type '" "stk::Fir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Fir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Fir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Fir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Fir_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Fir_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Fir_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Fir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fir_tick" "', argument " "1"" of type '" "stk::Fir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Fir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Fir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Fir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Fir_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Fir_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Fir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fir_tick" "', argument " "1"" of type '" "stk::Fir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Fir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Fir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Fir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Fir_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Fir_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Fir_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Fir_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Fir_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Fir_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Fir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fir_tick" "', argument " "1"" of type '" "stk::Fir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Fir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Fir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Fir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Fir_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Fir_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Fir_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Fir_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Fir_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Fir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fir_tick" "', argument " "1"" of type '" "stk::Fir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Fir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Fir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Fir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Fir_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Fir_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Fir_tick, _wrap_Fir_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Fir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Fir_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Fir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Fir_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Fir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Fir_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Fir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Fir_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Fir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Fir_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Fir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Fir_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Fir_members[] = {
{"setCoefficients",_wrap_Fir_setCoefficients,0,0,0,0},
{"lastOut",_wrap_Fir_lastOut,0,0,0,0},
{"tick",_wrap_Fir_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Fir_base_names[] = {"_p_stk__Filter",0};
static const swig_type_info *swig_Fir_base[] = {0,0};
static swig_octave_class _wrap_class_Fir = {"Fir", &SWIGTYPE_p_stk__Fir,0,_wrap_new_Fir,0,_wrap_delete_Fir,swig_Fir_members,swig_Fir_base_names,swig_Fir_base };

SWIG_DEFUN( new_Flute, _wrap_new_Flute, std::string() ) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Flute *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Flute",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Flute" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::Flute *)new stk::Flute(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Flute, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Flute, _wrap_delete_Flute, std::string() ) {
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Flute",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Flute, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Flute" "', argument " "1"" of type '" "stk::Flute *""'"); 
    }
    arg1 = reinterpret_cast< stk::Flute * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Flute_clear, _wrap_Flute_clear, std::string() ) {
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Flute_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Flute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Flute_clear" "', argument " "1"" of type '" "stk::Flute *""'"); 
    }
    arg1 = reinterpret_cast< stk::Flute * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Flute_setFrequency, _wrap_Flute_setFrequency, std::string() ) {
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Flute_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Flute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Flute_setFrequency" "', argument " "1"" of type '" "stk::Flute *""'"); 
    }
    arg1 = reinterpret_cast< stk::Flute * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Flute_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Flute_setJetReflection, _wrap_Flute_setJetReflection, std::string() ) {
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Flute_setJetReflection",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Flute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Flute_setJetReflection" "', argument " "1"" of type '" "stk::Flute *""'"); 
    }
    arg1 = reinterpret_cast< stk::Flute * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Flute_setJetReflection" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setJetReflection(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Flute_setEndReflection, _wrap_Flute_setEndReflection, std::string() ) {
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Flute_setEndReflection",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Flute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Flute_setEndReflection" "', argument " "1"" of type '" "stk::Flute *""'"); 
    }
    arg1 = reinterpret_cast< stk::Flute * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Flute_setEndReflection" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setEndReflection(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Flute_setJetDelay, _wrap_Flute_setJetDelay, std::string() ) {
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Flute_setJetDelay",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Flute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Flute_setJetDelay" "', argument " "1"" of type '" "stk::Flute *""'"); 
    }
    arg1 = reinterpret_cast< stk::Flute * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Flute_setJetDelay" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setJetDelay(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Flute_startBlowing, _wrap_Flute_startBlowing, std::string() ) {
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Flute_startBlowing",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Flute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Flute_startBlowing" "', argument " "1"" of type '" "stk::Flute *""'"); 
    }
    arg1 = reinterpret_cast< stk::Flute * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Flute_startBlowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Flute_startBlowing" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->startBlowing(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Flute_stopBlowing, _wrap_Flute_stopBlowing, std::string() ) {
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Flute_stopBlowing",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Flute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Flute_stopBlowing" "', argument " "1"" of type '" "stk::Flute *""'"); 
    }
    arg1 = reinterpret_cast< stk::Flute * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Flute_stopBlowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->stopBlowing(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Flute_noteOn, _wrap_Flute_noteOn, std::string() ) {
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Flute_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Flute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Flute_noteOn" "', argument " "1"" of type '" "stk::Flute *""'"); 
    }
    arg1 = reinterpret_cast< stk::Flute * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Flute_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Flute_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Flute_noteOff, _wrap_Flute_noteOff, std::string() ) {
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Flute_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Flute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Flute_noteOff" "', argument " "1"" of type '" "stk::Flute *""'"); 
    }
    arg1 = reinterpret_cast< stk::Flute * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Flute_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Flute_controlChange, _wrap_Flute_controlChange, std::string() ) {
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Flute_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Flute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Flute_controlChange" "', argument " "1"" of type '" "stk::Flute *""'"); 
    }
    arg1 = reinterpret_cast< stk::Flute * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Flute_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Flute_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Flute_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Flute_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Flute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Flute_tick" "', argument " "1"" of type '" "stk::Flute *""'"); 
    }
    arg1 = reinterpret_cast< stk::Flute * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Flute_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Flute_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Flute_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Flute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Flute_tick" "', argument " "1"" of type '" "stk::Flute *""'"); 
    }
    arg1 = reinterpret_cast< stk::Flute * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Flute_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Flute_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Flute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Flute_tick" "', argument " "1"" of type '" "stk::Flute *""'"); 
    }
    arg1 = reinterpret_cast< stk::Flute * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Flute_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Flute_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Flute_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Flute_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Flute_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Flute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Flute_tick" "', argument " "1"" of type '" "stk::Flute *""'"); 
    }
    arg1 = reinterpret_cast< stk::Flute * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Flute_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Flute_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Flute_tick, _wrap_Flute_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Flute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Flute_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Flute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Flute_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Flute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Flute_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Flute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Flute_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Flute_members[] = {
{"clear",_wrap_Flute_clear,0,0,0,0},
{"setFrequency",_wrap_Flute_setFrequency,0,0,0,0},
{"setJetReflection",_wrap_Flute_setJetReflection,0,0,0,0},
{"setEndReflection",_wrap_Flute_setEndReflection,0,0,0,0},
{"setJetDelay",_wrap_Flute_setJetDelay,0,0,0,0},
{"startBlowing",_wrap_Flute_startBlowing,0,0,0,0},
{"stopBlowing",_wrap_Flute_stopBlowing,0,0,0,0},
{"noteOn",_wrap_Flute_noteOn,0,0,0,0},
{"noteOff",_wrap_Flute_noteOff,0,0,0,0},
{"controlChange",_wrap_Flute_controlChange,0,0,0,0},
{"tick",_wrap_Flute_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Flute_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Flute_base[] = {0,0};
static swig_octave_class _wrap_class_Flute = {"Flute", &SWIGTYPE_p_stk__Flute,0,_wrap_new_Flute,0,_wrap_delete_Flute,swig_Flute_members,swig_Flute_base_names,swig_Flute_base };

SWIG_DEFUN( new_FormSwep, _wrap_new_FormSwep, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FormSwep *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FormSwep",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::FormSwep *)new stk::FormSwep();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FormSwep, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_FormSwep, _wrap_delete_FormSwep, std::string() ) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_FormSwep",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FormSwep" "', argument " "1"" of type '" "stk::FormSwep *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FormSwep_ignoreSampleRateChange__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FormSwep_ignoreSampleRateChange",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FormSwep_ignoreSampleRateChange" "', argument " "1"" of type '" "stk::FormSwep *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FormSwep_ignoreSampleRateChange" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    (arg1)->ignoreSampleRateChange(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FormSwep_ignoreSampleRateChange__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FormSwep_ignoreSampleRateChange",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FormSwep_ignoreSampleRateChange" "', argument " "1"" of type '" "stk::FormSwep *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    (arg1)->ignoreSampleRateChange();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FormSwep_ignoreSampleRateChange, _wrap_FormSwep_ignoreSampleRateChange, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FormSwep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FormSwep_ignoreSampleRateChange__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FormSwep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FormSwep_ignoreSampleRateChange__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( FormSwep_setResonance, _wrap_FormSwep_setResonance, std::string() ) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FormSwep_setResonance",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FormSwep_setResonance" "', argument " "1"" of type '" "stk::FormSwep *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FormSwep_setResonance" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FormSwep_setResonance" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setResonance(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FormSwep_setStates__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FormSwep_setStates",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FormSwep_setStates" "', argument " "1"" of type '" "stk::FormSwep *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FormSwep_setStates" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FormSwep_setStates" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FormSwep_setStates" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    (arg1)->setStates(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FormSwep_setStates__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FormSwep_setStates",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FormSwep_setStates" "', argument " "1"" of type '" "stk::FormSwep *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FormSwep_setStates" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FormSwep_setStates" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setStates(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FormSwep_setStates, _wrap_FormSwep_setStates, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FormSwep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FormSwep_setStates__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FormSwep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FormSwep_setStates__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_FormSwep_setTargets__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FormSwep_setTargets",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FormSwep_setTargets" "', argument " "1"" of type '" "stk::FormSwep *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FormSwep_setTargets" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FormSwep_setTargets" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FormSwep_setTargets" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    (arg1)->setTargets(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FormSwep_setTargets__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FormSwep_setTargets",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FormSwep_setTargets" "', argument " "1"" of type '" "stk::FormSwep *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FormSwep_setTargets" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FormSwep_setTargets" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setTargets(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FormSwep_setTargets, _wrap_FormSwep_setTargets, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FormSwep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FormSwep_setTargets__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FormSwep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FormSwep_setTargets__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( FormSwep_setSweepRate, _wrap_FormSwep_setSweepRate, std::string() ) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FormSwep_setSweepRate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FormSwep_setSweepRate" "', argument " "1"" of type '" "stk::FormSwep *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FormSwep_setSweepRate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setSweepRate(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FormSwep_setSweepTime, _wrap_FormSwep_setSweepTime, std::string() ) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FormSwep_setSweepTime",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FormSwep_setSweepTime" "', argument " "1"" of type '" "stk::FormSwep *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FormSwep_setSweepTime" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setSweepTime(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FormSwep_lastOut, _wrap_FormSwep_lastOut, std::string() ) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FormSwep_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FormSwep_lastOut" "', argument " "1"" of type '" "stk::FormSwep const *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    result = (stk::StkFloat)((stk::FormSwep const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FormSwep_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FormSwep_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FormSwep_tick" "', argument " "1"" of type '" "stk::FormSwep *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FormSwep_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FormSwep_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FormSwep_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FormSwep_tick" "', argument " "1"" of type '" "stk::FormSwep *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FormSwep_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FormSwep_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FormSwep_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FormSwep_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FormSwep_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FormSwep_tick" "', argument " "1"" of type '" "stk::FormSwep *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FormSwep_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FormSwep_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FormSwep_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FormSwep_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FormSwep_tick" "', argument " "1"" of type '" "stk::FormSwep *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FormSwep_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FormSwep_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FormSwep_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FormSwep_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FormSwep_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FormSwep_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FormSwep_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FormSwep_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FormSwep_tick" "', argument " "1"" of type '" "stk::FormSwep *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FormSwep_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FormSwep_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FormSwep_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FormSwep_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FormSwep_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FormSwep_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FormSwep_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FormSwep, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FormSwep_tick" "', argument " "1"" of type '" "stk::FormSwep *""'"); 
    }
    arg1 = reinterpret_cast< stk::FormSwep * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FormSwep_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FormSwep_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FormSwep_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FormSwep_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FormSwep_tick, _wrap_FormSwep_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FormSwep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FormSwep_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FormSwep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FormSwep_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FormSwep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FormSwep_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FormSwep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FormSwep_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FormSwep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FormSwep_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FormSwep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_FormSwep_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_FormSwep_members[] = {
{"ignoreSampleRateChange",_wrap_FormSwep_ignoreSampleRateChange,0,0,0,0},
{"setResonance",_wrap_FormSwep_setResonance,0,0,0,0},
{"setStates",_wrap_FormSwep_setStates,0,0,0,0},
{"setTargets",_wrap_FormSwep_setTargets,0,0,0,0},
{"setSweepRate",_wrap_FormSwep_setSweepRate,0,0,0,0},
{"setSweepTime",_wrap_FormSwep_setSweepTime,0,0,0,0},
{"lastOut",_wrap_FormSwep_lastOut,0,0,0,0},
{"tick",_wrap_FormSwep_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_FormSwep_base_names[] = {"_p_stk__Filter",0};
static const swig_type_info *swig_FormSwep_base[] = {0,0};
static swig_octave_class _wrap_class_FormSwep = {"FormSwep", &SWIGTYPE_p_stk__FormSwep,0,_wrap_new_FormSwep,0,_wrap_delete_FormSwep,swig_FormSwep_members,swig_FormSwep_base_names,swig_FormSwep_base };

SWIG_DEFUN( new_FreeVerb, _wrap_new_FreeVerb, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::FreeVerb *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_FreeVerb",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::FreeVerb *)new stk::FreeVerb();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__FreeVerb, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_FreeVerb, _wrap_delete_FreeVerb, std::string() ) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_FreeVerb",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FreeVerb" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FreeVerb_setEffectMix, _wrap_FreeVerb_setEffectMix, std::string() ) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_setEffectMix",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_setEffectMix" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FreeVerb_setEffectMix" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setEffectMix(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FreeVerb_setRoomSize, _wrap_FreeVerb_setRoomSize, std::string() ) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_setRoomSize",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_setRoomSize" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FreeVerb_setRoomSize" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setRoomSize(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FreeVerb_getRoomSize, _wrap_FreeVerb_getRoomSize, std::string() ) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_getRoomSize",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_getRoomSize" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    result = (stk::StkFloat)(arg1)->getRoomSize();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FreeVerb_setDamping, _wrap_FreeVerb_setDamping, std::string() ) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_setDamping",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_setDamping" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FreeVerb_setDamping" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setDamping(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FreeVerb_getDamping, _wrap_FreeVerb_getDamping, std::string() ) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_getDamping",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_getDamping" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    result = (stk::StkFloat)(arg1)->getDamping();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FreeVerb_setWidth, _wrap_FreeVerb_setWidth, std::string() ) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_setWidth",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_setWidth" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FreeVerb_setWidth" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setWidth(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FreeVerb_getWidth, _wrap_FreeVerb_getWidth, std::string() ) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_getWidth",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_getWidth" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    result = (stk::StkFloat)(arg1)->getWidth();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FreeVerb_setMode, _wrap_FreeVerb_setMode, std::string() ) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_setMode",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_setMode" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FreeVerb_setMode" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    (arg1)->setMode(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FreeVerb_getMode, _wrap_FreeVerb_getMode, std::string() ) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_getMode",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_getMode" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    result = (stk::StkFloat)(arg1)->getMode();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FreeVerb_clear, _wrap_FreeVerb_clear, std::string() ) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_clear" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FreeVerb_lastOut__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_lastOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_lastOut" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FreeVerb_lastOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->lastOut(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FreeVerb_lastOut__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_lastOut" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    result = (stk::StkFloat)(arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FreeVerb_lastOut, _wrap_FreeVerb_lastOut, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FreeVerb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeVerb_lastOut__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FreeVerb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FreeVerb_lastOut__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_FreeVerb_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_tick" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FreeVerb_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FreeVerb_tick" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FreeVerb_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFloat)(arg1)->tick(arg2,arg3,arg4);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FreeVerb_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_tick" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FreeVerb_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FreeVerb_tick" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    result = (stk::StkFloat)(arg1)->tick(arg2,arg3);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FreeVerb_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_tick" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FreeVerb_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FreeVerb_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_tick" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeVerb_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeVerb_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FreeVerb_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FreeVerb_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_tick" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeVerb_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeVerb_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FreeVerb_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_tick" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeVerb_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeVerb_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FreeVerb_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeVerb_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FreeVerb_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FreeVerb_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FreeVerb_tick__SWIG_6 (const octave_value_list& args, int nargout) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_tick" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeVerb_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeVerb_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FreeVerb_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeVerb_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FreeVerb_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_FreeVerb_tick__SWIG_7 (const octave_value_list& args, int nargout) {
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("FreeVerb_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__FreeVerb, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeVerb_tick" "', argument " "1"" of type '" "stk::FreeVerb *""'"); 
    }
    arg1 = reinterpret_cast< stk::FreeVerb * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeVerb_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeVerb_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FreeVerb_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeVerb_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( FreeVerb_tick, _wrap_FreeVerb_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FreeVerb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FreeVerb_tick__SWIG_4(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FreeVerb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FreeVerb_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FreeVerb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FreeVerb_tick__SWIG_7(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FreeVerb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FreeVerb_tick__SWIG_3(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FreeVerb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FreeVerb_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FreeVerb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FreeVerb_tick__SWIG_6(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FreeVerb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FreeVerb_tick__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__FreeVerb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_FreeVerb_tick__SWIG_5(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_FreeVerb_members[] = {
{"setEffectMix",_wrap_FreeVerb_setEffectMix,0,0,0,0},
{"setRoomSize",_wrap_FreeVerb_setRoomSize,0,0,0,0},
{"getRoomSize",_wrap_FreeVerb_getRoomSize,0,0,0,0},
{"setDamping",_wrap_FreeVerb_setDamping,0,0,0,0},
{"getDamping",_wrap_FreeVerb_getDamping,0,0,0,0},
{"setWidth",_wrap_FreeVerb_setWidth,0,0,0,0},
{"getWidth",_wrap_FreeVerb_getWidth,0,0,0,0},
{"setMode",_wrap_FreeVerb_setMode,0,0,0,0},
{"getMode",_wrap_FreeVerb_getMode,0,0,0,0},
{"clear",_wrap_FreeVerb_clear,0,0,0,0},
{"lastOut",_wrap_FreeVerb_lastOut,0,0,0,0},
{"tick",_wrap_FreeVerb_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_FreeVerb_base_names[] = {"_p_stk__Effect",0};
static const swig_type_info *swig_FreeVerb_base[] = {0,0};
static swig_octave_class _wrap_class_FreeVerb = {"FreeVerb", &SWIGTYPE_p_stk__FreeVerb,0,_wrap_new_FreeVerb,0,_wrap_delete_FreeVerb,swig_FreeVerb_members,swig_FreeVerb_base_names,swig_FreeVerb_base };

static octave_value_list _wrap_new_Granulate__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Granulate *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Granulate",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Granulate *)new stk::Granulate();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Granulate, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Granulate__SWIG_1 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  std::string arg2 ;
  bool arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Granulate *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Granulate",args.length(),3,3,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Granulate" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Granulate" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Granulate" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Granulate" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    result = (stk::Granulate *)new stk::Granulate(arg1,arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Granulate, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Granulate__SWIG_2 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  std::string arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Granulate *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Granulate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Granulate" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Granulate" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Granulate" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    result = (stk::Granulate *)new stk::Granulate(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Granulate, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Granulate, _wrap_new_Granulate, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 0) {
    return _wrap_new_Granulate__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Granulate__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Granulate__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Granulate, _wrap_delete_Granulate, std::string() ) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Granulate",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Granulate" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Granulate_openFile__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Granulate_openFile",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_openFile" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Granulate_openFile" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Granulate_openFile" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Granulate_openFile" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    (arg1)->openFile(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Granulate_openFile__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Granulate_openFile",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_openFile" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Granulate_openFile" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Granulate_openFile" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    (arg1)->openFile(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Granulate_openFile, _wrap_Granulate_openFile, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Granulate_openFile__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Granulate_openFile__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Granulate_reset, _wrap_Granulate_reset, std::string() ) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Granulate_reset",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_reset" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    (arg1)->reset();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Granulate_setVoices__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Granulate_setVoices",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_setVoices" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Granulate_setVoices" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    (arg1)->setVoices(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Granulate_setVoices__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Granulate_setVoices",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_setVoices" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    (arg1)->setVoices();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Granulate_setVoices, _wrap_Granulate_setVoices, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Granulate_setVoices__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Granulate_setVoices__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Granulate_setStretch__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Granulate_setStretch",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_setStretch" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Granulate_setStretch" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    (arg1)->setStretch(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Granulate_setStretch__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Granulate_setStretch",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_setStretch" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    (arg1)->setStretch();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Granulate_setStretch, _wrap_Granulate_setStretch, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Granulate_setStretch__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Granulate_setStretch__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Granulate_setGrainParameters__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Granulate_setGrainParameters",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_setGrainParameters" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Granulate_setGrainParameters" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Granulate_setGrainParameters" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Granulate_setGrainParameters" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Granulate_setGrainParameters" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    (arg1)->setGrainParameters(arg2,arg3,arg4,arg5);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Granulate_setGrainParameters__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Granulate_setGrainParameters",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_setGrainParameters" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Granulate_setGrainParameters" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Granulate_setGrainParameters" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Granulate_setGrainParameters" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    (arg1)->setGrainParameters(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Granulate_setGrainParameters__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Granulate_setGrainParameters",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_setGrainParameters" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Granulate_setGrainParameters" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Granulate_setGrainParameters" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    (arg1)->setGrainParameters(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Granulate_setGrainParameters__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Granulate_setGrainParameters",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_setGrainParameters" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Granulate_setGrainParameters" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    (arg1)->setGrainParameters(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Granulate_setGrainParameters__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Granulate_setGrainParameters",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_setGrainParameters" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    (arg1)->setGrainParameters();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Granulate_setGrainParameters, _wrap_Granulate_setGrainParameters, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Granulate_setGrainParameters__SWIG_4(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Granulate_setGrainParameters__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Granulate_setGrainParameters__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Granulate_setGrainParameters__SWIG_1(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Granulate_setGrainParameters__SWIG_0(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Granulate_setRandomFactor__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Granulate_setRandomFactor",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_setRandomFactor" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Granulate_setRandomFactor" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setRandomFactor(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Granulate_setRandomFactor__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Granulate_setRandomFactor",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_setRandomFactor" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    (arg1)->setRandomFactor();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Granulate_setRandomFactor, _wrap_Granulate_setRandomFactor, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Granulate_setRandomFactor__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Granulate_setRandomFactor__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Granulate_lastOut__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Granulate_lastOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_lastOut" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Granulate_lastOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->lastOut(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Granulate_lastOut__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Granulate_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_lastOut" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    result = (stk::StkFloat)(arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Granulate_lastOut, _wrap_Granulate_lastOut, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Granulate_lastOut__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Granulate_lastOut__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Granulate_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Granulate_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_tick" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Granulate_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Granulate_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Granulate_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_tick" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Granulate_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Granulate_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_tick" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Granulate_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Granulate_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Granulate_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Granulate_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Granulate_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Granulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Granulate_tick" "', argument " "1"" of type '" "stk::Granulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Granulate * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Granulate_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Granulate_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Granulate_tick, _wrap_Granulate_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Granulate_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Granulate_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Granulate_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Granulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Granulate_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Granulate_members[] = {
{"openFile",_wrap_Granulate_openFile,0,0,0,0},
{"reset",_wrap_Granulate_reset,0,0,0,0},
{"setVoices",_wrap_Granulate_setVoices,0,0,0,0},
{"setStretch",_wrap_Granulate_setStretch,0,0,0,0},
{"setGrainParameters",_wrap_Granulate_setGrainParameters,0,0,0,0},
{"setRandomFactor",_wrap_Granulate_setRandomFactor,0,0,0,0},
{"lastOut",_wrap_Granulate_lastOut,0,0,0,0},
{"tick",_wrap_Granulate_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Granulate_base_names[] = {"_p_stk__Generator",0};
static const swig_type_info *swig_Granulate_base[] = {0,0};
static swig_octave_class _wrap_class_Granulate = {"Granulate", &SWIGTYPE_p_stk__Granulate,0,_wrap_new_Granulate,0,_wrap_delete_Granulate,swig_Granulate_members,swig_Granulate_base_names,swig_Granulate_base };

static octave_value_list _wrap_new_Guitar__SWIG_0 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  std::string arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Guitar *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Guitar",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Guitar" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Guitar" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Guitar" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    result = (stk::Guitar *)new stk::Guitar(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Guitar, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Guitar__SWIG_1 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Guitar *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Guitar",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Guitar" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    result = (stk::Guitar *)new stk::Guitar(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Guitar, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Guitar__SWIG_2 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Guitar *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Guitar",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Guitar *)new stk::Guitar();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Guitar, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Guitar, _wrap_new_Guitar, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_Guitar__SWIG_2(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Guitar__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Guitar__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Guitar_clear, _wrap_Guitar_clear, std::string() ) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Guitar_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_clear" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Guitar_setBodyFile__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Guitar_setBodyFile",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_setBodyFile" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Guitar_setBodyFile" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Guitar_setBodyFile" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    (arg1)->setBodyFile(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Guitar_setBodyFile__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Guitar_setBodyFile",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_setBodyFile" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    (arg1)->setBodyFile();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Guitar_setBodyFile, _wrap_Guitar_setBodyFile, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Guitar_setBodyFile__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Guitar_setBodyFile__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Guitar_setPluckPosition__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Guitar_setPluckPosition",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_setPluckPosition" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Guitar_setPluckPosition" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Guitar_setPluckPosition" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    (arg1)->setPluckPosition(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Guitar_setPluckPosition__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Guitar_setPluckPosition",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_setPluckPosition" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Guitar_setPluckPosition" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setPluckPosition(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Guitar_setPluckPosition, _wrap_Guitar_setPluckPosition, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Guitar_setPluckPosition__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Guitar_setPluckPosition__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Guitar_setLoopGain__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Guitar_setLoopGain",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_setLoopGain" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Guitar_setLoopGain" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Guitar_setLoopGain" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    (arg1)->setLoopGain(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Guitar_setLoopGain__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Guitar_setLoopGain",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_setLoopGain" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Guitar_setLoopGain" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setLoopGain(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Guitar_setLoopGain, _wrap_Guitar_setLoopGain, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Guitar_setLoopGain__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Guitar_setLoopGain__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Guitar_setFrequency__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Guitar_setFrequency",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_setFrequency" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Guitar_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Guitar_setFrequency" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    (arg1)->setFrequency(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Guitar_setFrequency__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Guitar_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_setFrequency" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Guitar_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Guitar_setFrequency, _wrap_Guitar_setFrequency, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Guitar_setFrequency__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Guitar_setFrequency__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Guitar_noteOn__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Guitar_noteOn",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_noteOn" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Guitar_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Guitar_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Guitar_noteOn" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    (arg1)->noteOn(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Guitar_noteOn__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Guitar_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_noteOn" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Guitar_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Guitar_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Guitar_noteOn, _wrap_Guitar_noteOn, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Guitar_noteOn__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Guitar_noteOn__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Guitar_noteOff__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Guitar_noteOff",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_noteOff" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Guitar_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Guitar_noteOff" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    (arg1)->noteOff(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Guitar_noteOff__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Guitar_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_noteOff" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Guitar_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Guitar_noteOff, _wrap_Guitar_noteOff, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Guitar_noteOff__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Guitar_noteOff__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Guitar_controlChange__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Guitar_controlChange",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_controlChange" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Guitar_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Guitar_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Guitar_controlChange" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    (arg1)->controlChange(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Guitar_controlChange__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Guitar_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_controlChange" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Guitar_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Guitar_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Guitar_controlChange, _wrap_Guitar_controlChange, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Guitar_controlChange__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Guitar_controlChange__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Guitar_lastOut, _wrap_Guitar_lastOut, std::string() ) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Guitar_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_lastOut" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    result = (stk::StkFloat)(arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Guitar_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Guitar_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_tick" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Guitar_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Guitar_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Guitar_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_tick" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Guitar_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Guitar_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_tick" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Guitar_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Guitar_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Guitar_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Guitar_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Guitar_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_tick" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Guitar_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Guitar_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Guitar_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Guitar_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_tick" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Guitar_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Guitar_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Guitar_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Guitar_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Guitar_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Guitar_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Guitar_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Guitar_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_tick" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Guitar_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Guitar_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Guitar_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Guitar_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Guitar_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Guitar_tick__SWIG_6 (const octave_value_list& args, int nargout) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Guitar_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Guitar_tick" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Guitar_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Guitar_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Guitar_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Guitar_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Guitar_tick, _wrap_Guitar_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Guitar_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Guitar_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Guitar_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Guitar_tick__SWIG_6(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Guitar_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Guitar_tick__SWIG_5(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Guitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Guitar_tick__SWIG_4(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Guitar, _wrap_delete_Guitar, std::string() ) {
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Guitar",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Guitar, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Guitar" "', argument " "1"" of type '" "stk::Guitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Guitar * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Guitar_members[] = {
{"clear",_wrap_Guitar_clear,0,0,0,0},
{"setBodyFile",_wrap_Guitar_setBodyFile,0,0,0,0},
{"setPluckPosition",_wrap_Guitar_setPluckPosition,0,0,0,0},
{"setLoopGain",_wrap_Guitar_setLoopGain,0,0,0,0},
{"setFrequency",_wrap_Guitar_setFrequency,0,0,0,0},
{"noteOn",_wrap_Guitar_noteOn,0,0,0,0},
{"noteOff",_wrap_Guitar_noteOff,0,0,0,0},
{"controlChange",_wrap_Guitar_controlChange,0,0,0,0},
{"lastOut",_wrap_Guitar_lastOut,0,0,0,0},
{"tick",_wrap_Guitar_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Guitar_base_names[] = {0};
static const swig_type_info *swig_Guitar_base[] = {0};
static swig_octave_class _wrap_class_Guitar = {"Guitar", &SWIGTYPE_p_stk__Guitar,0,_wrap_new_Guitar,0,_wrap_delete_Guitar,swig_Guitar_members,swig_Guitar_base_names,swig_Guitar_base };

SWIG_DEFUN( new_HevyMetl, _wrap_new_HevyMetl, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::HevyMetl *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_HevyMetl",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::HevyMetl *)new stk::HevyMetl();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__HevyMetl, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_HevyMetl, _wrap_delete_HevyMetl, std::string() ) {
  stk::HevyMetl *arg1 = (stk::HevyMetl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_HevyMetl",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__HevyMetl, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HevyMetl" "', argument " "1"" of type '" "stk::HevyMetl *""'"); 
    }
    arg1 = reinterpret_cast< stk::HevyMetl * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( HevyMetl_noteOn, _wrap_HevyMetl_noteOn, std::string() ) {
  stk::HevyMetl *arg1 = (stk::HevyMetl *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("HevyMetl_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__HevyMetl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HevyMetl_noteOn" "', argument " "1"" of type '" "stk::HevyMetl *""'"); 
    }
    arg1 = reinterpret_cast< stk::HevyMetl * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HevyMetl_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HevyMetl_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_HevyMetl_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::HevyMetl *arg1 = (stk::HevyMetl *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("HevyMetl_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__HevyMetl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HevyMetl_tick" "', argument " "1"" of type '" "stk::HevyMetl *""'"); 
    }
    arg1 = reinterpret_cast< stk::HevyMetl * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HevyMetl_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_HevyMetl_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::HevyMetl *arg1 = (stk::HevyMetl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("HevyMetl_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__HevyMetl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HevyMetl_tick" "', argument " "1"" of type '" "stk::HevyMetl *""'"); 
    }
    arg1 = reinterpret_cast< stk::HevyMetl * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_HevyMetl_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::HevyMetl *arg1 = (stk::HevyMetl *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("HevyMetl_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__HevyMetl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HevyMetl_tick" "', argument " "1"" of type '" "stk::HevyMetl *""'"); 
    }
    arg1 = reinterpret_cast< stk::HevyMetl * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HevyMetl_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HevyMetl_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HevyMetl_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_HevyMetl_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::HevyMetl *arg1 = (stk::HevyMetl *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("HevyMetl_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__HevyMetl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HevyMetl_tick" "', argument " "1"" of type '" "stk::HevyMetl *""'"); 
    }
    arg1 = reinterpret_cast< stk::HevyMetl * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HevyMetl_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HevyMetl_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( HevyMetl_tick, _wrap_HevyMetl_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__HevyMetl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_HevyMetl_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__HevyMetl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HevyMetl_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__HevyMetl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HevyMetl_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__HevyMetl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HevyMetl_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_HevyMetl_members[] = {
{"noteOn",_wrap_HevyMetl_noteOn,0,0,0,0},
{"tick",_wrap_HevyMetl_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_HevyMetl_base_names[] = {"_p_stk__FM",0};
static const swig_type_info *swig_HevyMetl_base[] = {0,0};
static swig_octave_class _wrap_class_HevyMetl = {"HevyMetl", &SWIGTYPE_p_stk__HevyMetl,0,_wrap_new_HevyMetl,0,_wrap_delete_HevyMetl,swig_HevyMetl_members,swig_HevyMetl_base_names,swig_HevyMetl_base };

static octave_value_list _wrap_new_Iir__SWIG_0 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Iir *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Iir",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Iir *)new stk::Iir();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Iir, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Iir__SWIG_1 (const octave_value_list& args, int nargout) {
  std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > *arg1 = 0 ;
  std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Iir *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Iir",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Iir" "', argument " "1"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Iir" "', argument " "1"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    arg1 = reinterpret_cast< std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Iir" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Iir" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > * >(argp2);
    result = (stk::Iir *)new stk::Iir(*arg1,*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Iir, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Iir, _wrap_new_Iir, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_Iir__SWIG_0(args, nargout);
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Iir__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Iir, _wrap_delete_Iir, std::string() ) {
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Iir",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Iir, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Iir" "', argument " "1"" of type '" "stk::Iir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Iir * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Iir_setCoefficients__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > *arg2 = 0 ;
  std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Iir_setCoefficients",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Iir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Iir_setCoefficients" "', argument " "1"" of type '" "stk::Iir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Iir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Iir_setCoefficients" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Iir_setCoefficients" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Iir_setCoefficients" "', argument " "3"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Iir_setCoefficients" "', argument " "3"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > * >(argp3);
    ecode4 = SWIG_AsVal_bool(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Iir_setCoefficients" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
    (arg1)->setCoefficients(*arg2,*arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Iir_setCoefficients__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > *arg2 = 0 ;
  std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Iir_setCoefficients",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Iir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Iir_setCoefficients" "', argument " "1"" of type '" "stk::Iir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Iir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Iir_setCoefficients" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Iir_setCoefficients" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Iir_setCoefficients" "', argument " "3"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Iir_setCoefficients" "', argument " "3"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > * >(argp3);
    (arg1)->setCoefficients(*arg2,*arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Iir_setCoefficients, _wrap_Iir_setCoefficients, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Iir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Iir_setCoefficients__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Iir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Iir_setCoefficients__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Iir_setNumerator__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Iir_setNumerator",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Iir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Iir_setNumerator" "', argument " "1"" of type '" "stk::Iir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Iir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Iir_setNumerator" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Iir_setNumerator" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > * >(argp2);
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Iir_setNumerator" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    (arg1)->setNumerator(*arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Iir_setNumerator__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Iir_setNumerator",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Iir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Iir_setNumerator" "', argument " "1"" of type '" "stk::Iir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Iir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Iir_setNumerator" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Iir_setNumerator" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > * >(argp2);
    (arg1)->setNumerator(*arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Iir_setNumerator, _wrap_Iir_setNumerator, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Iir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Iir_setNumerator__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Iir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Iir_setNumerator__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Iir_setDenominator__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Iir_setDenominator",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Iir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Iir_setDenominator" "', argument " "1"" of type '" "stk::Iir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Iir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Iir_setDenominator" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Iir_setDenominator" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > * >(argp2);
    ecode3 = SWIG_AsVal_bool(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Iir_setDenominator" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    (arg1)->setDenominator(*arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Iir_setDenominator__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Iir_setDenominator",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Iir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Iir_setDenominator" "', argument " "1"" of type '" "stk::Iir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Iir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Iir_setDenominator" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Iir_setDenominator" "', argument " "2"" of type '" "std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > * >(argp2);
    (arg1)->setDenominator(*arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Iir_setDenominator, _wrap_Iir_setDenominator, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Iir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Iir_setDenominator__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Iir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Iir_setDenominator__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Iir_lastOut, _wrap_Iir_lastOut, std::string() ) {
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Iir_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Iir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Iir_lastOut" "', argument " "1"" of type '" "stk::Iir const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Iir * >(argp1);
    result = (stk::StkFloat)((stk::Iir const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Iir_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Iir_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Iir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Iir_tick" "', argument " "1"" of type '" "stk::Iir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Iir * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Iir_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Iir_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Iir_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Iir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Iir_tick" "', argument " "1"" of type '" "stk::Iir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Iir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Iir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Iir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Iir_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Iir_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Iir_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Iir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Iir_tick" "', argument " "1"" of type '" "stk::Iir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Iir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Iir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Iir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Iir_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Iir_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Iir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Iir_tick" "', argument " "1"" of type '" "stk::Iir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Iir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Iir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Iir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Iir_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Iir_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Iir_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Iir_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Iir_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Iir_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Iir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Iir_tick" "', argument " "1"" of type '" "stk::Iir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Iir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Iir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Iir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Iir_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Iir_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Iir_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Iir_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Iir_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Iir, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Iir_tick" "', argument " "1"" of type '" "stk::Iir *""'"); 
    }
    arg1 = reinterpret_cast< stk::Iir * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Iir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Iir_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Iir_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Iir_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Iir_tick, _wrap_Iir_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Iir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Iir_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Iir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iir_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Iir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Iir_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Iir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Iir_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Iir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Iir_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Iir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Iir_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Iir_members[] = {
{"setCoefficients",_wrap_Iir_setCoefficients,0,0,0,0},
{"setNumerator",_wrap_Iir_setNumerator,0,0,0,0},
{"setDenominator",_wrap_Iir_setDenominator,0,0,0,0},
{"lastOut",_wrap_Iir_lastOut,0,0,0,0},
{"tick",_wrap_Iir_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Iir_base_names[] = {"_p_stk__Filter",0};
static const swig_type_info *swig_Iir_base[] = {0,0};
static swig_octave_class _wrap_class_Iir = {"Iir", &SWIGTYPE_p_stk__Iir,0,_wrap_new_Iir,0,_wrap_delete_Iir,swig_Iir_members,swig_Iir_base_names,swig_Iir_base };

static octave_value_list _wrap_new_JCRev__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::JCRev *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_JCRev",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JCRev" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::JCRev *)new stk::JCRev(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__JCRev, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_JCRev__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::JCRev *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_JCRev",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::JCRev *)new stk::JCRev();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__JCRev, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_JCRev, _wrap_new_JCRev, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_JCRev__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_JCRev__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( JCRev_clear, _wrap_JCRev_clear, std::string() ) {
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("JCRev_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JCRev_clear" "', argument " "1"" of type '" "stk::JCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::JCRev * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( JCRev_setT60, _wrap_JCRev_setT60, std::string() ) {
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("JCRev_setT60",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JCRev_setT60" "', argument " "1"" of type '" "stk::JCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::JCRev * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JCRev_setT60" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setT60(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_JCRev_lastOut__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("JCRev_lastOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JCRev_lastOut" "', argument " "1"" of type '" "stk::JCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::JCRev * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JCRev_lastOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->lastOut(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_JCRev_lastOut__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("JCRev_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JCRev_lastOut" "', argument " "1"" of type '" "stk::JCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::JCRev * >(argp1);
    result = (stk::StkFloat)(arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( JCRev_lastOut, _wrap_JCRev_lastOut, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__JCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_JCRev_lastOut__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__JCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_JCRev_lastOut__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_JCRev_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFloat arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("JCRev_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JCRev_tick" "', argument " "1"" of type '" "stk::JCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::JCRev * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JCRev_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JCRev_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFloat)(arg1)->tick(arg2,arg3);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_JCRev_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("JCRev_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JCRev_tick" "', argument " "1"" of type '" "stk::JCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::JCRev * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JCRev_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_JCRev_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("JCRev_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JCRev_tick" "', argument " "1"" of type '" "stk::JCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::JCRev * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JCRev_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_JCRev_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("JCRev_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JCRev_tick" "', argument " "1"" of type '" "stk::JCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::JCRev * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_JCRev_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("JCRev_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JCRev_tick" "', argument " "1"" of type '" "stk::JCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::JCRev * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JCRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JCRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "JCRev_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "JCRev_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_JCRev_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("JCRev_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JCRev_tick" "', argument " "1"" of type '" "stk::JCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::JCRev * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JCRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JCRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "JCRev_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_JCRev_tick__SWIG_6 (const octave_value_list& args, int nargout) {
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("JCRev_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JCRev_tick" "', argument " "1"" of type '" "stk::JCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::JCRev * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JCRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JCRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( JCRev_tick, _wrap_JCRev_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__JCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JCRev_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__JCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_JCRev_tick__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__JCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_JCRev_tick__SWIG_6(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__JCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_JCRev_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__JCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_JCRev_tick__SWIG_0(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__JCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_JCRev_tick__SWIG_5(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__JCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_JCRev_tick__SWIG_4(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_JCRev, _wrap_delete_JCRev, std::string() ) {
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_JCRev",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JCRev, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JCRev" "', argument " "1"" of type '" "stk::JCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::JCRev * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_JCRev_members[] = {
{"clear",_wrap_JCRev_clear,0,0,0,0},
{"setT60",_wrap_JCRev_setT60,0,0,0,0},
{"lastOut",_wrap_JCRev_lastOut,0,0,0,0},
{"tick",_wrap_JCRev_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_JCRev_base_names[] = {"_p_stk__Effect",0};
static const swig_type_info *swig_JCRev_base[] = {0,0};
static swig_octave_class _wrap_class_JCRev = {"JCRev", &SWIGTYPE_p_stk__JCRev,0,_wrap_new_JCRev,0,_wrap_delete_JCRev,swig_JCRev_members,swig_JCRev_base_names,swig_JCRev_base };

static octave_value_list _wrap_JetTable_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::JetTable *arg1 = (stk::JetTable *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("JetTable_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JetTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetTable_tick" "', argument " "1"" of type '" "stk::JetTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::JetTable * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetTable_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_JetTable_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::JetTable *arg1 = (stk::JetTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("JetTable_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JetTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetTable_tick" "', argument " "1"" of type '" "stk::JetTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::JetTable * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JetTable_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_JetTable_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::JetTable *arg1 = (stk::JetTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("JetTable_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JetTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetTable_tick" "', argument " "1"" of type '" "stk::JetTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::JetTable * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_JetTable_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::JetTable *arg1 = (stk::JetTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("JetTable_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JetTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetTable_tick" "', argument " "1"" of type '" "stk::JetTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::JetTable * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JetTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "JetTable_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "JetTable_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_JetTable_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::JetTable *arg1 = (stk::JetTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("JetTable_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JetTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetTable_tick" "', argument " "1"" of type '" "stk::JetTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::JetTable * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JetTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "JetTable_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_JetTable_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::JetTable *arg1 = (stk::JetTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("JetTable_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JetTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetTable_tick" "', argument " "1"" of type '" "stk::JetTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::JetTable * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JetTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( JetTable_tick, _wrap_JetTable_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__JetTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JetTable_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__JetTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_JetTable_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__JetTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_JetTable_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__JetTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_JetTable_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__JetTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_JetTable_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__JetTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_JetTable_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( new_JetTable, _wrap_new_JetTable, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::JetTable *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_JetTable",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::JetTable *)new stk::JetTable();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__JetTable, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_JetTable, _wrap_delete_JetTable, std::string() ) {
  stk::JetTable *arg1 = (stk::JetTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_JetTable",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__JetTable, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JetTable" "', argument " "1"" of type '" "stk::JetTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::JetTable * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_JetTable_members[] = {
{"tick",_wrap_JetTable_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_JetTable_base_names[] = {"_p_stk__Function",0};
static const swig_type_info *swig_JetTable_base[] = {0,0};
static swig_octave_class _wrap_class_JetTable = {"JetTable", &SWIGTYPE_p_stk__JetTable,0,_wrap_new_JetTable,0,_wrap_delete_JetTable,swig_JetTable_members,swig_JetTable_base_names,swig_JetTable_base };

static octave_value_list _wrap_new_LentPitShift__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  int arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::LentPitShift *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_LentPitShift",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LentPitShift" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LentPitShift" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (stk::LentPitShift *)new stk::LentPitShift(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__LentPitShift, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_LentPitShift__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::LentPitShift *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_LentPitShift",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LentPitShift" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::LentPitShift *)new stk::LentPitShift(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__LentPitShift, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_LentPitShift__SWIG_2 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::LentPitShift *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_LentPitShift",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::LentPitShift *)new stk::LentPitShift();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__LentPitShift, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_LentPitShift, _wrap_new_LentPitShift, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_LentPitShift__SWIG_2(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LentPitShift__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LentPitShift__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_LentPitShift, _wrap_delete_LentPitShift, std::string() ) {
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_LentPitShift",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__LentPitShift, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LentPitShift" "', argument " "1"" of type '" "stk::LentPitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::LentPitShift * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( LentPitShift_clear, _wrap_LentPitShift_clear, std::string() ) {
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("LentPitShift_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__LentPitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LentPitShift_clear" "', argument " "1"" of type '" "stk::LentPitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::LentPitShift * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( LentPitShift_setShift, _wrap_LentPitShift_setShift, std::string() ) {
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("LentPitShift_setShift",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__LentPitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LentPitShift_setShift" "', argument " "1"" of type '" "stk::LentPitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::LentPitShift * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LentPitShift_setShift" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setShift(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_LentPitShift_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("LentPitShift_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__LentPitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LentPitShift_tick" "', argument " "1"" of type '" "stk::LentPitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::LentPitShift * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LentPitShift_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_LentPitShift_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("LentPitShift_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__LentPitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LentPitShift_tick" "', argument " "1"" of type '" "stk::LentPitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::LentPitShift * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LentPitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LentPitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LentPitShift_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_LentPitShift_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("LentPitShift_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__LentPitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LentPitShift_tick" "', argument " "1"" of type '" "stk::LentPitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::LentPitShift * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LentPitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LentPitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_LentPitShift_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("LentPitShift_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__LentPitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LentPitShift_tick" "', argument " "1"" of type '" "stk::LentPitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::LentPitShift * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LentPitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LentPitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LentPitShift_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LentPitShift_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LentPitShift_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "LentPitShift_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_LentPitShift_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("LentPitShift_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__LentPitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LentPitShift_tick" "', argument " "1"" of type '" "stk::LentPitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::LentPitShift * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LentPitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LentPitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LentPitShift_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LentPitShift_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LentPitShift_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_LentPitShift_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("LentPitShift_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__LentPitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LentPitShift_tick" "', argument " "1"" of type '" "stk::LentPitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::LentPitShift * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LentPitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LentPitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LentPitShift_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LentPitShift_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( LentPitShift_tick, _wrap_LentPitShift_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__LentPitShift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LentPitShift_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__LentPitShift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LentPitShift_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__LentPitShift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LentPitShift_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__LentPitShift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LentPitShift_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__LentPitShift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LentPitShift_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__LentPitShift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_LentPitShift_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_LentPitShift_members[] = {
{"clear",_wrap_LentPitShift_clear,0,0,0,0},
{"setShift",_wrap_LentPitShift_setShift,0,0,0,0},
{"tick",_wrap_LentPitShift_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_LentPitShift_base_names[] = {"_p_stk__Effect",0};
static const swig_type_info *swig_LentPitShift_base[] = {0,0};
static swig_octave_class _wrap_class_LentPitShift = {"LentPitShift", &SWIGTYPE_p_stk__LentPitShift,0,_wrap_new_LentPitShift,0,_wrap_delete_LentPitShift,swig_LentPitShift_members,swig_LentPitShift_base_names,swig_LentPitShift_base };

SWIG_DEFUN( new_Mandolin, _wrap_new_Mandolin, std::string() ) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Mandolin *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Mandolin",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Mandolin" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::Mandolin *)new stk::Mandolin(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Mandolin, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Mandolin, _wrap_delete_Mandolin, std::string() ) {
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Mandolin",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mandolin, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Mandolin" "', argument " "1"" of type '" "stk::Mandolin *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mandolin * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mandolin_clear, _wrap_Mandolin_clear, std::string() ) {
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mandolin_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mandolin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mandolin_clear" "', argument " "1"" of type '" "stk::Mandolin *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mandolin * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mandolin_setDetune, _wrap_Mandolin_setDetune, std::string() ) {
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mandolin_setDetune",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mandolin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mandolin_setDetune" "', argument " "1"" of type '" "stk::Mandolin *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mandolin * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mandolin_setDetune" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setDetune(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mandolin_setBodySize, _wrap_Mandolin_setBodySize, std::string() ) {
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mandolin_setBodySize",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mandolin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mandolin_setBodySize" "', argument " "1"" of type '" "stk::Mandolin *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mandolin * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mandolin_setBodySize" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setBodySize(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mandolin_setPluckPosition, _wrap_Mandolin_setPluckPosition, std::string() ) {
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mandolin_setPluckPosition",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mandolin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mandolin_setPluckPosition" "', argument " "1"" of type '" "stk::Mandolin *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mandolin * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mandolin_setPluckPosition" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setPluckPosition(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mandolin_setFrequency, _wrap_Mandolin_setFrequency, std::string() ) {
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mandolin_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mandolin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mandolin_setFrequency" "', argument " "1"" of type '" "stk::Mandolin *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mandolin * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mandolin_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Mandolin_pluck__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mandolin_pluck",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mandolin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mandolin_pluck" "', argument " "1"" of type '" "stk::Mandolin *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mandolin * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mandolin_pluck" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->pluck(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Mandolin_pluck__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mandolin_pluck",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mandolin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mandolin_pluck" "', argument " "1"" of type '" "stk::Mandolin *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mandolin * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mandolin_pluck" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mandolin_pluck" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->pluck(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mandolin_pluck, _wrap_Mandolin_pluck, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Mandolin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Mandolin_pluck__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Mandolin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Mandolin_pluck__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Mandolin_noteOn, _wrap_Mandolin_noteOn, std::string() ) {
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mandolin_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mandolin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mandolin_noteOn" "', argument " "1"" of type '" "stk::Mandolin *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mandolin * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mandolin_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mandolin_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mandolin_noteOff, _wrap_Mandolin_noteOff, std::string() ) {
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mandolin_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mandolin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mandolin_noteOff" "', argument " "1"" of type '" "stk::Mandolin *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mandolin * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mandolin_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mandolin_controlChange, _wrap_Mandolin_controlChange, std::string() ) {
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mandolin_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mandolin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mandolin_controlChange" "', argument " "1"" of type '" "stk::Mandolin *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mandolin * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mandolin_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mandolin_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Mandolin_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Mandolin_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mandolin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mandolin_tick" "', argument " "1"" of type '" "stk::Mandolin *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mandolin * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mandolin_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Mandolin_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Mandolin_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mandolin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mandolin_tick" "', argument " "1"" of type '" "stk::Mandolin *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mandolin * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Mandolin_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Mandolin_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mandolin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mandolin_tick" "', argument " "1"" of type '" "stk::Mandolin *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mandolin * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mandolin_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mandolin_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mandolin_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Mandolin_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Mandolin_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mandolin, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mandolin_tick" "', argument " "1"" of type '" "stk::Mandolin *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mandolin * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mandolin_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mandolin_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mandolin_tick, _wrap_Mandolin_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Mandolin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Mandolin_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Mandolin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mandolin_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Mandolin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Mandolin_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Mandolin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Mandolin_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Mandolin_members[] = {
{"clear",_wrap_Mandolin_clear,0,0,0,0},
{"setDetune",_wrap_Mandolin_setDetune,0,0,0,0},
{"setBodySize",_wrap_Mandolin_setBodySize,0,0,0,0},
{"setPluckPosition",_wrap_Mandolin_setPluckPosition,0,0,0,0},
{"setFrequency",_wrap_Mandolin_setFrequency,0,0,0,0},
{"pluck",_wrap_Mandolin_pluck,0,0,0,0},
{"noteOn",_wrap_Mandolin_noteOn,0,0,0,0},
{"noteOff",_wrap_Mandolin_noteOff,0,0,0,0},
{"controlChange",_wrap_Mandolin_controlChange,0,0,0,0},
{"tick",_wrap_Mandolin_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Mandolin_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Mandolin_base[] = {0,0};
static swig_octave_class _wrap_class_Mandolin = {"Mandolin", &SWIGTYPE_p_stk__Mandolin,0,_wrap_new_Mandolin,0,_wrap_delete_Mandolin,swig_Mandolin_members,swig_Mandolin_base_names,swig_Mandolin_base };

SWIG_DEFUN( new_Mesh2D, _wrap_new_Mesh2D, std::string() ) {
  unsigned short arg1 ;
  unsigned short arg2 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Mesh2D *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Mesh2D",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_short(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Mesh2D" "', argument " "1"" of type '" "unsigned short""'");
    } 
    arg1 = static_cast< unsigned short >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_short(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Mesh2D" "', argument " "2"" of type '" "unsigned short""'");
    } 
    arg2 = static_cast< unsigned short >(val2);
    result = (stk::Mesh2D *)new stk::Mesh2D(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Mesh2D, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Mesh2D, _wrap_delete_Mesh2D, std::string() ) {
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Mesh2D",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mesh2D, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Mesh2D" "', argument " "1"" of type '" "stk::Mesh2D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mesh2D * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mesh2D_clear, _wrap_Mesh2D_clear, std::string() ) {
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mesh2D_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mesh2D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh2D_clear" "', argument " "1"" of type '" "stk::Mesh2D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mesh2D * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mesh2D_setNX, _wrap_Mesh2D_setNX, std::string() ) {
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mesh2D_setNX",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mesh2D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh2D_setNX" "', argument " "1"" of type '" "stk::Mesh2D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mesh2D * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_short(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh2D_setNX" "', argument " "2"" of type '" "unsigned short""'");
    } 
    arg2 = static_cast< unsigned short >(val2);
    (arg1)->setNX(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mesh2D_setNY, _wrap_Mesh2D_setNY, std::string() ) {
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mesh2D_setNY",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mesh2D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh2D_setNY" "', argument " "1"" of type '" "stk::Mesh2D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mesh2D * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_short(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh2D_setNY" "', argument " "2"" of type '" "unsigned short""'");
    } 
    arg2 = static_cast< unsigned short >(val2);
    (arg1)->setNY(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mesh2D_setInputPosition, _wrap_Mesh2D_setInputPosition, std::string() ) {
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mesh2D_setInputPosition",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mesh2D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh2D_setInputPosition" "', argument " "1"" of type '" "stk::Mesh2D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mesh2D * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh2D_setInputPosition" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh2D_setInputPosition" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setInputPosition(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mesh2D_setDecay, _wrap_Mesh2D_setDecay, std::string() ) {
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mesh2D_setDecay",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mesh2D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh2D_setDecay" "', argument " "1"" of type '" "stk::Mesh2D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mesh2D * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh2D_setDecay" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setDecay(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mesh2D_noteOn, _wrap_Mesh2D_noteOn, std::string() ) {
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mesh2D_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mesh2D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh2D_noteOn" "', argument " "1"" of type '" "stk::Mesh2D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mesh2D * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh2D_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh2D_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mesh2D_noteOff, _wrap_Mesh2D_noteOff, std::string() ) {
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mesh2D_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mesh2D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh2D_noteOff" "', argument " "1"" of type '" "stk::Mesh2D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mesh2D * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh2D_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mesh2D_energy, _wrap_Mesh2D_energy, std::string() ) {
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Mesh2D_energy",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mesh2D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh2D_energy" "', argument " "1"" of type '" "stk::Mesh2D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mesh2D * >(argp1);
    result = (stk::StkFloat)(arg1)->energy();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mesh2D_inputTick, _wrap_Mesh2D_inputTick, std::string() ) {
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Mesh2D_inputTick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mesh2D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh2D_inputTick" "', argument " "1"" of type '" "stk::Mesh2D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mesh2D * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh2D_inputTick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->inputTick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mesh2D_controlChange, _wrap_Mesh2D_controlChange, std::string() ) {
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mesh2D_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mesh2D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh2D_controlChange" "', argument " "1"" of type '" "stk::Mesh2D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mesh2D * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh2D_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh2D_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Mesh2D_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Mesh2D_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mesh2D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh2D_tick" "', argument " "1"" of type '" "stk::Mesh2D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mesh2D * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh2D_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Mesh2D_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Mesh2D_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mesh2D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh2D_tick" "', argument " "1"" of type '" "stk::Mesh2D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mesh2D * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Mesh2D_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Mesh2D_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mesh2D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh2D_tick" "', argument " "1"" of type '" "stk::Mesh2D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mesh2D * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh2D_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh2D_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh2D_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Mesh2D_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Mesh2D_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mesh2D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh2D_tick" "', argument " "1"" of type '" "stk::Mesh2D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mesh2D * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh2D_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh2D_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mesh2D_tick, _wrap_Mesh2D_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Mesh2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Mesh2D_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Mesh2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mesh2D_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Mesh2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Mesh2D_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Mesh2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Mesh2D_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Mesh2D_members[] = {
{"clear",_wrap_Mesh2D_clear,0,0,0,0},
{"setNX",_wrap_Mesh2D_setNX,0,0,0,0},
{"setNY",_wrap_Mesh2D_setNY,0,0,0,0},
{"setInputPosition",_wrap_Mesh2D_setInputPosition,0,0,0,0},
{"setDecay",_wrap_Mesh2D_setDecay,0,0,0,0},
{"noteOn",_wrap_Mesh2D_noteOn,0,0,0,0},
{"noteOff",_wrap_Mesh2D_noteOff,0,0,0,0},
{"energy",_wrap_Mesh2D_energy,0,0,0,0},
{"inputTick",_wrap_Mesh2D_inputTick,0,0,0,0},
{"controlChange",_wrap_Mesh2D_controlChange,0,0,0,0},
{"tick",_wrap_Mesh2D_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Mesh2D_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Mesh2D_base[] = {0,0};
static swig_octave_class _wrap_class_Mesh2D = {"Mesh2D", &SWIGTYPE_p_stk__Mesh2D,0,_wrap_new_Mesh2D,0,_wrap_delete_Mesh2D,swig_Mesh2D_members,swig_Mesh2D_base_names,swig_Mesh2D_base };

SWIG_DEFUN( new_Messager, _wrap_new_Messager, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Messager *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Messager",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Messager *)new stk::Messager();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Messager, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Messager, _wrap_delete_Messager, std::string() ) {
  stk::Messager *arg1 = (stk::Messager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Messager",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Messager, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Messager" "', argument " "1"" of type '" "stk::Messager *""'"); 
    }
    arg1 = reinterpret_cast< stk::Messager * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Messager_popMessage, _wrap_Messager_popMessage, std::string() ) {
  stk::Messager *arg1 = (stk::Messager *) 0 ;
  Skini::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Messager_popMessage",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Messager, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Messager_popMessage" "', argument " "1"" of type '" "stk::Messager *""'"); 
    }
    arg1 = reinterpret_cast< stk::Messager * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_Skini__Message,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Messager_popMessage" "', argument " "2"" of type '" "Skini::Message &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Messager_popMessage" "', argument " "2"" of type '" "Skini::Message &""'"); 
    }
    arg2 = reinterpret_cast< Skini::Message * >(argp2);
    (arg1)->popMessage(*arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Messager_pushMessage, _wrap_Messager_pushMessage, std::string() ) {
  stk::Messager *arg1 = (stk::Messager *) 0 ;
  Skini::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Messager_pushMessage",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Messager, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Messager_pushMessage" "', argument " "1"" of type '" "stk::Messager *""'"); 
    }
    arg1 = reinterpret_cast< stk::Messager * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_Skini__Message,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Messager_pushMessage" "', argument " "2"" of type '" "Skini::Message &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Messager_pushMessage" "', argument " "2"" of type '" "Skini::Message &""'"); 
    }
    arg2 = reinterpret_cast< Skini::Message * >(argp2);
    (arg1)->pushMessage(*arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Messager_setScoreFile, _wrap_Messager_setScoreFile, std::string() ) {
  stk::Messager *arg1 = (stk::Messager *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  try {
    if (!SWIG_check_num_args("Messager_setScoreFile",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Messager, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Messager_setScoreFile" "', argument " "1"" of type '" "stk::Messager *""'"); 
    }
    arg1 = reinterpret_cast< stk::Messager * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Messager_setScoreFile" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    result = (bool)(arg1)->setScoreFile((char const *)arg2);
    _outv = SWIG_From_bool(static_cast< bool >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return _out;
  fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return octave_value_list();
  }
  catch(...) {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    throw;
  }
}


static swig_octave_member swig_Messager_members[] = {
{"popMessage",_wrap_Messager_popMessage,0,0,0,0},
{"pushMessage",_wrap_Messager_pushMessage,0,0,0,0},
{"setScoreFile",_wrap_Messager_setScoreFile,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Messager_base_names[] = {0};
static const swig_type_info *swig_Messager_base[] = {0};
static swig_octave_class _wrap_class_Messager = {"Messager", &SWIGTYPE_p_stk__Messager,0,_wrap_new_Messager,0,_wrap_delete_Messager,swig_Messager_members,swig_Messager_base_names,swig_Messager_base };

SWIG_DEFUN( new_MidiFileIn, _wrap_new_MidiFileIn, std::string() ) {
  std::string arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::MidiFileIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_MidiFileIn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MidiFileIn" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MidiFileIn" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    result = (stk::MidiFileIn *)new stk::MidiFileIn(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__MidiFileIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_MidiFileIn, _wrap_delete_MidiFileIn, std::string() ) {
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_MidiFileIn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__MidiFileIn, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MidiFileIn" "', argument " "1"" of type '" "stk::MidiFileIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::MidiFileIn * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( MidiFileIn_getFileFormat, _wrap_MidiFileIn_getFileFormat, std::string() ) {
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("MidiFileIn_getFileFormat",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__MidiFileIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidiFileIn_getFileFormat" "', argument " "1"" of type '" "stk::MidiFileIn const *""'"); 
    }
    arg1 = reinterpret_cast< stk::MidiFileIn * >(argp1);
    result = (int)((stk::MidiFileIn const *)arg1)->getFileFormat();
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( MidiFileIn_getNumberOfTracks, _wrap_MidiFileIn_getNumberOfTracks, std::string() ) {
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned int result;
  
  try {
    if (!SWIG_check_num_args("MidiFileIn_getNumberOfTracks",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__MidiFileIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidiFileIn_getNumberOfTracks" "', argument " "1"" of type '" "stk::MidiFileIn const *""'"); 
    }
    arg1 = reinterpret_cast< stk::MidiFileIn * >(argp1);
    result = (unsigned int)((stk::MidiFileIn const *)arg1)->getNumberOfTracks();
    _outv = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( MidiFileIn_getDivision, _wrap_MidiFileIn_getDivision, std::string() ) {
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("MidiFileIn_getDivision",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__MidiFileIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidiFileIn_getDivision" "', argument " "1"" of type '" "stk::MidiFileIn const *""'"); 
    }
    arg1 = reinterpret_cast< stk::MidiFileIn * >(argp1);
    result = (int)((stk::MidiFileIn const *)arg1)->getDivision();
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_MidiFileIn_rewindTrack__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("MidiFileIn_rewindTrack",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__MidiFileIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidiFileIn_rewindTrack" "', argument " "1"" of type '" "stk::MidiFileIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::MidiFileIn * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidiFileIn_rewindTrack" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    (arg1)->rewindTrack(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_MidiFileIn_rewindTrack__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("MidiFileIn_rewindTrack",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__MidiFileIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidiFileIn_rewindTrack" "', argument " "1"" of type '" "stk::MidiFileIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::MidiFileIn * >(argp1);
    (arg1)->rewindTrack();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( MidiFileIn_rewindTrack, _wrap_MidiFileIn_rewindTrack, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__MidiFileIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MidiFileIn_rewindTrack__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__MidiFileIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MidiFileIn_rewindTrack__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_MidiFileIn_getTickSeconds__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  try {
    if (!SWIG_check_num_args("MidiFileIn_getTickSeconds",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__MidiFileIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidiFileIn_getTickSeconds" "', argument " "1"" of type '" "stk::MidiFileIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::MidiFileIn * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidiFileIn_getTickSeconds" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (double)(arg1)->getTickSeconds(arg2);
    _outv = SWIG_From_double(static_cast< double >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_MidiFileIn_getTickSeconds__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  double result;
  
  try {
    if (!SWIG_check_num_args("MidiFileIn_getTickSeconds",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__MidiFileIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidiFileIn_getTickSeconds" "', argument " "1"" of type '" "stk::MidiFileIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::MidiFileIn * >(argp1);
    result = (double)(arg1)->getTickSeconds();
    _outv = SWIG_From_double(static_cast< double >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( MidiFileIn_getTickSeconds, _wrap_MidiFileIn_getTickSeconds, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__MidiFileIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MidiFileIn_getTickSeconds__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__MidiFileIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MidiFileIn_getTickSeconds__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_MidiFileIn_getNextEvent__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  std::vector< unsigned char,std::allocator< unsigned char > > *arg2 = (std::vector< unsigned char,std::allocator< unsigned char > > *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned long result;
  
  try {
    if (!SWIG_check_num_args("MidiFileIn_getNextEvent",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__MidiFileIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidiFileIn_getNextEvent" "', argument " "1"" of type '" "stk::MidiFileIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::MidiFileIn * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MidiFileIn_getNextEvent" "', argument " "2"" of type '" "std::vector< unsigned char,std::allocator< unsigned char > > *""'"); 
    }
    arg2 = reinterpret_cast< std::vector< unsigned char,std::allocator< unsigned char > > * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MidiFileIn_getNextEvent" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (unsigned long)(arg1)->getNextEvent(arg2,arg3);
    _outv = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_MidiFileIn_getNextEvent__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  std::vector< unsigned char,std::allocator< unsigned char > > *arg2 = (std::vector< unsigned char,std::allocator< unsigned char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned long result;
  
  try {
    if (!SWIG_check_num_args("MidiFileIn_getNextEvent",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__MidiFileIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidiFileIn_getNextEvent" "', argument " "1"" of type '" "stk::MidiFileIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::MidiFileIn * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MidiFileIn_getNextEvent" "', argument " "2"" of type '" "std::vector< unsigned char,std::allocator< unsigned char > > *""'"); 
    }
    arg2 = reinterpret_cast< std::vector< unsigned char,std::allocator< unsigned char > > * >(argp2);
    result = (unsigned long)(arg1)->getNextEvent(arg2);
    _outv = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( MidiFileIn_getNextEvent, _wrap_MidiFileIn_getNextEvent, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__MidiFileIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MidiFileIn_getNextEvent__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__MidiFileIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MidiFileIn_getNextEvent__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_MidiFileIn_getNextMidiEvent__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  std::vector< unsigned char,std::allocator< unsigned char > > *arg2 = (std::vector< unsigned char,std::allocator< unsigned char > > *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned long result;
  
  try {
    if (!SWIG_check_num_args("MidiFileIn_getNextMidiEvent",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__MidiFileIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidiFileIn_getNextMidiEvent" "', argument " "1"" of type '" "stk::MidiFileIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::MidiFileIn * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MidiFileIn_getNextMidiEvent" "', argument " "2"" of type '" "std::vector< unsigned char,std::allocator< unsigned char > > *""'"); 
    }
    arg2 = reinterpret_cast< std::vector< unsigned char,std::allocator< unsigned char > > * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MidiFileIn_getNextMidiEvent" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (unsigned long)(arg1)->getNextMidiEvent(arg2,arg3);
    _outv = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_MidiFileIn_getNextMidiEvent__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  std::vector< unsigned char,std::allocator< unsigned char > > *arg2 = (std::vector< unsigned char,std::allocator< unsigned char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned long result;
  
  try {
    if (!SWIG_check_num_args("MidiFileIn_getNextMidiEvent",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__MidiFileIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidiFileIn_getNextMidiEvent" "', argument " "1"" of type '" "stk::MidiFileIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::MidiFileIn * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MidiFileIn_getNextMidiEvent" "', argument " "2"" of type '" "std::vector< unsigned char,std::allocator< unsigned char > > *""'"); 
    }
    arg2 = reinterpret_cast< std::vector< unsigned char,std::allocator< unsigned char > > * >(argp2);
    result = (unsigned long)(arg1)->getNextMidiEvent(arg2);
    _outv = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( MidiFileIn_getNextMidiEvent, _wrap_MidiFileIn_getNextMidiEvent, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__MidiFileIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MidiFileIn_getNextMidiEvent__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__MidiFileIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MidiFileIn_getNextMidiEvent__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_MidiFileIn_members[] = {
{"getFileFormat",_wrap_MidiFileIn_getFileFormat,0,0,0,0},
{"getNumberOfTracks",_wrap_MidiFileIn_getNumberOfTracks,0,0,0,0},
{"getDivision",_wrap_MidiFileIn_getDivision,0,0,0,0},
{"rewindTrack",_wrap_MidiFileIn_rewindTrack,0,0,0,0},
{"getTickSeconds",_wrap_MidiFileIn_getTickSeconds,0,0,0,0},
{"getNextEvent",_wrap_MidiFileIn_getNextEvent,0,0,0,0},
{"getNextMidiEvent",_wrap_MidiFileIn_getNextMidiEvent,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_MidiFileIn_base_names[] = {0};
static const swig_type_info *swig_MidiFileIn_base[] = {0};
static swig_octave_class _wrap_class_MidiFileIn = {"MidiFileIn", &SWIGTYPE_p_stk__MidiFileIn,0,_wrap_new_MidiFileIn,0,_wrap_delete_MidiFileIn,swig_MidiFileIn_members,swig_MidiFileIn_base_names,swig_MidiFileIn_base };

SWIG_DEFUN( delete_Modal, _wrap_delete_Modal, std::string() ) {
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Modal",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modal, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Modal" "', argument " "1"" of type '" "stk::Modal *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modal * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modal_clear, _wrap_Modal_clear, std::string() ) {
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Modal_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modal_clear" "', argument " "1"" of type '" "stk::Modal *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modal * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modal_setFrequency, _wrap_Modal_setFrequency, std::string() ) {
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Modal_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modal_setFrequency" "', argument " "1"" of type '" "stk::Modal *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modal * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modal_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modal_setRatioAndRadius, _wrap_Modal_setRatioAndRadius, std::string() ) {
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Modal_setRatioAndRadius",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modal_setRatioAndRadius" "', argument " "1"" of type '" "stk::Modal *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modal * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modal_setRatioAndRadius" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Modal_setRatioAndRadius" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Modal_setRatioAndRadius" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    (arg1)->setRatioAndRadius(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modal_setMasterGain, _wrap_Modal_setMasterGain, std::string() ) {
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Modal_setMasterGain",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modal_setMasterGain" "', argument " "1"" of type '" "stk::Modal *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modal * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modal_setMasterGain" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setMasterGain(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modal_setDirectGain, _wrap_Modal_setDirectGain, std::string() ) {
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Modal_setDirectGain",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modal_setDirectGain" "', argument " "1"" of type '" "stk::Modal *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modal * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modal_setDirectGain" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setDirectGain(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modal_setModeGain, _wrap_Modal_setModeGain, std::string() ) {
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Modal_setModeGain",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modal_setModeGain" "', argument " "1"" of type '" "stk::Modal *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modal * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modal_setModeGain" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Modal_setModeGain" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setModeGain(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modal_strike, _wrap_Modal_strike, std::string() ) {
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Modal_strike",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modal_strike" "', argument " "1"" of type '" "stk::Modal *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modal * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modal_strike" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->strike(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modal_damp, _wrap_Modal_damp, std::string() ) {
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Modal_damp",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modal_damp" "', argument " "1"" of type '" "stk::Modal *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modal * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modal_damp" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->damp(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modal_noteOn, _wrap_Modal_noteOn, std::string() ) {
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Modal_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modal_noteOn" "', argument " "1"" of type '" "stk::Modal *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modal * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modal_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Modal_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modal_noteOff, _wrap_Modal_noteOff, std::string() ) {
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Modal_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modal_noteOff" "', argument " "1"" of type '" "stk::Modal *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modal * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modal_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modal_controlChange, _wrap_Modal_controlChange, std::string() ) {
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Modal_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modal_controlChange" "', argument " "1"" of type '" "stk::Modal *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modal * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modal_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Modal_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Modal_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Modal_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modal_tick" "', argument " "1"" of type '" "stk::Modal *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modal * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modal_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Modal_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Modal_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modal_tick" "', argument " "1"" of type '" "stk::Modal *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modal * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Modal_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Modal_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modal_tick" "', argument " "1"" of type '" "stk::Modal *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modal * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Modal_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Modal_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Modal_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Modal_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Modal_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modal_tick" "', argument " "1"" of type '" "stk::Modal *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modal * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Modal_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Modal_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modal_tick, _wrap_Modal_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Modal, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Modal_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Modal, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Modal_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Modal, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Modal_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Modal, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Modal_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Modal_members[] = {
{"clear",_wrap_Modal_clear,0,0,0,0},
{"setFrequency",_wrap_Modal_setFrequency,0,0,0,0},
{"setRatioAndRadius",_wrap_Modal_setRatioAndRadius,0,0,0,0},
{"setMasterGain",_wrap_Modal_setMasterGain,0,0,0,0},
{"setDirectGain",_wrap_Modal_setDirectGain,0,0,0,0},
{"setModeGain",_wrap_Modal_setModeGain,0,0,0,0},
{"strike",_wrap_Modal_strike,0,0,0,0},
{"damp",_wrap_Modal_damp,0,0,0,0},
{"noteOn",_wrap_Modal_noteOn,0,0,0,0},
{"noteOff",_wrap_Modal_noteOff,0,0,0,0},
{"controlChange",_wrap_Modal_controlChange,0,0,0,0},
{"tick",_wrap_Modal_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Modal_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Modal_base[] = {0,0};
static swig_octave_class _wrap_class_Modal = {"Modal", &SWIGTYPE_p_stk__Modal,0,0,0,_wrap_delete_Modal,swig_Modal_members,swig_Modal_base_names,swig_Modal_base };

SWIG_DEFUN( new_ModalBar, _wrap_new_ModalBar, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::ModalBar *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_ModalBar",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::ModalBar *)new stk::ModalBar();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__ModalBar, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_ModalBar, _wrap_delete_ModalBar, std::string() ) {
  stk::ModalBar *arg1 = (stk::ModalBar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_ModalBar",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ModalBar, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ModalBar" "', argument " "1"" of type '" "stk::ModalBar *""'"); 
    }
    arg1 = reinterpret_cast< stk::ModalBar * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ModalBar_setStickHardness, _wrap_ModalBar_setStickHardness, std::string() ) {
  stk::ModalBar *arg1 = (stk::ModalBar *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ModalBar_setStickHardness",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ModalBar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModalBar_setStickHardness" "', argument " "1"" of type '" "stk::ModalBar *""'"); 
    }
    arg1 = reinterpret_cast< stk::ModalBar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModalBar_setStickHardness" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setStickHardness(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ModalBar_setStrikePosition, _wrap_ModalBar_setStrikePosition, std::string() ) {
  stk::ModalBar *arg1 = (stk::ModalBar *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ModalBar_setStrikePosition",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ModalBar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModalBar_setStrikePosition" "', argument " "1"" of type '" "stk::ModalBar *""'"); 
    }
    arg1 = reinterpret_cast< stk::ModalBar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModalBar_setStrikePosition" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setStrikePosition(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ModalBar_setPreset, _wrap_ModalBar_setPreset, std::string() ) {
  stk::ModalBar *arg1 = (stk::ModalBar *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ModalBar_setPreset",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ModalBar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModalBar_setPreset" "', argument " "1"" of type '" "stk::ModalBar *""'"); 
    }
    arg1 = reinterpret_cast< stk::ModalBar * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModalBar_setPreset" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    (arg1)->setPreset(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ModalBar_setModulationDepth, _wrap_ModalBar_setModulationDepth, std::string() ) {
  stk::ModalBar *arg1 = (stk::ModalBar *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ModalBar_setModulationDepth",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ModalBar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModalBar_setModulationDepth" "', argument " "1"" of type '" "stk::ModalBar *""'"); 
    }
    arg1 = reinterpret_cast< stk::ModalBar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModalBar_setModulationDepth" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setModulationDepth(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ModalBar_controlChange, _wrap_ModalBar_controlChange, std::string() ) {
  stk::ModalBar *arg1 = (stk::ModalBar *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ModalBar_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ModalBar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModalBar_controlChange" "', argument " "1"" of type '" "stk::ModalBar *""'"); 
    }
    arg1 = reinterpret_cast< stk::ModalBar * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModalBar_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ModalBar_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_ModalBar_members[] = {
{"setStickHardness",_wrap_ModalBar_setStickHardness,0,0,0,0},
{"setStrikePosition",_wrap_ModalBar_setStrikePosition,0,0,0,0},
{"setPreset",_wrap_ModalBar_setPreset,0,0,0,0},
{"setModulationDepth",_wrap_ModalBar_setModulationDepth,0,0,0,0},
{"controlChange",_wrap_ModalBar_controlChange,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_ModalBar_base_names[] = {"_p_stk__Modal",0};
static const swig_type_info *swig_ModalBar_base[] = {0,0};
static swig_octave_class _wrap_class_ModalBar = {"ModalBar", &SWIGTYPE_p_stk__ModalBar,0,_wrap_new_ModalBar,0,_wrap_delete_ModalBar,swig_ModalBar_members,swig_ModalBar_base_names,swig_ModalBar_base };

SWIG_DEFUN( new_Modulate, _wrap_new_Modulate, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Modulate *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Modulate",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Modulate *)new stk::Modulate();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Modulate, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Modulate, _wrap_delete_Modulate, std::string() ) {
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Modulate",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modulate, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Modulate" "', argument " "1"" of type '" "stk::Modulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modulate * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modulate_reset, _wrap_Modulate_reset, std::string() ) {
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Modulate_reset",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modulate_reset" "', argument " "1"" of type '" "stk::Modulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modulate * >(argp1);
    (arg1)->reset();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modulate_setVibratoRate, _wrap_Modulate_setVibratoRate, std::string() ) {
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Modulate_setVibratoRate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modulate_setVibratoRate" "', argument " "1"" of type '" "stk::Modulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modulate * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modulate_setVibratoRate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setVibratoRate(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modulate_setVibratoGain, _wrap_Modulate_setVibratoGain, std::string() ) {
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Modulate_setVibratoGain",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modulate_setVibratoGain" "', argument " "1"" of type '" "stk::Modulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modulate * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modulate_setVibratoGain" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setVibratoGain(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modulate_setRandomRate, _wrap_Modulate_setRandomRate, std::string() ) {
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Modulate_setRandomRate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modulate_setRandomRate" "', argument " "1"" of type '" "stk::Modulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modulate * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modulate_setRandomRate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setRandomRate(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modulate_setRandomGain, _wrap_Modulate_setRandomGain, std::string() ) {
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Modulate_setRandomGain",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modulate_setRandomGain" "', argument " "1"" of type '" "stk::Modulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modulate * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modulate_setRandomGain" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setRandomGain(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modulate_lastOut, _wrap_Modulate_lastOut, std::string() ) {
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Modulate_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modulate_lastOut" "', argument " "1"" of type '" "stk::Modulate const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modulate * >(argp1);
    result = (stk::StkFloat)((stk::Modulate const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Modulate_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Modulate_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modulate_tick" "', argument " "1"" of type '" "stk::Modulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modulate * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Modulate_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Modulate_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modulate_tick" "', argument " "1"" of type '" "stk::Modulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modulate * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Modulate_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Modulate_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Modulate_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Modulate_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Modulate_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Modulate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modulate_tick" "', argument " "1"" of type '" "stk::Modulate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Modulate * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Modulate_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Modulate_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Modulate_tick, _wrap_Modulate_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Modulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Modulate_tick__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Modulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Modulate_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Modulate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Modulate_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Modulate_members[] = {
{"reset",_wrap_Modulate_reset,0,0,0,0},
{"setVibratoRate",_wrap_Modulate_setVibratoRate,0,0,0,0},
{"setVibratoGain",_wrap_Modulate_setVibratoGain,0,0,0,0},
{"setRandomRate",_wrap_Modulate_setRandomRate,0,0,0,0},
{"setRandomGain",_wrap_Modulate_setRandomGain,0,0,0,0},
{"lastOut",_wrap_Modulate_lastOut,0,0,0,0},
{"tick",_wrap_Modulate_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Modulate_base_names[] = {"_p_stk__Generator",0};
static const swig_type_info *swig_Modulate_base[] = {0,0};
static swig_octave_class _wrap_class_Modulate = {"Modulate", &SWIGTYPE_p_stk__Modulate,0,_wrap_new_Modulate,0,_wrap_delete_Modulate,swig_Modulate_members,swig_Modulate_base_names,swig_Modulate_base };

SWIG_DEFUN( new_Moog, _wrap_new_Moog, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Moog *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Moog",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Moog *)new stk::Moog();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Moog, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Moog, _wrap_delete_Moog, std::string() ) {
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Moog",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Moog, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Moog" "', argument " "1"" of type '" "stk::Moog *""'"); 
    }
    arg1 = reinterpret_cast< stk::Moog * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Moog_setFrequency, _wrap_Moog_setFrequency, std::string() ) {
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Moog_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Moog, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Moog_setFrequency" "', argument " "1"" of type '" "stk::Moog *""'"); 
    }
    arg1 = reinterpret_cast< stk::Moog * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Moog_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Moog_noteOn, _wrap_Moog_noteOn, std::string() ) {
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Moog_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Moog, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Moog_noteOn" "', argument " "1"" of type '" "stk::Moog *""'"); 
    }
    arg1 = reinterpret_cast< stk::Moog * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Moog_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Moog_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Moog_setModulationSpeed, _wrap_Moog_setModulationSpeed, std::string() ) {
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Moog_setModulationSpeed",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Moog, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Moog_setModulationSpeed" "', argument " "1"" of type '" "stk::Moog *""'"); 
    }
    arg1 = reinterpret_cast< stk::Moog * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Moog_setModulationSpeed" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setModulationSpeed(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Moog_setModulationDepth, _wrap_Moog_setModulationDepth, std::string() ) {
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Moog_setModulationDepth",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Moog, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Moog_setModulationDepth" "', argument " "1"" of type '" "stk::Moog *""'"); 
    }
    arg1 = reinterpret_cast< stk::Moog * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Moog_setModulationDepth" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setModulationDepth(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Moog_controlChange, _wrap_Moog_controlChange, std::string() ) {
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Moog_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Moog, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Moog_controlChange" "', argument " "1"" of type '" "stk::Moog *""'"); 
    }
    arg1 = reinterpret_cast< stk::Moog * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Moog_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Moog_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Moog_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Moog_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Moog, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Moog_tick" "', argument " "1"" of type '" "stk::Moog *""'"); 
    }
    arg1 = reinterpret_cast< stk::Moog * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Moog_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Moog_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Moog_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Moog, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Moog_tick" "', argument " "1"" of type '" "stk::Moog *""'"); 
    }
    arg1 = reinterpret_cast< stk::Moog * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Moog_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Moog_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Moog, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Moog_tick" "', argument " "1"" of type '" "stk::Moog *""'"); 
    }
    arg1 = reinterpret_cast< stk::Moog * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Moog_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Moog_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Moog_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Moog_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Moog_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Moog, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Moog_tick" "', argument " "1"" of type '" "stk::Moog *""'"); 
    }
    arg1 = reinterpret_cast< stk::Moog * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Moog_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Moog_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Moog_tick, _wrap_Moog_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Moog, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Moog_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Moog, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Moog_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Moog, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Moog_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Moog, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Moog_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Moog_members[] = {
{"setFrequency",_wrap_Moog_setFrequency,0,0,0,0},
{"noteOn",_wrap_Moog_noteOn,0,0,0,0},
{"setModulationSpeed",_wrap_Moog_setModulationSpeed,0,0,0,0},
{"setModulationDepth",_wrap_Moog_setModulationDepth,0,0,0,0},
{"controlChange",_wrap_Moog_controlChange,0,0,0,0},
{"tick",_wrap_Moog_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Moog_base_names[] = {0};
static const swig_type_info *swig_Moog_base[] = {0};
static swig_octave_class _wrap_class_Moog = {"Moog", &SWIGTYPE_p_stk__Moog,0,_wrap_new_Moog,0,_wrap_delete_Moog,swig_Moog_members,swig_Moog_base_names,swig_Moog_base };

static octave_value_list _wrap_new_NRev__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::NRev *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_NRev",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NRev" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::NRev *)new stk::NRev(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__NRev, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_NRev__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::NRev *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_NRev",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::NRev *)new stk::NRev();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__NRev, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_NRev, _wrap_new_NRev, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_NRev__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_NRev__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( NRev_clear, _wrap_NRev_clear, std::string() ) {
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("NRev_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__NRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NRev_clear" "', argument " "1"" of type '" "stk::NRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::NRev * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( NRev_setT60, _wrap_NRev_setT60, std::string() ) {
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("NRev_setT60",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__NRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NRev_setT60" "', argument " "1"" of type '" "stk::NRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::NRev * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NRev_setT60" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setT60(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_NRev_lastOut__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("NRev_lastOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__NRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NRev_lastOut" "', argument " "1"" of type '" "stk::NRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::NRev * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NRev_lastOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->lastOut(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_NRev_lastOut__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("NRev_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__NRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NRev_lastOut" "', argument " "1"" of type '" "stk::NRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::NRev * >(argp1);
    result = (stk::StkFloat)(arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( NRev_lastOut, _wrap_NRev_lastOut, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__NRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NRev_lastOut__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__NRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NRev_lastOut__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_NRev_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFloat arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("NRev_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__NRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NRev_tick" "', argument " "1"" of type '" "stk::NRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::NRev * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NRev_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NRev_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFloat)(arg1)->tick(arg2,arg3);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_NRev_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("NRev_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__NRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NRev_tick" "', argument " "1"" of type '" "stk::NRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::NRev * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NRev_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_NRev_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("NRev_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__NRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NRev_tick" "', argument " "1"" of type '" "stk::NRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::NRev * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NRev_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_NRev_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("NRev_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__NRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NRev_tick" "', argument " "1"" of type '" "stk::NRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::NRev * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_NRev_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("NRev_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__NRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NRev_tick" "', argument " "1"" of type '" "stk::NRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::NRev * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NRev_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NRev_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_NRev_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("NRev_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__NRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NRev_tick" "', argument " "1"" of type '" "stk::NRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::NRev * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NRev_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_NRev_tick__SWIG_6 (const octave_value_list& args, int nargout) {
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("NRev_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__NRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NRev_tick" "', argument " "1"" of type '" "stk::NRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::NRev * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( NRev_tick, _wrap_NRev_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__NRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NRev_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__NRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NRev_tick__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__NRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NRev_tick__SWIG_6(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__NRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NRev_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__NRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NRev_tick__SWIG_0(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__NRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_NRev_tick__SWIG_5(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__NRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_NRev_tick__SWIG_4(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_NRev, _wrap_delete_NRev, std::string() ) {
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_NRev",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__NRev, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NRev" "', argument " "1"" of type '" "stk::NRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::NRev * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_NRev_members[] = {
{"clear",_wrap_NRev_clear,0,0,0,0},
{"setT60",_wrap_NRev_setT60,0,0,0,0},
{"lastOut",_wrap_NRev_lastOut,0,0,0,0},
{"tick",_wrap_NRev_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_NRev_base_names[] = {"_p_stk__Effect",0};
static const swig_type_info *swig_NRev_base[] = {0,0};
static swig_octave_class _wrap_class_NRev = {"NRev", &SWIGTYPE_p_stk__NRev,0,_wrap_new_NRev,0,_wrap_delete_NRev,swig_NRev_members,swig_NRev_base_names,swig_NRev_base };

static octave_value_list _wrap_new_Noise__SWIG_0 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Noise *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Noise",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Noise" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    result = (stk::Noise *)new stk::Noise(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Noise, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Noise__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Noise *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Noise",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Noise *)new stk::Noise();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Noise, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Noise, _wrap_new_Noise, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_Noise__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Noise__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Noise_setSeed__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Noise *arg1 = (stk::Noise *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Noise_setSeed",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Noise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Noise_setSeed" "', argument " "1"" of type '" "stk::Noise *""'"); 
    }
    arg1 = reinterpret_cast< stk::Noise * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Noise_setSeed" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    (arg1)->setSeed(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Noise_setSeed__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Noise *arg1 = (stk::Noise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Noise_setSeed",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Noise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Noise_setSeed" "', argument " "1"" of type '" "stk::Noise *""'"); 
    }
    arg1 = reinterpret_cast< stk::Noise * >(argp1);
    (arg1)->setSeed();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Noise_setSeed, _wrap_Noise_setSeed, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Noise, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Noise_setSeed__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Noise, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Noise_setSeed__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Noise_lastOut, _wrap_Noise_lastOut, std::string() ) {
  stk::Noise *arg1 = (stk::Noise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Noise_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Noise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Noise_lastOut" "', argument " "1"" of type '" "stk::Noise const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Noise * >(argp1);
    result = (stk::StkFloat)((stk::Noise const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Noise_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Noise *arg1 = (stk::Noise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Noise_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Noise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Noise_tick" "', argument " "1"" of type '" "stk::Noise *""'"); 
    }
    arg1 = reinterpret_cast< stk::Noise * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Noise_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Noise *arg1 = (stk::Noise *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Noise_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Noise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Noise_tick" "', argument " "1"" of type '" "stk::Noise *""'"); 
    }
    arg1 = reinterpret_cast< stk::Noise * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Noise_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Noise_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Noise_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Noise_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Noise *arg1 = (stk::Noise *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Noise_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Noise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Noise_tick" "', argument " "1"" of type '" "stk::Noise *""'"); 
    }
    arg1 = reinterpret_cast< stk::Noise * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Noise_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Noise_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Noise_tick, _wrap_Noise_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Noise, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Noise_tick__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Noise, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Noise_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Noise, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Noise_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Noise, _wrap_delete_Noise, std::string() ) {
  stk::Noise *arg1 = (stk::Noise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Noise",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Noise, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Noise" "', argument " "1"" of type '" "stk::Noise *""'"); 
    }
    arg1 = reinterpret_cast< stk::Noise * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Noise_members[] = {
{"setSeed",_wrap_Noise_setSeed,0,0,0,0},
{"lastOut",_wrap_Noise_lastOut,0,0,0,0},
{"tick",_wrap_Noise_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Noise_base_names[] = {"_p_stk__Generator",0};
static const swig_type_info *swig_Noise_base[] = {0,0};
static swig_octave_class _wrap_class_Noise = {"Noise", &SWIGTYPE_p_stk__Noise,0,_wrap_new_Noise,0,_wrap_delete_Noise,swig_Noise_members,swig_Noise_base_names,swig_Noise_base };

static octave_value_list _wrap_new_OnePole__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::OnePole *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_OnePole",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_OnePole" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::OnePole *)new stk::OnePole(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__OnePole, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_OnePole__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::OnePole *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_OnePole",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::OnePole *)new stk::OnePole();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__OnePole, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_OnePole, _wrap_new_OnePole, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_OnePole__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_OnePole__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_OnePole, _wrap_delete_OnePole, std::string() ) {
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_OnePole",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OnePole, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OnePole" "', argument " "1"" of type '" "stk::OnePole *""'"); 
    }
    arg1 = reinterpret_cast< stk::OnePole * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( OnePole_setB0, _wrap_OnePole_setB0, std::string() ) {
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("OnePole_setB0",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OnePole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OnePole_setB0" "', argument " "1"" of type '" "stk::OnePole *""'"); 
    }
    arg1 = reinterpret_cast< stk::OnePole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OnePole_setB0" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setB0(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( OnePole_setA1, _wrap_OnePole_setA1, std::string() ) {
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("OnePole_setA1",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OnePole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OnePole_setA1" "', argument " "1"" of type '" "stk::OnePole *""'"); 
    }
    arg1 = reinterpret_cast< stk::OnePole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OnePole_setA1" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setA1(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_OnePole_setCoefficients__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("OnePole_setCoefficients",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OnePole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OnePole_setCoefficients" "', argument " "1"" of type '" "stk::OnePole *""'"); 
    }
    arg1 = reinterpret_cast< stk::OnePole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OnePole_setCoefficients" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OnePole_setCoefficients" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_bool(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OnePole_setCoefficients" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
    (arg1)->setCoefficients(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_OnePole_setCoefficients__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("OnePole_setCoefficients",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OnePole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OnePole_setCoefficients" "', argument " "1"" of type '" "stk::OnePole *""'"); 
    }
    arg1 = reinterpret_cast< stk::OnePole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OnePole_setCoefficients" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OnePole_setCoefficients" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setCoefficients(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( OnePole_setCoefficients, _wrap_OnePole_setCoefficients, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__OnePole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_OnePole_setCoefficients__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__OnePole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_OnePole_setCoefficients__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( OnePole_setPole, _wrap_OnePole_setPole, std::string() ) {
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("OnePole_setPole",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OnePole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OnePole_setPole" "', argument " "1"" of type '" "stk::OnePole *""'"); 
    }
    arg1 = reinterpret_cast< stk::OnePole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OnePole_setPole" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setPole(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( OnePole_lastOut, _wrap_OnePole_lastOut, std::string() ) {
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("OnePole_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OnePole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OnePole_lastOut" "', argument " "1"" of type '" "stk::OnePole const *""'"); 
    }
    arg1 = reinterpret_cast< stk::OnePole * >(argp1);
    result = (stk::StkFloat)((stk::OnePole const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_OnePole_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("OnePole_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OnePole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OnePole_tick" "', argument " "1"" of type '" "stk::OnePole *""'"); 
    }
    arg1 = reinterpret_cast< stk::OnePole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OnePole_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_OnePole_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("OnePole_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OnePole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OnePole_tick" "', argument " "1"" of type '" "stk::OnePole *""'"); 
    }
    arg1 = reinterpret_cast< stk::OnePole * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OnePole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OnePole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OnePole_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_OnePole_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("OnePole_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OnePole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OnePole_tick" "', argument " "1"" of type '" "stk::OnePole *""'"); 
    }
    arg1 = reinterpret_cast< stk::OnePole * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OnePole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OnePole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_OnePole_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("OnePole_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OnePole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OnePole_tick" "', argument " "1"" of type '" "stk::OnePole *""'"); 
    }
    arg1 = reinterpret_cast< stk::OnePole * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OnePole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OnePole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OnePole_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OnePole_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OnePole_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "OnePole_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_OnePole_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("OnePole_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OnePole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OnePole_tick" "', argument " "1"" of type '" "stk::OnePole *""'"); 
    }
    arg1 = reinterpret_cast< stk::OnePole * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OnePole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OnePole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OnePole_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OnePole_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OnePole_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_OnePole_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("OnePole_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OnePole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OnePole_tick" "', argument " "1"" of type '" "stk::OnePole *""'"); 
    }
    arg1 = reinterpret_cast< stk::OnePole * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OnePole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OnePole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OnePole_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OnePole_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( OnePole_tick, _wrap_OnePole_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__OnePole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OnePole_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__OnePole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OnePole_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__OnePole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OnePole_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__OnePole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_OnePole_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__OnePole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_OnePole_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__OnePole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_OnePole_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_OnePole_members[] = {
{"setB0",_wrap_OnePole_setB0,0,0,0,0},
{"setA1",_wrap_OnePole_setA1,0,0,0,0},
{"setCoefficients",_wrap_OnePole_setCoefficients,0,0,0,0},
{"setPole",_wrap_OnePole_setPole,0,0,0,0},
{"lastOut",_wrap_OnePole_lastOut,0,0,0,0},
{"tick",_wrap_OnePole_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_OnePole_base_names[] = {"_p_stk__Filter",0};
static const swig_type_info *swig_OnePole_base[] = {0,0};
static swig_octave_class _wrap_class_OnePole = {"OnePole", &SWIGTYPE_p_stk__OnePole,0,_wrap_new_OnePole,0,_wrap_delete_OnePole,swig_OnePole_members,swig_OnePole_base_names,swig_OnePole_base };

static octave_value_list _wrap_new_OneZero__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::OneZero *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_OneZero",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_OneZero" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::OneZero *)new stk::OneZero(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__OneZero, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_OneZero__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::OneZero *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_OneZero",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::OneZero *)new stk::OneZero();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__OneZero, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_OneZero, _wrap_new_OneZero, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_OneZero__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_OneZero__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_OneZero, _wrap_delete_OneZero, std::string() ) {
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_OneZero",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OneZero, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OneZero" "', argument " "1"" of type '" "stk::OneZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::OneZero * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( OneZero_setB0, _wrap_OneZero_setB0, std::string() ) {
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("OneZero_setB0",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OneZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneZero_setB0" "', argument " "1"" of type '" "stk::OneZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::OneZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OneZero_setB0" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setB0(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( OneZero_setB1, _wrap_OneZero_setB1, std::string() ) {
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("OneZero_setB1",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OneZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneZero_setB1" "', argument " "1"" of type '" "stk::OneZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::OneZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OneZero_setB1" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setB1(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_OneZero_setCoefficients__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("OneZero_setCoefficients",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OneZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneZero_setCoefficients" "', argument " "1"" of type '" "stk::OneZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::OneZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OneZero_setCoefficients" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OneZero_setCoefficients" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_bool(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OneZero_setCoefficients" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
    (arg1)->setCoefficients(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_OneZero_setCoefficients__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("OneZero_setCoefficients",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OneZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneZero_setCoefficients" "', argument " "1"" of type '" "stk::OneZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::OneZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OneZero_setCoefficients" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OneZero_setCoefficients" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setCoefficients(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( OneZero_setCoefficients, _wrap_OneZero_setCoefficients, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__OneZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_OneZero_setCoefficients__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__OneZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_OneZero_setCoefficients__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( OneZero_setZero, _wrap_OneZero_setZero, std::string() ) {
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("OneZero_setZero",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OneZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneZero_setZero" "', argument " "1"" of type '" "stk::OneZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::OneZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OneZero_setZero" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setZero(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( OneZero_lastOut, _wrap_OneZero_lastOut, std::string() ) {
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("OneZero_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OneZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneZero_lastOut" "', argument " "1"" of type '" "stk::OneZero const *""'"); 
    }
    arg1 = reinterpret_cast< stk::OneZero * >(argp1);
    result = (stk::StkFloat)((stk::OneZero const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_OneZero_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("OneZero_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OneZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneZero_tick" "', argument " "1"" of type '" "stk::OneZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::OneZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OneZero_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_OneZero_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("OneZero_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OneZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneZero_tick" "', argument " "1"" of type '" "stk::OneZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::OneZero * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OneZero_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_OneZero_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("OneZero_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OneZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneZero_tick" "', argument " "1"" of type '" "stk::OneZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::OneZero * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_OneZero_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("OneZero_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OneZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneZero_tick" "', argument " "1"" of type '" "stk::OneZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::OneZero * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OneZero_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneZero_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OneZero_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "OneZero_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_OneZero_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("OneZero_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OneZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneZero_tick" "', argument " "1"" of type '" "stk::OneZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::OneZero * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OneZero_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneZero_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OneZero_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_OneZero_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("OneZero_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__OneZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OneZero_tick" "', argument " "1"" of type '" "stk::OneZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::OneZero * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OneZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OneZero_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OneZero_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( OneZero_tick, _wrap_OneZero_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__OneZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OneZero_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__OneZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OneZero_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__OneZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OneZero_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__OneZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_OneZero_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__OneZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_OneZero_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__OneZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_OneZero_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_OneZero_members[] = {
{"setB0",_wrap_OneZero_setB0,0,0,0,0},
{"setB1",_wrap_OneZero_setB1,0,0,0,0},
{"setCoefficients",_wrap_OneZero_setCoefficients,0,0,0,0},
{"setZero",_wrap_OneZero_setZero,0,0,0,0},
{"lastOut",_wrap_OneZero_lastOut,0,0,0,0},
{"tick",_wrap_OneZero_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_OneZero_base_names[] = {"_p_stk__Filter",0};
static const swig_type_info *swig_OneZero_base[] = {0,0};
static swig_octave_class _wrap_class_OneZero = {"OneZero", &SWIGTYPE_p_stk__OneZero,0,_wrap_new_OneZero,0,_wrap_delete_OneZero,swig_OneZero_members,swig_OneZero_base_names,swig_OneZero_base };

static octave_value_list _wrap_new_PRCRev__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::PRCRev *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_PRCRev",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PRCRev" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::PRCRev *)new stk::PRCRev(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__PRCRev, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_PRCRev__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::PRCRev *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_PRCRev",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::PRCRev *)new stk::PRCRev();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__PRCRev, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_PRCRev, _wrap_new_PRCRev, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_PRCRev__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PRCRev__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( PRCRev_clear, _wrap_PRCRev_clear, std::string() ) {
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("PRCRev_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PRCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRCRev_clear" "', argument " "1"" of type '" "stk::PRCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::PRCRev * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( PRCRev_setT60, _wrap_PRCRev_setT60, std::string() ) {
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("PRCRev_setT60",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PRCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRCRev_setT60" "', argument " "1"" of type '" "stk::PRCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::PRCRev * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PRCRev_setT60" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setT60(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PRCRev_lastOut__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("PRCRev_lastOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PRCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRCRev_lastOut" "', argument " "1"" of type '" "stk::PRCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::PRCRev * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PRCRev_lastOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->lastOut(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PRCRev_lastOut__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("PRCRev_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PRCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRCRev_lastOut" "', argument " "1"" of type '" "stk::PRCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::PRCRev * >(argp1);
    result = (stk::StkFloat)(arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( PRCRev_lastOut, _wrap_PRCRev_lastOut, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PRCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PRCRev_lastOut__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PRCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PRCRev_lastOut__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_PRCRev_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFloat arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("PRCRev_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PRCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRCRev_tick" "', argument " "1"" of type '" "stk::PRCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::PRCRev * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PRCRev_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PRCRev_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFloat)(arg1)->tick(arg2,arg3);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PRCRev_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("PRCRev_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PRCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRCRev_tick" "', argument " "1"" of type '" "stk::PRCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::PRCRev * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PRCRev_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PRCRev_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("PRCRev_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PRCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRCRev_tick" "', argument " "1"" of type '" "stk::PRCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::PRCRev * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PRCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PRCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PRCRev_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PRCRev_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("PRCRev_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PRCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRCRev_tick" "', argument " "1"" of type '" "stk::PRCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::PRCRev * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PRCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PRCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PRCRev_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("PRCRev_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PRCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRCRev_tick" "', argument " "1"" of type '" "stk::PRCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::PRCRev * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PRCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PRCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PRCRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PRCRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PRCRev_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PRCRev_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PRCRev_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("PRCRev_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PRCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRCRev_tick" "', argument " "1"" of type '" "stk::PRCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::PRCRev * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PRCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PRCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PRCRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PRCRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PRCRev_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PRCRev_tick__SWIG_6 (const octave_value_list& args, int nargout) {
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("PRCRev_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PRCRev, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRCRev_tick" "', argument " "1"" of type '" "stk::PRCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::PRCRev * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PRCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PRCRev_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PRCRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PRCRev_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( PRCRev_tick, _wrap_PRCRev_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PRCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PRCRev_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PRCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PRCRev_tick__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PRCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PRCRev_tick__SWIG_6(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PRCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PRCRev_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PRCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PRCRev_tick__SWIG_0(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PRCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_PRCRev_tick__SWIG_5(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PRCRev, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_PRCRev_tick__SWIG_4(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_PRCRev, _wrap_delete_PRCRev, std::string() ) {
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_PRCRev",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PRCRev, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PRCRev" "', argument " "1"" of type '" "stk::PRCRev *""'"); 
    }
    arg1 = reinterpret_cast< stk::PRCRev * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_PRCRev_members[] = {
{"clear",_wrap_PRCRev_clear,0,0,0,0},
{"setT60",_wrap_PRCRev_setT60,0,0,0,0},
{"lastOut",_wrap_PRCRev_lastOut,0,0,0,0},
{"tick",_wrap_PRCRev_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_PRCRev_base_names[] = {"_p_stk__Effect",0};
static const swig_type_info *swig_PRCRev_base[] = {0,0};
static swig_octave_class _wrap_class_PRCRev = {"PRCRev", &SWIGTYPE_p_stk__PRCRev,0,_wrap_new_PRCRev,0,_wrap_delete_PRCRev,swig_PRCRev_members,swig_PRCRev_base_names,swig_PRCRev_base };

SWIG_DEFUN( new_PercFlut, _wrap_new_PercFlut, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::PercFlut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_PercFlut",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::PercFlut *)new stk::PercFlut();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__PercFlut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_PercFlut, _wrap_delete_PercFlut, std::string() ) {
  stk::PercFlut *arg1 = (stk::PercFlut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_PercFlut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PercFlut, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PercFlut" "', argument " "1"" of type '" "stk::PercFlut *""'"); 
    }
    arg1 = reinterpret_cast< stk::PercFlut * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( PercFlut_setFrequency, _wrap_PercFlut_setFrequency, std::string() ) {
  stk::PercFlut *arg1 = (stk::PercFlut *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("PercFlut_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PercFlut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PercFlut_setFrequency" "', argument " "1"" of type '" "stk::PercFlut *""'"); 
    }
    arg1 = reinterpret_cast< stk::PercFlut * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PercFlut_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( PercFlut_noteOn, _wrap_PercFlut_noteOn, std::string() ) {
  stk::PercFlut *arg1 = (stk::PercFlut *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("PercFlut_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PercFlut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PercFlut_noteOn" "', argument " "1"" of type '" "stk::PercFlut *""'"); 
    }
    arg1 = reinterpret_cast< stk::PercFlut * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PercFlut_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PercFlut_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PercFlut_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::PercFlut *arg1 = (stk::PercFlut *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("PercFlut_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PercFlut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PercFlut_tick" "', argument " "1"" of type '" "stk::PercFlut *""'"); 
    }
    arg1 = reinterpret_cast< stk::PercFlut * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PercFlut_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PercFlut_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::PercFlut *arg1 = (stk::PercFlut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("PercFlut_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PercFlut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PercFlut_tick" "', argument " "1"" of type '" "stk::PercFlut *""'"); 
    }
    arg1 = reinterpret_cast< stk::PercFlut * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PercFlut_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::PercFlut *arg1 = (stk::PercFlut *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("PercFlut_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PercFlut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PercFlut_tick" "', argument " "1"" of type '" "stk::PercFlut *""'"); 
    }
    arg1 = reinterpret_cast< stk::PercFlut * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PercFlut_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PercFlut_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PercFlut_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PercFlut_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::PercFlut *arg1 = (stk::PercFlut *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("PercFlut_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PercFlut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PercFlut_tick" "', argument " "1"" of type '" "stk::PercFlut *""'"); 
    }
    arg1 = reinterpret_cast< stk::PercFlut * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PercFlut_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PercFlut_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( PercFlut_tick, _wrap_PercFlut_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PercFlut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PercFlut_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PercFlut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PercFlut_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PercFlut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PercFlut_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PercFlut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PercFlut_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_PercFlut_members[] = {
{"setFrequency",_wrap_PercFlut_setFrequency,0,0,0,0},
{"noteOn",_wrap_PercFlut_noteOn,0,0,0,0},
{"tick",_wrap_PercFlut_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_PercFlut_base_names[] = {"_p_stk__FM",0};
static const swig_type_info *swig_PercFlut_base[] = {0,0};
static swig_octave_class _wrap_class_PercFlut = {"PercFlut", &SWIGTYPE_p_stk__PercFlut,0,_wrap_new_PercFlut,0,_wrap_delete_PercFlut,swig_PercFlut_members,swig_PercFlut_base_names,swig_PercFlut_base };

SWIG_DEFUN( new_Phonemes, _wrap_new_Phonemes, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Phonemes *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Phonemes",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Phonemes *)new stk::Phonemes();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Phonemes, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Phonemes, _wrap_delete_Phonemes, std::string() ) {
  stk::Phonemes *arg1 = (stk::Phonemes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Phonemes",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Phonemes, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Phonemes" "', argument " "1"" of type '" "stk::Phonemes *""'"); 
    }
    arg1 = reinterpret_cast< stk::Phonemes * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Phonemes_name, _wrap_Phonemes_name, std::string() ) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Phonemes_name",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Phonemes_name" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    result = (char *)stk::Phonemes::name(arg1);
    _outv = SWIG_FromCharPtr((const char *)result);
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Phonemes_voiceGain, _wrap_Phonemes_voiceGain, std::string() ) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Phonemes_voiceGain",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Phonemes_voiceGain" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    result = (stk::StkFloat)stk::Phonemes::voiceGain(arg1);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Phonemes_noiseGain, _wrap_Phonemes_noiseGain, std::string() ) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Phonemes_noiseGain",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Phonemes_noiseGain" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    result = (stk::StkFloat)stk::Phonemes::noiseGain(arg1);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Phonemes_formantFrequency, _wrap_Phonemes_formantFrequency, std::string() ) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Phonemes_formantFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Phonemes_formantFrequency" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Phonemes_formantFrequency" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)stk::Phonemes::formantFrequency(arg1,arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Phonemes_formantRadius, _wrap_Phonemes_formantRadius, std::string() ) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Phonemes_formantRadius",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Phonemes_formantRadius" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Phonemes_formantRadius" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)stk::Phonemes::formantRadius(arg1,arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Phonemes_formantGain, _wrap_Phonemes_formantGain, std::string() ) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Phonemes_formantGain",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Phonemes_formantGain" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Phonemes_formantGain" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)stk::Phonemes::formantGain(arg1,arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Phonemes_members[] = {
{"name",_wrap_Phonemes_name,0,0,1,0},
{"voiceGain",_wrap_Phonemes_voiceGain,0,0,1,0},
{"noiseGain",_wrap_Phonemes_noiseGain,0,0,1,0},
{"formantFrequency",_wrap_Phonemes_formantFrequency,0,0,1,0},
{"formantRadius",_wrap_Phonemes_formantRadius,0,0,1,0},
{"formantGain",_wrap_Phonemes_formantGain,0,0,1,0},
{0,0,0,0,0,0}
};
static const char *swig_Phonemes_base_names[] = {0};
static const swig_type_info *swig_Phonemes_base[] = {0};
static swig_octave_class _wrap_class_Phonemes = {"Phonemes", &SWIGTYPE_p_stk__Phonemes,0,_wrap_new_Phonemes,0,_wrap_delete_Phonemes,swig_Phonemes_members,swig_Phonemes_base_names,swig_Phonemes_base };

SWIG_DEFUN( new_PitShift, _wrap_new_PitShift, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::PitShift *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_PitShift",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::PitShift *)new stk::PitShift();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__PitShift, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( PitShift_clear, _wrap_PitShift_clear, std::string() ) {
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("PitShift_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitShift_clear" "', argument " "1"" of type '" "stk::PitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::PitShift * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( PitShift_setShift, _wrap_PitShift_setShift, std::string() ) {
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("PitShift_setShift",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitShift_setShift" "', argument " "1"" of type '" "stk::PitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::PitShift * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitShift_setShift" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setShift(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( PitShift_lastOut, _wrap_PitShift_lastOut, std::string() ) {
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("PitShift_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitShift_lastOut" "', argument " "1"" of type '" "stk::PitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::PitShift * >(argp1);
    result = (stk::StkFloat)(arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PitShift_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("PitShift_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitShift_tick" "', argument " "1"" of type '" "stk::PitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::PitShift * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitShift_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PitShift_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("PitShift_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitShift_tick" "', argument " "1"" of type '" "stk::PitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::PitShift * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PitShift_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PitShift_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("PitShift_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitShift_tick" "', argument " "1"" of type '" "stk::PitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::PitShift * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PitShift_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("PitShift_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitShift_tick" "', argument " "1"" of type '" "stk::PitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::PitShift * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PitShift_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PitShift_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PitShift_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PitShift_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PitShift_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("PitShift_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitShift_tick" "', argument " "1"" of type '" "stk::PitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::PitShift * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PitShift_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PitShift_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PitShift_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PitShift_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("PitShift_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PitShift, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitShift_tick" "', argument " "1"" of type '" "stk::PitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::PitShift * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PitShift_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PitShift_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PitShift_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( PitShift_tick, _wrap_PitShift_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PitShift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PitShift_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PitShift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PitShift_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PitShift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PitShift_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PitShift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PitShift_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PitShift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_PitShift_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PitShift, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_PitShift_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_PitShift, _wrap_delete_PitShift, std::string() ) {
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_PitShift",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PitShift, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PitShift" "', argument " "1"" of type '" "stk::PitShift *""'"); 
    }
    arg1 = reinterpret_cast< stk::PitShift * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_PitShift_members[] = {
{"clear",_wrap_PitShift_clear,0,0,0,0},
{"setShift",_wrap_PitShift_setShift,0,0,0,0},
{"lastOut",_wrap_PitShift_lastOut,0,0,0,0},
{"tick",_wrap_PitShift_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_PitShift_base_names[] = {"_p_stk__Effect",0};
static const swig_type_info *swig_PitShift_base[] = {0,0};
static swig_octave_class _wrap_class_PitShift = {"PitShift", &SWIGTYPE_p_stk__PitShift,0,_wrap_new_PitShift,0,_wrap_delete_PitShift,swig_PitShift_members,swig_PitShift_base_names,swig_PitShift_base };

static octave_value_list _wrap_new_Plucked__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Plucked *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Plucked",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Plucked" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::Plucked *)new stk::Plucked(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Plucked, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Plucked__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Plucked *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Plucked",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Plucked *)new stk::Plucked();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Plucked, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Plucked, _wrap_new_Plucked, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_Plucked__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Plucked__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Plucked, _wrap_delete_Plucked, std::string() ) {
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Plucked",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Plucked, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Plucked" "', argument " "1"" of type '" "stk::Plucked *""'"); 
    }
    arg1 = reinterpret_cast< stk::Plucked * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Plucked_clear, _wrap_Plucked_clear, std::string() ) {
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Plucked_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Plucked, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plucked_clear" "', argument " "1"" of type '" "stk::Plucked *""'"); 
    }
    arg1 = reinterpret_cast< stk::Plucked * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Plucked_setFrequency, _wrap_Plucked_setFrequency, std::string() ) {
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Plucked_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Plucked, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plucked_setFrequency" "', argument " "1"" of type '" "stk::Plucked *""'"); 
    }
    arg1 = reinterpret_cast< stk::Plucked * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plucked_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Plucked_pluck, _wrap_Plucked_pluck, std::string() ) {
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Plucked_pluck",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Plucked, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plucked_pluck" "', argument " "1"" of type '" "stk::Plucked *""'"); 
    }
    arg1 = reinterpret_cast< stk::Plucked * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plucked_pluck" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->pluck(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Plucked_noteOn, _wrap_Plucked_noteOn, std::string() ) {
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Plucked_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Plucked, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plucked_noteOn" "', argument " "1"" of type '" "stk::Plucked *""'"); 
    }
    arg1 = reinterpret_cast< stk::Plucked * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plucked_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plucked_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Plucked_noteOff, _wrap_Plucked_noteOff, std::string() ) {
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Plucked_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Plucked, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plucked_noteOff" "', argument " "1"" of type '" "stk::Plucked *""'"); 
    }
    arg1 = reinterpret_cast< stk::Plucked * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plucked_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Plucked_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Plucked_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Plucked, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plucked_tick" "', argument " "1"" of type '" "stk::Plucked *""'"); 
    }
    arg1 = reinterpret_cast< stk::Plucked * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plucked_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Plucked_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Plucked_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Plucked, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plucked_tick" "', argument " "1"" of type '" "stk::Plucked *""'"); 
    }
    arg1 = reinterpret_cast< stk::Plucked * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Plucked_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Plucked_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Plucked, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plucked_tick" "', argument " "1"" of type '" "stk::Plucked *""'"); 
    }
    arg1 = reinterpret_cast< stk::Plucked * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plucked_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plucked_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plucked_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Plucked_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Plucked_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Plucked, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plucked_tick" "', argument " "1"" of type '" "stk::Plucked *""'"); 
    }
    arg1 = reinterpret_cast< stk::Plucked * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plucked_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plucked_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Plucked_tick, _wrap_Plucked_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Plucked, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Plucked_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Plucked, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Plucked_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Plucked, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Plucked_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Plucked, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Plucked_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Plucked_members[] = {
{"clear",_wrap_Plucked_clear,0,0,0,0},
{"setFrequency",_wrap_Plucked_setFrequency,0,0,0,0},
{"pluck",_wrap_Plucked_pluck,0,0,0,0},
{"noteOn",_wrap_Plucked_noteOn,0,0,0,0},
{"noteOff",_wrap_Plucked_noteOff,0,0,0,0},
{"tick",_wrap_Plucked_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Plucked_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Plucked_base[] = {0,0};
static swig_octave_class _wrap_class_Plucked = {"Plucked", &SWIGTYPE_p_stk__Plucked,0,_wrap_new_Plucked,0,_wrap_delete_Plucked,swig_Plucked_members,swig_Plucked_base_names,swig_Plucked_base };

SWIG_DEFUN( new_PoleZero, _wrap_new_PoleZero, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::PoleZero *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_PoleZero",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::PoleZero *)new stk::PoleZero();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__PoleZero, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_PoleZero, _wrap_delete_PoleZero, std::string() ) {
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_PoleZero",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PoleZero, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PoleZero" "', argument " "1"" of type '" "stk::PoleZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::PoleZero * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( PoleZero_setB0, _wrap_PoleZero_setB0, std::string() ) {
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("PoleZero_setB0",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PoleZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoleZero_setB0" "', argument " "1"" of type '" "stk::PoleZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::PoleZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PoleZero_setB0" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setB0(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( PoleZero_setB1, _wrap_PoleZero_setB1, std::string() ) {
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("PoleZero_setB1",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PoleZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoleZero_setB1" "', argument " "1"" of type '" "stk::PoleZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::PoleZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PoleZero_setB1" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setB1(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( PoleZero_setA1, _wrap_PoleZero_setA1, std::string() ) {
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("PoleZero_setA1",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PoleZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoleZero_setA1" "', argument " "1"" of type '" "stk::PoleZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::PoleZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PoleZero_setA1" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setA1(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PoleZero_setCoefficients__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("PoleZero_setCoefficients",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PoleZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoleZero_setCoefficients" "', argument " "1"" of type '" "stk::PoleZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::PoleZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PoleZero_setCoefficients" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PoleZero_setCoefficients" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PoleZero_setCoefficients" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    ecode5 = SWIG_AsVal_bool(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PoleZero_setCoefficients" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    (arg1)->setCoefficients(arg2,arg3,arg4,arg5);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PoleZero_setCoefficients__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("PoleZero_setCoefficients",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PoleZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoleZero_setCoefficients" "', argument " "1"" of type '" "stk::PoleZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::PoleZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PoleZero_setCoefficients" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PoleZero_setCoefficients" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PoleZero_setCoefficients" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    (arg1)->setCoefficients(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( PoleZero_setCoefficients, _wrap_PoleZero_setCoefficients, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PoleZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_PoleZero_setCoefficients__SWIG_1(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PoleZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_PoleZero_setCoefficients__SWIG_0(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( PoleZero_setAllpass, _wrap_PoleZero_setAllpass, std::string() ) {
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("PoleZero_setAllpass",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PoleZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoleZero_setAllpass" "', argument " "1"" of type '" "stk::PoleZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::PoleZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PoleZero_setAllpass" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setAllpass(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PoleZero_setBlockZero__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("PoleZero_setBlockZero",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PoleZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoleZero_setBlockZero" "', argument " "1"" of type '" "stk::PoleZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::PoleZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PoleZero_setBlockZero" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setBlockZero(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PoleZero_setBlockZero__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("PoleZero_setBlockZero",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PoleZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoleZero_setBlockZero" "', argument " "1"" of type '" "stk::PoleZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::PoleZero * >(argp1);
    (arg1)->setBlockZero();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( PoleZero_setBlockZero, _wrap_PoleZero_setBlockZero, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PoleZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PoleZero_setBlockZero__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PoleZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PoleZero_setBlockZero__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( PoleZero_lastOut, _wrap_PoleZero_lastOut, std::string() ) {
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("PoleZero_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PoleZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoleZero_lastOut" "', argument " "1"" of type '" "stk::PoleZero const *""'"); 
    }
    arg1 = reinterpret_cast< stk::PoleZero * >(argp1);
    result = (stk::StkFloat)((stk::PoleZero const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PoleZero_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("PoleZero_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PoleZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoleZero_tick" "', argument " "1"" of type '" "stk::PoleZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::PoleZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PoleZero_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PoleZero_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("PoleZero_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PoleZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoleZero_tick" "', argument " "1"" of type '" "stk::PoleZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::PoleZero * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PoleZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PoleZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PoleZero_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_PoleZero_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("PoleZero_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__PoleZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoleZero_tick" "', argument " "1"" of type '" "stk::PoleZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::PoleZero * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PoleZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PoleZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( PoleZero_tick, _wrap_PoleZero_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PoleZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PoleZero_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PoleZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PoleZero_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__PoleZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PoleZero_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_PoleZero_members[] = {
{"setB0",_wrap_PoleZero_setB0,0,0,0,0},
{"setB1",_wrap_PoleZero_setB1,0,0,0,0},
{"setA1",_wrap_PoleZero_setA1,0,0,0,0},
{"setCoefficients",_wrap_PoleZero_setCoefficients,0,0,0,0},
{"setAllpass",_wrap_PoleZero_setAllpass,0,0,0,0},
{"setBlockZero",_wrap_PoleZero_setBlockZero,0,0,0,0},
{"lastOut",_wrap_PoleZero_lastOut,0,0,0,0},
{"tick",_wrap_PoleZero_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_PoleZero_base_names[] = {"_p_stk__Filter",0};
static const swig_type_info *swig_PoleZero_base[] = {0,0};
static swig_octave_class _wrap_class_PoleZero = {"PoleZero", &SWIGTYPE_p_stk__PoleZero,0,_wrap_new_PoleZero,0,_wrap_delete_PoleZero,swig_PoleZero_members,swig_PoleZero_base_names,swig_PoleZero_base };

SWIG_DEFUN( new_Recorder, _wrap_new_Recorder, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Recorder *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Recorder",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Recorder *)new stk::Recorder();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Recorder, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Recorder, _wrap_delete_Recorder, std::string() ) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Recorder",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Recorder" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Recorder_clear, _wrap_Recorder_clear, std::string() ) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Recorder_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_clear" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Recorder_setFrequency, _wrap_Recorder_setFrequency, std::string() ) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Recorder_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_setFrequency" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recorder_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Recorder_startBlowing, _wrap_Recorder_startBlowing, std::string() ) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Recorder_startBlowing",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_startBlowing" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recorder_startBlowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Recorder_startBlowing" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->startBlowing(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Recorder_stopBlowing, _wrap_Recorder_stopBlowing, std::string() ) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Recorder_stopBlowing",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_stopBlowing" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recorder_stopBlowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->stopBlowing(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Recorder_noteOn, _wrap_Recorder_noteOn, std::string() ) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Recorder_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_noteOn" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recorder_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Recorder_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Recorder_noteOff, _wrap_Recorder_noteOff, std::string() ) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Recorder_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_noteOff" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recorder_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Recorder_controlChange, _wrap_Recorder_controlChange, std::string() ) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Recorder_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_controlChange" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recorder_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Recorder_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Recorder_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Recorder_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_tick" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recorder_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Recorder_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Recorder_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_tick" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Recorder_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Recorder_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_tick" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Recorder_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Recorder_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Recorder_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Recorder_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Recorder_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_tick" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Recorder_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Recorder_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Recorder_tick, _wrap_Recorder_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Recorder, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Recorder_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Recorder, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Recorder_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Recorder, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Recorder_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Recorder, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Recorder_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Recorder_setBlowPressure, _wrap_Recorder_setBlowPressure, std::string() ) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Recorder_setBlowPressure",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_setBlowPressure" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recorder_setBlowPressure" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setBlowPressure(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Recorder_setVibratoGain, _wrap_Recorder_setVibratoGain, std::string() ) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Recorder_setVibratoGain",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_setVibratoGain" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recorder_setVibratoGain" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setVibratoGain(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Recorder_setVibratoFrequency, _wrap_Recorder_setVibratoFrequency, std::string() ) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Recorder_setVibratoFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_setVibratoFrequency" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recorder_setVibratoFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setVibratoFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Recorder_setNoiseGain, _wrap_Recorder_setNoiseGain, std::string() ) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Recorder_setNoiseGain",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_setNoiseGain" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recorder_setNoiseGain" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setNoiseGain(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Recorder_setBreathCutoff, _wrap_Recorder_setBreathCutoff, std::string() ) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Recorder_setBreathCutoff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_setBreathCutoff" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recorder_setBreathCutoff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setBreathCutoff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Recorder_setSoftness, _wrap_Recorder_setSoftness, std::string() ) {
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Recorder_setSoftness",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Recorder, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recorder_setSoftness" "', argument " "1"" of type '" "stk::Recorder *""'"); 
    }
    arg1 = reinterpret_cast< stk::Recorder * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recorder_setSoftness" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setSoftness(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Recorder_members[] = {
{"clear",_wrap_Recorder_clear,0,0,0,0},
{"setFrequency",_wrap_Recorder_setFrequency,0,0,0,0},
{"startBlowing",_wrap_Recorder_startBlowing,0,0,0,0},
{"stopBlowing",_wrap_Recorder_stopBlowing,0,0,0,0},
{"noteOn",_wrap_Recorder_noteOn,0,0,0,0},
{"noteOff",_wrap_Recorder_noteOff,0,0,0,0},
{"controlChange",_wrap_Recorder_controlChange,0,0,0,0},
{"tick",_wrap_Recorder_tick,0,0,0,0},
{"setBlowPressure",_wrap_Recorder_setBlowPressure,0,0,0,0},
{"setVibratoGain",_wrap_Recorder_setVibratoGain,0,0,0,0},
{"setVibratoFrequency",_wrap_Recorder_setVibratoFrequency,0,0,0,0},
{"setNoiseGain",_wrap_Recorder_setNoiseGain,0,0,0,0},
{"setBreathCutoff",_wrap_Recorder_setBreathCutoff,0,0,0,0},
{"setSoftness",_wrap_Recorder_setSoftness,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Recorder_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Recorder_base[] = {0,0};
static swig_octave_class _wrap_class_Recorder = {"Recorder", &SWIGTYPE_p_stk__Recorder,0,_wrap_new_Recorder,0,_wrap_delete_Recorder,swig_Recorder_members,swig_Recorder_base_names,swig_Recorder_base };

SWIG_DEFUN( new_ReedTable, _wrap_new_ReedTable, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::ReedTable *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_ReedTable",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::ReedTable *)new stk::ReedTable();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__ReedTable, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ReedTable_setOffset, _wrap_ReedTable_setOffset, std::string() ) {
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ReedTable_setOffset",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ReedTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReedTable_setOffset" "', argument " "1"" of type '" "stk::ReedTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::ReedTable * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReedTable_setOffset" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setOffset(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ReedTable_setSlope, _wrap_ReedTable_setSlope, std::string() ) {
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("ReedTable_setSlope",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ReedTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReedTable_setSlope" "', argument " "1"" of type '" "stk::ReedTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::ReedTable * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReedTable_setSlope" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setSlope(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_ReedTable_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("ReedTable_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ReedTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReedTable_tick" "', argument " "1"" of type '" "stk::ReedTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::ReedTable * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReedTable_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_ReedTable_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("ReedTable_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ReedTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReedTable_tick" "', argument " "1"" of type '" "stk::ReedTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::ReedTable * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReedTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReedTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ReedTable_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_ReedTable_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("ReedTable_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ReedTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReedTable_tick" "', argument " "1"" of type '" "stk::ReedTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::ReedTable * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReedTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReedTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_ReedTable_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("ReedTable_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ReedTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReedTable_tick" "', argument " "1"" of type '" "stk::ReedTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::ReedTable * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReedTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReedTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ReedTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReedTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ReedTable_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ReedTable_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_ReedTable_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("ReedTable_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ReedTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReedTable_tick" "', argument " "1"" of type '" "stk::ReedTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::ReedTable * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReedTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReedTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ReedTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReedTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ReedTable_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_ReedTable_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("ReedTable_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ReedTable, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReedTable_tick" "', argument " "1"" of type '" "stk::ReedTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::ReedTable * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReedTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReedTable_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ReedTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReedTable_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( ReedTable_tick, _wrap_ReedTable_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__ReedTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ReedTable_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__ReedTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ReedTable_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__ReedTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ReedTable_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__ReedTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ReedTable_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__ReedTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ReedTable_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__ReedTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ReedTable_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_ReedTable, _wrap_delete_ReedTable, std::string() ) {
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_ReedTable",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__ReedTable, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ReedTable" "', argument " "1"" of type '" "stk::ReedTable *""'"); 
    }
    arg1 = reinterpret_cast< stk::ReedTable * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_ReedTable_members[] = {
{"setOffset",_wrap_ReedTable_setOffset,0,0,0,0},
{"setSlope",_wrap_ReedTable_setSlope,0,0,0,0},
{"tick",_wrap_ReedTable_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_ReedTable_base_names[] = {"_p_stk__Function",0};
static const swig_type_info *swig_ReedTable_base[] = {0,0};
static swig_octave_class _wrap_class_ReedTable = {"ReedTable", &SWIGTYPE_p_stk__ReedTable,0,_wrap_new_ReedTable,0,_wrap_delete_ReedTable,swig_ReedTable_members,swig_ReedTable_base_names,swig_ReedTable_base };

SWIG_DEFUN( new_Resonate, _wrap_new_Resonate, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Resonate *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Resonate",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Resonate *)new stk::Resonate();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Resonate, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Resonate, _wrap_delete_Resonate, std::string() ) {
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Resonate",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Resonate, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Resonate" "', argument " "1"" of type '" "stk::Resonate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Resonate * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Resonate_setResonance, _wrap_Resonate_setResonance, std::string() ) {
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Resonate_setResonance",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Resonate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resonate_setResonance" "', argument " "1"" of type '" "stk::Resonate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Resonate * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Resonate_setResonance" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Resonate_setResonance" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setResonance(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Resonate_setNotch, _wrap_Resonate_setNotch, std::string() ) {
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Resonate_setNotch",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Resonate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resonate_setNotch" "', argument " "1"" of type '" "stk::Resonate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Resonate * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Resonate_setNotch" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Resonate_setNotch" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setNotch(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Resonate_setEqualGainZeroes, _wrap_Resonate_setEqualGainZeroes, std::string() ) {
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Resonate_setEqualGainZeroes",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Resonate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resonate_setEqualGainZeroes" "', argument " "1"" of type '" "stk::Resonate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Resonate * >(argp1);
    (arg1)->setEqualGainZeroes();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Resonate_keyOn, _wrap_Resonate_keyOn, std::string() ) {
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Resonate_keyOn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Resonate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resonate_keyOn" "', argument " "1"" of type '" "stk::Resonate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Resonate * >(argp1);
    (arg1)->keyOn();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Resonate_keyOff, _wrap_Resonate_keyOff, std::string() ) {
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Resonate_keyOff",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Resonate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resonate_keyOff" "', argument " "1"" of type '" "stk::Resonate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Resonate * >(argp1);
    (arg1)->keyOff();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Resonate_noteOn, _wrap_Resonate_noteOn, std::string() ) {
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Resonate_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Resonate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resonate_noteOn" "', argument " "1"" of type '" "stk::Resonate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Resonate * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Resonate_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Resonate_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Resonate_noteOff, _wrap_Resonate_noteOff, std::string() ) {
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Resonate_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Resonate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resonate_noteOff" "', argument " "1"" of type '" "stk::Resonate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Resonate * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Resonate_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Resonate_controlChange, _wrap_Resonate_controlChange, std::string() ) {
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Resonate_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Resonate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resonate_controlChange" "', argument " "1"" of type '" "stk::Resonate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Resonate * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Resonate_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Resonate_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Resonate_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Resonate_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Resonate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resonate_tick" "', argument " "1"" of type '" "stk::Resonate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Resonate * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Resonate_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Resonate_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Resonate_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Resonate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resonate_tick" "', argument " "1"" of type '" "stk::Resonate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Resonate * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Resonate_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Resonate_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Resonate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resonate_tick" "', argument " "1"" of type '" "stk::Resonate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Resonate * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Resonate_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Resonate_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Resonate_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Resonate_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Resonate_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Resonate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resonate_tick" "', argument " "1"" of type '" "stk::Resonate *""'"); 
    }
    arg1 = reinterpret_cast< stk::Resonate * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Resonate_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Resonate_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Resonate_tick, _wrap_Resonate_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Resonate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Resonate_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Resonate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Resonate_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Resonate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Resonate_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Resonate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Resonate_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Resonate_members[] = {
{"setResonance",_wrap_Resonate_setResonance,0,0,0,0},
{"setNotch",_wrap_Resonate_setNotch,0,0,0,0},
{"setEqualGainZeroes",_wrap_Resonate_setEqualGainZeroes,0,0,0,0},
{"keyOn",_wrap_Resonate_keyOn,0,0,0,0},
{"keyOff",_wrap_Resonate_keyOff,0,0,0,0},
{"noteOn",_wrap_Resonate_noteOn,0,0,0,0},
{"noteOff",_wrap_Resonate_noteOff,0,0,0,0},
{"controlChange",_wrap_Resonate_controlChange,0,0,0,0},
{"tick",_wrap_Resonate_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Resonate_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Resonate_base[] = {0,0};
static swig_octave_class _wrap_class_Resonate = {"Resonate", &SWIGTYPE_p_stk__Resonate,0,_wrap_new_Resonate,0,_wrap_delete_Resonate,swig_Resonate_members,swig_Resonate_base_names,swig_Resonate_base };

SWIG_DEFUN( new_Rhodey, _wrap_new_Rhodey, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Rhodey *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Rhodey",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Rhodey *)new stk::Rhodey();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Rhodey, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Rhodey, _wrap_delete_Rhodey, std::string() ) {
  stk::Rhodey *arg1 = (stk::Rhodey *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Rhodey",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Rhodey, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rhodey" "', argument " "1"" of type '" "stk::Rhodey *""'"); 
    }
    arg1 = reinterpret_cast< stk::Rhodey * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Rhodey_setFrequency, _wrap_Rhodey_setFrequency, std::string() ) {
  stk::Rhodey *arg1 = (stk::Rhodey *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Rhodey_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Rhodey, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rhodey_setFrequency" "', argument " "1"" of type '" "stk::Rhodey *""'"); 
    }
    arg1 = reinterpret_cast< stk::Rhodey * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rhodey_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Rhodey_noteOn, _wrap_Rhodey_noteOn, std::string() ) {
  stk::Rhodey *arg1 = (stk::Rhodey *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Rhodey_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Rhodey, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rhodey_noteOn" "', argument " "1"" of type '" "stk::Rhodey *""'"); 
    }
    arg1 = reinterpret_cast< stk::Rhodey * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rhodey_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Rhodey_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Rhodey_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Rhodey *arg1 = (stk::Rhodey *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Rhodey_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Rhodey, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rhodey_tick" "', argument " "1"" of type '" "stk::Rhodey *""'"); 
    }
    arg1 = reinterpret_cast< stk::Rhodey * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rhodey_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Rhodey_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Rhodey *arg1 = (stk::Rhodey *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Rhodey_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Rhodey, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rhodey_tick" "', argument " "1"" of type '" "stk::Rhodey *""'"); 
    }
    arg1 = reinterpret_cast< stk::Rhodey * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Rhodey_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Rhodey *arg1 = (stk::Rhodey *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Rhodey_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Rhodey, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rhodey_tick" "', argument " "1"" of type '" "stk::Rhodey *""'"); 
    }
    arg1 = reinterpret_cast< stk::Rhodey * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rhodey_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rhodey_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Rhodey_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Rhodey_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Rhodey *arg1 = (stk::Rhodey *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Rhodey_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Rhodey, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rhodey_tick" "', argument " "1"" of type '" "stk::Rhodey *""'"); 
    }
    arg1 = reinterpret_cast< stk::Rhodey * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rhodey_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rhodey_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Rhodey_tick, _wrap_Rhodey_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Rhodey, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Rhodey_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Rhodey, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rhodey_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Rhodey, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Rhodey_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Rhodey, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Rhodey_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Rhodey_members[] = {
{"setFrequency",_wrap_Rhodey_setFrequency,0,0,0,0},
{"noteOn",_wrap_Rhodey_noteOn,0,0,0,0},
{"tick",_wrap_Rhodey_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Rhodey_base_names[] = {"_p_stk__FM",0};
static const swig_type_info *swig_Rhodey_base[] = {0,0};
static swig_octave_class _wrap_class_Rhodey = {"Rhodey", &SWIGTYPE_p_stk__Rhodey,0,_wrap_new_Rhodey,0,_wrap_delete_Rhodey,swig_Rhodey_members,swig_Rhodey_base_names,swig_Rhodey_base };

SWIG_DEFUN( new_Saxofony, _wrap_new_Saxofony, std::string() ) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Saxofony *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Saxofony",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Saxofony" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::Saxofony *)new stk::Saxofony(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Saxofony, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Saxofony, _wrap_delete_Saxofony, std::string() ) {
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Saxofony",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Saxofony, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Saxofony" "', argument " "1"" of type '" "stk::Saxofony *""'"); 
    }
    arg1 = reinterpret_cast< stk::Saxofony * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Saxofony_clear, _wrap_Saxofony_clear, std::string() ) {
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Saxofony_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Saxofony, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Saxofony_clear" "', argument " "1"" of type '" "stk::Saxofony *""'"); 
    }
    arg1 = reinterpret_cast< stk::Saxofony * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Saxofony_setFrequency, _wrap_Saxofony_setFrequency, std::string() ) {
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Saxofony_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Saxofony, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Saxofony_setFrequency" "', argument " "1"" of type '" "stk::Saxofony *""'"); 
    }
    arg1 = reinterpret_cast< stk::Saxofony * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Saxofony_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Saxofony_setBlowPosition, _wrap_Saxofony_setBlowPosition, std::string() ) {
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Saxofony_setBlowPosition",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Saxofony, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Saxofony_setBlowPosition" "', argument " "1"" of type '" "stk::Saxofony *""'"); 
    }
    arg1 = reinterpret_cast< stk::Saxofony * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Saxofony_setBlowPosition" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setBlowPosition(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Saxofony_startBlowing, _wrap_Saxofony_startBlowing, std::string() ) {
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Saxofony_startBlowing",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Saxofony, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Saxofony_startBlowing" "', argument " "1"" of type '" "stk::Saxofony *""'"); 
    }
    arg1 = reinterpret_cast< stk::Saxofony * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Saxofony_startBlowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Saxofony_startBlowing" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->startBlowing(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Saxofony_stopBlowing, _wrap_Saxofony_stopBlowing, std::string() ) {
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Saxofony_stopBlowing",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Saxofony, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Saxofony_stopBlowing" "', argument " "1"" of type '" "stk::Saxofony *""'"); 
    }
    arg1 = reinterpret_cast< stk::Saxofony * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Saxofony_stopBlowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->stopBlowing(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Saxofony_noteOn, _wrap_Saxofony_noteOn, std::string() ) {
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Saxofony_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Saxofony, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Saxofony_noteOn" "', argument " "1"" of type '" "stk::Saxofony *""'"); 
    }
    arg1 = reinterpret_cast< stk::Saxofony * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Saxofony_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Saxofony_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Saxofony_noteOff, _wrap_Saxofony_noteOff, std::string() ) {
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Saxofony_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Saxofony, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Saxofony_noteOff" "', argument " "1"" of type '" "stk::Saxofony *""'"); 
    }
    arg1 = reinterpret_cast< stk::Saxofony * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Saxofony_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Saxofony_controlChange, _wrap_Saxofony_controlChange, std::string() ) {
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Saxofony_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Saxofony, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Saxofony_controlChange" "', argument " "1"" of type '" "stk::Saxofony *""'"); 
    }
    arg1 = reinterpret_cast< stk::Saxofony * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Saxofony_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Saxofony_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Saxofony_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Saxofony_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Saxofony, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Saxofony_tick" "', argument " "1"" of type '" "stk::Saxofony *""'"); 
    }
    arg1 = reinterpret_cast< stk::Saxofony * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Saxofony_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Saxofony_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Saxofony_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Saxofony, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Saxofony_tick" "', argument " "1"" of type '" "stk::Saxofony *""'"); 
    }
    arg1 = reinterpret_cast< stk::Saxofony * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Saxofony_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Saxofony_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Saxofony, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Saxofony_tick" "', argument " "1"" of type '" "stk::Saxofony *""'"); 
    }
    arg1 = reinterpret_cast< stk::Saxofony * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Saxofony_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Saxofony_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Saxofony_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Saxofony_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Saxofony_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Saxofony, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Saxofony_tick" "', argument " "1"" of type '" "stk::Saxofony *""'"); 
    }
    arg1 = reinterpret_cast< stk::Saxofony * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Saxofony_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Saxofony_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Saxofony_tick, _wrap_Saxofony_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Saxofony, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Saxofony_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Saxofony, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Saxofony_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Saxofony, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Saxofony_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Saxofony, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Saxofony_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Saxofony_members[] = {
{"clear",_wrap_Saxofony_clear,0,0,0,0},
{"setFrequency",_wrap_Saxofony_setFrequency,0,0,0,0},
{"setBlowPosition",_wrap_Saxofony_setBlowPosition,0,0,0,0},
{"startBlowing",_wrap_Saxofony_startBlowing,0,0,0,0},
{"stopBlowing",_wrap_Saxofony_stopBlowing,0,0,0,0},
{"noteOn",_wrap_Saxofony_noteOn,0,0,0,0},
{"noteOff",_wrap_Saxofony_noteOff,0,0,0,0},
{"controlChange",_wrap_Saxofony_controlChange,0,0,0,0},
{"tick",_wrap_Saxofony_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Saxofony_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Saxofony_base[] = {0,0};
static swig_octave_class _wrap_class_Saxofony = {"Saxofony", &SWIGTYPE_p_stk__Saxofony,0,_wrap_new_Saxofony,0,_wrap_delete_Saxofony,swig_Saxofony_members,swig_Saxofony_base_names,swig_Saxofony_base };

static octave_value_list _wrap_new_Shakers__SWIG_0 (const octave_value_list& args, int nargout) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Shakers *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Shakers",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Shakers" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    result = (stk::Shakers *)new stk::Shakers(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Shakers, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Shakers__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Shakers *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Shakers",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Shakers *)new stk::Shakers();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Shakers, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Shakers, _wrap_new_Shakers, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_Shakers__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Shakers__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Shakers_noteOn, _wrap_Shakers_noteOn, std::string() ) {
  stk::Shakers *arg1 = (stk::Shakers *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Shakers_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Shakers, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shakers_noteOn" "', argument " "1"" of type '" "stk::Shakers *""'"); 
    }
    arg1 = reinterpret_cast< stk::Shakers * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Shakers_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Shakers_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Shakers_noteOff, _wrap_Shakers_noteOff, std::string() ) {
  stk::Shakers *arg1 = (stk::Shakers *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Shakers_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Shakers, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shakers_noteOff" "', argument " "1"" of type '" "stk::Shakers *""'"); 
    }
    arg1 = reinterpret_cast< stk::Shakers * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Shakers_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Shakers_controlChange, _wrap_Shakers_controlChange, std::string() ) {
  stk::Shakers *arg1 = (stk::Shakers *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Shakers_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Shakers, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shakers_controlChange" "', argument " "1"" of type '" "stk::Shakers *""'"); 
    }
    arg1 = reinterpret_cast< stk::Shakers * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Shakers_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Shakers_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Shakers_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Shakers *arg1 = (stk::Shakers *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Shakers_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Shakers, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shakers_tick" "', argument " "1"" of type '" "stk::Shakers *""'"); 
    }
    arg1 = reinterpret_cast< stk::Shakers * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Shakers_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Shakers_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Shakers *arg1 = (stk::Shakers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Shakers_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Shakers, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shakers_tick" "', argument " "1"" of type '" "stk::Shakers *""'"); 
    }
    arg1 = reinterpret_cast< stk::Shakers * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Shakers_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Shakers *arg1 = (stk::Shakers *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Shakers_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Shakers, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shakers_tick" "', argument " "1"" of type '" "stk::Shakers *""'"); 
    }
    arg1 = reinterpret_cast< stk::Shakers * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shakers_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shakers_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Shakers_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Shakers_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Shakers *arg1 = (stk::Shakers *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Shakers_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Shakers, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shakers_tick" "', argument " "1"" of type '" "stk::Shakers *""'"); 
    }
    arg1 = reinterpret_cast< stk::Shakers * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shakers_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shakers_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Shakers_tick, _wrap_Shakers_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Shakers, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Shakers_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Shakers, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Shakers_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Shakers, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Shakers_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Shakers, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Shakers_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Shakers, _wrap_delete_Shakers, std::string() ) {
  stk::Shakers *arg1 = (stk::Shakers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Shakers",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Shakers, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Shakers" "', argument " "1"" of type '" "stk::Shakers *""'"); 
    }
    arg1 = reinterpret_cast< stk::Shakers * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Shakers_members[] = {
{"noteOn",_wrap_Shakers_noteOn,0,0,0,0},
{"noteOff",_wrap_Shakers_noteOff,0,0,0,0},
{"controlChange",_wrap_Shakers_controlChange,0,0,0,0},
{"tick",_wrap_Shakers_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Shakers_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Shakers_base[] = {0,0};
static swig_octave_class _wrap_class_Shakers = {"Shakers", &SWIGTYPE_p_stk__Shakers,0,_wrap_new_Shakers,0,_wrap_delete_Shakers,swig_Shakers_members,swig_Shakers_base_names,swig_Shakers_base };

SWIG_DEFUN( new_Simple, _wrap_new_Simple, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Simple *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Simple",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Simple *)new stk::Simple();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Simple, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Simple, _wrap_delete_Simple, std::string() ) {
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Simple",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Simple, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Simple" "', argument " "1"" of type '" "stk::Simple *""'"); 
    }
    arg1 = reinterpret_cast< stk::Simple * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Simple_setFrequency, _wrap_Simple_setFrequency, std::string() ) {
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Simple_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Simple, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simple_setFrequency" "', argument " "1"" of type '" "stk::Simple *""'"); 
    }
    arg1 = reinterpret_cast< stk::Simple * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simple_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Simple_keyOn, _wrap_Simple_keyOn, std::string() ) {
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Simple_keyOn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Simple, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simple_keyOn" "', argument " "1"" of type '" "stk::Simple *""'"); 
    }
    arg1 = reinterpret_cast< stk::Simple * >(argp1);
    (arg1)->keyOn();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Simple_keyOff, _wrap_Simple_keyOff, std::string() ) {
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Simple_keyOff",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Simple, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simple_keyOff" "', argument " "1"" of type '" "stk::Simple *""'"); 
    }
    arg1 = reinterpret_cast< stk::Simple * >(argp1);
    (arg1)->keyOff();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Simple_noteOn, _wrap_Simple_noteOn, std::string() ) {
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Simple_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Simple, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simple_noteOn" "', argument " "1"" of type '" "stk::Simple *""'"); 
    }
    arg1 = reinterpret_cast< stk::Simple * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simple_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Simple_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Simple_noteOff, _wrap_Simple_noteOff, std::string() ) {
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Simple_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Simple, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simple_noteOff" "', argument " "1"" of type '" "stk::Simple *""'"); 
    }
    arg1 = reinterpret_cast< stk::Simple * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simple_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Simple_controlChange, _wrap_Simple_controlChange, std::string() ) {
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Simple_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Simple, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simple_controlChange" "', argument " "1"" of type '" "stk::Simple *""'"); 
    }
    arg1 = reinterpret_cast< stk::Simple * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simple_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Simple_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Simple_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Simple_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Simple, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simple_tick" "', argument " "1"" of type '" "stk::Simple *""'"); 
    }
    arg1 = reinterpret_cast< stk::Simple * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Simple_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Simple_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Simple_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Simple, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simple_tick" "', argument " "1"" of type '" "stk::Simple *""'"); 
    }
    arg1 = reinterpret_cast< stk::Simple * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Simple_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Simple_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Simple, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simple_tick" "', argument " "1"" of type '" "stk::Simple *""'"); 
    }
    arg1 = reinterpret_cast< stk::Simple * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simple_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simple_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Simple_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Simple_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Simple_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Simple, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simple_tick" "', argument " "1"" of type '" "stk::Simple *""'"); 
    }
    arg1 = reinterpret_cast< stk::Simple * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simple_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simple_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Simple_tick, _wrap_Simple_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Simple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Simple_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Simple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Simple_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Simple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Simple_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Simple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Simple_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Simple_members[] = {
{"setFrequency",_wrap_Simple_setFrequency,0,0,0,0},
{"keyOn",_wrap_Simple_keyOn,0,0,0,0},
{"keyOff",_wrap_Simple_keyOff,0,0,0,0},
{"noteOn",_wrap_Simple_noteOn,0,0,0,0},
{"noteOff",_wrap_Simple_noteOff,0,0,0,0},
{"controlChange",_wrap_Simple_controlChange,0,0,0,0},
{"tick",_wrap_Simple_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Simple_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Simple_base[] = {0,0};
static swig_octave_class _wrap_class_Simple = {"Simple", &SWIGTYPE_p_stk__Simple,0,_wrap_new_Simple,0,_wrap_delete_Simple,swig_Simple_members,swig_Simple_base_names,swig_Simple_base };

SWIG_DEFUN( new_SineWave, _wrap_new_SineWave, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::SineWave *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_SineWave",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::SineWave *)new stk::SineWave();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__SineWave, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_SineWave, _wrap_delete_SineWave, std::string() ) {
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_SineWave",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SineWave, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SineWave" "', argument " "1"" of type '" "stk::SineWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SineWave * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SineWave_reset, _wrap_SineWave_reset, std::string() ) {
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SineWave_reset",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SineWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SineWave_reset" "', argument " "1"" of type '" "stk::SineWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SineWave * >(argp1);
    (arg1)->reset();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SineWave_setRate, _wrap_SineWave_setRate, std::string() ) {
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SineWave_setRate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SineWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SineWave_setRate" "', argument " "1"" of type '" "stk::SineWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SineWave * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SineWave_setRate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setRate(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SineWave_setFrequency, _wrap_SineWave_setFrequency, std::string() ) {
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SineWave_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SineWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SineWave_setFrequency" "', argument " "1"" of type '" "stk::SineWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SineWave * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SineWave_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SineWave_addTime, _wrap_SineWave_addTime, std::string() ) {
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SineWave_addTime",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SineWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SineWave_addTime" "', argument " "1"" of type '" "stk::SineWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SineWave * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SineWave_addTime" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->addTime(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SineWave_addPhase, _wrap_SineWave_addPhase, std::string() ) {
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SineWave_addPhase",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SineWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SineWave_addPhase" "', argument " "1"" of type '" "stk::SineWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SineWave * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SineWave_addPhase" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->addPhase(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SineWave_addPhaseOffset, _wrap_SineWave_addPhaseOffset, std::string() ) {
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SineWave_addPhaseOffset",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SineWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SineWave_addPhaseOffset" "', argument " "1"" of type '" "stk::SineWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SineWave * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SineWave_addPhaseOffset" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->addPhaseOffset(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SineWave_lastOut, _wrap_SineWave_lastOut, std::string() ) {
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("SineWave_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SineWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SineWave_lastOut" "', argument " "1"" of type '" "stk::SineWave const *""'"); 
    }
    arg1 = reinterpret_cast< stk::SineWave * >(argp1);
    result = (stk::StkFloat)((stk::SineWave const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_SineWave_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("SineWave_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SineWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SineWave_tick" "', argument " "1"" of type '" "stk::SineWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SineWave * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_SineWave_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("SineWave_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SineWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SineWave_tick" "', argument " "1"" of type '" "stk::SineWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SineWave * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SineWave_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SineWave_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SineWave_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_SineWave_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("SineWave_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SineWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SineWave_tick" "', argument " "1"" of type '" "stk::SineWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SineWave * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SineWave_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SineWave_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SineWave_tick, _wrap_SineWave_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__SineWave, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SineWave_tick__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__SineWave, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SineWave_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__SineWave, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SineWave_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_SineWave_members[] = {
{"reset",_wrap_SineWave_reset,0,0,0,0},
{"setRate",_wrap_SineWave_setRate,0,0,0,0},
{"setFrequency",_wrap_SineWave_setFrequency,0,0,0,0},
{"addTime",_wrap_SineWave_addTime,0,0,0,0},
{"addPhase",_wrap_SineWave_addPhase,0,0,0,0},
{"addPhaseOffset",_wrap_SineWave_addPhaseOffset,0,0,0,0},
{"lastOut",_wrap_SineWave_lastOut,0,0,0,0},
{"tick",_wrap_SineWave_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_SineWave_base_names[] = {"_p_stk__Generator",0};
static const swig_type_info *swig_SineWave_base[] = {0,0};
static swig_octave_class _wrap_class_SineWave = {"SineWave", &SWIGTYPE_p_stk__SineWave,0,_wrap_new_SineWave,0,_wrap_delete_SineWave,swig_SineWave_members,swig_SineWave_base_names,swig_SineWave_base };

static octave_value_list _wrap_new_SingWave__SWIG_0 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::SingWave *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_SingWave",args.length(),2,2,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SingWave" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SingWave" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SingWave" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    result = (stk::SingWave *)new stk::SingWave(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__SingWave, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_SingWave__SWIG_1 (const octave_value_list& args, int nargout) {
  std::string arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::SingWave *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_SingWave",args.length(),1,1,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SingWave" "', argument " "1"" of type '" "std::string""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SingWave" "', argument " "1"" of type '" "std::string""'");
      } else {
        arg1 = *(reinterpret_cast< std::string * >(argp1));
      }
    }
    result = (stk::SingWave *)new stk::SingWave(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__SingWave, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_SingWave, _wrap_new_SingWave, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SingWave__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SingWave__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_SingWave, _wrap_delete_SingWave, std::string() ) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_SingWave",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SingWave" "', argument " "1"" of type '" "stk::SingWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SingWave_reset, _wrap_SingWave_reset, std::string() ) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SingWave_reset",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingWave_reset" "', argument " "1"" of type '" "stk::SingWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    (arg1)->reset();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_SingWave_normalize__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SingWave_normalize",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingWave_normalize" "', argument " "1"" of type '" "stk::SingWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    (arg1)->normalize();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_SingWave_normalize__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SingWave_normalize",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingWave_normalize" "', argument " "1"" of type '" "stk::SingWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SingWave_normalize" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->normalize(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SingWave_normalize, _wrap_SingWave_normalize, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__SingWave, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SingWave_normalize__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__SingWave, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SingWave_normalize__SWIG_1(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( SingWave_setFrequency, _wrap_SingWave_setFrequency, std::string() ) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SingWave_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingWave_setFrequency" "', argument " "1"" of type '" "stk::SingWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SingWave_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SingWave_setVibratoRate, _wrap_SingWave_setVibratoRate, std::string() ) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SingWave_setVibratoRate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingWave_setVibratoRate" "', argument " "1"" of type '" "stk::SingWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SingWave_setVibratoRate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setVibratoRate(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SingWave_setVibratoGain, _wrap_SingWave_setVibratoGain, std::string() ) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SingWave_setVibratoGain",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingWave_setVibratoGain" "', argument " "1"" of type '" "stk::SingWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SingWave_setVibratoGain" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setVibratoGain(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SingWave_setRandomGain, _wrap_SingWave_setRandomGain, std::string() ) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SingWave_setRandomGain",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingWave_setRandomGain" "', argument " "1"" of type '" "stk::SingWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SingWave_setRandomGain" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setRandomGain(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SingWave_setSweepRate, _wrap_SingWave_setSweepRate, std::string() ) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SingWave_setSweepRate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingWave_setSweepRate" "', argument " "1"" of type '" "stk::SingWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SingWave_setSweepRate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setSweepRate(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SingWave_setGainRate, _wrap_SingWave_setGainRate, std::string() ) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SingWave_setGainRate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingWave_setGainRate" "', argument " "1"" of type '" "stk::SingWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SingWave_setGainRate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setGainRate(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SingWave_setGainTarget, _wrap_SingWave_setGainTarget, std::string() ) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SingWave_setGainTarget",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingWave_setGainTarget" "', argument " "1"" of type '" "stk::SingWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SingWave_setGainTarget" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setGainTarget(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SingWave_noteOn, _wrap_SingWave_noteOn, std::string() ) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SingWave_noteOn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingWave_noteOn" "', argument " "1"" of type '" "stk::SingWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    (arg1)->noteOn();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SingWave_noteOff, _wrap_SingWave_noteOff, std::string() ) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("SingWave_noteOff",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingWave_noteOff" "', argument " "1"" of type '" "stk::SingWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    (arg1)->noteOff();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SingWave_lastOut, _wrap_SingWave_lastOut, std::string() ) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("SingWave_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingWave_lastOut" "', argument " "1"" of type '" "stk::SingWave const *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    result = (stk::StkFloat)((stk::SingWave const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_SingWave_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("SingWave_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingWave_tick" "', argument " "1"" of type '" "stk::SingWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_SingWave_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("SingWave_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingWave_tick" "', argument " "1"" of type '" "stk::SingWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SingWave_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SingWave_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SingWave_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_SingWave_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("SingWave_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__SingWave, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SingWave_tick" "', argument " "1"" of type '" "stk::SingWave *""'"); 
    }
    arg1 = reinterpret_cast< stk::SingWave * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SingWave_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SingWave_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( SingWave_tick, _wrap_SingWave_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__SingWave, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SingWave_tick__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__SingWave, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SingWave_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__SingWave, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SingWave_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_SingWave_members[] = {
{"reset",_wrap_SingWave_reset,0,0,0,0},
{"normalize",_wrap_SingWave_normalize,0,0,0,0},
{"setFrequency",_wrap_SingWave_setFrequency,0,0,0,0},
{"setVibratoRate",_wrap_SingWave_setVibratoRate,0,0,0,0},
{"setVibratoGain",_wrap_SingWave_setVibratoGain,0,0,0,0},
{"setRandomGain",_wrap_SingWave_setRandomGain,0,0,0,0},
{"setSweepRate",_wrap_SingWave_setSweepRate,0,0,0,0},
{"setGainRate",_wrap_SingWave_setGainRate,0,0,0,0},
{"setGainTarget",_wrap_SingWave_setGainTarget,0,0,0,0},
{"noteOn",_wrap_SingWave_noteOn,0,0,0,0},
{"noteOff",_wrap_SingWave_noteOff,0,0,0,0},
{"lastOut",_wrap_SingWave_lastOut,0,0,0,0},
{"tick",_wrap_SingWave_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_SingWave_base_names[] = {"_p_stk__Generator",0};
static const swig_type_info *swig_SingWave_base[] = {0,0};
static swig_octave_class _wrap_class_SingWave = {"SingWave", &SWIGTYPE_p_stk__SingWave,0,_wrap_new_SingWave,0,_wrap_delete_SingWave,swig_SingWave_members,swig_SingWave_base_names,swig_SingWave_base };

static octave_value_list _wrap_new_Sitar__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Sitar *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Sitar",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Sitar" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::Sitar *)new stk::Sitar(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Sitar, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Sitar__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Sitar *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Sitar",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Sitar *)new stk::Sitar();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Sitar, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Sitar, _wrap_new_Sitar, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_Sitar__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Sitar__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Sitar, _wrap_delete_Sitar, std::string() ) {
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Sitar",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sitar, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Sitar" "', argument " "1"" of type '" "stk::Sitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sitar * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sitar_clear, _wrap_Sitar_clear, std::string() ) {
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Sitar_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sitar_clear" "', argument " "1"" of type '" "stk::Sitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sitar * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sitar_setFrequency, _wrap_Sitar_setFrequency, std::string() ) {
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Sitar_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sitar_setFrequency" "', argument " "1"" of type '" "stk::Sitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sitar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sitar_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sitar_pluck, _wrap_Sitar_pluck, std::string() ) {
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Sitar_pluck",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sitar_pluck" "', argument " "1"" of type '" "stk::Sitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sitar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sitar_pluck" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->pluck(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sitar_noteOn, _wrap_Sitar_noteOn, std::string() ) {
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Sitar_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sitar_noteOn" "', argument " "1"" of type '" "stk::Sitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sitar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sitar_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sitar_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sitar_noteOff, _wrap_Sitar_noteOff, std::string() ) {
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Sitar_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sitar_noteOff" "', argument " "1"" of type '" "stk::Sitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sitar * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sitar_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Sitar_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Sitar_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sitar_tick" "', argument " "1"" of type '" "stk::Sitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sitar * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sitar_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Sitar_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Sitar_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sitar_tick" "', argument " "1"" of type '" "stk::Sitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sitar * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Sitar_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Sitar_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sitar_tick" "', argument " "1"" of type '" "stk::Sitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sitar * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sitar_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sitar_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sitar_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Sitar_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Sitar_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sitar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sitar_tick" "', argument " "1"" of type '" "stk::Sitar *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sitar * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sitar_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sitar_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sitar_tick, _wrap_Sitar_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Sitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Sitar_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Sitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Sitar_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Sitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Sitar_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Sitar, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Sitar_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Sitar_members[] = {
{"clear",_wrap_Sitar_clear,0,0,0,0},
{"setFrequency",_wrap_Sitar_setFrequency,0,0,0,0},
{"pluck",_wrap_Sitar_pluck,0,0,0,0},
{"noteOn",_wrap_Sitar_noteOn,0,0,0,0},
{"noteOff",_wrap_Sitar_noteOff,0,0,0,0},
{"tick",_wrap_Sitar_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Sitar_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Sitar_base[] = {0,0};
static swig_octave_class _wrap_class_Sitar = {"Sitar", &SWIGTYPE_p_stk__Sitar,0,_wrap_new_Sitar,0,_wrap_delete_Sitar,swig_Sitar_members,swig_Sitar_base_names,swig_Sitar_base };

static octave_value_list _wrap_new_Sphere__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Sphere *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Sphere",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Sphere" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::Sphere *)new stk::Sphere(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Sphere, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Sphere__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Sphere *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Sphere",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Sphere *)new stk::Sphere();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Sphere, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Sphere, _wrap_new_Sphere, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_Sphere__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Sphere__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Sphere_setPosition, _wrap_Sphere_setPosition, std::string() ) {
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Sphere_setPosition",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sphere, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_setPosition" "', argument " "1"" of type '" "stk::Sphere *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sphere * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sphere_setPosition" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sphere_setPosition" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Sphere_setPosition" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    (arg1)->setPosition(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sphere_setVelocity, _wrap_Sphere_setVelocity, std::string() ) {
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Sphere_setVelocity",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sphere, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_setVelocity" "', argument " "1"" of type '" "stk::Sphere *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sphere * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sphere_setVelocity" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sphere_setVelocity" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Sphere_setVelocity" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    (arg1)->setVelocity(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sphere_setRadius, _wrap_Sphere_setRadius, std::string() ) {
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Sphere_setRadius",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sphere, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_setRadius" "', argument " "1"" of type '" "stk::Sphere *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sphere * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sphere_setRadius" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setRadius(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sphere_setMass, _wrap_Sphere_setMass, std::string() ) {
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Sphere_setMass",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sphere, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_setMass" "', argument " "1"" of type '" "stk::Sphere *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sphere * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sphere_setMass" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setMass(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sphere_getPosition, _wrap_Sphere_getPosition, std::string() ) {
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  Vector3D *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Sphere_getPosition",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sphere, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_getPosition" "', argument " "1"" of type '" "stk::Sphere *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sphere * >(argp1);
    result = (Vector3D *)(arg1)->getPosition();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector3D, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sphere_getRelativePosition, _wrap_Sphere_getRelativePosition, std::string() ) {
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  Vector3D *arg2 = (Vector3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  Vector3D *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Sphere_getRelativePosition",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sphere, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_getRelativePosition" "', argument " "1"" of type '" "stk::Sphere *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sphere * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_Vector3D, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sphere_getRelativePosition" "', argument " "2"" of type '" "Vector3D *""'"); 
    }
    arg2 = reinterpret_cast< Vector3D * >(argp2);
    result = (Vector3D *)(arg1)->getRelativePosition(arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector3D, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sphere_getVelocity, _wrap_Sphere_getVelocity, std::string() ) {
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  Vector3D *arg2 = (Vector3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Sphere_getVelocity",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sphere, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_getVelocity" "', argument " "1"" of type '" "stk::Sphere *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sphere * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_Vector3D, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sphere_getVelocity" "', argument " "2"" of type '" "Vector3D *""'"); 
    }
    arg2 = reinterpret_cast< Vector3D * >(argp2);
    result = (stk::StkFloat)(arg1)->getVelocity(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sphere_isInside, _wrap_Sphere_isInside, std::string() ) {
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  Vector3D *arg2 = (Vector3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Sphere_isInside",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sphere, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_isInside" "', argument " "1"" of type '" "stk::Sphere *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sphere * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_Vector3D, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sphere_isInside" "', argument " "2"" of type '" "Vector3D *""'"); 
    }
    arg2 = reinterpret_cast< Vector3D * >(argp2);
    result = (stk::StkFloat)(arg1)->isInside(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sphere_getRadius, _wrap_Sphere_getRadius, std::string() ) {
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Sphere_getRadius",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sphere, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_getRadius" "', argument " "1"" of type '" "stk::Sphere *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sphere * >(argp1);
    result = (stk::StkFloat)(arg1)->getRadius();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sphere_getMass, _wrap_Sphere_getMass, std::string() ) {
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Sphere_getMass",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sphere, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_getMass" "', argument " "1"" of type '" "stk::Sphere *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sphere * >(argp1);
    result = (stk::StkFloat)(arg1)->getMass();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sphere_addVelocity, _wrap_Sphere_addVelocity, std::string() ) {
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Sphere_addVelocity",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sphere, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_addVelocity" "', argument " "1"" of type '" "stk::Sphere *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sphere * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sphere_addVelocity" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sphere_addVelocity" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Sphere_addVelocity" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    (arg1)->addVelocity(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sphere_tick, _wrap_Sphere_tick, std::string() ) {
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Sphere_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sphere, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_tick" "', argument " "1"" of type '" "stk::Sphere *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sphere * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sphere_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->tick(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Sphere, _wrap_delete_Sphere, std::string() ) {
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Sphere",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sphere, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Sphere" "', argument " "1"" of type '" "stk::Sphere *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sphere * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Sphere_members[] = {
{"setPosition",_wrap_Sphere_setPosition,0,0,0,0},
{"setVelocity",_wrap_Sphere_setVelocity,0,0,0,0},
{"setRadius",_wrap_Sphere_setRadius,0,0,0,0},
{"setMass",_wrap_Sphere_setMass,0,0,0,0},
{"getPosition",_wrap_Sphere_getPosition,0,0,0,0},
{"getRelativePosition",_wrap_Sphere_getRelativePosition,0,0,0,0},
{"getVelocity",_wrap_Sphere_getVelocity,0,0,0,0},
{"isInside",_wrap_Sphere_isInside,0,0,0,0},
{"getRadius",_wrap_Sphere_getRadius,0,0,0,0},
{"getMass",_wrap_Sphere_getMass,0,0,0,0},
{"addVelocity",_wrap_Sphere_addVelocity,0,0,0,0},
{"tick",_wrap_Sphere_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Sphere_base_names[] = {0};
static const swig_type_info *swig_Sphere_base[] = {0};
static swig_octave_class _wrap_class_Sphere = {"Sphere", &SWIGTYPE_p_stk__Sphere,0,_wrap_new_Sphere,0,_wrap_delete_Sphere,swig_Sphere_members,swig_Sphere_base_names,swig_Sphere_base };

static octave_value_list _wrap_new_StifKarp__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StifKarp *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_StifKarp",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StifKarp" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::StifKarp *)new stk::StifKarp(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StifKarp, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_StifKarp__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StifKarp *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_StifKarp",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::StifKarp *)new stk::StifKarp();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StifKarp, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_StifKarp, _wrap_new_StifKarp, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_StifKarp__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StifKarp__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_StifKarp, _wrap_delete_StifKarp, std::string() ) {
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_StifKarp",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StifKarp, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StifKarp" "', argument " "1"" of type '" "stk::StifKarp *""'"); 
    }
    arg1 = reinterpret_cast< stk::StifKarp * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StifKarp_clear, _wrap_StifKarp_clear, std::string() ) {
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("StifKarp_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StifKarp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StifKarp_clear" "', argument " "1"" of type '" "stk::StifKarp *""'"); 
    }
    arg1 = reinterpret_cast< stk::StifKarp * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StifKarp_setFrequency, _wrap_StifKarp_setFrequency, std::string() ) {
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("StifKarp_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StifKarp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StifKarp_setFrequency" "', argument " "1"" of type '" "stk::StifKarp *""'"); 
    }
    arg1 = reinterpret_cast< stk::StifKarp * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StifKarp_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StifKarp_setStretch, _wrap_StifKarp_setStretch, std::string() ) {
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("StifKarp_setStretch",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StifKarp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StifKarp_setStretch" "', argument " "1"" of type '" "stk::StifKarp *""'"); 
    }
    arg1 = reinterpret_cast< stk::StifKarp * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StifKarp_setStretch" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setStretch(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StifKarp_setPickupPosition, _wrap_StifKarp_setPickupPosition, std::string() ) {
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("StifKarp_setPickupPosition",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StifKarp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StifKarp_setPickupPosition" "', argument " "1"" of type '" "stk::StifKarp *""'"); 
    }
    arg1 = reinterpret_cast< stk::StifKarp * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StifKarp_setPickupPosition" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setPickupPosition(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StifKarp_setBaseLoopGain, _wrap_StifKarp_setBaseLoopGain, std::string() ) {
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("StifKarp_setBaseLoopGain",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StifKarp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StifKarp_setBaseLoopGain" "', argument " "1"" of type '" "stk::StifKarp *""'"); 
    }
    arg1 = reinterpret_cast< stk::StifKarp * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StifKarp_setBaseLoopGain" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setBaseLoopGain(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StifKarp_pluck, _wrap_StifKarp_pluck, std::string() ) {
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("StifKarp_pluck",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StifKarp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StifKarp_pluck" "', argument " "1"" of type '" "stk::StifKarp *""'"); 
    }
    arg1 = reinterpret_cast< stk::StifKarp * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StifKarp_pluck" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->pluck(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StifKarp_noteOn, _wrap_StifKarp_noteOn, std::string() ) {
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("StifKarp_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StifKarp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StifKarp_noteOn" "', argument " "1"" of type '" "stk::StifKarp *""'"); 
    }
    arg1 = reinterpret_cast< stk::StifKarp * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StifKarp_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StifKarp_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StifKarp_noteOff, _wrap_StifKarp_noteOff, std::string() ) {
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("StifKarp_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StifKarp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StifKarp_noteOff" "', argument " "1"" of type '" "stk::StifKarp *""'"); 
    }
    arg1 = reinterpret_cast< stk::StifKarp * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StifKarp_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StifKarp_controlChange, _wrap_StifKarp_controlChange, std::string() ) {
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("StifKarp_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StifKarp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StifKarp_controlChange" "', argument " "1"" of type '" "stk::StifKarp *""'"); 
    }
    arg1 = reinterpret_cast< stk::StifKarp * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StifKarp_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StifKarp_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_StifKarp_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("StifKarp_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StifKarp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StifKarp_tick" "', argument " "1"" of type '" "stk::StifKarp *""'"); 
    }
    arg1 = reinterpret_cast< stk::StifKarp * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StifKarp_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_StifKarp_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("StifKarp_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StifKarp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StifKarp_tick" "', argument " "1"" of type '" "stk::StifKarp *""'"); 
    }
    arg1 = reinterpret_cast< stk::StifKarp * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_StifKarp_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("StifKarp_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StifKarp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StifKarp_tick" "', argument " "1"" of type '" "stk::StifKarp *""'"); 
    }
    arg1 = reinterpret_cast< stk::StifKarp * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StifKarp_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StifKarp_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StifKarp_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_StifKarp_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("StifKarp_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__StifKarp, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StifKarp_tick" "', argument " "1"" of type '" "stk::StifKarp *""'"); 
    }
    arg1 = reinterpret_cast< stk::StifKarp * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StifKarp_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StifKarp_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( StifKarp_tick, _wrap_StifKarp_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__StifKarp, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_StifKarp_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__StifKarp, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_StifKarp_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__StifKarp, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StifKarp_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__StifKarp, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StifKarp_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_StifKarp_members[] = {
{"clear",_wrap_StifKarp_clear,0,0,0,0},
{"setFrequency",_wrap_StifKarp_setFrequency,0,0,0,0},
{"setStretch",_wrap_StifKarp_setStretch,0,0,0,0},
{"setPickupPosition",_wrap_StifKarp_setPickupPosition,0,0,0,0},
{"setBaseLoopGain",_wrap_StifKarp_setBaseLoopGain,0,0,0,0},
{"pluck",_wrap_StifKarp_pluck,0,0,0,0},
{"noteOn",_wrap_StifKarp_noteOn,0,0,0,0},
{"noteOff",_wrap_StifKarp_noteOff,0,0,0,0},
{"controlChange",_wrap_StifKarp_controlChange,0,0,0,0},
{"tick",_wrap_StifKarp_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_StifKarp_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_StifKarp_base[] = {0,0};
static swig_octave_class _wrap_class_StifKarp = {"StifKarp", &SWIGTYPE_p_stk__StifKarp,0,_wrap_new_StifKarp,0,_wrap_delete_StifKarp,swig_StifKarp_members,swig_StifKarp_base_names,swig_StifKarp_base };

static octave_value_list _wrap_new_TapDelay__SWIG_0 (const octave_value_list& args, int nargout) {
  SwigValueWrapper< std::vector< unsigned long,std::allocator< unsigned long > > > arg1 ;
  unsigned long arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::TapDelay *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_TapDelay",args.length(),2,2,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TapDelay" "', argument " "1"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > >""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TapDelay" "', argument " "1"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > >""'");
      } else {
        arg1 = *(reinterpret_cast< std::vector< unsigned long,std::allocator< unsigned long > > * >(argp1));
      }
    }
    ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TapDelay" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    result = (stk::TapDelay *)new stk::TapDelay(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__TapDelay, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_TapDelay__SWIG_1 (const octave_value_list& args, int nargout) {
  SwigValueWrapper< std::vector< unsigned long,std::allocator< unsigned long > > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::TapDelay *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_TapDelay",args.length(),1,1,0)) {
      SWIG_fail;
    }
    {
      res1 = SWIG_ConvertPtr(args(0), &argp1, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TapDelay" "', argument " "1"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > >""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TapDelay" "', argument " "1"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > >""'");
      } else {
        arg1 = *(reinterpret_cast< std::vector< unsigned long,std::allocator< unsigned long > > * >(argp1));
      }
    }
    result = (stk::TapDelay *)new stk::TapDelay(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__TapDelay, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_TapDelay__SWIG_2 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::TapDelay *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_TapDelay",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::TapDelay *)new stk::TapDelay();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__TapDelay, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_TapDelay, _wrap_new_TapDelay, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_TapDelay__SWIG_2(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TapDelay__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_TapDelay__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_TapDelay, _wrap_delete_TapDelay, std::string() ) {
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_TapDelay",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TapDelay, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TapDelay" "', argument " "1"" of type '" "stk::TapDelay *""'"); 
    }
    arg1 = reinterpret_cast< stk::TapDelay * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TapDelay_setMaximumDelay, _wrap_TapDelay_setMaximumDelay, std::string() ) {
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TapDelay_setMaximumDelay",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TapDelay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TapDelay_setMaximumDelay" "', argument " "1"" of type '" "stk::TapDelay *""'"); 
    }
    arg1 = reinterpret_cast< stk::TapDelay * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TapDelay_setMaximumDelay" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    (arg1)->setMaximumDelay(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TapDelay_setTapDelays, _wrap_TapDelay_setTapDelays, std::string() ) {
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  SwigValueWrapper< std::vector< unsigned long,std::allocator< unsigned long > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TapDelay_setTapDelays",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TapDelay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TapDelay_setTapDelays" "', argument " "1"" of type '" "stk::TapDelay *""'"); 
    }
    arg1 = reinterpret_cast< stk::TapDelay * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TapDelay_setTapDelays" "', argument " "2"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > >""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TapDelay_setTapDelays" "', argument " "2"" of type '" "std::vector< unsigned long,std::allocator< unsigned long > >""'");
      } else {
        arg2 = *(reinterpret_cast< std::vector< unsigned long,std::allocator< unsigned long > > * >(argp2));
      }
    }
    (arg1)->setTapDelays(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TapDelay_getTapDelays, _wrap_TapDelay_getTapDelays, std::string() ) {
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  SwigValueWrapper< std::vector< unsigned long,std::allocator< unsigned long > > > result;
  
  try {
    if (!SWIG_check_num_args("TapDelay_getTapDelays",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TapDelay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TapDelay_getTapDelays" "', argument " "1"" of type '" "stk::TapDelay const *""'"); 
    }
    arg1 = reinterpret_cast< stk::TapDelay * >(argp1);
    result = ((stk::TapDelay const *)arg1)->getTapDelays();
    _outv = SWIG_NewPointerObj((new std::vector< unsigned long,std::allocator< unsigned long > >(static_cast< const std::vector< unsigned long,std::allocator< unsigned long > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, SWIG_POINTER_OWN |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TapDelay_lastOut__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("TapDelay_lastOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TapDelay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TapDelay_lastOut" "', argument " "1"" of type '" "stk::TapDelay const *""'"); 
    }
    arg1 = reinterpret_cast< stk::TapDelay * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TapDelay_lastOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)((stk::TapDelay const *)arg1)->lastOut(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TapDelay_lastOut__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("TapDelay_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TapDelay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TapDelay_lastOut" "', argument " "1"" of type '" "stk::TapDelay const *""'"); 
    }
    arg1 = reinterpret_cast< stk::TapDelay * >(argp1);
    result = (stk::StkFloat)((stk::TapDelay const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TapDelay_lastOut, _wrap_TapDelay_lastOut, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TapDelay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TapDelay_lastOut__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TapDelay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TapDelay_lastOut__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_TapDelay_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TapDelay_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TapDelay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TapDelay_tick" "', argument " "1"" of type '" "stk::TapDelay *""'"); 
    }
    arg1 = reinterpret_cast< stk::TapDelay * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TapDelay_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TapDelay_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TapDelay_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TapDelay_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TapDelay_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TapDelay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TapDelay_tick" "', argument " "1"" of type '" "stk::TapDelay *""'"); 
    }
    arg1 = reinterpret_cast< stk::TapDelay * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TapDelay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TapDelay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TapDelay_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TapDelay_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TapDelay_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TapDelay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TapDelay_tick" "', argument " "1"" of type '" "stk::TapDelay *""'"); 
    }
    arg1 = reinterpret_cast< stk::TapDelay * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TapDelay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TapDelay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TapDelay_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TapDelay_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TapDelay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TapDelay_tick" "', argument " "1"" of type '" "stk::TapDelay *""'"); 
    }
    arg1 = reinterpret_cast< stk::TapDelay * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TapDelay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TapDelay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TapDelay_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TapDelay_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TapDelay_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TapDelay_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TapDelay_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TapDelay, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TapDelay_tick" "', argument " "1"" of type '" "stk::TapDelay *""'"); 
    }
    arg1 = reinterpret_cast< stk::TapDelay * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TapDelay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TapDelay_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TapDelay_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TapDelay_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TapDelay_tick, _wrap_TapDelay_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TapDelay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TapDelay_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TapDelay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TapDelay_tick__SWIG_4(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TapDelay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TapDelay_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TapDelay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TapDelay_tick__SWIG_0(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TapDelay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TapDelay_tick__SWIG_3(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_TapDelay_members[] = {
{"setMaximumDelay",_wrap_TapDelay_setMaximumDelay,0,0,0,0},
{"setTapDelays",_wrap_TapDelay_setTapDelays,0,0,0,0},
{"getTapDelays",_wrap_TapDelay_getTapDelays,0,0,0,0},
{"lastOut",_wrap_TapDelay_lastOut,0,0,0,0},
{"tick",_wrap_TapDelay_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_TapDelay_base_names[] = {"_p_stk__Filter",0};
static const swig_type_info *swig_TapDelay_base[] = {0,0};
static swig_octave_class _wrap_class_TapDelay = {"TapDelay", &SWIGTYPE_p_stk__TapDelay,0,_wrap_new_TapDelay,0,_wrap_delete_TapDelay,swig_TapDelay_members,swig_TapDelay_base_names,swig_TapDelay_base };

SWIG_DEFUN( new_TubeBell, _wrap_new_TubeBell, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::TubeBell *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_TubeBell",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::TubeBell *)new stk::TubeBell();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__TubeBell, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_TubeBell, _wrap_delete_TubeBell, std::string() ) {
  stk::TubeBell *arg1 = (stk::TubeBell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_TubeBell",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TubeBell, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TubeBell" "', argument " "1"" of type '" "stk::TubeBell *""'"); 
    }
    arg1 = reinterpret_cast< stk::TubeBell * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TubeBell_noteOn, _wrap_TubeBell_noteOn, std::string() ) {
  stk::TubeBell *arg1 = (stk::TubeBell *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TubeBell_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TubeBell, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TubeBell_noteOn" "', argument " "1"" of type '" "stk::TubeBell *""'"); 
    }
    arg1 = reinterpret_cast< stk::TubeBell * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TubeBell_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TubeBell_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TubeBell_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::TubeBell *arg1 = (stk::TubeBell *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("TubeBell_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TubeBell, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TubeBell_tick" "', argument " "1"" of type '" "stk::TubeBell *""'"); 
    }
    arg1 = reinterpret_cast< stk::TubeBell * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TubeBell_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TubeBell_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::TubeBell *arg1 = (stk::TubeBell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("TubeBell_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TubeBell, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TubeBell_tick" "', argument " "1"" of type '" "stk::TubeBell *""'"); 
    }
    arg1 = reinterpret_cast< stk::TubeBell * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TubeBell_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::TubeBell *arg1 = (stk::TubeBell *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TubeBell_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TubeBell, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TubeBell_tick" "', argument " "1"" of type '" "stk::TubeBell *""'"); 
    }
    arg1 = reinterpret_cast< stk::TubeBell * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TubeBell_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TubeBell_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TubeBell_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TubeBell_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::TubeBell *arg1 = (stk::TubeBell *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TubeBell_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TubeBell, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TubeBell_tick" "', argument " "1"" of type '" "stk::TubeBell *""'"); 
    }
    arg1 = reinterpret_cast< stk::TubeBell * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TubeBell_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TubeBell_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TubeBell_tick, _wrap_TubeBell_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TubeBell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TubeBell_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TubeBell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TubeBell_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TubeBell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TubeBell_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TubeBell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TubeBell_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_TubeBell_members[] = {
{"noteOn",_wrap_TubeBell_noteOn,0,0,0,0},
{"tick",_wrap_TubeBell_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_TubeBell_base_names[] = {"_p_stk__FM",0};
static const swig_type_info *swig_TubeBell_base[] = {0,0};
static swig_octave_class _wrap_class_TubeBell = {"TubeBell", &SWIGTYPE_p_stk__TubeBell,0,_wrap_new_TubeBell,0,_wrap_delete_TubeBell,swig_TubeBell_members,swig_TubeBell_base_names,swig_TubeBell_base };

static octave_value_list _wrap_new_Twang__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Twang *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Twang",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Twang" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::Twang *)new stk::Twang(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Twang, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Twang__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Twang *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Twang",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Twang *)new stk::Twang();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Twang, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Twang, _wrap_new_Twang, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_Twang__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Twang__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Twang_clear, _wrap_Twang_clear, std::string() ) {
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Twang_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Twang, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twang_clear" "', argument " "1"" of type '" "stk::Twang *""'"); 
    }
    arg1 = reinterpret_cast< stk::Twang * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Twang_setLowestFrequency, _wrap_Twang_setLowestFrequency, std::string() ) {
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Twang_setLowestFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Twang, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twang_setLowestFrequency" "', argument " "1"" of type '" "stk::Twang *""'"); 
    }
    arg1 = reinterpret_cast< stk::Twang * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Twang_setLowestFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setLowestFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Twang_setFrequency, _wrap_Twang_setFrequency, std::string() ) {
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Twang_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Twang, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twang_setFrequency" "', argument " "1"" of type '" "stk::Twang *""'"); 
    }
    arg1 = reinterpret_cast< stk::Twang * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Twang_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Twang_setPluckPosition, _wrap_Twang_setPluckPosition, std::string() ) {
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Twang_setPluckPosition",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Twang, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twang_setPluckPosition" "', argument " "1"" of type '" "stk::Twang *""'"); 
    }
    arg1 = reinterpret_cast< stk::Twang * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Twang_setPluckPosition" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setPluckPosition(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Twang_setLoopGain, _wrap_Twang_setLoopGain, std::string() ) {
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Twang_setLoopGain",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Twang, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twang_setLoopGain" "', argument " "1"" of type '" "stk::Twang *""'"); 
    }
    arg1 = reinterpret_cast< stk::Twang * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Twang_setLoopGain" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setLoopGain(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Twang_lastOut, _wrap_Twang_lastOut, std::string() ) {
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Twang_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Twang, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twang_lastOut" "', argument " "1"" of type '" "stk::Twang *""'"); 
    }
    arg1 = reinterpret_cast< stk::Twang * >(argp1);
    result = (stk::StkFloat)(arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Twang_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Twang_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Twang, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twang_tick" "', argument " "1"" of type '" "stk::Twang *""'"); 
    }
    arg1 = reinterpret_cast< stk::Twang * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Twang_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Twang_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Twang_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Twang, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twang_tick" "', argument " "1"" of type '" "stk::Twang *""'"); 
    }
    arg1 = reinterpret_cast< stk::Twang * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Twang_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Twang_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Twang_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Twang_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Twang_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Twang, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twang_tick" "', argument " "1"" of type '" "stk::Twang *""'"); 
    }
    arg1 = reinterpret_cast< stk::Twang * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Twang_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Twang_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Twang_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Twang_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Twang, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twang_tick" "', argument " "1"" of type '" "stk::Twang *""'"); 
    }
    arg1 = reinterpret_cast< stk::Twang * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Twang_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Twang_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Twang_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Twang_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Twang_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Twang_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Twang_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Twang_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Twang, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twang_tick" "', argument " "1"" of type '" "stk::Twang *""'"); 
    }
    arg1 = reinterpret_cast< stk::Twang * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Twang_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Twang_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Twang_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Twang_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Twang_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Twang_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Twang_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Twang, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twang_tick" "', argument " "1"" of type '" "stk::Twang *""'"); 
    }
    arg1 = reinterpret_cast< stk::Twang * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Twang_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Twang_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Twang_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Twang_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Twang_tick, _wrap_Twang_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Twang, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Twang_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Twang, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Twang_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Twang, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Twang_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Twang, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Twang_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Twang, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Twang_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Twang, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Twang_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Twang, _wrap_delete_Twang, std::string() ) {
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Twang",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Twang, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Twang" "', argument " "1"" of type '" "stk::Twang *""'"); 
    }
    arg1 = reinterpret_cast< stk::Twang * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Twang_members[] = {
{"clear",_wrap_Twang_clear,0,0,0,0},
{"setLowestFrequency",_wrap_Twang_setLowestFrequency,0,0,0,0},
{"setFrequency",_wrap_Twang_setFrequency,0,0,0,0},
{"setPluckPosition",_wrap_Twang_setPluckPosition,0,0,0,0},
{"setLoopGain",_wrap_Twang_setLoopGain,0,0,0,0},
{"lastOut",_wrap_Twang_lastOut,0,0,0,0},
{"tick",_wrap_Twang_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Twang_base_names[] = {0};
static const swig_type_info *swig_Twang_base[] = {0};
static swig_octave_class _wrap_class_Twang = {"Twang", &SWIGTYPE_p_stk__Twang,0,_wrap_new_Twang,0,_wrap_delete_Twang,swig_Twang_members,swig_Twang_base_names,swig_Twang_base };

SWIG_DEFUN( new_TwoPole, _wrap_new_TwoPole, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::TwoPole *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_TwoPole",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::TwoPole *)new stk::TwoPole();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__TwoPole, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_TwoPole, _wrap_delete_TwoPole, std::string() ) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_TwoPole",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TwoPole" "', argument " "1"" of type '" "stk::TwoPole *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoPole_ignoreSampleRateChange__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoPole_ignoreSampleRateChange",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoPole_ignoreSampleRateChange" "', argument " "1"" of type '" "stk::TwoPole *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoPole_ignoreSampleRateChange" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    (arg1)->ignoreSampleRateChange(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoPole_ignoreSampleRateChange__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoPole_ignoreSampleRateChange",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoPole_ignoreSampleRateChange" "', argument " "1"" of type '" "stk::TwoPole *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    (arg1)->ignoreSampleRateChange();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TwoPole_ignoreSampleRateChange, _wrap_TwoPole_ignoreSampleRateChange, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoPole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TwoPole_ignoreSampleRateChange__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoPole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TwoPole_ignoreSampleRateChange__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( TwoPole_setB0, _wrap_TwoPole_setB0, std::string() ) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoPole_setB0",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoPole_setB0" "', argument " "1"" of type '" "stk::TwoPole *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoPole_setB0" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setB0(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TwoPole_setA1, _wrap_TwoPole_setA1, std::string() ) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoPole_setA1",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoPole_setA1" "', argument " "1"" of type '" "stk::TwoPole *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoPole_setA1" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setA1(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TwoPole_setA2, _wrap_TwoPole_setA2, std::string() ) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoPole_setA2",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoPole_setA2" "', argument " "1"" of type '" "stk::TwoPole *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoPole_setA2" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setA2(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoPole_setCoefficients__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoPole_setCoefficients",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoPole_setCoefficients" "', argument " "1"" of type '" "stk::TwoPole *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoPole_setCoefficients" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TwoPole_setCoefficients" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TwoPole_setCoefficients" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    ecode5 = SWIG_AsVal_bool(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TwoPole_setCoefficients" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    (arg1)->setCoefficients(arg2,arg3,arg4,arg5);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoPole_setCoefficients__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoPole_setCoefficients",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoPole_setCoefficients" "', argument " "1"" of type '" "stk::TwoPole *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoPole_setCoefficients" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TwoPole_setCoefficients" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TwoPole_setCoefficients" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    (arg1)->setCoefficients(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TwoPole_setCoefficients, _wrap_TwoPole_setCoefficients, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoPole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TwoPole_setCoefficients__SWIG_1(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoPole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TwoPole_setCoefficients__SWIG_0(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_TwoPole_setResonance__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoPole_setResonance",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoPole_setResonance" "', argument " "1"" of type '" "stk::TwoPole *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoPole_setResonance" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TwoPole_setResonance" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_bool(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TwoPole_setResonance" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
    (arg1)->setResonance(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoPole_setResonance__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoPole_setResonance",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoPole_setResonance" "', argument " "1"" of type '" "stk::TwoPole *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoPole_setResonance" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TwoPole_setResonance" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setResonance(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TwoPole_setResonance, _wrap_TwoPole_setResonance, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoPole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TwoPole_setResonance__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoPole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TwoPole_setResonance__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( TwoPole_lastOut, _wrap_TwoPole_lastOut, std::string() ) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("TwoPole_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoPole_lastOut" "', argument " "1"" of type '" "stk::TwoPole const *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    result = (stk::StkFloat)((stk::TwoPole const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoPole_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("TwoPole_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoPole_tick" "', argument " "1"" of type '" "stk::TwoPole *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoPole_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoPole_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TwoPole_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoPole_tick" "', argument " "1"" of type '" "stk::TwoPole *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TwoPole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoPole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TwoPole_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoPole_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TwoPole_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoPole_tick" "', argument " "1"" of type '" "stk::TwoPole *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TwoPole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoPole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoPole_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TwoPole_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoPole_tick" "', argument " "1"" of type '" "stk::TwoPole *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TwoPole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoPole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TwoPole_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoPole_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TwoPole_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TwoPole_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoPole_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TwoPole_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoPole_tick" "', argument " "1"" of type '" "stk::TwoPole *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TwoPole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoPole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TwoPole_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoPole_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TwoPole_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoPole_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TwoPole_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoPole, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoPole_tick" "', argument " "1"" of type '" "stk::TwoPole *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoPole * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TwoPole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoPole_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TwoPole_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoPole_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TwoPole_tick, _wrap_TwoPole_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoPole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TwoPole_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoPole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TwoPole_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoPole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TwoPole_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoPole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TwoPole_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoPole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TwoPole_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoPole, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TwoPole_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_TwoPole_members[] = {
{"ignoreSampleRateChange",_wrap_TwoPole_ignoreSampleRateChange,0,0,0,0},
{"setB0",_wrap_TwoPole_setB0,0,0,0,0},
{"setA1",_wrap_TwoPole_setA1,0,0,0,0},
{"setA2",_wrap_TwoPole_setA2,0,0,0,0},
{"setCoefficients",_wrap_TwoPole_setCoefficients,0,0,0,0},
{"setResonance",_wrap_TwoPole_setResonance,0,0,0,0},
{"lastOut",_wrap_TwoPole_lastOut,0,0,0,0},
{"tick",_wrap_TwoPole_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_TwoPole_base_names[] = {"_p_stk__Filter",0};
static const swig_type_info *swig_TwoPole_base[] = {0,0};
static swig_octave_class _wrap_class_TwoPole = {"TwoPole", &SWIGTYPE_p_stk__TwoPole,0,_wrap_new_TwoPole,0,_wrap_delete_TwoPole,swig_TwoPole_members,swig_TwoPole_base_names,swig_TwoPole_base };

SWIG_DEFUN( new_TwoZero, _wrap_new_TwoZero, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::TwoZero *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_TwoZero",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::TwoZero *)new stk::TwoZero();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__TwoZero, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_TwoZero, _wrap_delete_TwoZero, std::string() ) {
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_TwoZero",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoZero, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TwoZero" "', argument " "1"" of type '" "stk::TwoZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoZero * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoZero_ignoreSampleRateChange__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoZero_ignoreSampleRateChange",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoZero_ignoreSampleRateChange" "', argument " "1"" of type '" "stk::TwoZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoZero * >(argp1);
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoZero_ignoreSampleRateChange" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    (arg1)->ignoreSampleRateChange(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoZero_ignoreSampleRateChange__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoZero_ignoreSampleRateChange",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoZero_ignoreSampleRateChange" "', argument " "1"" of type '" "stk::TwoZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoZero * >(argp1);
    (arg1)->ignoreSampleRateChange();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TwoZero_ignoreSampleRateChange, _wrap_TwoZero_ignoreSampleRateChange, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TwoZero_ignoreSampleRateChange__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TwoZero_ignoreSampleRateChange__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( TwoZero_setB0, _wrap_TwoZero_setB0, std::string() ) {
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoZero_setB0",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoZero_setB0" "', argument " "1"" of type '" "stk::TwoZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoZero_setB0" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setB0(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TwoZero_setB1, _wrap_TwoZero_setB1, std::string() ) {
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoZero_setB1",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoZero_setB1" "', argument " "1"" of type '" "stk::TwoZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoZero_setB1" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setB1(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TwoZero_setB2, _wrap_TwoZero_setB2, std::string() ) {
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoZero_setB2",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoZero_setB2" "', argument " "1"" of type '" "stk::TwoZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoZero_setB2" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setB2(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoZero_setCoefficients__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoZero_setCoefficients",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoZero_setCoefficients" "', argument " "1"" of type '" "stk::TwoZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoZero_setCoefficients" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TwoZero_setCoefficients" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TwoZero_setCoefficients" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    ecode5 = SWIG_AsVal_bool(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TwoZero_setCoefficients" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    (arg1)->setCoefficients(arg2,arg3,arg4,arg5);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoZero_setCoefficients__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoZero_setCoefficients",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoZero_setCoefficients" "', argument " "1"" of type '" "stk::TwoZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoZero_setCoefficients" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TwoZero_setCoefficients" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TwoZero_setCoefficients" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    (arg1)->setCoefficients(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TwoZero_setCoefficients, _wrap_TwoZero_setCoefficients, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TwoZero_setCoefficients__SWIG_1(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TwoZero_setCoefficients__SWIG_0(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( TwoZero_setNotch, _wrap_TwoZero_setNotch, std::string() ) {
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("TwoZero_setNotch",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoZero_setNotch" "', argument " "1"" of type '" "stk::TwoZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoZero_setNotch" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TwoZero_setNotch" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setNotch(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TwoZero_lastOut, _wrap_TwoZero_lastOut, std::string() ) {
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("TwoZero_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoZero_lastOut" "', argument " "1"" of type '" "stk::TwoZero const *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoZero * >(argp1);
    result = (stk::StkFloat)((stk::TwoZero const *)arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoZero_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("TwoZero_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoZero_tick" "', argument " "1"" of type '" "stk::TwoZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoZero * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoZero_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoZero_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TwoZero_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoZero_tick" "', argument " "1"" of type '" "stk::TwoZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoZero * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TwoZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TwoZero_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoZero_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TwoZero_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoZero_tick" "', argument " "1"" of type '" "stk::TwoZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoZero * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TwoZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoZero_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TwoZero_tick",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoZero_tick" "', argument " "1"" of type '" "stk::TwoZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoZero * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TwoZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TwoZero_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoZero_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TwoZero_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TwoZero_tick" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoZero_tick__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TwoZero_tick",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoZero_tick" "', argument " "1"" of type '" "stk::TwoZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoZero * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TwoZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TwoZero_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoZero_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TwoZero_tick" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TwoZero_tick__SWIG_5 (const octave_value_list& args, int nargout) {
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("TwoZero_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TwoZero, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoZero_tick" "', argument " "1"" of type '" "stk::TwoZero *""'"); 
    }
    arg1 = reinterpret_cast< stk::TwoZero * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TwoZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoZero_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TwoZero_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoZero_tick" "', argument " "3"" of type '" "stk::StkFrames &""'"); 
    }
    arg3 = reinterpret_cast< stk::StkFrames * >(argp3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TwoZero_tick, _wrap_TwoZero_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TwoZero_tick__SWIG_2(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TwoZero_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TwoZero_tick__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TwoZero_tick__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TwoZero_tick__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TwoZero, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TwoZero_tick__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_TwoZero_members[] = {
{"ignoreSampleRateChange",_wrap_TwoZero_ignoreSampleRateChange,0,0,0,0},
{"setB0",_wrap_TwoZero_setB0,0,0,0,0},
{"setB1",_wrap_TwoZero_setB1,0,0,0,0},
{"setB2",_wrap_TwoZero_setB2,0,0,0,0},
{"setCoefficients",_wrap_TwoZero_setCoefficients,0,0,0,0},
{"setNotch",_wrap_TwoZero_setNotch,0,0,0,0},
{"lastOut",_wrap_TwoZero_lastOut,0,0,0,0},
{"tick",_wrap_TwoZero_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_TwoZero_base_names[] = {"_p_stk__Filter",0};
static const swig_type_info *swig_TwoZero_base[] = {0,0};
static swig_octave_class _wrap_class_TwoZero = {"TwoZero", &SWIGTYPE_p_stk__TwoZero,0,_wrap_new_TwoZero,0,_wrap_delete_TwoZero,swig_TwoZero_members,swig_TwoZero_base_names,swig_TwoZero_base };

static octave_value_list _wrap_new_Vector3D__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Vector3D *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Vector3D",args.length(),3,3,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector3D" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector3D" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Vector3D" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    result = (stk::Vector3D *)new stk::Vector3D(arg1,arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Vector3D, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Vector3D__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  stk::StkFloat arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Vector3D *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Vector3D",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector3D" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector3D" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::Vector3D *)new stk::Vector3D(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Vector3D, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Vector3D__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Vector3D *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Vector3D",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector3D" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::Vector3D *)new stk::Vector3D(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Vector3D, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Vector3D__SWIG_3 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Vector3D *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Vector3D",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Vector3D *)new stk::Vector3D();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Vector3D, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Vector3D, _wrap_new_Vector3D, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 0) {
    return _wrap_new_Vector3D__SWIG_3(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Vector3D__SWIG_2(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vector3D__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Vector3D__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Vector3D_getX, _wrap_Vector3D_getX, std::string() ) {
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Vector3D_getX",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Vector3D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3D_getX" "', argument " "1"" of type '" "stk::Vector3D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Vector3D * >(argp1);
    result = (stk::StkFloat)(arg1)->getX();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Vector3D_getY, _wrap_Vector3D_getY, std::string() ) {
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Vector3D_getY",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Vector3D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3D_getY" "', argument " "1"" of type '" "stk::Vector3D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Vector3D * >(argp1);
    result = (stk::StkFloat)(arg1)->getY();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Vector3D_getZ, _wrap_Vector3D_getZ, std::string() ) {
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Vector3D_getZ",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Vector3D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3D_getZ" "', argument " "1"" of type '" "stk::Vector3D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Vector3D * >(argp1);
    result = (stk::StkFloat)(arg1)->getZ();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Vector3D_getLength, _wrap_Vector3D_getLength, std::string() ) {
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Vector3D_getLength",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Vector3D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3D_getLength" "', argument " "1"" of type '" "stk::Vector3D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Vector3D * >(argp1);
    result = (stk::StkFloat)(arg1)->getLength();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Vector3D_setXYZ, _wrap_Vector3D_setXYZ, std::string() ) {
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Vector3D_setXYZ",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Vector3D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3D_setXYZ" "', argument " "1"" of type '" "stk::Vector3D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Vector3D * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector3D_setXYZ" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector3D_setXYZ" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Vector3D_setXYZ" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    (arg1)->setXYZ(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Vector3D_setX, _wrap_Vector3D_setX, std::string() ) {
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Vector3D_setX",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Vector3D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3D_setX" "', argument " "1"" of type '" "stk::Vector3D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Vector3D * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector3D_setX" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setX(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Vector3D_setY, _wrap_Vector3D_setY, std::string() ) {
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Vector3D_setY",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Vector3D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3D_setY" "', argument " "1"" of type '" "stk::Vector3D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Vector3D * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector3D_setY" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setY(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Vector3D_setZ, _wrap_Vector3D_setZ, std::string() ) {
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Vector3D_setZ",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Vector3D, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3D_setZ" "', argument " "1"" of type '" "stk::Vector3D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Vector3D * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector3D_setZ" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setZ(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Vector3D, _wrap_delete_Vector3D, std::string() ) {
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Vector3D",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Vector3D, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vector3D" "', argument " "1"" of type '" "stk::Vector3D *""'"); 
    }
    arg1 = reinterpret_cast< stk::Vector3D * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Vector3D_members[] = {
{"getX",_wrap_Vector3D_getX,0,0,0,0},
{"getY",_wrap_Vector3D_getY,0,0,0,0},
{"getZ",_wrap_Vector3D_getZ,0,0,0,0},
{"getLength",_wrap_Vector3D_getLength,0,0,0,0},
{"setXYZ",_wrap_Vector3D_setXYZ,0,0,0,0},
{"setX",_wrap_Vector3D_setX,0,0,0,0},
{"setY",_wrap_Vector3D_setY,0,0,0,0},
{"setZ",_wrap_Vector3D_setZ,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Vector3D_base_names[] = {0};
static const swig_type_info *swig_Vector3D_base[] = {0};
static swig_octave_class _wrap_class_Vector3D = {"Vector3D", &SWIGTYPE_p_stk__Vector3D,0,_wrap_new_Vector3D,0,_wrap_delete_Vector3D,swig_Vector3D_members,swig_Vector3D_base_names,swig_Vector3D_base };

SWIG_DEFUN( new_VoicForm, _wrap_new_VoicForm, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::VoicForm *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_VoicForm",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::VoicForm *)new stk::VoicForm();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__VoicForm, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_VoicForm, _wrap_delete_VoicForm, std::string() ) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_VoicForm",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VoicForm" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( VoicForm_clear, _wrap_VoicForm_clear, std::string() ) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("VoicForm_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoicForm_clear" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( VoicForm_setFrequency, _wrap_VoicForm_setFrequency, std::string() ) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("VoicForm_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoicForm_setFrequency" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoicForm_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( VoicForm_setPhoneme, _wrap_VoicForm_setPhoneme, std::string() ) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  try {
    if (!SWIG_check_num_args("VoicForm_setPhoneme",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoicForm_setPhoneme" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VoicForm_setPhoneme" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    result = (bool)(arg1)->setPhoneme((char const *)arg2);
    _outv = SWIG_From_bool(static_cast< bool >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return _out;
  fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    return octave_value_list();
  }
  catch(...) {
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    throw;
  }
}


SWIG_DEFUN( VoicForm_setVoiced, _wrap_VoicForm_setVoiced, std::string() ) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("VoicForm_setVoiced",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoicForm_setVoiced" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoicForm_setVoiced" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setVoiced(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( VoicForm_setUnVoiced, _wrap_VoicForm_setUnVoiced, std::string() ) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("VoicForm_setUnVoiced",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoicForm_setUnVoiced" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoicForm_setUnVoiced" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setUnVoiced(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( VoicForm_setFilterSweepRate, _wrap_VoicForm_setFilterSweepRate, std::string() ) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("VoicForm_setFilterSweepRate",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoicForm_setFilterSweepRate" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoicForm_setFilterSweepRate" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VoicForm_setFilterSweepRate" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setFilterSweepRate(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( VoicForm_setPitchSweepRate, _wrap_VoicForm_setPitchSweepRate, std::string() ) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("VoicForm_setPitchSweepRate",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoicForm_setPitchSweepRate" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoicForm_setPitchSweepRate" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setPitchSweepRate(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( VoicForm_speak, _wrap_VoicForm_speak, std::string() ) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("VoicForm_speak",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoicForm_speak" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    (arg1)->speak();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( VoicForm_quiet, _wrap_VoicForm_quiet, std::string() ) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("VoicForm_quiet",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoicForm_quiet" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    (arg1)->quiet();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( VoicForm_noteOn, _wrap_VoicForm_noteOn, std::string() ) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("VoicForm_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoicForm_noteOn" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoicForm_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VoicForm_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( VoicForm_noteOff, _wrap_VoicForm_noteOff, std::string() ) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("VoicForm_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoicForm_noteOff" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoicForm_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( VoicForm_controlChange, _wrap_VoicForm_controlChange, std::string() ) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("VoicForm_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoicForm_controlChange" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoicForm_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VoicForm_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_VoicForm_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("VoicForm_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoicForm_tick" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoicForm_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_VoicForm_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("VoicForm_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoicForm_tick" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_VoicForm_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("VoicForm_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoicForm_tick" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VoicForm_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VoicForm_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VoicForm_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_VoicForm_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("VoicForm_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__VoicForm, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoicForm_tick" "', argument " "1"" of type '" "stk::VoicForm *""'"); 
    }
    arg1 = reinterpret_cast< stk::VoicForm * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VoicForm_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VoicForm_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( VoicForm_tick, _wrap_VoicForm_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__VoicForm, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VoicForm_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__VoicForm, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VoicForm_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__VoicForm, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VoicForm_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__VoicForm, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VoicForm_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_VoicForm_members[] = {
{"clear",_wrap_VoicForm_clear,0,0,0,0},
{"setFrequency",_wrap_VoicForm_setFrequency,0,0,0,0},
{"setPhoneme",_wrap_VoicForm_setPhoneme,0,0,0,0},
{"setVoiced",_wrap_VoicForm_setVoiced,0,0,0,0},
{"setUnVoiced",_wrap_VoicForm_setUnVoiced,0,0,0,0},
{"setFilterSweepRate",_wrap_VoicForm_setFilterSweepRate,0,0,0,0},
{"setPitchSweepRate",_wrap_VoicForm_setPitchSweepRate,0,0,0,0},
{"speak",_wrap_VoicForm_speak,0,0,0,0},
{"quiet",_wrap_VoicForm_quiet,0,0,0,0},
{"noteOn",_wrap_VoicForm_noteOn,0,0,0,0},
{"noteOff",_wrap_VoicForm_noteOff,0,0,0,0},
{"controlChange",_wrap_VoicForm_controlChange,0,0,0,0},
{"tick",_wrap_VoicForm_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_VoicForm_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_VoicForm_base[] = {0,0};
static swig_octave_class _wrap_class_VoicForm = {"VoicForm", &SWIGTYPE_p_stk__VoicForm,0,_wrap_new_VoicForm,0,_wrap_delete_VoicForm,swig_VoicForm_members,swig_VoicForm_base_names,swig_VoicForm_base };

static octave_value_list _wrap_new_Voicer__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::StkFloat arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Voicer *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Voicer",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_float(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Voicer" "', argument " "1"" of type '" "stk::StkFloat""'");
    } 
    arg1 = static_cast< stk::StkFloat >(val1);
    result = (stk::Voicer *)new stk::Voicer(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Voicer, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_Voicer__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Voicer *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Voicer",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Voicer *)new stk::Voicer();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Voicer, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_Voicer, _wrap_new_Voicer, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_Voicer__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Voicer__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Voicer_addInstrument__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::Instrmnt *arg2 = (stk::Instrmnt *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Voicer_addInstrument",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_addInstrument" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_stk__Instrmnt, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Voicer_addInstrument" "', argument " "2"" of type '" "stk::Instrmnt *""'"); 
    }
    arg2 = reinterpret_cast< stk::Instrmnt * >(argp2);
    ecode3 = SWIG_AsVal_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Voicer_addInstrument" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    (arg1)->addInstrument(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Voicer_addInstrument__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::Instrmnt *arg2 = (stk::Instrmnt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Voicer_addInstrument",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_addInstrument" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_stk__Instrmnt, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Voicer_addInstrument" "', argument " "2"" of type '" "stk::Instrmnt *""'"); 
    }
    arg2 = reinterpret_cast< stk::Instrmnt * >(argp2);
    (arg1)->addInstrument(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Voicer_addInstrument, _wrap_Voicer_addInstrument, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__Instrmnt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Voicer_addInstrument__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__Instrmnt, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Voicer_addInstrument__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Voicer_removeInstrument, _wrap_Voicer_removeInstrument, std::string() ) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::Instrmnt *arg2 = (stk::Instrmnt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Voicer_removeInstrument",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_removeInstrument" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_stk__Instrmnt, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Voicer_removeInstrument" "', argument " "2"" of type '" "stk::Instrmnt *""'"); 
    }
    arg2 = reinterpret_cast< stk::Instrmnt * >(argp2);
    (arg1)->removeInstrument(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Voicer_noteOn__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  long result;
  
  try {
    if (!SWIG_check_num_args("Voicer_noteOn",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_noteOn" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Voicer_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Voicer_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Voicer_noteOn" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    result = (long)(arg1)->noteOn(arg2,arg3,arg4);
    _outv = SWIG_From_long(static_cast< long >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Voicer_noteOn__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  long result;
  
  try {
    if (!SWIG_check_num_args("Voicer_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_noteOn" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Voicer_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Voicer_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    result = (long)(arg1)->noteOn(arg2,arg3);
    _outv = SWIG_From_long(static_cast< long >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Voicer_noteOn, _wrap_Voicer_noteOn, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Voicer_noteOn__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Voicer_noteOn__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Voicer_noteOff__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Voicer_noteOff",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_noteOff" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Voicer_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Voicer_noteOff" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Voicer_noteOff" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    (arg1)->noteOff(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Voicer_noteOff__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Voicer_noteOff",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_noteOff" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Voicer_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Voicer_noteOff" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOff(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Voicer_noteOff__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  long arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Voicer_noteOff",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_noteOff" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    ecode2 = SWIG_AsVal_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Voicer_noteOff" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Voicer_noteOff" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOff(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Voicer_noteOff, _wrap_Voicer_noteOff, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Voicer_noteOff__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Voicer_noteOff__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Voicer_noteOff__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Voicer_setFrequency__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Voicer_setFrequency",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_setFrequency" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Voicer_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Voicer_setFrequency" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    (arg1)->setFrequency(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Voicer_setFrequency__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Voicer_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_setFrequency" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Voicer_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Voicer_setFrequency__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  long arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Voicer_setFrequency",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_setFrequency" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    ecode2 = SWIG_AsVal_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Voicer_setFrequency" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Voicer_setFrequency" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->setFrequency(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Voicer_setFrequency, _wrap_Voicer_setFrequency, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Voicer_setFrequency__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Voicer_setFrequency__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Voicer_setFrequency__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Voicer_pitchBend__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Voicer_pitchBend",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_pitchBend" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Voicer_pitchBend" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Voicer_pitchBend" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    (arg1)->pitchBend(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Voicer_pitchBend__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Voicer_pitchBend",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_pitchBend" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Voicer_pitchBend" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->pitchBend(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Voicer_pitchBend__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  long arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Voicer_pitchBend",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_pitchBend" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    ecode2 = SWIG_AsVal_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Voicer_pitchBend" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Voicer_pitchBend" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->pitchBend(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Voicer_pitchBend, _wrap_Voicer_pitchBend, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Voicer_pitchBend__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Voicer_pitchBend__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Voicer_pitchBend__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Voicer_controlChange__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Voicer_controlChange",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_controlChange" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Voicer_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Voicer_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Voicer_controlChange" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    (arg1)->controlChange(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Voicer_controlChange__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Voicer_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_controlChange" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Voicer_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Voicer_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Voicer_controlChange__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  long arg2 ;
  int arg3 ;
  stk::StkFloat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Voicer_controlChange",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_controlChange" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    ecode2 = SWIG_AsVal_long(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Voicer_controlChange" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    ecode3 = SWIG_AsVal_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Voicer_controlChange" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_float(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Voicer_controlChange" "', argument " "4"" of type '" "stk::StkFloat""'");
    } 
    arg4 = static_cast< stk::StkFloat >(val4);
    (arg1)->controlChange(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Voicer_controlChange, _wrap_Voicer_controlChange, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Voicer_controlChange__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Voicer_controlChange__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Voicer_controlChange__SWIG_2(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Voicer_silence, _wrap_Voicer_silence, std::string() ) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Voicer_silence",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_silence" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    (arg1)->silence();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Voicer_channelsOut, _wrap_Voicer_channelsOut, std::string() ) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  unsigned int result;
  
  try {
    if (!SWIG_check_num_args("Voicer_channelsOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_channelsOut" "', argument " "1"" of type '" "stk::Voicer const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    result = (unsigned int)((stk::Voicer const *)arg1)->channelsOut();
    _outv = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Voicer_lastFrame, _wrap_Voicer_lastFrame, std::string() ) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Voicer_lastFrame",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_lastFrame" "', argument " "1"" of type '" "stk::Voicer const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    result = (stk::StkFrames *) &((stk::Voicer const *)arg1)->lastFrame();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Voicer_lastOut__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Voicer_lastOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_lastOut" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Voicer_lastOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->lastOut(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Voicer_lastOut__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Voicer_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_lastOut" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    result = (stk::StkFloat)(arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Voicer_lastOut, _wrap_Voicer_lastOut, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Voicer_lastOut__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Voicer_lastOut__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Voicer_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Voicer_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_tick" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Voicer_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Voicer_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Voicer_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_tick" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Voicer_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Voicer_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_tick" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Voicer_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Voicer_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Voicer_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Voicer_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Voicer_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Voicer_tick" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Voicer_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Voicer_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Voicer_tick, _wrap_Voicer_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Voicer_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Voicer_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Voicer_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Voicer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Voicer_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_Voicer, _wrap_delete_Voicer, std::string() ) {
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Voicer",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Voicer, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Voicer" "', argument " "1"" of type '" "stk::Voicer *""'"); 
    }
    arg1 = reinterpret_cast< stk::Voicer * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Voicer_members[] = {
{"addInstrument",_wrap_Voicer_addInstrument,0,0,0,0},
{"removeInstrument",_wrap_Voicer_removeInstrument,0,0,0,0},
{"noteOn",_wrap_Voicer_noteOn,0,0,0,0},
{"noteOff",_wrap_Voicer_noteOff,0,0,0,0},
{"setFrequency",_wrap_Voicer_setFrequency,0,0,0,0},
{"pitchBend",_wrap_Voicer_pitchBend,0,0,0,0},
{"controlChange",_wrap_Voicer_controlChange,0,0,0,0},
{"silence",_wrap_Voicer_silence,0,0,0,0},
{"channelsOut",_wrap_Voicer_channelsOut,0,0,0,0},
{"lastFrame",_wrap_Voicer_lastFrame,0,0,0,0},
{"lastOut",_wrap_Voicer_lastOut,0,0,0,0},
{"tick",_wrap_Voicer_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Voicer_base_names[] = {0};
static const swig_type_info *swig_Voicer_base[] = {0};
static swig_octave_class _wrap_class_Voicer = {"Voicer", &SWIGTYPE_p_stk__Voicer,0,_wrap_new_Voicer,0,_wrap_delete_Voicer,swig_Voicer_members,swig_Voicer_base_names,swig_Voicer_base };

SWIG_DEFUN( new_Whistle, _wrap_new_Whistle, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Whistle *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Whistle",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Whistle *)new stk::Whistle();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Whistle, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Whistle, _wrap_delete_Whistle, std::string() ) {
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Whistle",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Whistle, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Whistle" "', argument " "1"" of type '" "stk::Whistle *""'"); 
    }
    arg1 = reinterpret_cast< stk::Whistle * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Whistle_clear, _wrap_Whistle_clear, std::string() ) {
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Whistle_clear",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Whistle, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Whistle_clear" "', argument " "1"" of type '" "stk::Whistle *""'"); 
    }
    arg1 = reinterpret_cast< stk::Whistle * >(argp1);
    (arg1)->clear();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Whistle_setFrequency, _wrap_Whistle_setFrequency, std::string() ) {
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Whistle_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Whistle, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Whistle_setFrequency" "', argument " "1"" of type '" "stk::Whistle *""'"); 
    }
    arg1 = reinterpret_cast< stk::Whistle * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Whistle_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Whistle_startBlowing, _wrap_Whistle_startBlowing, std::string() ) {
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Whistle_startBlowing",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Whistle, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Whistle_startBlowing" "', argument " "1"" of type '" "stk::Whistle *""'"); 
    }
    arg1 = reinterpret_cast< stk::Whistle * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Whistle_startBlowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Whistle_startBlowing" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->startBlowing(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Whistle_stopBlowing, _wrap_Whistle_stopBlowing, std::string() ) {
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Whistle_stopBlowing",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Whistle, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Whistle_stopBlowing" "', argument " "1"" of type '" "stk::Whistle *""'"); 
    }
    arg1 = reinterpret_cast< stk::Whistle * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Whistle_stopBlowing" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->stopBlowing(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Whistle_noteOn, _wrap_Whistle_noteOn, std::string() ) {
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Whistle_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Whistle, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Whistle_noteOn" "', argument " "1"" of type '" "stk::Whistle *""'"); 
    }
    arg1 = reinterpret_cast< stk::Whistle * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Whistle_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Whistle_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Whistle_noteOff, _wrap_Whistle_noteOff, std::string() ) {
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Whistle_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Whistle, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Whistle_noteOff" "', argument " "1"" of type '" "stk::Whistle *""'"); 
    }
    arg1 = reinterpret_cast< stk::Whistle * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Whistle_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Whistle_controlChange, _wrap_Whistle_controlChange, std::string() ) {
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Whistle_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Whistle, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Whistle_controlChange" "', argument " "1"" of type '" "stk::Whistle *""'"); 
    }
    arg1 = reinterpret_cast< stk::Whistle * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Whistle_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Whistle_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Whistle_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Whistle_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Whistle, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Whistle_tick" "', argument " "1"" of type '" "stk::Whistle *""'"); 
    }
    arg1 = reinterpret_cast< stk::Whistle * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Whistle_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Whistle_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Whistle_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Whistle, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Whistle_tick" "', argument " "1"" of type '" "stk::Whistle *""'"); 
    }
    arg1 = reinterpret_cast< stk::Whistle * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Whistle_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Whistle_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Whistle, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Whistle_tick" "', argument " "1"" of type '" "stk::Whistle *""'"); 
    }
    arg1 = reinterpret_cast< stk::Whistle * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Whistle_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Whistle_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Whistle_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Whistle_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Whistle_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Whistle, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Whistle_tick" "', argument " "1"" of type '" "stk::Whistle *""'"); 
    }
    arg1 = reinterpret_cast< stk::Whistle * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Whistle_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Whistle_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Whistle_tick, _wrap_Whistle_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Whistle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Whistle_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Whistle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Whistle_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Whistle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Whistle_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Whistle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Whistle_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Whistle_members[] = {
{"clear",_wrap_Whistle_clear,0,0,0,0},
{"setFrequency",_wrap_Whistle_setFrequency,0,0,0,0},
{"startBlowing",_wrap_Whistle_startBlowing,0,0,0,0},
{"stopBlowing",_wrap_Whistle_stopBlowing,0,0,0,0},
{"noteOn",_wrap_Whistle_noteOn,0,0,0,0},
{"noteOff",_wrap_Whistle_noteOff,0,0,0,0},
{"controlChange",_wrap_Whistle_controlChange,0,0,0,0},
{"tick",_wrap_Whistle_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Whistle_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Whistle_base[] = {0,0};
static swig_octave_class _wrap_class_Whistle = {"Whistle", &SWIGTYPE_p_stk__Whistle,0,_wrap_new_Whistle,0,_wrap_delete_Whistle,swig_Whistle_members,swig_Whistle_base_names,swig_Whistle_base };

SWIG_DEFUN( new_Wurley, _wrap_new_Wurley, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Wurley *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Wurley",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Wurley *)new stk::Wurley();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Wurley, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Wurley, _wrap_delete_Wurley, std::string() ) {
  stk::Wurley *arg1 = (stk::Wurley *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Wurley",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Wurley, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Wurley" "', argument " "1"" of type '" "stk::Wurley *""'"); 
    }
    arg1 = reinterpret_cast< stk::Wurley * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Wurley_setFrequency, _wrap_Wurley_setFrequency, std::string() ) {
  stk::Wurley *arg1 = (stk::Wurley *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Wurley_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Wurley, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Wurley_setFrequency" "', argument " "1"" of type '" "stk::Wurley *""'"); 
    }
    arg1 = reinterpret_cast< stk::Wurley * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Wurley_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Wurley_noteOn, _wrap_Wurley_noteOn, std::string() ) {
  stk::Wurley *arg1 = (stk::Wurley *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Wurley_noteOn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Wurley, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Wurley_noteOn" "', argument " "1"" of type '" "stk::Wurley *""'"); 
    }
    arg1 = reinterpret_cast< stk::Wurley * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Wurley_noteOn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Wurley_noteOn" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->noteOn(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Wurley_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Wurley *arg1 = (stk::Wurley *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Wurley_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Wurley, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Wurley_tick" "', argument " "1"" of type '" "stk::Wurley *""'"); 
    }
    arg1 = reinterpret_cast< stk::Wurley * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Wurley_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Wurley_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Wurley *arg1 = (stk::Wurley *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Wurley_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Wurley, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Wurley_tick" "', argument " "1"" of type '" "stk::Wurley *""'"); 
    }
    arg1 = reinterpret_cast< stk::Wurley * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Wurley_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Wurley *arg1 = (stk::Wurley *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Wurley_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Wurley, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Wurley_tick" "', argument " "1"" of type '" "stk::Wurley *""'"); 
    }
    arg1 = reinterpret_cast< stk::Wurley * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Wurley_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Wurley_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Wurley_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Wurley_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Wurley *arg1 = (stk::Wurley *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Wurley_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Wurley, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Wurley_tick" "', argument " "1"" of type '" "stk::Wurley *""'"); 
    }
    arg1 = reinterpret_cast< stk::Wurley * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Wurley_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Wurley_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Wurley_tick, _wrap_Wurley_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Wurley, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Wurley_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Wurley, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Wurley_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Wurley, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Wurley_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Wurley, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Wurley_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Wurley_members[] = {
{"setFrequency",_wrap_Wurley_setFrequency,0,0,0,0},
{"noteOn",_wrap_Wurley_noteOn,0,0,0,0},
{"tick",_wrap_Wurley_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Wurley_base_names[] = {"_p_stk__FM",0};
static const swig_type_info *swig_Wurley_base[] = {0,0};
static swig_octave_class _wrap_class_Wurley = {"Wurley", &SWIGTYPE_p_stk__Wurley,0,_wrap_new_Wurley,0,_wrap_delete_Wurley,swig_Wurley_members,swig_Wurley_base_names,swig_Wurley_base };

SWIG_DEFUN( delete_Socket, _wrap_delete_Socket, std::string() ) {
  stk::Socket *arg1 = (stk::Socket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Socket",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Socket, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Socket" "', argument " "1"" of type '" "stk::Socket *""'"); 
    }
    arg1 = reinterpret_cast< stk::Socket * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Socket_close, _wrap_Socket_close, std::string() ) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Socket_close",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Socket_close" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    stk::Socket::close(arg1);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Socket_id, _wrap_Socket_id, std::string() ) {
  stk::Socket *arg1 = (stk::Socket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("Socket_id",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Socket, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Socket_id" "', argument " "1"" of type '" "stk::Socket const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Socket * >(argp1);
    result = (int)((stk::Socket const *)arg1)->id();
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Socket_port, _wrap_Socket_port, std::string() ) {
  stk::Socket *arg1 = (stk::Socket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("Socket_port",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Socket, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Socket_port" "', argument " "1"" of type '" "stk::Socket const *""'"); 
    }
    arg1 = reinterpret_cast< stk::Socket * >(argp1);
    result = (int)((stk::Socket const *)arg1)->port();
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Socket_isValid, _wrap_Socket_isValid, std::string() ) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  try {
    if (!SWIG_check_num_args("Socket_isValid",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Socket_isValid" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    result = (bool)stk::Socket::isValid(arg1);
    _outv = SWIG_From_bool(static_cast< bool >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Socket_setBlocking, _wrap_Socket_setBlocking, std::string() ) {
  int arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Socket_setBlocking",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Socket_setBlocking" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_bool(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Socket_setBlocking" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    stk::Socket::setBlocking(arg1,arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Socket_writeBuffer__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Socket *arg1 = (stk::Socket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("Socket_writeBuffer",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Socket, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Socket_writeBuffer" "', argument " "1"" of type '" "stk::Socket *""'"); 
    }
    arg1 = reinterpret_cast< stk::Socket * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Socket_writeBuffer" "', argument " "2"" of type '" "void const *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Socket_writeBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Socket_writeBuffer" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    result = (int)(arg1)->writeBuffer((void const *)arg2,arg3,arg4);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Socket_writeBuffer__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Socket *arg1 = (stk::Socket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("Socket_writeBuffer",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Socket, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Socket_writeBuffer" "', argument " "1"" of type '" "stk::Socket *""'"); 
    }
    arg1 = reinterpret_cast< stk::Socket * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Socket_writeBuffer" "', argument " "2"" of type '" "void const *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Socket_writeBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    result = (int)(arg1)->writeBuffer((void const *)arg2,arg3);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Socket_readBuffer__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Socket *arg1 = (stk::Socket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("Socket_readBuffer",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Socket, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Socket_readBuffer" "', argument " "1"" of type '" "stk::Socket *""'"); 
    }
    arg1 = reinterpret_cast< stk::Socket * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Socket_readBuffer" "', argument " "2"" of type '" "void *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Socket_readBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Socket_readBuffer" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    result = (int)(arg1)->readBuffer(arg2,arg3,arg4);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Socket_readBuffer__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Socket *arg1 = (stk::Socket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("Socket_readBuffer",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Socket, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Socket_readBuffer" "', argument " "1"" of type '" "stk::Socket *""'"); 
    }
    arg1 = reinterpret_cast< stk::Socket * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Socket_readBuffer" "', argument " "2"" of type '" "void *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Socket_readBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    result = (int)(arg1)->readBuffer(arg2,arg3);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Socket_writeBuffer__SWIG_2 (const octave_value_list& args, int nargout) {
  int arg1 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("Socket_writeBuffer",args.length(),4,4,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Socket_writeBuffer" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Socket_writeBuffer" "', argument " "2"" of type '" "void const *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Socket_writeBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Socket_writeBuffer" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    result = (int)stk::Socket::writeBuffer(arg1,(void const *)arg2,arg3,arg4);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Socket_writeBuffer, _wrap_Socket_writeBuffer, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Socket, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Socket_writeBuffer__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Socket, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Socket_writeBuffer__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Socket_writeBuffer__SWIG_2(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_Socket_readBuffer__SWIG_2 (const octave_value_list& args, int nargout) {
  int arg1 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("Socket_readBuffer",args.length(),4,4,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Socket_readBuffer" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Socket_readBuffer" "', argument " "2"" of type '" "void *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Socket_readBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Socket_readBuffer" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    result = (int)stk::Socket::readBuffer(arg1,arg2,arg3,arg4);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Socket_readBuffer, _wrap_Socket_readBuffer, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Socket, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Socket_readBuffer__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Socket, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Socket_readBuffer__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Socket_readBuffer__SWIG_2(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Socket_members[] = {
{"close",_wrap_Socket_close,0,0,1,0},
{"id",_wrap_Socket_id,0,0,0,0},
{"port",_wrap_Socket_port,0,0,0,0},
{"isValid",_wrap_Socket_isValid,0,0,1,0},
{"setBlocking",_wrap_Socket_setBlocking,0,0,1,0},
{"writeBuffer",_wrap_Socket_writeBuffer,0,0,1,0},
{"readBuffer",_wrap_Socket_readBuffer,0,0,1,0},
{0,0,0,0,0,0}
};
static const char *swig_Socket_base_names[] = {0};
static const swig_type_info *swig_Socket_base[] = {0};
static swig_octave_class _wrap_class_Socket = {"Socket", &SWIGTYPE_p_stk__Socket,0,0,0,_wrap_delete_Socket,swig_Socket_members,swig_Socket_base_names,swig_Socket_base };

static octave_value_list _wrap_new_TcpClient__SWIG_0 (const octave_value_list& args, int nargout) {
  int arg1 ;
  std::string arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::TcpClient *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_TcpClient",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TcpClient" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TcpClient" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TcpClient" "', argument " "2"" of type '" "std::string""'");
      } else {
        arg2 = *(reinterpret_cast< std::string * >(argp2));
      }
    }
    result = (stk::TcpClient *)new stk::TcpClient(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__TcpClient, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_TcpClient__SWIG_1 (const octave_value_list& args, int nargout) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::TcpClient *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_TcpClient",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TcpClient" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    result = (stk::TcpClient *)new stk::TcpClient(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__TcpClient, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_TcpClient, _wrap_new_TcpClient, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_TcpClient__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TcpClient__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_TcpClient, _wrap_delete_TcpClient, std::string() ) {
  stk::TcpClient *arg1 = (stk::TcpClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_TcpClient",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TcpClient, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TcpClient" "', argument " "1"" of type '" "stk::TcpClient *""'"); 
    }
    arg1 = reinterpret_cast< stk::TcpClient * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TcpClient_connect__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::TcpClient *arg1 = (stk::TcpClient *) 0 ;
  int arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("TcpClient_connect",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TcpClient, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TcpClient_connect" "', argument " "1"" of type '" "stk::TcpClient *""'"); 
    }
    arg1 = reinterpret_cast< stk::TcpClient * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TcpClient_connect" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TcpClient_connect" "', argument " "3"" of type '" "std::string""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TcpClient_connect" "', argument " "3"" of type '" "std::string""'");
      } else {
        arg3 = *(reinterpret_cast< std::string * >(argp3));
      }
    }
    result = (int)(arg1)->connect(arg2,arg3);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TcpClient_connect__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::TcpClient *arg1 = (stk::TcpClient *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("TcpClient_connect",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TcpClient, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TcpClient_connect" "', argument " "1"" of type '" "stk::TcpClient *""'"); 
    }
    arg1 = reinterpret_cast< stk::TcpClient * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TcpClient_connect" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (int)(arg1)->connect(arg2);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TcpClient_connect, _wrap_TcpClient_connect, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TcpClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TcpClient_connect__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TcpClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TcpClient_connect__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_TcpClient_writeBuffer__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::TcpClient *arg1 = (stk::TcpClient *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("TcpClient_writeBuffer",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TcpClient, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TcpClient_writeBuffer" "', argument " "1"" of type '" "stk::TcpClient *""'"); 
    }
    arg1 = reinterpret_cast< stk::TcpClient * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TcpClient_writeBuffer" "', argument " "2"" of type '" "void const *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TcpClient_writeBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TcpClient_writeBuffer" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    result = (int)(arg1)->writeBuffer((void const *)arg2,arg3,arg4);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TcpClient_writeBuffer__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::TcpClient *arg1 = (stk::TcpClient *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("TcpClient_writeBuffer",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TcpClient, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TcpClient_writeBuffer" "', argument " "1"" of type '" "stk::TcpClient *""'"); 
    }
    arg1 = reinterpret_cast< stk::TcpClient * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TcpClient_writeBuffer" "', argument " "2"" of type '" "void const *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TcpClient_writeBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    result = (int)(arg1)->writeBuffer((void const *)arg2,arg3);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TcpClient_writeBuffer, _wrap_TcpClient_writeBuffer, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TcpClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TcpClient_writeBuffer__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TcpClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TcpClient_writeBuffer__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_TcpClient_readBuffer__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::TcpClient *arg1 = (stk::TcpClient *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("TcpClient_readBuffer",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TcpClient, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TcpClient_readBuffer" "', argument " "1"" of type '" "stk::TcpClient *""'"); 
    }
    arg1 = reinterpret_cast< stk::TcpClient * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TcpClient_readBuffer" "', argument " "2"" of type '" "void *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TcpClient_readBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TcpClient_readBuffer" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    result = (int)(arg1)->readBuffer(arg2,arg3,arg4);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TcpClient_readBuffer__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::TcpClient *arg1 = (stk::TcpClient *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("TcpClient_readBuffer",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TcpClient, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TcpClient_readBuffer" "', argument " "1"" of type '" "stk::TcpClient *""'"); 
    }
    arg1 = reinterpret_cast< stk::TcpClient * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TcpClient_readBuffer" "', argument " "2"" of type '" "void *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TcpClient_readBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    result = (int)(arg1)->readBuffer(arg2,arg3);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TcpClient_readBuffer, _wrap_TcpClient_readBuffer, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TcpClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TcpClient_readBuffer__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TcpClient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TcpClient_readBuffer__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_TcpClient_members[] = {
{"connect",_wrap_TcpClient_connect,0,0,0,0},
{"writeBuffer",_wrap_TcpClient_writeBuffer,0,0,0,0},
{"readBuffer",_wrap_TcpClient_readBuffer,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_TcpClient_base_names[] = {"_p_stk__Socket",0};
static const swig_type_info *swig_TcpClient_base[] = {0,0};
static swig_octave_class _wrap_class_TcpClient = {"TcpClient", &SWIGTYPE_p_stk__TcpClient,0,_wrap_new_TcpClient,0,_wrap_delete_TcpClient,swig_TcpClient_members,swig_TcpClient_base_names,swig_TcpClient_base };

static octave_value_list _wrap_new_TcpServer__SWIG_0 (const octave_value_list& args, int nargout) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::TcpServer *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_TcpServer",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TcpServer" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    result = (stk::TcpServer *)new stk::TcpServer(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__TcpServer, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_TcpServer__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::TcpServer *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_TcpServer",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::TcpServer *)new stk::TcpServer();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__TcpServer, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_TcpServer, _wrap_new_TcpServer, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_TcpServer__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_TcpServer__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_TcpServer, _wrap_delete_TcpServer, std::string() ) {
  stk::TcpServer *arg1 = (stk::TcpServer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_TcpServer",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TcpServer, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TcpServer" "', argument " "1"" of type '" "stk::TcpServer *""'"); 
    }
    arg1 = reinterpret_cast< stk::TcpServer * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TcpServer_accept, _wrap_TcpServer_accept, std::string() ) {
  stk::TcpServer *arg1 = (stk::TcpServer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("TcpServer_accept",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TcpServer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TcpServer_accept" "', argument " "1"" of type '" "stk::TcpServer *""'"); 
    }
    arg1 = reinterpret_cast< stk::TcpServer * >(argp1);
    result = (int)(arg1)->accept();
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TcpServer_writeBuffer__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::TcpServer *arg1 = (stk::TcpServer *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("TcpServer_writeBuffer",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TcpServer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TcpServer_writeBuffer" "', argument " "1"" of type '" "stk::TcpServer *""'"); 
    }
    arg1 = reinterpret_cast< stk::TcpServer * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TcpServer_writeBuffer" "', argument " "2"" of type '" "void const *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TcpServer_writeBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TcpServer_writeBuffer" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    result = (int)(arg1)->writeBuffer((void const *)arg2,arg3,arg4);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TcpServer_writeBuffer__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::TcpServer *arg1 = (stk::TcpServer *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("TcpServer_writeBuffer",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TcpServer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TcpServer_writeBuffer" "', argument " "1"" of type '" "stk::TcpServer *""'"); 
    }
    arg1 = reinterpret_cast< stk::TcpServer * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TcpServer_writeBuffer" "', argument " "2"" of type '" "void const *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TcpServer_writeBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    result = (int)(arg1)->writeBuffer((void const *)arg2,arg3);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TcpServer_writeBuffer, _wrap_TcpServer_writeBuffer, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TcpServer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TcpServer_writeBuffer__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TcpServer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TcpServer_writeBuffer__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_TcpServer_readBuffer__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::TcpServer *arg1 = (stk::TcpServer *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("TcpServer_readBuffer",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TcpServer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TcpServer_readBuffer" "', argument " "1"" of type '" "stk::TcpServer *""'"); 
    }
    arg1 = reinterpret_cast< stk::TcpServer * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TcpServer_readBuffer" "', argument " "2"" of type '" "void *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TcpServer_readBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TcpServer_readBuffer" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    result = (int)(arg1)->readBuffer(arg2,arg3,arg4);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_TcpServer_readBuffer__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::TcpServer *arg1 = (stk::TcpServer *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("TcpServer_readBuffer",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__TcpServer, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TcpServer_readBuffer" "', argument " "1"" of type '" "stk::TcpServer *""'"); 
    }
    arg1 = reinterpret_cast< stk::TcpServer * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TcpServer_readBuffer" "', argument " "2"" of type '" "void *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TcpServer_readBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    result = (int)(arg1)->readBuffer(arg2,arg3);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( TcpServer_readBuffer, _wrap_TcpServer_readBuffer, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TcpServer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TcpServer_readBuffer__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__TcpServer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TcpServer_readBuffer__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_TcpServer_members[] = {
{"accept",_wrap_TcpServer_accept,0,0,0,0},
{"writeBuffer",_wrap_TcpServer_writeBuffer,0,0,0,0},
{"readBuffer",_wrap_TcpServer_readBuffer,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_TcpServer_base_names[] = {"_p_stk__Socket",0};
static const swig_type_info *swig_TcpServer_base[] = {0,0};
static swig_octave_class _wrap_class_TcpServer = {"TcpServer", &SWIGTYPE_p_stk__TcpServer,0,_wrap_new_TcpServer,0,_wrap_delete_TcpServer,swig_TcpServer_members,swig_TcpServer_base_names,swig_TcpServer_base };

static octave_value_list _wrap_new_UdpSocket__SWIG_0 (const octave_value_list& args, int nargout) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::UdpSocket *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_UdpSocket",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UdpSocket" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    result = (stk::UdpSocket *)new stk::UdpSocket(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__UdpSocket, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_UdpSocket__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::UdpSocket *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_UdpSocket",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::UdpSocket *)new stk::UdpSocket();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__UdpSocket, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_UdpSocket, _wrap_new_UdpSocket, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_UdpSocket__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UdpSocket__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_UdpSocket, _wrap_delete_UdpSocket, std::string() ) {
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_UdpSocket",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__UdpSocket, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UdpSocket" "', argument " "1"" of type '" "stk::UdpSocket *""'"); 
    }
    arg1 = reinterpret_cast< stk::UdpSocket * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_UdpSocket_setDestination__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  int arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("UdpSocket_setDestination",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__UdpSocket, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UdpSocket_setDestination" "', argument " "1"" of type '" "stk::UdpSocket *""'"); 
    }
    arg1 = reinterpret_cast< stk::UdpSocket * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UdpSocket_setDestination" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UdpSocket_setDestination" "', argument " "3"" of type '" "std::string""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UdpSocket_setDestination" "', argument " "3"" of type '" "std::string""'");
      } else {
        arg3 = *(reinterpret_cast< std::string * >(argp3));
      }
    }
    (arg1)->setDestination(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_UdpSocket_setDestination__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("UdpSocket_setDestination",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__UdpSocket, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UdpSocket_setDestination" "', argument " "1"" of type '" "stk::UdpSocket *""'"); 
    }
    arg1 = reinterpret_cast< stk::UdpSocket * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UdpSocket_setDestination" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    (arg1)->setDestination(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_UdpSocket_setDestination__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("UdpSocket_setDestination",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__UdpSocket, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UdpSocket_setDestination" "', argument " "1"" of type '" "stk::UdpSocket *""'"); 
    }
    arg1 = reinterpret_cast< stk::UdpSocket * >(argp1);
    (arg1)->setDestination();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( UdpSocket_setDestination, _wrap_UdpSocket_setDestination, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__UdpSocket, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_UdpSocket_setDestination__SWIG_2(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__UdpSocket, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UdpSocket_setDestination__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__UdpSocket, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_UdpSocket_setDestination__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_UdpSocket_writeBuffer__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("UdpSocket_writeBuffer",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__UdpSocket, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UdpSocket_writeBuffer" "', argument " "1"" of type '" "stk::UdpSocket *""'"); 
    }
    arg1 = reinterpret_cast< stk::UdpSocket * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UdpSocket_writeBuffer" "', argument " "2"" of type '" "void const *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UdpSocket_writeBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "UdpSocket_writeBuffer" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    result = (int)(arg1)->writeBuffer((void const *)arg2,arg3,arg4);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_UdpSocket_writeBuffer__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("UdpSocket_writeBuffer",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__UdpSocket, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UdpSocket_writeBuffer" "', argument " "1"" of type '" "stk::UdpSocket *""'"); 
    }
    arg1 = reinterpret_cast< stk::UdpSocket * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UdpSocket_writeBuffer" "', argument " "2"" of type '" "void const *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UdpSocket_writeBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    result = (int)(arg1)->writeBuffer((void const *)arg2,arg3);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( UdpSocket_writeBuffer, _wrap_UdpSocket_writeBuffer, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__UdpSocket, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_UdpSocket_writeBuffer__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__UdpSocket, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_UdpSocket_writeBuffer__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_UdpSocket_readBuffer__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("UdpSocket_readBuffer",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__UdpSocket, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UdpSocket_readBuffer" "', argument " "1"" of type '" "stk::UdpSocket *""'"); 
    }
    arg1 = reinterpret_cast< stk::UdpSocket * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UdpSocket_readBuffer" "', argument " "2"" of type '" "void *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UdpSocket_readBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "UdpSocket_readBuffer" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    result = (int)(arg1)->readBuffer(arg2,arg3,arg4);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_UdpSocket_readBuffer__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("UdpSocket_readBuffer",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__UdpSocket, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UdpSocket_readBuffer" "', argument " "1"" of type '" "stk::UdpSocket *""'"); 
    }
    arg1 = reinterpret_cast< stk::UdpSocket * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UdpSocket_readBuffer" "', argument " "2"" of type '" "void *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UdpSocket_readBuffer" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    result = (int)(arg1)->readBuffer(arg2,arg3);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( UdpSocket_readBuffer, _wrap_UdpSocket_readBuffer, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[4]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3)
  };
  
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__UdpSocket, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_UdpSocket_readBuffer__SWIG_1(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__UdpSocket, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_UdpSocket_readBuffer__SWIG_0(args, nargout);
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_UdpSocket_writeBufferTo__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  std::string arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("UdpSocket_writeBufferTo",args.length(),6,6,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__UdpSocket, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UdpSocket_writeBufferTo" "', argument " "1"" of type '" "stk::UdpSocket *""'"); 
    }
    arg1 = reinterpret_cast< stk::UdpSocket * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UdpSocket_writeBufferTo" "', argument " "2"" of type '" "void const *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UdpSocket_writeBufferTo" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "UdpSocket_writeBufferTo" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      res5 = SWIG_ConvertPtr(args(4), &argp5, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "UdpSocket_writeBufferTo" "', argument " "5"" of type '" "std::string""'"); 
      }  
      if (!argp5) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UdpSocket_writeBufferTo" "', argument " "5"" of type '" "std::string""'");
      } else {
        arg5 = *(reinterpret_cast< std::string * >(argp5));
      }
    }
    ecode6 = SWIG_AsVal_int(args(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "UdpSocket_writeBufferTo" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    result = (int)(arg1)->writeBufferTo((void const *)arg2,arg3,arg4,arg5,arg6);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_UdpSocket_writeBufferTo__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  std::string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("UdpSocket_writeBufferTo",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__UdpSocket, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UdpSocket_writeBufferTo" "', argument " "1"" of type '" "stk::UdpSocket *""'"); 
    }
    arg1 = reinterpret_cast< stk::UdpSocket * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UdpSocket_writeBufferTo" "', argument " "2"" of type '" "void const *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UdpSocket_writeBufferTo" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "UdpSocket_writeBufferTo" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      res5 = SWIG_ConvertPtr(args(4), &argp5, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "UdpSocket_writeBufferTo" "', argument " "5"" of type '" "std::string""'"); 
      }  
      if (!argp5) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UdpSocket_writeBufferTo" "', argument " "5"" of type '" "std::string""'");
      } else {
        arg5 = *(reinterpret_cast< std::string * >(argp5));
      }
    }
    result = (int)(arg1)->writeBufferTo((void const *)arg2,arg3,arg4,arg5);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_UdpSocket_writeBufferTo__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("UdpSocket_writeBufferTo",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__UdpSocket, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UdpSocket_writeBufferTo" "', argument " "1"" of type '" "stk::UdpSocket *""'"); 
    }
    arg1 = reinterpret_cast< stk::UdpSocket * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UdpSocket_writeBufferTo" "', argument " "2"" of type '" "void const *""'"); 
    }
    ecode3 = SWIG_AsVal_long(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UdpSocket_writeBufferTo" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "UdpSocket_writeBufferTo" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    result = (int)(arg1)->writeBufferTo((void const *)arg2,arg3,arg4);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( UdpSocket_writeBufferTo, _wrap_UdpSocket_writeBufferTo, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[6]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4),octave_value_ref(args,5)
  };
  
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__UdpSocket, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_UdpSocket_writeBufferTo__SWIG_2(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__UdpSocket, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_UdpSocket_writeBufferTo__SWIG_1(args, nargout);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__UdpSocket, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_UdpSocket_writeBufferTo__SWIG_0(args, nargout);
              }
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_UdpSocket_members[] = {
{"setDestination",_wrap_UdpSocket_setDestination,0,0,0,0},
{"writeBuffer",_wrap_UdpSocket_writeBuffer,0,0,0,0},
{"readBuffer",_wrap_UdpSocket_readBuffer,0,0,0,0},
{"writeBufferTo",_wrap_UdpSocket_writeBufferTo,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_UdpSocket_base_names[] = {"_p_stk__Socket",0};
static const swig_type_info *swig_UdpSocket_base[] = {0,0};
static swig_octave_class _wrap_class_UdpSocket = {"UdpSocket", &SWIGTYPE_p_stk__UdpSocket,0,_wrap_new_UdpSocket,0,_wrap_delete_UdpSocket,swig_UdpSocket_members,swig_UdpSocket_base_names,swig_UdpSocket_base };

SWIG_DEFUN( new_Mutex, _wrap_new_Mutex, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Mutex *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Mutex",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Mutex *)new stk::Mutex();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Mutex, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Mutex, _wrap_delete_Mutex, std::string() ) {
  stk::Mutex *arg1 = (stk::Mutex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Mutex",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mutex, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Mutex" "', argument " "1"" of type '" "stk::Mutex *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mutex * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mutex_lock, _wrap_Mutex_lock, std::string() ) {
  stk::Mutex *arg1 = (stk::Mutex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mutex_lock",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mutex, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mutex_lock" "', argument " "1"" of type '" "stk::Mutex *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mutex * >(argp1);
    (arg1)->lock();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mutex_unlock, _wrap_Mutex_unlock, std::string() ) {
  stk::Mutex *arg1 = (stk::Mutex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mutex_unlock",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mutex, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mutex_unlock" "', argument " "1"" of type '" "stk::Mutex *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mutex * >(argp1);
    (arg1)->unlock();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mutex_wait, _wrap_Mutex_wait, std::string() ) {
  stk::Mutex *arg1 = (stk::Mutex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mutex_wait",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mutex, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mutex_wait" "', argument " "1"" of type '" "stk::Mutex *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mutex * >(argp1);
    (arg1)->wait();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Mutex_signal, _wrap_Mutex_signal, std::string() ) {
  stk::Mutex *arg1 = (stk::Mutex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Mutex_signal",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Mutex, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mutex_signal" "', argument " "1"" of type '" "stk::Mutex *""'"); 
    }
    arg1 = reinterpret_cast< stk::Mutex * >(argp1);
    (arg1)->signal();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Mutex_members[] = {
{"lock",_wrap_Mutex_lock,0,0,0,0},
{"unlock",_wrap_Mutex_unlock,0,0,0,0},
{"wait",_wrap_Mutex_wait,0,0,0,0},
{"signal",_wrap_Mutex_signal,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Mutex_base_names[] = {0};
static const swig_type_info *swig_Mutex_base[] = {0};
static swig_octave_class _wrap_class_Mutex = {"Mutex", &SWIGTYPE_p_stk__Mutex,0,_wrap_new_Mutex,0,_wrap_delete_Mutex,swig_Mutex_members,swig_Mutex_base_names,swig_Mutex_base };

SWIG_DEFUN( new_Thread, _wrap_new_Thread, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::Thread *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_Thread",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::Thread *)new stk::Thread();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__Thread, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( delete_Thread, _wrap_delete_Thread, std::string() ) {
  stk::Thread *arg1 = (stk::Thread *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Thread",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Thread, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Thread" "', argument " "1"" of type '" "stk::Thread *""'"); 
    }
    arg1 = reinterpret_cast< stk::Thread * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Thread_start__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Thread *arg1 = (stk::Thread *) 0 ;
  THREAD_FUNCTION arg2 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  try {
    if (!SWIG_check_num_args("Thread_start",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Thread, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thread_start" "', argument " "1"" of type '" "stk::Thread *""'"); 
    }
    arg1 = reinterpret_cast< stk::Thread * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_THREAD_FUNCTION,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Thread_start" "', argument " "2"" of type '" "THREAD_FUNCTION""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Thread_start" "', argument " "2"" of type '" "THREAD_FUNCTION""'");
      } else {
        arg2 = *(reinterpret_cast< THREAD_FUNCTION * >(argp2));
      }
    }
    res3 = SWIG_ConvertPtr(args(2),SWIG_as_voidptrptr(&arg3), 0, 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Thread_start" "', argument " "3"" of type '" "void *""'"); 
    }
    result = (bool)(arg1)->start(arg2,arg3);
    _outv = SWIG_From_bool(static_cast< bool >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Thread_start__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Thread *arg1 = (stk::Thread *) 0 ;
  THREAD_FUNCTION arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  try {
    if (!SWIG_check_num_args("Thread_start",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Thread, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thread_start" "', argument " "1"" of type '" "stk::Thread *""'"); 
    }
    arg1 = reinterpret_cast< stk::Thread * >(argp1);
    {
      res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_THREAD_FUNCTION,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Thread_start" "', argument " "2"" of type '" "THREAD_FUNCTION""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Thread_start" "', argument " "2"" of type '" "THREAD_FUNCTION""'");
      } else {
        arg2 = *(reinterpret_cast< THREAD_FUNCTION * >(argp2));
      }
    }
    result = (bool)(arg1)->start(arg2);
    _outv = SWIG_From_bool(static_cast< bool >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Thread_start, _wrap_Thread_start, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Thread, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_THREAD_FUNCTION, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Thread_start__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Thread, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_THREAD_FUNCTION, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Thread_start__SWIG_0(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( Thread_cancel, _wrap_Thread_cancel, std::string() ) {
  stk::Thread *arg1 = (stk::Thread *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  try {
    if (!SWIG_check_num_args("Thread_cancel",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Thread, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thread_cancel" "', argument " "1"" of type '" "stk::Thread *""'"); 
    }
    arg1 = reinterpret_cast< stk::Thread * >(argp1);
    result = (bool)(arg1)->cancel();
    _outv = SWIG_From_bool(static_cast< bool >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Thread_wait, _wrap_Thread_wait, std::string() ) {
  stk::Thread *arg1 = (stk::Thread *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  try {
    if (!SWIG_check_num_args("Thread_wait",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Thread, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thread_wait" "', argument " "1"" of type '" "stk::Thread *""'"); 
    }
    arg1 = reinterpret_cast< stk::Thread * >(argp1);
    result = (bool)(arg1)->wait();
    _outv = SWIG_From_bool(static_cast< bool >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Thread_testCancel, _wrap_Thread_testCancel, std::string() ) {
  stk::Thread *arg1 = (stk::Thread *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Thread_testCancel",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Thread, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thread_testCancel" "', argument " "1"" of type '" "stk::Thread *""'"); 
    }
    arg1 = reinterpret_cast< stk::Thread * >(argp1);
    (arg1)->testCancel();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_Thread_members[] = {
{"start",_wrap_Thread_start,0,0,0,0},
{"cancel",_wrap_Thread_cancel,0,0,0,0},
{"wait",_wrap_Thread_wait,0,0,0,0},
{"testCancel",_wrap_Thread_testCancel,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Thread_base_names[] = {0};
static const swig_type_info *swig_Thread_base[] = {0};
static swig_octave_class _wrap_class_Thread = {"Thread", &SWIGTYPE_p_stk__Thread,0,_wrap_new_Thread,0,_wrap_delete_Thread,swig_Thread_members,swig_Thread_base_names,swig_Thread_base };

static octave_value_list _wrap_new_InetWvIn__SWIG_0 (const octave_value_list& args, int nargout) {
  unsigned long arg1 ;
  unsigned int arg2 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::InetWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_InetWvIn",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InetWvIn" "', argument " "1"" of type '" "unsigned long""'");
    } 
    arg1 = static_cast< unsigned long >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InetWvIn" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::InetWvIn *)new stk::InetWvIn(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__InetWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_InetWvIn__SWIG_1 (const octave_value_list& args, int nargout) {
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::InetWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_InetWvIn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InetWvIn" "', argument " "1"" of type '" "unsigned long""'");
    } 
    arg1 = static_cast< unsigned long >(val1);
    result = (stk::InetWvIn *)new stk::InetWvIn(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__InetWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_InetWvIn__SWIG_2 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::InetWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_InetWvIn",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::InetWvIn *)new stk::InetWvIn();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__InetWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_InetWvIn, _wrap_new_InetWvIn, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 0) {
    return _wrap_new_InetWvIn__SWIG_2(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_InetWvIn__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_InetWvIn__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_InetWvIn, _wrap_delete_InetWvIn, std::string() ) {
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_InetWvIn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvIn, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InetWvIn" "', argument " "1"" of type '" "stk::InetWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvIn * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvIn_listen__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  stk::Stk::StkFormat arg4 ;
  stk::Socket::ProtocolType arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("InetWvIn_listen",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvIn_listen" "', argument " "1"" of type '" "stk::InetWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvIn * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InetWvIn_listen" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InetWvIn_listen" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "InetWvIn_listen" "', argument " "4"" of type '" "stk::Stk::StkFormat""'");
    } 
    arg4 = static_cast< stk::Stk::StkFormat >(val4);
    ecode5 = SWIG_AsVal_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "InetWvIn_listen" "', argument " "5"" of type '" "stk::Socket::ProtocolType""'");
    } 
    arg5 = static_cast< stk::Socket::ProtocolType >(val5);
    (arg1)->listen(arg2,arg3,arg4,arg5);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvIn_listen__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  stk::Stk::StkFormat arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("InetWvIn_listen",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvIn_listen" "', argument " "1"" of type '" "stk::InetWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvIn * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InetWvIn_listen" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InetWvIn_listen" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "InetWvIn_listen" "', argument " "4"" of type '" "stk::Stk::StkFormat""'");
    } 
    arg4 = static_cast< stk::Stk::StkFormat >(val4);
    (arg1)->listen(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvIn_listen__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("InetWvIn_listen",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvIn_listen" "', argument " "1"" of type '" "stk::InetWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvIn * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InetWvIn_listen" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InetWvIn_listen" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    (arg1)->listen(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvIn_listen__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("InetWvIn_listen",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvIn_listen" "', argument " "1"" of type '" "stk::InetWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvIn * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InetWvIn_listen" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    (arg1)->listen(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvIn_listen__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("InetWvIn_listen",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvIn_listen" "', argument " "1"" of type '" "stk::InetWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvIn * >(argp1);
    (arg1)->listen();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( InetWvIn_listen, _wrap_InetWvIn_listen, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_InetWvIn_listen__SWIG_4(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InetWvIn_listen__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InetWvIn_listen__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_InetWvIn_listen__SWIG_1(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_InetWvIn_listen__SWIG_0(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( InetWvIn_isConnected, _wrap_InetWvIn_isConnected, std::string() ) {
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  bool result;
  
  try {
    if (!SWIG_check_num_args("InetWvIn_isConnected",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvIn_isConnected" "', argument " "1"" of type '" "stk::InetWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvIn * >(argp1);
    result = (bool)(arg1)->isConnected();
    _outv = SWIG_From_bool(static_cast< bool >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvIn_lastOut__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("InetWvIn_lastOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvIn_lastOut" "', argument " "1"" of type '" "stk::InetWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvIn * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InetWvIn_lastOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->lastOut(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvIn_lastOut__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("InetWvIn_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvIn_lastOut" "', argument " "1"" of type '" "stk::InetWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvIn * >(argp1);
    result = (stk::StkFloat)(arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( InetWvIn_lastOut, _wrap_InetWvIn_lastOut, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_InetWvIn_lastOut__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InetWvIn_lastOut__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_InetWvIn_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("InetWvIn_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvIn_tick" "', argument " "1"" of type '" "stk::InetWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvIn * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InetWvIn_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvIn_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("InetWvIn_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvIn_tick" "', argument " "1"" of type '" "stk::InetWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvIn * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvIn_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("InetWvIn_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvIn_tick" "', argument " "1"" of type '" "stk::InetWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvIn * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InetWvIn_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InetWvIn_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InetWvIn_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvIn_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("InetWvIn_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvIn_tick" "', argument " "1"" of type '" "stk::InetWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvIn * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InetWvIn_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InetWvIn_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( InetWvIn_tick, _wrap_InetWvIn_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_InetWvIn_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InetWvIn_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InetWvIn_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InetWvIn_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( InetWvIn_receive, _wrap_InetWvIn_receive, std::string() ) {
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("InetWvIn_receive",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvIn_receive" "', argument " "1"" of type '" "stk::InetWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvIn * >(argp1);
    (arg1)->receive();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_InetWvIn_members[] = {
{"listen",_wrap_InetWvIn_listen,0,0,0,0},
{"isConnected",_wrap_InetWvIn_isConnected,0,0,0,0},
{"lastOut",_wrap_InetWvIn_lastOut,0,0,0,0},
{"tick",_wrap_InetWvIn_tick,0,0,0,0},
{"receive",_wrap_InetWvIn_receive,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_InetWvIn_base_names[] = {0};
static const swig_type_info *swig_InetWvIn_base[] = {0};
static swig_octave_class _wrap_class_InetWvIn = {"InetWvIn", &SWIGTYPE_p_stk__InetWvIn,0,_wrap_new_InetWvIn,0,_wrap_delete_InetWvIn,swig_InetWvIn_members,swig_InetWvIn_base_names,swig_InetWvIn_base };

static octave_value_list _wrap_new_InetWvOut__SWIG_0 (const octave_value_list& args, int nargout) {
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::InetWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_InetWvOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InetWvOut" "', argument " "1"" of type '" "unsigned long""'");
    } 
    arg1 = static_cast< unsigned long >(val1);
    result = (stk::InetWvOut *)new stk::InetWvOut(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__InetWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_InetWvOut__SWIG_1 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::InetWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_InetWvOut",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::InetWvOut *)new stk::InetWvOut();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__InetWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_InetWvOut__SWIG_2 (const octave_value_list& args, int nargout) {
  int arg1 ;
  stk::Socket::ProtocolType arg2 ;
  std::string arg3 ;
  unsigned int arg4 ;
  stk::Stk::StkFormat arg5 ;
  unsigned long arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  unsigned long val6 ;
  int ecode6 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::InetWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_InetWvOut",args.length(),6,6,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InetWvOut" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InetWvOut" "', argument " "2"" of type '" "stk::Socket::ProtocolType""'");
    } 
    arg2 = static_cast< stk::Socket::ProtocolType >(val2);
    {
      res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_InetWvOut" "', argument " "3"" of type '" "std::string""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InetWvOut" "', argument " "3"" of type '" "std::string""'");
      } else {
        arg3 = *(reinterpret_cast< std::string * >(argp3));
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_InetWvOut" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_long(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_InetWvOut" "', argument " "5"" of type '" "stk::Stk::StkFormat""'");
    } 
    arg5 = static_cast< stk::Stk::StkFormat >(val5);
    ecode6 = SWIG_AsVal_unsigned_SS_long(args(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_InetWvOut" "', argument " "6"" of type '" "unsigned long""'");
    } 
    arg6 = static_cast< unsigned long >(val6);
    result = (stk::InetWvOut *)new stk::InetWvOut(arg1,arg2,arg3,arg4,arg5,arg6);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__InetWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_InetWvOut__SWIG_3 (const octave_value_list& args, int nargout) {
  int arg1 ;
  stk::Socket::ProtocolType arg2 ;
  std::string arg3 ;
  unsigned int arg4 ;
  stk::Stk::StkFormat arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::InetWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_InetWvOut",args.length(),5,5,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InetWvOut" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InetWvOut" "', argument " "2"" of type '" "stk::Socket::ProtocolType""'");
    } 
    arg2 = static_cast< stk::Socket::ProtocolType >(val2);
    {
      res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_InetWvOut" "', argument " "3"" of type '" "std::string""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InetWvOut" "', argument " "3"" of type '" "std::string""'");
      } else {
        arg3 = *(reinterpret_cast< std::string * >(argp3));
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_InetWvOut" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_long(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_InetWvOut" "', argument " "5"" of type '" "stk::Stk::StkFormat""'");
    } 
    arg5 = static_cast< stk::Stk::StkFormat >(val5);
    result = (stk::InetWvOut *)new stk::InetWvOut(arg1,arg2,arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__InetWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_InetWvOut__SWIG_4 (const octave_value_list& args, int nargout) {
  int arg1 ;
  stk::Socket::ProtocolType arg2 ;
  std::string arg3 ;
  unsigned int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::InetWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_InetWvOut",args.length(),4,4,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InetWvOut" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InetWvOut" "', argument " "2"" of type '" "stk::Socket::ProtocolType""'");
    } 
    arg2 = static_cast< stk::Socket::ProtocolType >(val2);
    {
      res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_InetWvOut" "', argument " "3"" of type '" "std::string""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InetWvOut" "', argument " "3"" of type '" "std::string""'");
      } else {
        arg3 = *(reinterpret_cast< std::string * >(argp3));
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_InetWvOut" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    result = (stk::InetWvOut *)new stk::InetWvOut(arg1,arg2,arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__InetWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_InetWvOut__SWIG_5 (const octave_value_list& args, int nargout) {
  int arg1 ;
  stk::Socket::ProtocolType arg2 ;
  std::string arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::InetWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_InetWvOut",args.length(),3,3,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InetWvOut" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InetWvOut" "', argument " "2"" of type '" "stk::Socket::ProtocolType""'");
    } 
    arg2 = static_cast< stk::Socket::ProtocolType >(val2);
    {
      res3 = SWIG_ConvertPtr(args(2), &argp3, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_InetWvOut" "', argument " "3"" of type '" "std::string""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InetWvOut" "', argument " "3"" of type '" "std::string""'");
      } else {
        arg3 = *(reinterpret_cast< std::string * >(argp3));
      }
    }
    result = (stk::InetWvOut *)new stk::InetWvOut(arg1,arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__InetWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_InetWvOut__SWIG_6 (const octave_value_list& args, int nargout) {
  int arg1 ;
  stk::Socket::ProtocolType arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::InetWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_InetWvOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InetWvOut" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InetWvOut" "', argument " "2"" of type '" "stk::Socket::ProtocolType""'");
    } 
    arg2 = static_cast< stk::Socket::ProtocolType >(val2);
    result = (stk::InetWvOut *)new stk::InetWvOut(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__InetWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_InetWvOut__SWIG_7 (const octave_value_list& args, int nargout) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::InetWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_InetWvOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InetWvOut" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    result = (stk::InetWvOut *)new stk::InetWvOut(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__InetWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_InetWvOut, _wrap_new_InetWvOut, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[6]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4),octave_value_ref(args,5)
  };
  
  if (argc == 0) {
    return _wrap_new_InetWvOut__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_InetWvOut__SWIG_7(args, nargout);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_InetWvOut__SWIG_0(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_InetWvOut__SWIG_6(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_InetWvOut__SWIG_5(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_InetWvOut__SWIG_4(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_InetWvOut__SWIG_3(args, nargout);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_InetWvOut__SWIG_2(args, nargout);
              }
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_InetWvOut, _wrap_delete_InetWvOut, std::string() ) {
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_InetWvOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvOut, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InetWvOut" "', argument " "1"" of type '" "stk::InetWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvOut * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvOut_connect__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  int arg2 ;
  stk::Socket::ProtocolType arg3 ;
  std::string arg4 ;
  unsigned int arg5 ;
  stk::Stk::StkFormat arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned long val6 ;
  int ecode6 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("InetWvOut_connect",args.length(),6,6,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvOut_connect" "', argument " "1"" of type '" "stk::InetWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvOut * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InetWvOut_connect" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InetWvOut_connect" "', argument " "3"" of type '" "stk::Socket::ProtocolType""'");
    } 
    arg3 = static_cast< stk::Socket::ProtocolType >(val3);
    {
      res4 = SWIG_ConvertPtr(args(3), &argp4, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "InetWvOut_connect" "', argument " "4"" of type '" "std::string""'"); 
      }  
      if (!argp4) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InetWvOut_connect" "', argument " "4"" of type '" "std::string""'");
      } else {
        arg4 = *(reinterpret_cast< std::string * >(argp4));
      }
    }
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "InetWvOut_connect" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    ecode6 = SWIG_AsVal_unsigned_SS_long(args(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "InetWvOut_connect" "', argument " "6"" of type '" "stk::Stk::StkFormat""'");
    } 
    arg6 = static_cast< stk::Stk::StkFormat >(val6);
    (arg1)->connect(arg2,arg3,arg4,arg5,arg6);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvOut_connect__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  int arg2 ;
  stk::Socket::ProtocolType arg3 ;
  std::string arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("InetWvOut_connect",args.length(),5,5,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvOut_connect" "', argument " "1"" of type '" "stk::InetWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvOut * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InetWvOut_connect" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InetWvOut_connect" "', argument " "3"" of type '" "stk::Socket::ProtocolType""'");
    } 
    arg3 = static_cast< stk::Socket::ProtocolType >(val3);
    {
      res4 = SWIG_ConvertPtr(args(3), &argp4, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "InetWvOut_connect" "', argument " "4"" of type '" "std::string""'"); 
      }  
      if (!argp4) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InetWvOut_connect" "', argument " "4"" of type '" "std::string""'");
      } else {
        arg4 = *(reinterpret_cast< std::string * >(argp4));
      }
    }
    ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "InetWvOut_connect" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    (arg1)->connect(arg2,arg3,arg4,arg5);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvOut_connect__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  int arg2 ;
  stk::Socket::ProtocolType arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("InetWvOut_connect",args.length(),4,4,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvOut_connect" "', argument " "1"" of type '" "stk::InetWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvOut * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InetWvOut_connect" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InetWvOut_connect" "', argument " "3"" of type '" "stk::Socket::ProtocolType""'");
    } 
    arg3 = static_cast< stk::Socket::ProtocolType >(val3);
    {
      res4 = SWIG_ConvertPtr(args(3), &argp4, SWIGTYPE_p_std__string,  0 );
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "InetWvOut_connect" "', argument " "4"" of type '" "std::string""'"); 
      }  
      if (!argp4) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InetWvOut_connect" "', argument " "4"" of type '" "std::string""'");
      } else {
        arg4 = *(reinterpret_cast< std::string * >(argp4));
      }
    }
    (arg1)->connect(arg2,arg3,arg4);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvOut_connect__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  int arg2 ;
  stk::Socket::ProtocolType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("InetWvOut_connect",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvOut_connect" "', argument " "1"" of type '" "stk::InetWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvOut * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InetWvOut_connect" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InetWvOut_connect" "', argument " "3"" of type '" "stk::Socket::ProtocolType""'");
    } 
    arg3 = static_cast< stk::Socket::ProtocolType >(val3);
    (arg1)->connect(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvOut_connect__SWIG_4 (const octave_value_list& args, int nargout) {
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("InetWvOut_connect",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvOut_connect" "', argument " "1"" of type '" "stk::InetWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvOut * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InetWvOut_connect" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    (arg1)->connect(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( InetWvOut_connect, _wrap_InetWvOut_connect, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[6]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4),octave_value_ref(args,5)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvOut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InetWvOut_connect__SWIG_4(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvOut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InetWvOut_connect__SWIG_3(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvOut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_InetWvOut_connect__SWIG_2(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvOut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_InetWvOut_connect__SWIG_1(args, nargout);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvOut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_long(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_InetWvOut_connect__SWIG_0(args, nargout);
              }
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( InetWvOut_disconnect, _wrap_InetWvOut_disconnect, std::string() ) {
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("InetWvOut_disconnect",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvOut_disconnect" "', argument " "1"" of type '" "stk::InetWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvOut * >(argp1);
    (arg1)->disconnect();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvOut_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("InetWvOut_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvOut_tick" "', argument " "1"" of type '" "stk::InetWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvOut * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InetWvOut_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->tick(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_InetWvOut_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("InetWvOut_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__InetWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InetWvOut_tick" "', argument " "1"" of type '" "stk::InetWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::InetWvOut * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InetWvOut_tick" "', argument " "2"" of type '" "stk::StkFrames const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InetWvOut_tick" "', argument " "2"" of type '" "stk::StkFrames const &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    (arg1)->tick((stk::StkFrames const &)*arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( InetWvOut_tick, _wrap_InetWvOut_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvOut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InetWvOut_tick__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__InetWvOut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InetWvOut_tick__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_InetWvOut_members[] = {
{"connect",_wrap_InetWvOut_connect,0,0,0,0},
{"disconnect",_wrap_InetWvOut_disconnect,0,0,0,0},
{"tick",_wrap_InetWvOut_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_InetWvOut_base_names[] = {0};
static const swig_type_info *swig_InetWvOut_base[] = {0};
static swig_octave_class _wrap_class_InetWvOut = {"InetWvOut", &SWIGTYPE_p_stk__InetWvOut,0,_wrap_new_InetWvOut,0,_wrap_delete_InetWvOut,swig_InetWvOut_members,swig_InetWvOut_base_names,swig_InetWvOut_base };

static octave_value_list _wrap_new_RtWvIn__SWIG_0 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::RtWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_RtWvIn",args.length(),5,5,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RtWvIn" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RtWvIn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RtWvIn" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RtWvIn" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RtWvIn" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    result = (stk::RtWvIn *)new stk::RtWvIn(arg1,arg2,arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__RtWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_RtWvIn__SWIG_1 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::RtWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_RtWvIn",args.length(),4,4,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RtWvIn" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RtWvIn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RtWvIn" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RtWvIn" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    result = (stk::RtWvIn *)new stk::RtWvIn(arg1,arg2,arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__RtWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_RtWvIn__SWIG_2 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::RtWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_RtWvIn",args.length(),3,3,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RtWvIn" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RtWvIn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RtWvIn" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    result = (stk::RtWvIn *)new stk::RtWvIn(arg1,arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__RtWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_RtWvIn__SWIG_3 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  stk::StkFloat arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::RtWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_RtWvIn",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RtWvIn" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RtWvIn" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::RtWvIn *)new stk::RtWvIn(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__RtWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_RtWvIn__SWIG_4 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::RtWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_RtWvIn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RtWvIn" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    result = (stk::RtWvIn *)new stk::RtWvIn(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__RtWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_RtWvIn__SWIG_5 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::RtWvIn *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_RtWvIn",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::RtWvIn *)new stk::RtWvIn();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__RtWvIn, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_RtWvIn, _wrap_new_RtWvIn, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 0) {
    return _wrap_new_RtWvIn__SWIG_5(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RtWvIn__SWIG_4(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_RtWvIn__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RtWvIn__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_RtWvIn__SWIG_1(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_RtWvIn__SWIG_0(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_RtWvIn, _wrap_delete_RtWvIn, std::string() ) {
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_RtWvIn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__RtWvIn, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RtWvIn" "', argument " "1"" of type '" "stk::RtWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::RtWvIn * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( RtWvIn_start, _wrap_RtWvIn_start, std::string() ) {
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("RtWvIn_start",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__RtWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtWvIn_start" "', argument " "1"" of type '" "stk::RtWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::RtWvIn * >(argp1);
    (arg1)->start();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( RtWvIn_stop, _wrap_RtWvIn_stop, std::string() ) {
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("RtWvIn_stop",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__RtWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtWvIn_stop" "', argument " "1"" of type '" "stk::RtWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::RtWvIn * >(argp1);
    (arg1)->stop();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_RtWvIn_lastOut__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("RtWvIn_lastOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__RtWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtWvIn_lastOut" "', argument " "1"" of type '" "stk::RtWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::RtWvIn * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtWvIn_lastOut" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->lastOut(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_RtWvIn_lastOut__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("RtWvIn_lastOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__RtWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtWvIn_lastOut" "', argument " "1"" of type '" "stk::RtWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::RtWvIn * >(argp1);
    result = (stk::StkFloat)(arg1)->lastOut();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( RtWvIn_lastOut, _wrap_RtWvIn_lastOut, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__RtWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RtWvIn_lastOut__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__RtWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RtWvIn_lastOut__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_RtWvIn_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("RtWvIn_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__RtWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtWvIn_tick" "', argument " "1"" of type '" "stk::RtWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::RtWvIn * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtWvIn_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_RtWvIn_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("RtWvIn_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__RtWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtWvIn_tick" "', argument " "1"" of type '" "stk::RtWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::RtWvIn * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_RtWvIn_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("RtWvIn_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__RtWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtWvIn_tick" "', argument " "1"" of type '" "stk::RtWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::RtWvIn * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtWvIn_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtWvIn_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtWvIn_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_RtWvIn_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("RtWvIn_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__RtWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtWvIn_tick" "', argument " "1"" of type '" "stk::RtWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::RtWvIn * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtWvIn_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtWvIn_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( RtWvIn_tick, _wrap_RtWvIn_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__RtWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RtWvIn_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__RtWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RtWvIn_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__RtWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RtWvIn_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__RtWvIn, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RtWvIn_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( RtWvIn_fillBuffer, _wrap_RtWvIn_fillBuffer, std::string() ) {
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("RtWvIn_fillBuffer",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__RtWvIn, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtWvIn_fillBuffer" "', argument " "1"" of type '" "stk::RtWvIn *""'"); 
    }
    arg1 = reinterpret_cast< stk::RtWvIn * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtWvIn_fillBuffer" "', argument " "2"" of type '" "void *""'"); 
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtWvIn_fillBuffer" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    (arg1)->fillBuffer(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_RtWvIn_members[] = {
{"start",_wrap_RtWvIn_start,0,0,0,0},
{"stop",_wrap_RtWvIn_stop,0,0,0,0},
{"lastOut",_wrap_RtWvIn_lastOut,0,0,0,0},
{"tick",_wrap_RtWvIn_tick,0,0,0,0},
{"fillBuffer",_wrap_RtWvIn_fillBuffer,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_RtWvIn_base_names[] = {0};
static const swig_type_info *swig_RtWvIn_base[] = {0};
static swig_octave_class _wrap_class_RtWvIn = {"RtWvIn", &SWIGTYPE_p_stk__RtWvIn,0,_wrap_new_RtWvIn,0,_wrap_delete_RtWvIn,swig_RtWvIn_members,swig_RtWvIn_base_names,swig_RtWvIn_base };

static octave_value_list _wrap_new_RtWvOut__SWIG_0 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::RtWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_RtWvOut",args.length(),5,5,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RtWvOut" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RtWvOut" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RtWvOut" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RtWvOut" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int(args(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RtWvOut" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    result = (stk::RtWvOut *)new stk::RtWvOut(arg1,arg2,arg3,arg4,arg5);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__RtWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_RtWvOut__SWIG_1 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::RtWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_RtWvOut",args.length(),4,4,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RtWvOut" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RtWvOut" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RtWvOut" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int(args(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RtWvOut" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    result = (stk::RtWvOut *)new stk::RtWvOut(arg1,arg2,arg3,arg4);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__RtWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_RtWvOut__SWIG_2 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::RtWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_RtWvOut",args.length(),3,3,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RtWvOut" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RtWvOut" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    ecode3 = SWIG_AsVal_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RtWvOut" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    result = (stk::RtWvOut *)new stk::RtWvOut(arg1,arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__RtWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_RtWvOut__SWIG_3 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  stk::StkFloat arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::RtWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_RtWvOut",args.length(),2,2,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RtWvOut" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RtWvOut" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    result = (stk::RtWvOut *)new stk::RtWvOut(arg1,arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__RtWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_RtWvOut__SWIG_4 (const octave_value_list& args, int nargout) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::RtWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_RtWvOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int(args(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RtWvOut" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    result = (stk::RtWvOut *)new stk::RtWvOut(arg1);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__RtWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_new_RtWvOut__SWIG_5 (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::RtWvOut *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("new_RtWvOut",args.length(),0,0,0)) {
      SWIG_fail;
    }
    result = (stk::RtWvOut *)new stk::RtWvOut();
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__RtWvOut, 1 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( new_RtWvOut, _wrap_new_RtWvOut, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[5]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2),octave_value_ref(args,3),octave_value_ref(args,4)
  };
  
  if (argc == 0) {
    return _wrap_new_RtWvOut__SWIG_5(args, nargout);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RtWvOut__SWIG_4(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_RtWvOut__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RtWvOut__SWIG_2(args, nargout);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_RtWvOut__SWIG_1(args, nargout);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_RtWvOut__SWIG_0(args, nargout);
            }
          }
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( delete_RtWvOut, _wrap_delete_RtWvOut, std::string() ) {
  stk::RtWvOut *arg1 = (stk::RtWvOut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_RtWvOut",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__RtWvOut, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RtWvOut" "', argument " "1"" of type '" "stk::RtWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::RtWvOut * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( RtWvOut_start, _wrap_RtWvOut_start, std::string() ) {
  stk::RtWvOut *arg1 = (stk::RtWvOut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("RtWvOut_start",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__RtWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtWvOut_start" "', argument " "1"" of type '" "stk::RtWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::RtWvOut * >(argp1);
    (arg1)->start();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( RtWvOut_stop, _wrap_RtWvOut_stop, std::string() ) {
  stk::RtWvOut *arg1 = (stk::RtWvOut *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("RtWvOut_stop",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__RtWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtWvOut_stop" "', argument " "1"" of type '" "stk::RtWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::RtWvOut * >(argp1);
    (arg1)->stop();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_RtWvOut_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::RtWvOut *arg1 = (stk::RtWvOut *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("RtWvOut_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__RtWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtWvOut_tick" "', argument " "1"" of type '" "stk::RtWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::RtWvOut * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtWvOut_tick" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->tick(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_RtWvOut_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::RtWvOut *arg1 = (stk::RtWvOut *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("RtWvOut_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__RtWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtWvOut_tick" "', argument " "1"" of type '" "stk::RtWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::RtWvOut * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtWvOut_tick" "', argument " "2"" of type '" "stk::StkFrames const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtWvOut_tick" "', argument " "2"" of type '" "stk::StkFrames const &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    (arg1)->tick((stk::StkFrames const &)*arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( RtWvOut_tick, _wrap_RtWvOut_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[2]={
    octave_value_ref(args,0),octave_value_ref(args,1)
  };
  
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__RtWvOut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RtWvOut_tick__SWIG_1(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__RtWvOut, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RtWvOut_tick__SWIG_0(args, nargout);
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


SWIG_DEFUN( RtWvOut_readBuffer, _wrap_RtWvOut_readBuffer, std::string() ) {
  stk::RtWvOut *arg1 = (stk::RtWvOut *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  try {
    if (!SWIG_check_num_args("RtWvOut_readBuffer",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__RtWvOut, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtWvOut_readBuffer" "', argument " "1"" of type '" "stk::RtWvOut *""'"); 
    }
    arg1 = reinterpret_cast< stk::RtWvOut * >(argp1);
    res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtWvOut_readBuffer" "', argument " "2"" of type '" "void *""'"); 
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtWvOut_readBuffer" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (int)(arg1)->readBuffer(arg2,arg3);
    _outv = SWIG_From_int(static_cast< int >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static swig_octave_member swig_RtWvOut_members[] = {
{"start",_wrap_RtWvOut_start,0,0,0,0},
{"stop",_wrap_RtWvOut_stop,0,0,0,0},
{"tick",_wrap_RtWvOut_tick,0,0,0,0},
{"readBuffer",_wrap_RtWvOut_readBuffer,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_RtWvOut_base_names[] = {0};
static const swig_type_info *swig_RtWvOut_base[] = {0};
static swig_octave_class _wrap_class_RtWvOut = {"RtWvOut", &SWIGTYPE_p_stk__RtWvOut,0,_wrap_new_RtWvOut,0,_wrap_delete_RtWvOut,swig_RtWvOut_members,swig_RtWvOut_base_names,swig_RtWvOut_base };

SWIG_DEFUN( delete_Sampler, _wrap_delete_Sampler, std::string() ) {
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("delete_Sampler",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sampler, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Sampler" "', argument " "1"" of type '" "stk::Sampler *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sampler * >(argp1);
    delete arg1;
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sampler_setFrequency, _wrap_Sampler_setFrequency, std::string() ) {
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Sampler_setFrequency",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sampler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sampler_setFrequency" "', argument " "1"" of type '" "stk::Sampler *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sampler * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sampler_setFrequency" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->setFrequency(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sampler_keyOn, _wrap_Sampler_keyOn, std::string() ) {
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Sampler_keyOn",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sampler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sampler_keyOn" "', argument " "1"" of type '" "stk::Sampler *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sampler * >(argp1);
    (arg1)->keyOn();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sampler_keyOff, _wrap_Sampler_keyOff, std::string() ) {
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Sampler_keyOff",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sampler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sampler_keyOff" "', argument " "1"" of type '" "stk::Sampler *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sampler * >(argp1);
    (arg1)->keyOff();
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sampler_noteOff, _wrap_Sampler_noteOff, std::string() ) {
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  stk::StkFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Sampler_noteOff",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sampler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sampler_noteOff" "', argument " "1"" of type '" "stk::Sampler *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sampler * >(argp1);
    ecode2 = SWIG_AsVal_float(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sampler_noteOff" "', argument " "2"" of type '" "stk::StkFloat""'");
    } 
    arg2 = static_cast< stk::StkFloat >(val2);
    (arg1)->noteOff(arg2);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sampler_controlChange, _wrap_Sampler_controlChange, std::string() ) {
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  try {
    if (!SWIG_check_num_args("Sampler_controlChange",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sampler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sampler_controlChange" "', argument " "1"" of type '" "stk::Sampler *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sampler * >(argp1);
    ecode2 = SWIG_AsVal_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sampler_controlChange" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_float(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sampler_controlChange" "', argument " "3"" of type '" "stk::StkFloat""'");
    } 
    arg3 = static_cast< stk::StkFloat >(val3);
    (arg1)->controlChange(arg2,arg3);
    _outv = octave_value();
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Sampler_tick__SWIG_0 (const octave_value_list& args, int nargout) {
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Sampler_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sampler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sampler_tick" "', argument " "1"" of type '" "stk::Sampler *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sampler * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sampler_tick" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (stk::StkFloat)(arg1)->tick(arg2);
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Sampler_tick__SWIG_1 (const octave_value_list& args, int nargout) {
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFloat result;
  
  try {
    if (!SWIG_check_num_args("Sampler_tick",args.length(),1,1,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sampler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sampler_tick" "', argument " "1"" of type '" "stk::Sampler *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sampler * >(argp1);
    result = (stk::StkFloat)(arg1)->tick();
    _outv = SWIG_From_float(static_cast< float >(result));
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Sampler_tick__SWIG_2 (const octave_value_list& args, int nargout) {
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Sampler_tick",args.length(),3,3,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sampler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sampler_tick" "', argument " "1"" of type '" "stk::Sampler *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sampler * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sampler_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sampler_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sampler_tick" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


static octave_value_list _wrap_Sampler_tick__SWIG_3 (const octave_value_list& args, int nargout) {
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  stk::StkFrames *result = 0 ;
  
  try {
    if (!SWIG_check_num_args("Sampler_tick",args.length(),2,2,0)) {
      SWIG_fail;
    }
    res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_stk__Sampler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sampler_tick" "', argument " "1"" of type '" "stk::Sampler *""'"); 
    }
    arg1 = reinterpret_cast< stk::Sampler * >(argp1);
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_stk__StkFrames,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sampler_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sampler_tick" "', argument " "2"" of type '" "stk::StkFrames &""'"); 
    }
    arg2 = reinterpret_cast< stk::StkFrames * >(argp2);
    result = (stk::StkFrames *) &(arg1)->tick(*arg2);
    _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stk__StkFrames, 0 |  0 );
    if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
    return _out;
  fail:
    return octave_value_list();
  }
  catch(...) {
    throw;
  }
}


SWIG_DEFUN( Sampler_tick, _wrap_Sampler_tick, std::string() ) {
  int argc = args.length();
  octave_value_ref argv[3]={
    octave_value_ref(args,0),octave_value_ref(args,1),octave_value_ref(args,2)
  };
  
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Sampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Sampler_tick__SWIG_1(args, nargout);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Sampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Sampler_tick__SWIG_3(args, nargout);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Sampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Sampler_tick__SWIG_0(args, nargout);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stk__Sampler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Sampler_tick__SWIG_2(args, nargout);
        }
      }
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static swig_octave_member swig_Sampler_members[] = {
{"setFrequency",_wrap_Sampler_setFrequency,0,0,0,0},
{"keyOn",_wrap_Sampler_keyOn,0,0,0,0},
{"keyOff",_wrap_Sampler_keyOff,0,0,0,0},
{"noteOff",_wrap_Sampler_noteOff,0,0,0,0},
{"controlChange",_wrap_Sampler_controlChange,0,0,0,0},
{"tick",_wrap_Sampler_tick,0,0,0,0},
{0,0,0,0,0,0}
};
static const char *swig_Sampler_base_names[] = {"_p_stk__Instrmnt",0};
static const swig_type_info *swig_Sampler_base[] = {0,0};
static swig_octave_class _wrap_class_Sampler = {"Sampler", &SWIGTYPE_p_stk__Sampler,0,0,0,_wrap_delete_Sampler,swig_Sampler_members,swig_Sampler_base_names,swig_Sampler_base };


static const struct swig_octave_member swig_globals[] = {
{"new_StkError",_wrap_new_StkError,0,0,2,0},
{"delete_StkError",_wrap_delete_StkError,0,0,2,0},
{"StkError_printMessage",_wrap_StkError_printMessage,0,0,2,0},
{"StkError_getType",_wrap_StkError_getType,0,0,2,0},
{"StkError_getMessage",_wrap_StkError_getMessage,0,0,2,0},
{"StkError_getMessageCString",_wrap_StkError_getMessageCString,0,0,2,0},
{"StkError_what",_wrap_StkError_what,0,0,2,0},
{"delete_StkFrames",_wrap_delete_StkFrames,0,0,2,0},
{"new_StkFrames",_wrap_new_StkFrames,0,0,2,0},
{"StkFrames___getitem__",_wrap_StkFrames___getitem__,0,0,2,0},
{"StkFrames___setitem__",_wrap_StkFrames___setitem__,0,0,2,0},
{"StkFrames___add__",_wrap_StkFrames___add__,0,0,2,0},
{"StkFrames___mul__",_wrap_StkFrames___mul__,0,0,2,0},
{"StkFrames_get",_wrap_StkFrames_get,0,0,2,0},
{"StkFrames_interpolate",_wrap_StkFrames_interpolate,0,0,2,0},
{"StkFrames_size",_wrap_StkFrames_size,0,0,2,0},
{"StkFrames_empty",_wrap_StkFrames_empty,0,0,2,0},
{"StkFrames_resize",_wrap_StkFrames_resize,0,0,2,0},
{"StkFrames_getChannel",_wrap_StkFrames_getChannel,0,0,2,0},
{"StkFrames_setChannel",_wrap_StkFrames_setChannel,0,0,2,0},
{"StkFrames_channels",_wrap_StkFrames_channels,0,0,2,0},
{"StkFrames_frames",_wrap_StkFrames_frames,0,0,2,0},
{"StkFrames_setDataRate",_wrap_StkFrames_setDataRate,0,0,2,0},
{"StkFrames_dataRate",_wrap_StkFrames_dataRate,0,0,2,0},
{"SRATE",0,_wrap_SRATE_get,_wrap_SRATE_set,2,0},
{"RT_BUFFER_SIZE",0,_wrap_RT_BUFFER_SIZE_get,_wrap_RT_BUFFER_SIZE_set,2,0},
{"PI",0,_wrap_PI_get,_wrap_PI_set,2,0},
{"TWO_PI",0,_wrap_TWO_PI_get,_wrap_TWO_PI_set,2,0},
{"ONE_OVER_128",0,_wrap_ONE_OVER_128_get,_wrap_ONE_OVER_128_set,2,0},
{"Effect_channelsOut",_wrap_Effect_channelsOut,0,0,2,0},
{"Effect_lastFrame",_wrap_Effect_lastFrame,0,0,2,0},
{"Effect_clear",_wrap_Effect_clear,0,0,2,0},
{"Effect_setEffectMix",_wrap_Effect_setEffectMix,0,0,2,0},
{"delete_Effect",_wrap_delete_Effect,0,0,2,0},
{"Filter_channelsIn",_wrap_Filter_channelsIn,0,0,2,0},
{"Filter_channelsOut",_wrap_Filter_channelsOut,0,0,2,0},
{"Filter_clear",_wrap_Filter_clear,0,0,2,0},
{"Filter_setGain",_wrap_Filter_setGain,0,0,2,0},
{"Filter_getGain",_wrap_Filter_getGain,0,0,2,0},
{"Filter_phaseDelay",_wrap_Filter_phaseDelay,0,0,2,0},
{"Filter_lastFrame",_wrap_Filter_lastFrame,0,0,2,0},
{"Filter_tick",_wrap_Filter_tick,0,0,2,0},
{"delete_Filter",_wrap_delete_Filter,0,0,2,0},
{"Generator_channelsOut",_wrap_Generator_channelsOut,0,0,2,0},
{"Generator_lastFrame",_wrap_Generator_lastFrame,0,0,2,0},
{"Generator_tick",_wrap_Generator_tick,0,0,2,0},
{"delete_Generator",_wrap_delete_Generator,0,0,2,0},
{"Instrmnt_clear",_wrap_Instrmnt_clear,0,0,2,0},
{"Instrmnt_noteOn",_wrap_Instrmnt_noteOn,0,0,2,0},
{"Instrmnt_noteOff",_wrap_Instrmnt_noteOff,0,0,2,0},
{"Instrmnt_setFrequency",_wrap_Instrmnt_setFrequency,0,0,2,0},
{"Instrmnt_controlChange",_wrap_Instrmnt_controlChange,0,0,2,0},
{"Instrmnt_channelsOut",_wrap_Instrmnt_channelsOut,0,0,2,0},
{"Instrmnt_lastFrame",_wrap_Instrmnt_lastFrame,0,0,2,0},
{"Instrmnt_lastOut",_wrap_Instrmnt_lastOut,0,0,2,0},
{"Instrmnt_tick",_wrap_Instrmnt_tick,0,0,2,0},
{"delete_Instrmnt",_wrap_delete_Instrmnt,0,0,2,0},
{"Function_lastOut",_wrap_Function_lastOut,0,0,2,0},
{"Function_tick",_wrap_Function_tick,0,0,2,0},
{"delete_Function",_wrap_delete_Function,0,0,2,0},
{"delete_FM",_wrap_delete_FM,0,0,2,0},
{"FM_loadWaves",_wrap_FM_loadWaves,0,0,2,0},
{"FM_setFrequency",_wrap_FM_setFrequency,0,0,2,0},
{"FM_setRatio",_wrap_FM_setRatio,0,0,2,0},
{"FM_setGain",_wrap_FM_setGain,0,0,2,0},
{"FM_setModulationSpeed",_wrap_FM_setModulationSpeed,0,0,2,0},
{"FM_setModulationDepth",_wrap_FM_setModulationDepth,0,0,2,0},
{"FM_setControl1",_wrap_FM_setControl1,0,0,2,0},
{"FM_setControl2",_wrap_FM_setControl2,0,0,2,0},
{"FM_keyOn",_wrap_FM_keyOn,0,0,2,0},
{"FM_keyOff",_wrap_FM_keyOff,0,0,2,0},
{"FM_noteOff",_wrap_FM_noteOff,0,0,2,0},
{"FM_controlChange",_wrap_FM_controlChange,0,0,2,0},
{"FM_tick",_wrap_FM_tick,0,0,2,0},
{"new_ADSR",_wrap_new_ADSR,0,0,2,0},
{"delete_ADSR",_wrap_delete_ADSR,0,0,2,0},
{"ADSR_keyOn",_wrap_ADSR_keyOn,0,0,2,0},
{"ADSR_keyOff",_wrap_ADSR_keyOff,0,0,2,0},
{"ADSR_setAttackRate",_wrap_ADSR_setAttackRate,0,0,2,0},
{"ADSR_setAttackTarget",_wrap_ADSR_setAttackTarget,0,0,2,0},
{"ADSR_setDecayRate",_wrap_ADSR_setDecayRate,0,0,2,0},
{"ADSR_setSustainLevel",_wrap_ADSR_setSustainLevel,0,0,2,0},
{"ADSR_setReleaseRate",_wrap_ADSR_setReleaseRate,0,0,2,0},
{"ADSR_setAttackTime",_wrap_ADSR_setAttackTime,0,0,2,0},
{"ADSR_setDecayTime",_wrap_ADSR_setDecayTime,0,0,2,0},
{"ADSR_setReleaseTime",_wrap_ADSR_setReleaseTime,0,0,2,0},
{"ADSR_setAllTimes",_wrap_ADSR_setAllTimes,0,0,2,0},
{"ADSR_setTarget",_wrap_ADSR_setTarget,0,0,2,0},
{"ADSR_getState",_wrap_ADSR_getState,0,0,2,0},
{"ADSR_setValue",_wrap_ADSR_setValue,0,0,2,0},
{"ADSR_lastOut",_wrap_ADSR_lastOut,0,0,2,0},
{"ADSR_tick",_wrap_ADSR_tick,0,0,2,0},
{"TARGET_THRESHOLD",0,_wrap_TARGET_THRESHOLD_get,_wrap_TARGET_THRESHOLD_set,2,0},
{"new_Asymp",_wrap_new_Asymp,0,0,2,0},
{"delete_Asymp",_wrap_delete_Asymp,0,0,2,0},
{"Asymp_keyOn",_wrap_Asymp_keyOn,0,0,2,0},
{"Asymp_keyOff",_wrap_Asymp_keyOff,0,0,2,0},
{"Asymp_setTau",_wrap_Asymp_setTau,0,0,2,0},
{"Asymp_setTime",_wrap_Asymp_setTime,0,0,2,0},
{"Asymp_setT60",_wrap_Asymp_setT60,0,0,2,0},
{"Asymp_setTarget",_wrap_Asymp_setTarget,0,0,2,0},
{"Asymp_setValue",_wrap_Asymp_setValue,0,0,2,0},
{"Asymp_getState",_wrap_Asymp_getState,0,0,2,0},
{"Asymp_lastOut",_wrap_Asymp_lastOut,0,0,2,0},
{"Asymp_tick",_wrap_Asymp_tick,0,0,2,0},
{"MAX_BANDED_MODES",0,_wrap_MAX_BANDED_MODES_get,_wrap_MAX_BANDED_MODES_set,2,0},
{"new_BandedWG",_wrap_new_BandedWG,0,0,2,0},
{"delete_BandedWG",_wrap_delete_BandedWG,0,0,2,0},
{"BandedWG_clear",_wrap_BandedWG_clear,0,0,2,0},
{"BandedWG_setStrikePosition",_wrap_BandedWG_setStrikePosition,0,0,2,0},
{"BandedWG_setPreset",_wrap_BandedWG_setPreset,0,0,2,0},
{"BandedWG_setFrequency",_wrap_BandedWG_setFrequency,0,0,2,0},
{"BandedWG_startBowing",_wrap_BandedWG_startBowing,0,0,2,0},
{"BandedWG_stopBowing",_wrap_BandedWG_stopBowing,0,0,2,0},
{"BandedWG_pluck",_wrap_BandedWG_pluck,0,0,2,0},
{"BandedWG_noteOn",_wrap_BandedWG_noteOn,0,0,2,0},
{"BandedWG_noteOff",_wrap_BandedWG_noteOff,0,0,2,0},
{"BandedWG_controlChange",_wrap_BandedWG_controlChange,0,0,2,0},
{"BandedWG_tick",_wrap_BandedWG_tick,0,0,2,0},
{"new_BeeThree",_wrap_new_BeeThree,0,0,2,0},
{"delete_BeeThree",_wrap_delete_BeeThree,0,0,2,0},
{"BeeThree_noteOn",_wrap_BeeThree_noteOn,0,0,2,0},
{"BeeThree_tick",_wrap_BeeThree_tick,0,0,2,0},
{"new_BiQuad",_wrap_new_BiQuad,0,0,2,0},
{"delete_BiQuad",_wrap_delete_BiQuad,0,0,2,0},
{"BiQuad_ignoreSampleRateChange",_wrap_BiQuad_ignoreSampleRateChange,0,0,2,0},
{"BiQuad_setCoefficients",_wrap_BiQuad_setCoefficients,0,0,2,0},
{"BiQuad_setB0",_wrap_BiQuad_setB0,0,0,2,0},
{"BiQuad_setB1",_wrap_BiQuad_setB1,0,0,2,0},
{"BiQuad_setB2",_wrap_BiQuad_setB2,0,0,2,0},
{"BiQuad_setA1",_wrap_BiQuad_setA1,0,0,2,0},
{"BiQuad_setA2",_wrap_BiQuad_setA2,0,0,2,0},
{"BiQuad_setResonance",_wrap_BiQuad_setResonance,0,0,2,0},
{"BiQuad_setNotch",_wrap_BiQuad_setNotch,0,0,2,0},
{"BiQuad_setEqualGainZeroes",_wrap_BiQuad_setEqualGainZeroes,0,0,2,0},
{"BiQuad_lastOut",_wrap_BiQuad_lastOut,0,0,2,0},
{"BiQuad_tick",_wrap_BiQuad_tick,0,0,2,0},
{"new_Blit",_wrap_new_Blit,0,0,2,0},
{"delete_Blit",_wrap_delete_Blit,0,0,2,0},
{"Blit_reset",_wrap_Blit_reset,0,0,2,0},
{"Blit_setPhase",_wrap_Blit_setPhase,0,0,2,0},
{"Blit_getPhase",_wrap_Blit_getPhase,0,0,2,0},
{"Blit_setFrequency",_wrap_Blit_setFrequency,0,0,2,0},
{"Blit_setHarmonics",_wrap_Blit_setHarmonics,0,0,2,0},
{"Blit_lastOut",_wrap_Blit_lastOut,0,0,2,0},
{"Blit_tick",_wrap_Blit_tick,0,0,2,0},
{"new_BlitSaw",_wrap_new_BlitSaw,0,0,2,0},
{"delete_BlitSaw",_wrap_delete_BlitSaw,0,0,2,0},
{"BlitSaw_reset",_wrap_BlitSaw_reset,0,0,2,0},
{"BlitSaw_setFrequency",_wrap_BlitSaw_setFrequency,0,0,2,0},
{"BlitSaw_setHarmonics",_wrap_BlitSaw_setHarmonics,0,0,2,0},
{"BlitSaw_lastOut",_wrap_BlitSaw_lastOut,0,0,2,0},
{"BlitSaw_tick",_wrap_BlitSaw_tick,0,0,2,0},
{"new_BlitSquare",_wrap_new_BlitSquare,0,0,2,0},
{"delete_BlitSquare",_wrap_delete_BlitSquare,0,0,2,0},
{"BlitSquare_reset",_wrap_BlitSquare_reset,0,0,2,0},
{"BlitSquare_setPhase",_wrap_BlitSquare_setPhase,0,0,2,0},
{"BlitSquare_getPhase",_wrap_BlitSquare_getPhase,0,0,2,0},
{"BlitSquare_setFrequency",_wrap_BlitSquare_setFrequency,0,0,2,0},
{"BlitSquare_setHarmonics",_wrap_BlitSquare_setHarmonics,0,0,2,0},
{"BlitSquare_lastOut",_wrap_BlitSquare_lastOut,0,0,2,0},
{"BlitSquare_tick",_wrap_BlitSquare_tick,0,0,2,0},
{"new_BlowBotl",_wrap_new_BlowBotl,0,0,2,0},
{"delete_BlowBotl",_wrap_delete_BlowBotl,0,0,2,0},
{"BlowBotl_clear",_wrap_BlowBotl_clear,0,0,2,0},
{"BlowBotl_setFrequency",_wrap_BlowBotl_setFrequency,0,0,2,0},
{"BlowBotl_startBlowing",_wrap_BlowBotl_startBlowing,0,0,2,0},
{"BlowBotl_stopBlowing",_wrap_BlowBotl_stopBlowing,0,0,2,0},
{"BlowBotl_noteOn",_wrap_BlowBotl_noteOn,0,0,2,0},
{"BlowBotl_noteOff",_wrap_BlowBotl_noteOff,0,0,2,0},
{"BlowBotl_controlChange",_wrap_BlowBotl_controlChange,0,0,2,0},
{"BlowBotl_tick",_wrap_BlowBotl_tick,0,0,2,0},
{"new_BlowHole",_wrap_new_BlowHole,0,0,2,0},
{"delete_BlowHole",_wrap_delete_BlowHole,0,0,2,0},
{"BlowHole_clear",_wrap_BlowHole_clear,0,0,2,0},
{"BlowHole_setFrequency",_wrap_BlowHole_setFrequency,0,0,2,0},
{"BlowHole_setTonehole",_wrap_BlowHole_setTonehole,0,0,2,0},
{"BlowHole_setVent",_wrap_BlowHole_setVent,0,0,2,0},
{"BlowHole_startBlowing",_wrap_BlowHole_startBlowing,0,0,2,0},
{"BlowHole_stopBlowing",_wrap_BlowHole_stopBlowing,0,0,2,0},
{"BlowHole_noteOn",_wrap_BlowHole_noteOn,0,0,2,0},
{"BlowHole_noteOff",_wrap_BlowHole_noteOff,0,0,2,0},
{"BlowHole_controlChange",_wrap_BlowHole_controlChange,0,0,2,0},
{"BlowHole_tick",_wrap_BlowHole_tick,0,0,2,0},
{"new_BowTable",_wrap_new_BowTable,0,0,2,0},
{"BowTable_setOffset",_wrap_BowTable_setOffset,0,0,2,0},
{"BowTable_setSlope",_wrap_BowTable_setSlope,0,0,2,0},
{"BowTable_setMinOutput",_wrap_BowTable_setMinOutput,0,0,2,0},
{"BowTable_setMaxOutput",_wrap_BowTable_setMaxOutput,0,0,2,0},
{"BowTable_tick",_wrap_BowTable_tick,0,0,2,0},
{"delete_BowTable",_wrap_delete_BowTable,0,0,2,0},
{"delete_Bowed",_wrap_delete_Bowed,0,0,2,0},
{"Bowed_clear",_wrap_Bowed_clear,0,0,2,0},
{"Bowed_setFrequency",_wrap_Bowed_setFrequency,0,0,2,0},
{"Bowed_setVibrato",_wrap_Bowed_setVibrato,0,0,2,0},
{"Bowed_startBowing",_wrap_Bowed_startBowing,0,0,2,0},
{"Bowed_stopBowing",_wrap_Bowed_stopBowing,0,0,2,0},
{"Bowed_noteOn",_wrap_Bowed_noteOn,0,0,2,0},
{"Bowed_noteOff",_wrap_Bowed_noteOff,0,0,2,0},
{"Bowed_controlChange",_wrap_Bowed_controlChange,0,0,2,0},
{"Bowed_tick",_wrap_Bowed_tick,0,0,2,0},
{"new_Brass",_wrap_new_Brass,0,0,2,0},
{"delete_Brass",_wrap_delete_Brass,0,0,2,0},
{"Brass_clear",_wrap_Brass_clear,0,0,2,0},
{"Brass_setFrequency",_wrap_Brass_setFrequency,0,0,2,0},
{"Brass_setLip",_wrap_Brass_setLip,0,0,2,0},
{"Brass_startBlowing",_wrap_Brass_startBlowing,0,0,2,0},
{"Brass_stopBlowing",_wrap_Brass_stopBlowing,0,0,2,0},
{"Brass_noteOn",_wrap_Brass_noteOn,0,0,2,0},
{"Brass_noteOff",_wrap_Brass_noteOff,0,0,2,0},
{"Brass_controlChange",_wrap_Brass_controlChange,0,0,2,0},
{"Brass_tick",_wrap_Brass_tick,0,0,2,0},
{"new_Chorus",_wrap_new_Chorus,0,0,2,0},
{"Chorus_clear",_wrap_Chorus_clear,0,0,2,0},
{"Chorus_setModDepth",_wrap_Chorus_setModDepth,0,0,2,0},
{"Chorus_setModFrequency",_wrap_Chorus_setModFrequency,0,0,2,0},
{"Chorus_lastOut",_wrap_Chorus_lastOut,0,0,2,0},
{"Chorus_tick",_wrap_Chorus_tick,0,0,2,0},
{"delete_Chorus",_wrap_delete_Chorus,0,0,2,0},
{"new_Clarinet",_wrap_new_Clarinet,0,0,2,0},
{"delete_Clarinet",_wrap_delete_Clarinet,0,0,2,0},
{"Clarinet_clear",_wrap_Clarinet_clear,0,0,2,0},
{"Clarinet_setFrequency",_wrap_Clarinet_setFrequency,0,0,2,0},
{"Clarinet_startBlowing",_wrap_Clarinet_startBlowing,0,0,2,0},
{"Clarinet_stopBlowing",_wrap_Clarinet_stopBlowing,0,0,2,0},
{"Clarinet_noteOn",_wrap_Clarinet_noteOn,0,0,2,0},
{"Clarinet_noteOff",_wrap_Clarinet_noteOff,0,0,2,0},
{"Clarinet_controlChange",_wrap_Clarinet_controlChange,0,0,2,0},
{"Clarinet_tick",_wrap_Clarinet_tick,0,0,2,0},
{"new_Cubic",_wrap_new_Cubic,0,0,2,0},
{"Cubic_setA1",_wrap_Cubic_setA1,0,0,2,0},
{"Cubic_setA2",_wrap_Cubic_setA2,0,0,2,0},
{"Cubic_setA3",_wrap_Cubic_setA3,0,0,2,0},
{"Cubic_setGain",_wrap_Cubic_setGain,0,0,2,0},
{"Cubic_setThreshold",_wrap_Cubic_setThreshold,0,0,2,0},
{"Cubic_tick",_wrap_Cubic_tick,0,0,2,0},
{"delete_Cubic",_wrap_delete_Cubic,0,0,2,0},
{"new_Delay",_wrap_new_Delay,0,0,2,0},
{"delete_Delay",_wrap_delete_Delay,0,0,2,0},
{"Delay_getMaximumDelay",_wrap_Delay_getMaximumDelay,0,0,2,0},
{"Delay_setMaximumDelay",_wrap_Delay_setMaximumDelay,0,0,2,0},
{"Delay_setDelay",_wrap_Delay_setDelay,0,0,2,0},
{"Delay_getDelay",_wrap_Delay_getDelay,0,0,2,0},
{"Delay_tapOut",_wrap_Delay_tapOut,0,0,2,0},
{"Delay_tapIn",_wrap_Delay_tapIn,0,0,2,0},
{"Delay_addTo",_wrap_Delay_addTo,0,0,2,0},
{"Delay_lastOut",_wrap_Delay_lastOut,0,0,2,0},
{"Delay_nextOut",_wrap_Delay_nextOut,0,0,2,0},
{"Delay_energy",_wrap_Delay_energy,0,0,2,0},
{"Delay_tick",_wrap_Delay_tick,0,0,2,0},
{"new_DelayA",_wrap_new_DelayA,0,0,2,0},
{"delete_DelayA",_wrap_delete_DelayA,0,0,2,0},
{"DelayA_clear",_wrap_DelayA_clear,0,0,2,0},
{"DelayA_getMaximumDelay",_wrap_DelayA_getMaximumDelay,0,0,2,0},
{"DelayA_setMaximumDelay",_wrap_DelayA_setMaximumDelay,0,0,2,0},
{"DelayA_setDelay",_wrap_DelayA_setDelay,0,0,2,0},
{"DelayA_getDelay",_wrap_DelayA_getDelay,0,0,2,0},
{"DelayA_tapOut",_wrap_DelayA_tapOut,0,0,2,0},
{"DelayA_lastOut",_wrap_DelayA_lastOut,0,0,2,0},
{"DelayA_nextOut",_wrap_DelayA_nextOut,0,0,2,0},
{"DelayA_tick",_wrap_DelayA_tick,0,0,2,0},
{"new_DelayL",_wrap_new_DelayL,0,0,2,0},
{"delete_DelayL",_wrap_delete_DelayL,0,0,2,0},
{"DelayL_getMaximumDelay",_wrap_DelayL_getMaximumDelay,0,0,2,0},
{"DelayL_setMaximumDelay",_wrap_DelayL_setMaximumDelay,0,0,2,0},
{"DelayL_setDelay",_wrap_DelayL_setDelay,0,0,2,0},
{"DelayL_getDelay",_wrap_DelayL_getDelay,0,0,2,0},
{"DelayL_tapOut",_wrap_DelayL_tapOut,0,0,2,0},
{"DelayL_tapIn",_wrap_DelayL_tapIn,0,0,2,0},
{"DelayL_lastOut",_wrap_DelayL_lastOut,0,0,2,0},
{"DelayL_nextOut",_wrap_DelayL_nextOut,0,0,2,0},
{"DelayL_tick",_wrap_DelayL_tick,0,0,2,0},
{"new_Drummer",_wrap_new_Drummer,0,0,2,0},
{"delete_Drummer",_wrap_delete_Drummer,0,0,2,0},
{"Drummer_noteOn",_wrap_Drummer_noteOn,0,0,2,0},
{"Drummer_noteOff",_wrap_Drummer_noteOff,0,0,2,0},
{"Drummer_tick",_wrap_Drummer_tick,0,0,2,0},
{"new_Echo",_wrap_new_Echo,0,0,2,0},
{"Echo_clear",_wrap_Echo_clear,0,0,2,0},
{"Echo_setMaximumDelay",_wrap_Echo_setMaximumDelay,0,0,2,0},
{"Echo_setDelay",_wrap_Echo_setDelay,0,0,2,0},
{"Echo_lastOut",_wrap_Echo_lastOut,0,0,2,0},
{"Echo_tick",_wrap_Echo_tick,0,0,2,0},
{"delete_Echo",_wrap_delete_Echo,0,0,2,0},
{"new_Envelope",_wrap_new_Envelope,0,0,2,0},
{"delete_Envelope",_wrap_delete_Envelope,0,0,2,0},
{"Envelope_keyOn",_wrap_Envelope_keyOn,0,0,2,0},
{"Envelope_keyOff",_wrap_Envelope_keyOff,0,0,2,0},
{"Envelope_setRate",_wrap_Envelope_setRate,0,0,2,0},
{"Envelope_setTime",_wrap_Envelope_setTime,0,0,2,0},
{"Envelope_setTarget",_wrap_Envelope_setTarget,0,0,2,0},
{"Envelope_setValue",_wrap_Envelope_setValue,0,0,2,0},
{"Envelope_getState",_wrap_Envelope_getState,0,0,2,0},
{"Envelope_lastOut",_wrap_Envelope_lastOut,0,0,2,0},
{"Envelope_tick",_wrap_Envelope_tick,0,0,2,0},
{"new_FMVoices",_wrap_new_FMVoices,0,0,2,0},
{"delete_FMVoices",_wrap_delete_FMVoices,0,0,2,0},
{"FMVoices_setFrequency",_wrap_FMVoices_setFrequency,0,0,2,0},
{"FMVoices_noteOn",_wrap_FMVoices_noteOn,0,0,2,0},
{"FMVoices_controlChange",_wrap_FMVoices_controlChange,0,0,2,0},
{"FMVoices_tick",_wrap_FMVoices_tick,0,0,2,0},
{"new_FileRead",_wrap_new_FileRead,0,0,2,0},
{"delete_FileRead",_wrap_delete_FileRead,0,0,2,0},
{"FileRead_open",_wrap_FileRead_open,0,0,2,0},
{"FileRead_close",_wrap_FileRead_close,0,0,2,0},
{"FileRead_isOpen",_wrap_FileRead_isOpen,0,0,2,0},
{"FileRead_fileSize",_wrap_FileRead_fileSize,0,0,2,0},
{"FileRead_channels",_wrap_FileRead_channels,0,0,2,0},
{"FileRead_format",_wrap_FileRead_format,0,0,2,0},
{"FileRead_fileRate",_wrap_FileRead_fileRate,0,0,2,0},
{"FileRead_read",_wrap_FileRead_read,0,0,2,0},
{"FileWrite_FILE_RAW",0,_wrap_FileWrite_FILE_RAW_get,_wrap_FileWrite_FILE_RAW_set,2,0},
{"FileWrite_FILE_WAV",0,_wrap_FileWrite_FILE_WAV_get,_wrap_FileWrite_FILE_WAV_set,2,0},
{"FileWrite_FILE_SND",0,_wrap_FileWrite_FILE_SND_get,_wrap_FileWrite_FILE_SND_set,2,0},
{"FileWrite_FILE_AIF",0,_wrap_FileWrite_FILE_AIF_get,_wrap_FileWrite_FILE_AIF_set,2,0},
{"FileWrite_FILE_MAT",0,_wrap_FileWrite_FILE_MAT_get,_wrap_FileWrite_FILE_MAT_set,2,0},
{"new_FileWrite",_wrap_new_FileWrite,0,0,2,0},
{"delete_FileWrite",_wrap_delete_FileWrite,0,0,2,0},
{"FileWrite_open",_wrap_FileWrite_open,0,0,2,0},
{"FileWrite_close",_wrap_FileWrite_close,0,0,2,0},
{"FileWrite_isOpen",_wrap_FileWrite_isOpen,0,0,2,0},
{"FileWrite_write",_wrap_FileWrite_write,0,0,2,0},
{"new_FileWvIn",_wrap_new_FileWvIn,0,0,2,0},
{"delete_FileWvIn",_wrap_delete_FileWvIn,0,0,2,0},
{"FileWvIn_openFile",_wrap_FileWvIn_openFile,0,0,2,0},
{"FileWvIn_closeFile",_wrap_FileWvIn_closeFile,0,0,2,0},
{"FileWvIn_reset",_wrap_FileWvIn_reset,0,0,2,0},
{"FileWvIn_normalize",_wrap_FileWvIn_normalize,0,0,2,0},
{"FileWvIn_getSize",_wrap_FileWvIn_getSize,0,0,2,0},
{"FileWvIn_getFileRate",_wrap_FileWvIn_getFileRate,0,0,2,0},
{"FileWvIn_isOpen",_wrap_FileWvIn_isOpen,0,0,2,0},
{"FileWvIn_isFinished",_wrap_FileWvIn_isFinished,0,0,2,0},
{"FileWvIn_setRate",_wrap_FileWvIn_setRate,0,0,2,0},
{"FileWvIn_addTime",_wrap_FileWvIn_addTime,0,0,2,0},
{"FileWvIn_setInterpolate",_wrap_FileWvIn_setInterpolate,0,0,2,0},
{"FileWvIn_lastOut",_wrap_FileWvIn_lastOut,0,0,2,0},
{"FileWvIn_tick",_wrap_FileWvIn_tick,0,0,2,0},
{"new_FileWvOut",_wrap_new_FileWvOut,0,0,2,0},
{"delete_FileWvOut",_wrap_delete_FileWvOut,0,0,2,0},
{"FileWvOut_openFile",_wrap_FileWvOut_openFile,0,0,2,0},
{"FileWvOut_closeFile",_wrap_FileWvOut_closeFile,0,0,2,0},
{"FileWvOut_tick",_wrap_FileWvOut_tick,0,0,2,0},
{"new_FileLoop",_wrap_new_FileLoop,0,0,2,0},
{"delete_FileLoop",_wrap_delete_FileLoop,0,0,2,0},
{"FileLoop_openFile",_wrap_FileLoop_openFile,0,0,2,0},
{"FileLoop_closeFile",_wrap_FileLoop_closeFile,0,0,2,0},
{"FileLoop_reset",_wrap_FileLoop_reset,0,0,2,0},
{"FileLoop_channelsOut",_wrap_FileLoop_channelsOut,0,0,2,0},
{"FileLoop_normalize",_wrap_FileLoop_normalize,0,0,2,0},
{"FileLoop_getSize",_wrap_FileLoop_getSize,0,0,2,0},
{"FileLoop_getFileRate",_wrap_FileLoop_getFileRate,0,0,2,0},
{"FileLoop_setRate",_wrap_FileLoop_setRate,0,0,2,0},
{"FileLoop_setFrequency",_wrap_FileLoop_setFrequency,0,0,2,0},
{"FileLoop_addTime",_wrap_FileLoop_addTime,0,0,2,0},
{"FileLoop_addPhase",_wrap_FileLoop_addPhase,0,0,2,0},
{"FileLoop_addPhaseOffset",_wrap_FileLoop_addPhaseOffset,0,0,2,0},
{"FileLoop_lastOut",_wrap_FileLoop_lastOut,0,0,2,0},
{"FileLoop_tick",_wrap_FileLoop_tick,0,0,2,0},
{"new_Fir",_wrap_new_Fir,0,0,2,0},
{"delete_Fir",_wrap_delete_Fir,0,0,2,0},
{"Fir_setCoefficients",_wrap_Fir_setCoefficients,0,0,2,0},
{"Fir_lastOut",_wrap_Fir_lastOut,0,0,2,0},
{"Fir_tick",_wrap_Fir_tick,0,0,2,0},
{"new_Flute",_wrap_new_Flute,0,0,2,0},
{"delete_Flute",_wrap_delete_Flute,0,0,2,0},
{"Flute_clear",_wrap_Flute_clear,0,0,2,0},
{"Flute_setFrequency",_wrap_Flute_setFrequency,0,0,2,0},
{"Flute_setJetReflection",_wrap_Flute_setJetReflection,0,0,2,0},
{"Flute_setEndReflection",_wrap_Flute_setEndReflection,0,0,2,0},
{"Flute_setJetDelay",_wrap_Flute_setJetDelay,0,0,2,0},
{"Flute_startBlowing",_wrap_Flute_startBlowing,0,0,2,0},
{"Flute_stopBlowing",_wrap_Flute_stopBlowing,0,0,2,0},
{"Flute_noteOn",_wrap_Flute_noteOn,0,0,2,0},
{"Flute_noteOff",_wrap_Flute_noteOff,0,0,2,0},
{"Flute_controlChange",_wrap_Flute_controlChange,0,0,2,0},
{"Flute_tick",_wrap_Flute_tick,0,0,2,0},
{"new_FormSwep",_wrap_new_FormSwep,0,0,2,0},
{"delete_FormSwep",_wrap_delete_FormSwep,0,0,2,0},
{"FormSwep_ignoreSampleRateChange",_wrap_FormSwep_ignoreSampleRateChange,0,0,2,0},
{"FormSwep_setResonance",_wrap_FormSwep_setResonance,0,0,2,0},
{"FormSwep_setStates",_wrap_FormSwep_setStates,0,0,2,0},
{"FormSwep_setTargets",_wrap_FormSwep_setTargets,0,0,2,0},
{"FormSwep_setSweepRate",_wrap_FormSwep_setSweepRate,0,0,2,0},
{"FormSwep_setSweepTime",_wrap_FormSwep_setSweepTime,0,0,2,0},
{"FormSwep_lastOut",_wrap_FormSwep_lastOut,0,0,2,0},
{"FormSwep_tick",_wrap_FormSwep_tick,0,0,2,0},
{"new_FreeVerb",_wrap_new_FreeVerb,0,0,2,0},
{"delete_FreeVerb",_wrap_delete_FreeVerb,0,0,2,0},
{"FreeVerb_setEffectMix",_wrap_FreeVerb_setEffectMix,0,0,2,0},
{"FreeVerb_setRoomSize",_wrap_FreeVerb_setRoomSize,0,0,2,0},
{"FreeVerb_getRoomSize",_wrap_FreeVerb_getRoomSize,0,0,2,0},
{"FreeVerb_setDamping",_wrap_FreeVerb_setDamping,0,0,2,0},
{"FreeVerb_getDamping",_wrap_FreeVerb_getDamping,0,0,2,0},
{"FreeVerb_setWidth",_wrap_FreeVerb_setWidth,0,0,2,0},
{"FreeVerb_getWidth",_wrap_FreeVerb_getWidth,0,0,2,0},
{"FreeVerb_setMode",_wrap_FreeVerb_setMode,0,0,2,0},
{"FreeVerb_getMode",_wrap_FreeVerb_getMode,0,0,2,0},
{"FreeVerb_clear",_wrap_FreeVerb_clear,0,0,2,0},
{"FreeVerb_lastOut",_wrap_FreeVerb_lastOut,0,0,2,0},
{"FreeVerb_tick",_wrap_FreeVerb_tick,0,0,2,0},
{"new_Granulate",_wrap_new_Granulate,0,0,2,0},
{"delete_Granulate",_wrap_delete_Granulate,0,0,2,0},
{"Granulate_openFile",_wrap_Granulate_openFile,0,0,2,0},
{"Granulate_reset",_wrap_Granulate_reset,0,0,2,0},
{"Granulate_setVoices",_wrap_Granulate_setVoices,0,0,2,0},
{"Granulate_setStretch",_wrap_Granulate_setStretch,0,0,2,0},
{"Granulate_setGrainParameters",_wrap_Granulate_setGrainParameters,0,0,2,0},
{"Granulate_setRandomFactor",_wrap_Granulate_setRandomFactor,0,0,2,0},
{"Granulate_lastOut",_wrap_Granulate_lastOut,0,0,2,0},
{"Granulate_tick",_wrap_Granulate_tick,0,0,2,0},
{"new_Guitar",_wrap_new_Guitar,0,0,2,0},
{"Guitar_clear",_wrap_Guitar_clear,0,0,2,0},
{"Guitar_setBodyFile",_wrap_Guitar_setBodyFile,0,0,2,0},
{"Guitar_setPluckPosition",_wrap_Guitar_setPluckPosition,0,0,2,0},
{"Guitar_setLoopGain",_wrap_Guitar_setLoopGain,0,0,2,0},
{"Guitar_setFrequency",_wrap_Guitar_setFrequency,0,0,2,0},
{"Guitar_noteOn",_wrap_Guitar_noteOn,0,0,2,0},
{"Guitar_noteOff",_wrap_Guitar_noteOff,0,0,2,0},
{"Guitar_controlChange",_wrap_Guitar_controlChange,0,0,2,0},
{"Guitar_lastOut",_wrap_Guitar_lastOut,0,0,2,0},
{"Guitar_tick",_wrap_Guitar_tick,0,0,2,0},
{"delete_Guitar",_wrap_delete_Guitar,0,0,2,0},
{"new_HevyMetl",_wrap_new_HevyMetl,0,0,2,0},
{"delete_HevyMetl",_wrap_delete_HevyMetl,0,0,2,0},
{"HevyMetl_noteOn",_wrap_HevyMetl_noteOn,0,0,2,0},
{"HevyMetl_tick",_wrap_HevyMetl_tick,0,0,2,0},
{"new_Iir",_wrap_new_Iir,0,0,2,0},
{"delete_Iir",_wrap_delete_Iir,0,0,2,0},
{"Iir_setCoefficients",_wrap_Iir_setCoefficients,0,0,2,0},
{"Iir_setNumerator",_wrap_Iir_setNumerator,0,0,2,0},
{"Iir_setDenominator",_wrap_Iir_setDenominator,0,0,2,0},
{"Iir_lastOut",_wrap_Iir_lastOut,0,0,2,0},
{"Iir_tick",_wrap_Iir_tick,0,0,2,0},
{"new_JCRev",_wrap_new_JCRev,0,0,2,0},
{"JCRev_clear",_wrap_JCRev_clear,0,0,2,0},
{"JCRev_setT60",_wrap_JCRev_setT60,0,0,2,0},
{"JCRev_lastOut",_wrap_JCRev_lastOut,0,0,2,0},
{"JCRev_tick",_wrap_JCRev_tick,0,0,2,0},
{"delete_JCRev",_wrap_delete_JCRev,0,0,2,0},
{"JetTable_tick",_wrap_JetTable_tick,0,0,2,0},
{"new_JetTable",_wrap_new_JetTable,0,0,2,0},
{"delete_JetTable",_wrap_delete_JetTable,0,0,2,0},
{"new_LentPitShift",_wrap_new_LentPitShift,0,0,2,0},
{"delete_LentPitShift",_wrap_delete_LentPitShift,0,0,2,0},
{"LentPitShift_clear",_wrap_LentPitShift_clear,0,0,2,0},
{"LentPitShift_setShift",_wrap_LentPitShift_setShift,0,0,2,0},
{"LentPitShift_tick",_wrap_LentPitShift_tick,0,0,2,0},
{"new_Mandolin",_wrap_new_Mandolin,0,0,2,0},
{"delete_Mandolin",_wrap_delete_Mandolin,0,0,2,0},
{"Mandolin_clear",_wrap_Mandolin_clear,0,0,2,0},
{"Mandolin_setDetune",_wrap_Mandolin_setDetune,0,0,2,0},
{"Mandolin_setBodySize",_wrap_Mandolin_setBodySize,0,0,2,0},
{"Mandolin_setPluckPosition",_wrap_Mandolin_setPluckPosition,0,0,2,0},
{"Mandolin_setFrequency",_wrap_Mandolin_setFrequency,0,0,2,0},
{"Mandolin_pluck",_wrap_Mandolin_pluck,0,0,2,0},
{"Mandolin_noteOn",_wrap_Mandolin_noteOn,0,0,2,0},
{"Mandolin_noteOff",_wrap_Mandolin_noteOff,0,0,2,0},
{"Mandolin_controlChange",_wrap_Mandolin_controlChange,0,0,2,0},
{"Mandolin_tick",_wrap_Mandolin_tick,0,0,2,0},
{"new_Mesh2D",_wrap_new_Mesh2D,0,0,2,0},
{"delete_Mesh2D",_wrap_delete_Mesh2D,0,0,2,0},
{"Mesh2D_clear",_wrap_Mesh2D_clear,0,0,2,0},
{"Mesh2D_setNX",_wrap_Mesh2D_setNX,0,0,2,0},
{"Mesh2D_setNY",_wrap_Mesh2D_setNY,0,0,2,0},
{"Mesh2D_setInputPosition",_wrap_Mesh2D_setInputPosition,0,0,2,0},
{"Mesh2D_setDecay",_wrap_Mesh2D_setDecay,0,0,2,0},
{"Mesh2D_noteOn",_wrap_Mesh2D_noteOn,0,0,2,0},
{"Mesh2D_noteOff",_wrap_Mesh2D_noteOff,0,0,2,0},
{"Mesh2D_energy",_wrap_Mesh2D_energy,0,0,2,0},
{"Mesh2D_inputTick",_wrap_Mesh2D_inputTick,0,0,2,0},
{"Mesh2D_controlChange",_wrap_Mesh2D_controlChange,0,0,2,0},
{"Mesh2D_tick",_wrap_Mesh2D_tick,0,0,2,0},
{"new_Messager",_wrap_new_Messager,0,0,2,0},
{"delete_Messager",_wrap_delete_Messager,0,0,2,0},
{"Messager_popMessage",_wrap_Messager_popMessage,0,0,2,0},
{"Messager_pushMessage",_wrap_Messager_pushMessage,0,0,2,0},
{"Messager_setScoreFile",_wrap_Messager_setScoreFile,0,0,2,0},
{"new_MidiFileIn",_wrap_new_MidiFileIn,0,0,2,0},
{"delete_MidiFileIn",_wrap_delete_MidiFileIn,0,0,2,0},
{"MidiFileIn_getFileFormat",_wrap_MidiFileIn_getFileFormat,0,0,2,0},
{"MidiFileIn_getNumberOfTracks",_wrap_MidiFileIn_getNumberOfTracks,0,0,2,0},
{"MidiFileIn_getDivision",_wrap_MidiFileIn_getDivision,0,0,2,0},
{"MidiFileIn_rewindTrack",_wrap_MidiFileIn_rewindTrack,0,0,2,0},
{"MidiFileIn_getTickSeconds",_wrap_MidiFileIn_getTickSeconds,0,0,2,0},
{"MidiFileIn_getNextEvent",_wrap_MidiFileIn_getNextEvent,0,0,2,0},
{"MidiFileIn_getNextMidiEvent",_wrap_MidiFileIn_getNextMidiEvent,0,0,2,0},
{"delete_Modal",_wrap_delete_Modal,0,0,2,0},
{"Modal_clear",_wrap_Modal_clear,0,0,2,0},
{"Modal_setFrequency",_wrap_Modal_setFrequency,0,0,2,0},
{"Modal_setRatioAndRadius",_wrap_Modal_setRatioAndRadius,0,0,2,0},
{"Modal_setMasterGain",_wrap_Modal_setMasterGain,0,0,2,0},
{"Modal_setDirectGain",_wrap_Modal_setDirectGain,0,0,2,0},
{"Modal_setModeGain",_wrap_Modal_setModeGain,0,0,2,0},
{"Modal_strike",_wrap_Modal_strike,0,0,2,0},
{"Modal_damp",_wrap_Modal_damp,0,0,2,0},
{"Modal_noteOn",_wrap_Modal_noteOn,0,0,2,0},
{"Modal_noteOff",_wrap_Modal_noteOff,0,0,2,0},
{"Modal_controlChange",_wrap_Modal_controlChange,0,0,2,0},
{"Modal_tick",_wrap_Modal_tick,0,0,2,0},
{"new_ModalBar",_wrap_new_ModalBar,0,0,2,0},
{"delete_ModalBar",_wrap_delete_ModalBar,0,0,2,0},
{"ModalBar_setStickHardness",_wrap_ModalBar_setStickHardness,0,0,2,0},
{"ModalBar_setStrikePosition",_wrap_ModalBar_setStrikePosition,0,0,2,0},
{"ModalBar_setPreset",_wrap_ModalBar_setPreset,0,0,2,0},
{"ModalBar_setModulationDepth",_wrap_ModalBar_setModulationDepth,0,0,2,0},
{"ModalBar_controlChange",_wrap_ModalBar_controlChange,0,0,2,0},
{"new_Modulate",_wrap_new_Modulate,0,0,2,0},
{"delete_Modulate",_wrap_delete_Modulate,0,0,2,0},
{"Modulate_reset",_wrap_Modulate_reset,0,0,2,0},
{"Modulate_setVibratoRate",_wrap_Modulate_setVibratoRate,0,0,2,0},
{"Modulate_setVibratoGain",_wrap_Modulate_setVibratoGain,0,0,2,0},
{"Modulate_setRandomRate",_wrap_Modulate_setRandomRate,0,0,2,0},
{"Modulate_setRandomGain",_wrap_Modulate_setRandomGain,0,0,2,0},
{"Modulate_lastOut",_wrap_Modulate_lastOut,0,0,2,0},
{"Modulate_tick",_wrap_Modulate_tick,0,0,2,0},
{"new_Moog",_wrap_new_Moog,0,0,2,0},
{"delete_Moog",_wrap_delete_Moog,0,0,2,0},
{"Moog_setFrequency",_wrap_Moog_setFrequency,0,0,2,0},
{"Moog_noteOn",_wrap_Moog_noteOn,0,0,2,0},
{"Moog_setModulationSpeed",_wrap_Moog_setModulationSpeed,0,0,2,0},
{"Moog_setModulationDepth",_wrap_Moog_setModulationDepth,0,0,2,0},
{"Moog_controlChange",_wrap_Moog_controlChange,0,0,2,0},
{"Moog_tick",_wrap_Moog_tick,0,0,2,0},
{"new_NRev",_wrap_new_NRev,0,0,2,0},
{"NRev_clear",_wrap_NRev_clear,0,0,2,0},
{"NRev_setT60",_wrap_NRev_setT60,0,0,2,0},
{"NRev_lastOut",_wrap_NRev_lastOut,0,0,2,0},
{"NRev_tick",_wrap_NRev_tick,0,0,2,0},
{"delete_NRev",_wrap_delete_NRev,0,0,2,0},
{"new_Noise",_wrap_new_Noise,0,0,2,0},
{"Noise_setSeed",_wrap_Noise_setSeed,0,0,2,0},
{"Noise_lastOut",_wrap_Noise_lastOut,0,0,2,0},
{"Noise_tick",_wrap_Noise_tick,0,0,2,0},
{"delete_Noise",_wrap_delete_Noise,0,0,2,0},
{"new_OnePole",_wrap_new_OnePole,0,0,2,0},
{"delete_OnePole",_wrap_delete_OnePole,0,0,2,0},
{"OnePole_setB0",_wrap_OnePole_setB0,0,0,2,0},
{"OnePole_setA1",_wrap_OnePole_setA1,0,0,2,0},
{"OnePole_setCoefficients",_wrap_OnePole_setCoefficients,0,0,2,0},
{"OnePole_setPole",_wrap_OnePole_setPole,0,0,2,0},
{"OnePole_lastOut",_wrap_OnePole_lastOut,0,0,2,0},
{"OnePole_tick",_wrap_OnePole_tick,0,0,2,0},
{"new_OneZero",_wrap_new_OneZero,0,0,2,0},
{"delete_OneZero",_wrap_delete_OneZero,0,0,2,0},
{"OneZero_setB0",_wrap_OneZero_setB0,0,0,2,0},
{"OneZero_setB1",_wrap_OneZero_setB1,0,0,2,0},
{"OneZero_setCoefficients",_wrap_OneZero_setCoefficients,0,0,2,0},
{"OneZero_setZero",_wrap_OneZero_setZero,0,0,2,0},
{"OneZero_lastOut",_wrap_OneZero_lastOut,0,0,2,0},
{"OneZero_tick",_wrap_OneZero_tick,0,0,2,0},
{"new_PRCRev",_wrap_new_PRCRev,0,0,2,0},
{"PRCRev_clear",_wrap_PRCRev_clear,0,0,2,0},
{"PRCRev_setT60",_wrap_PRCRev_setT60,0,0,2,0},
{"PRCRev_lastOut",_wrap_PRCRev_lastOut,0,0,2,0},
{"PRCRev_tick",_wrap_PRCRev_tick,0,0,2,0},
{"delete_PRCRev",_wrap_delete_PRCRev,0,0,2,0},
{"new_PercFlut",_wrap_new_PercFlut,0,0,2,0},
{"delete_PercFlut",_wrap_delete_PercFlut,0,0,2,0},
{"PercFlut_setFrequency",_wrap_PercFlut_setFrequency,0,0,2,0},
{"PercFlut_noteOn",_wrap_PercFlut_noteOn,0,0,2,0},
{"PercFlut_tick",_wrap_PercFlut_tick,0,0,2,0},
{"new_Phonemes",_wrap_new_Phonemes,0,0,2,0},
{"delete_Phonemes",_wrap_delete_Phonemes,0,0,2,0},
{"Phonemes_name",_wrap_Phonemes_name,0,0,2,0},
{"Phonemes_voiceGain",_wrap_Phonemes_voiceGain,0,0,2,0},
{"Phonemes_noiseGain",_wrap_Phonemes_noiseGain,0,0,2,0},
{"Phonemes_formantFrequency",_wrap_Phonemes_formantFrequency,0,0,2,0},
{"Phonemes_formantRadius",_wrap_Phonemes_formantRadius,0,0,2,0},
{"Phonemes_formantGain",_wrap_Phonemes_formantGain,0,0,2,0},
{"new_PitShift",_wrap_new_PitShift,0,0,2,0},
{"PitShift_clear",_wrap_PitShift_clear,0,0,2,0},
{"PitShift_setShift",_wrap_PitShift_setShift,0,0,2,0},
{"PitShift_lastOut",_wrap_PitShift_lastOut,0,0,2,0},
{"PitShift_tick",_wrap_PitShift_tick,0,0,2,0},
{"delete_PitShift",_wrap_delete_PitShift,0,0,2,0},
{"new_Plucked",_wrap_new_Plucked,0,0,2,0},
{"delete_Plucked",_wrap_delete_Plucked,0,0,2,0},
{"Plucked_clear",_wrap_Plucked_clear,0,0,2,0},
{"Plucked_setFrequency",_wrap_Plucked_setFrequency,0,0,2,0},
{"Plucked_pluck",_wrap_Plucked_pluck,0,0,2,0},
{"Plucked_noteOn",_wrap_Plucked_noteOn,0,0,2,0},
{"Plucked_noteOff",_wrap_Plucked_noteOff,0,0,2,0},
{"Plucked_tick",_wrap_Plucked_tick,0,0,2,0},
{"new_PoleZero",_wrap_new_PoleZero,0,0,2,0},
{"delete_PoleZero",_wrap_delete_PoleZero,0,0,2,0},
{"PoleZero_setB0",_wrap_PoleZero_setB0,0,0,2,0},
{"PoleZero_setB1",_wrap_PoleZero_setB1,0,0,2,0},
{"PoleZero_setA1",_wrap_PoleZero_setA1,0,0,2,0},
{"PoleZero_setCoefficients",_wrap_PoleZero_setCoefficients,0,0,2,0},
{"PoleZero_setAllpass",_wrap_PoleZero_setAllpass,0,0,2,0},
{"PoleZero_setBlockZero",_wrap_PoleZero_setBlockZero,0,0,2,0},
{"PoleZero_lastOut",_wrap_PoleZero_lastOut,0,0,2,0},
{"PoleZero_tick",_wrap_PoleZero_tick,0,0,2,0},
{"new_Recorder",_wrap_new_Recorder,0,0,2,0},
{"delete_Recorder",_wrap_delete_Recorder,0,0,2,0},
{"Recorder_clear",_wrap_Recorder_clear,0,0,2,0},
{"Recorder_setFrequency",_wrap_Recorder_setFrequency,0,0,2,0},
{"Recorder_startBlowing",_wrap_Recorder_startBlowing,0,0,2,0},
{"Recorder_stopBlowing",_wrap_Recorder_stopBlowing,0,0,2,0},
{"Recorder_noteOn",_wrap_Recorder_noteOn,0,0,2,0},
{"Recorder_noteOff",_wrap_Recorder_noteOff,0,0,2,0},
{"Recorder_controlChange",_wrap_Recorder_controlChange,0,0,2,0},
{"Recorder_tick",_wrap_Recorder_tick,0,0,2,0},
{"Recorder_setBlowPressure",_wrap_Recorder_setBlowPressure,0,0,2,0},
{"Recorder_setVibratoGain",_wrap_Recorder_setVibratoGain,0,0,2,0},
{"Recorder_setVibratoFrequency",_wrap_Recorder_setVibratoFrequency,0,0,2,0},
{"Recorder_setNoiseGain",_wrap_Recorder_setNoiseGain,0,0,2,0},
{"Recorder_setBreathCutoff",_wrap_Recorder_setBreathCutoff,0,0,2,0},
{"Recorder_setSoftness",_wrap_Recorder_setSoftness,0,0,2,0},
{"new_ReedTable",_wrap_new_ReedTable,0,0,2,0},
{"ReedTable_setOffset",_wrap_ReedTable_setOffset,0,0,2,0},
{"ReedTable_setSlope",_wrap_ReedTable_setSlope,0,0,2,0},
{"ReedTable_tick",_wrap_ReedTable_tick,0,0,2,0},
{"delete_ReedTable",_wrap_delete_ReedTable,0,0,2,0},
{"new_Resonate",_wrap_new_Resonate,0,0,2,0},
{"delete_Resonate",_wrap_delete_Resonate,0,0,2,0},
{"Resonate_setResonance",_wrap_Resonate_setResonance,0,0,2,0},
{"Resonate_setNotch",_wrap_Resonate_setNotch,0,0,2,0},
{"Resonate_setEqualGainZeroes",_wrap_Resonate_setEqualGainZeroes,0,0,2,0},
{"Resonate_keyOn",_wrap_Resonate_keyOn,0,0,2,0},
{"Resonate_keyOff",_wrap_Resonate_keyOff,0,0,2,0},
{"Resonate_noteOn",_wrap_Resonate_noteOn,0,0,2,0},
{"Resonate_noteOff",_wrap_Resonate_noteOff,0,0,2,0},
{"Resonate_controlChange",_wrap_Resonate_controlChange,0,0,2,0},
{"Resonate_tick",_wrap_Resonate_tick,0,0,2,0},
{"new_Rhodey",_wrap_new_Rhodey,0,0,2,0},
{"delete_Rhodey",_wrap_delete_Rhodey,0,0,2,0},
{"Rhodey_setFrequency",_wrap_Rhodey_setFrequency,0,0,2,0},
{"Rhodey_noteOn",_wrap_Rhodey_noteOn,0,0,2,0},
{"Rhodey_tick",_wrap_Rhodey_tick,0,0,2,0},
{"new_Saxofony",_wrap_new_Saxofony,0,0,2,0},
{"delete_Saxofony",_wrap_delete_Saxofony,0,0,2,0},
{"Saxofony_clear",_wrap_Saxofony_clear,0,0,2,0},
{"Saxofony_setFrequency",_wrap_Saxofony_setFrequency,0,0,2,0},
{"Saxofony_setBlowPosition",_wrap_Saxofony_setBlowPosition,0,0,2,0},
{"Saxofony_startBlowing",_wrap_Saxofony_startBlowing,0,0,2,0},
{"Saxofony_stopBlowing",_wrap_Saxofony_stopBlowing,0,0,2,0},
{"Saxofony_noteOn",_wrap_Saxofony_noteOn,0,0,2,0},
{"Saxofony_noteOff",_wrap_Saxofony_noteOff,0,0,2,0},
{"Saxofony_controlChange",_wrap_Saxofony_controlChange,0,0,2,0},
{"Saxofony_tick",_wrap_Saxofony_tick,0,0,2,0},
{"new_Shakers",_wrap_new_Shakers,0,0,2,0},
{"Shakers_noteOn",_wrap_Shakers_noteOn,0,0,2,0},
{"Shakers_noteOff",_wrap_Shakers_noteOff,0,0,2,0},
{"Shakers_controlChange",_wrap_Shakers_controlChange,0,0,2,0},
{"Shakers_tick",_wrap_Shakers_tick,0,0,2,0},
{"delete_Shakers",_wrap_delete_Shakers,0,0,2,0},
{"new_Simple",_wrap_new_Simple,0,0,2,0},
{"delete_Simple",_wrap_delete_Simple,0,0,2,0},
{"Simple_setFrequency",_wrap_Simple_setFrequency,0,0,2,0},
{"Simple_keyOn",_wrap_Simple_keyOn,0,0,2,0},
{"Simple_keyOff",_wrap_Simple_keyOff,0,0,2,0},
{"Simple_noteOn",_wrap_Simple_noteOn,0,0,2,0},
{"Simple_noteOff",_wrap_Simple_noteOff,0,0,2,0},
{"Simple_controlChange",_wrap_Simple_controlChange,0,0,2,0},
{"Simple_tick",_wrap_Simple_tick,0,0,2,0},
{"new_SineWave",_wrap_new_SineWave,0,0,2,0},
{"delete_SineWave",_wrap_delete_SineWave,0,0,2,0},
{"SineWave_reset",_wrap_SineWave_reset,0,0,2,0},
{"SineWave_setRate",_wrap_SineWave_setRate,0,0,2,0},
{"SineWave_setFrequency",_wrap_SineWave_setFrequency,0,0,2,0},
{"SineWave_addTime",_wrap_SineWave_addTime,0,0,2,0},
{"SineWave_addPhase",_wrap_SineWave_addPhase,0,0,2,0},
{"SineWave_addPhaseOffset",_wrap_SineWave_addPhaseOffset,0,0,2,0},
{"SineWave_lastOut",_wrap_SineWave_lastOut,0,0,2,0},
{"SineWave_tick",_wrap_SineWave_tick,0,0,2,0},
{"new_SingWave",_wrap_new_SingWave,0,0,2,0},
{"delete_SingWave",_wrap_delete_SingWave,0,0,2,0},
{"SingWave_reset",_wrap_SingWave_reset,0,0,2,0},
{"SingWave_normalize",_wrap_SingWave_normalize,0,0,2,0},
{"SingWave_setFrequency",_wrap_SingWave_setFrequency,0,0,2,0},
{"SingWave_setVibratoRate",_wrap_SingWave_setVibratoRate,0,0,2,0},
{"SingWave_setVibratoGain",_wrap_SingWave_setVibratoGain,0,0,2,0},
{"SingWave_setRandomGain",_wrap_SingWave_setRandomGain,0,0,2,0},
{"SingWave_setSweepRate",_wrap_SingWave_setSweepRate,0,0,2,0},
{"SingWave_setGainRate",_wrap_SingWave_setGainRate,0,0,2,0},
{"SingWave_setGainTarget",_wrap_SingWave_setGainTarget,0,0,2,0},
{"SingWave_noteOn",_wrap_SingWave_noteOn,0,0,2,0},
{"SingWave_noteOff",_wrap_SingWave_noteOff,0,0,2,0},
{"SingWave_lastOut",_wrap_SingWave_lastOut,0,0,2,0},
{"SingWave_tick",_wrap_SingWave_tick,0,0,2,0},
{"new_Sitar",_wrap_new_Sitar,0,0,2,0},
{"delete_Sitar",_wrap_delete_Sitar,0,0,2,0},
{"Sitar_clear",_wrap_Sitar_clear,0,0,2,0},
{"Sitar_setFrequency",_wrap_Sitar_setFrequency,0,0,2,0},
{"Sitar_pluck",_wrap_Sitar_pluck,0,0,2,0},
{"Sitar_noteOn",_wrap_Sitar_noteOn,0,0,2,0},
{"Sitar_noteOff",_wrap_Sitar_noteOff,0,0,2,0},
{"Sitar_tick",_wrap_Sitar_tick,0,0,2,0},
{"new_Sphere",_wrap_new_Sphere,0,0,2,0},
{"Sphere_setPosition",_wrap_Sphere_setPosition,0,0,2,0},
{"Sphere_setVelocity",_wrap_Sphere_setVelocity,0,0,2,0},
{"Sphere_setRadius",_wrap_Sphere_setRadius,0,0,2,0},
{"Sphere_setMass",_wrap_Sphere_setMass,0,0,2,0},
{"Sphere_getPosition",_wrap_Sphere_getPosition,0,0,2,0},
{"Sphere_getRelativePosition",_wrap_Sphere_getRelativePosition,0,0,2,0},
{"Sphere_getVelocity",_wrap_Sphere_getVelocity,0,0,2,0},
{"Sphere_isInside",_wrap_Sphere_isInside,0,0,2,0},
{"Sphere_getRadius",_wrap_Sphere_getRadius,0,0,2,0},
{"Sphere_getMass",_wrap_Sphere_getMass,0,0,2,0},
{"Sphere_addVelocity",_wrap_Sphere_addVelocity,0,0,2,0},
{"Sphere_tick",_wrap_Sphere_tick,0,0,2,0},
{"delete_Sphere",_wrap_delete_Sphere,0,0,2,0},
{"new_StifKarp",_wrap_new_StifKarp,0,0,2,0},
{"delete_StifKarp",_wrap_delete_StifKarp,0,0,2,0},
{"StifKarp_clear",_wrap_StifKarp_clear,0,0,2,0},
{"StifKarp_setFrequency",_wrap_StifKarp_setFrequency,0,0,2,0},
{"StifKarp_setStretch",_wrap_StifKarp_setStretch,0,0,2,0},
{"StifKarp_setPickupPosition",_wrap_StifKarp_setPickupPosition,0,0,2,0},
{"StifKarp_setBaseLoopGain",_wrap_StifKarp_setBaseLoopGain,0,0,2,0},
{"StifKarp_pluck",_wrap_StifKarp_pluck,0,0,2,0},
{"StifKarp_noteOn",_wrap_StifKarp_noteOn,0,0,2,0},
{"StifKarp_noteOff",_wrap_StifKarp_noteOff,0,0,2,0},
{"StifKarp_controlChange",_wrap_StifKarp_controlChange,0,0,2,0},
{"StifKarp_tick",_wrap_StifKarp_tick,0,0,2,0},
{"new_TapDelay",_wrap_new_TapDelay,0,0,2,0},
{"delete_TapDelay",_wrap_delete_TapDelay,0,0,2,0},
{"TapDelay_setMaximumDelay",_wrap_TapDelay_setMaximumDelay,0,0,2,0},
{"TapDelay_setTapDelays",_wrap_TapDelay_setTapDelays,0,0,2,0},
{"TapDelay_getTapDelays",_wrap_TapDelay_getTapDelays,0,0,2,0},
{"TapDelay_lastOut",_wrap_TapDelay_lastOut,0,0,2,0},
{"TapDelay_tick",_wrap_TapDelay_tick,0,0,2,0},
{"new_TubeBell",_wrap_new_TubeBell,0,0,2,0},
{"delete_TubeBell",_wrap_delete_TubeBell,0,0,2,0},
{"TubeBell_noteOn",_wrap_TubeBell_noteOn,0,0,2,0},
{"TubeBell_tick",_wrap_TubeBell_tick,0,0,2,0},
{"new_Twang",_wrap_new_Twang,0,0,2,0},
{"Twang_clear",_wrap_Twang_clear,0,0,2,0},
{"Twang_setLowestFrequency",_wrap_Twang_setLowestFrequency,0,0,2,0},
{"Twang_setFrequency",_wrap_Twang_setFrequency,0,0,2,0},
{"Twang_setPluckPosition",_wrap_Twang_setPluckPosition,0,0,2,0},
{"Twang_setLoopGain",_wrap_Twang_setLoopGain,0,0,2,0},
{"Twang_lastOut",_wrap_Twang_lastOut,0,0,2,0},
{"Twang_tick",_wrap_Twang_tick,0,0,2,0},
{"delete_Twang",_wrap_delete_Twang,0,0,2,0},
{"new_TwoPole",_wrap_new_TwoPole,0,0,2,0},
{"delete_TwoPole",_wrap_delete_TwoPole,0,0,2,0},
{"TwoPole_ignoreSampleRateChange",_wrap_TwoPole_ignoreSampleRateChange,0,0,2,0},
{"TwoPole_setB0",_wrap_TwoPole_setB0,0,0,2,0},
{"TwoPole_setA1",_wrap_TwoPole_setA1,0,0,2,0},
{"TwoPole_setA2",_wrap_TwoPole_setA2,0,0,2,0},
{"TwoPole_setCoefficients",_wrap_TwoPole_setCoefficients,0,0,2,0},
{"TwoPole_setResonance",_wrap_TwoPole_setResonance,0,0,2,0},
{"TwoPole_lastOut",_wrap_TwoPole_lastOut,0,0,2,0},
{"TwoPole_tick",_wrap_TwoPole_tick,0,0,2,0},
{"new_TwoZero",_wrap_new_TwoZero,0,0,2,0},
{"delete_TwoZero",_wrap_delete_TwoZero,0,0,2,0},
{"TwoZero_ignoreSampleRateChange",_wrap_TwoZero_ignoreSampleRateChange,0,0,2,0},
{"TwoZero_setB0",_wrap_TwoZero_setB0,0,0,2,0},
{"TwoZero_setB1",_wrap_TwoZero_setB1,0,0,2,0},
{"TwoZero_setB2",_wrap_TwoZero_setB2,0,0,2,0},
{"TwoZero_setCoefficients",_wrap_TwoZero_setCoefficients,0,0,2,0},
{"TwoZero_setNotch",_wrap_TwoZero_setNotch,0,0,2,0},
{"TwoZero_lastOut",_wrap_TwoZero_lastOut,0,0,2,0},
{"TwoZero_tick",_wrap_TwoZero_tick,0,0,2,0},
{"new_Vector3D",_wrap_new_Vector3D,0,0,2,0},
{"Vector3D_getX",_wrap_Vector3D_getX,0,0,2,0},
{"Vector3D_getY",_wrap_Vector3D_getY,0,0,2,0},
{"Vector3D_getZ",_wrap_Vector3D_getZ,0,0,2,0},
{"Vector3D_getLength",_wrap_Vector3D_getLength,0,0,2,0},
{"Vector3D_setXYZ",_wrap_Vector3D_setXYZ,0,0,2,0},
{"Vector3D_setX",_wrap_Vector3D_setX,0,0,2,0},
{"Vector3D_setY",_wrap_Vector3D_setY,0,0,2,0},
{"Vector3D_setZ",_wrap_Vector3D_setZ,0,0,2,0},
{"delete_Vector3D",_wrap_delete_Vector3D,0,0,2,0},
{"new_VoicForm",_wrap_new_VoicForm,0,0,2,0},
{"delete_VoicForm",_wrap_delete_VoicForm,0,0,2,0},
{"VoicForm_clear",_wrap_VoicForm_clear,0,0,2,0},
{"VoicForm_setFrequency",_wrap_VoicForm_setFrequency,0,0,2,0},
{"VoicForm_setPhoneme",_wrap_VoicForm_setPhoneme,0,0,2,0},
{"VoicForm_setVoiced",_wrap_VoicForm_setVoiced,0,0,2,0},
{"VoicForm_setUnVoiced",_wrap_VoicForm_setUnVoiced,0,0,2,0},
{"VoicForm_setFilterSweepRate",_wrap_VoicForm_setFilterSweepRate,0,0,2,0},
{"VoicForm_setPitchSweepRate",_wrap_VoicForm_setPitchSweepRate,0,0,2,0},
{"VoicForm_speak",_wrap_VoicForm_speak,0,0,2,0},
{"VoicForm_quiet",_wrap_VoicForm_quiet,0,0,2,0},
{"VoicForm_noteOn",_wrap_VoicForm_noteOn,0,0,2,0},
{"VoicForm_noteOff",_wrap_VoicForm_noteOff,0,0,2,0},
{"VoicForm_controlChange",_wrap_VoicForm_controlChange,0,0,2,0},
{"VoicForm_tick",_wrap_VoicForm_tick,0,0,2,0},
{"new_Voicer",_wrap_new_Voicer,0,0,2,0},
{"Voicer_addInstrument",_wrap_Voicer_addInstrument,0,0,2,0},
{"Voicer_removeInstrument",_wrap_Voicer_removeInstrument,0,0,2,0},
{"Voicer_noteOn",_wrap_Voicer_noteOn,0,0,2,0},
{"Voicer_noteOff",_wrap_Voicer_noteOff,0,0,2,0},
{"Voicer_setFrequency",_wrap_Voicer_setFrequency,0,0,2,0},
{"Voicer_pitchBend",_wrap_Voicer_pitchBend,0,0,2,0},
{"Voicer_controlChange",_wrap_Voicer_controlChange,0,0,2,0},
{"Voicer_silence",_wrap_Voicer_silence,0,0,2,0},
{"Voicer_channelsOut",_wrap_Voicer_channelsOut,0,0,2,0},
{"Voicer_lastFrame",_wrap_Voicer_lastFrame,0,0,2,0},
{"Voicer_lastOut",_wrap_Voicer_lastOut,0,0,2,0},
{"Voicer_tick",_wrap_Voicer_tick,0,0,2,0},
{"delete_Voicer",_wrap_delete_Voicer,0,0,2,0},
{"new_Whistle",_wrap_new_Whistle,0,0,2,0},
{"delete_Whistle",_wrap_delete_Whistle,0,0,2,0},
{"Whistle_clear",_wrap_Whistle_clear,0,0,2,0},
{"Whistle_setFrequency",_wrap_Whistle_setFrequency,0,0,2,0},
{"Whistle_startBlowing",_wrap_Whistle_startBlowing,0,0,2,0},
{"Whistle_stopBlowing",_wrap_Whistle_stopBlowing,0,0,2,0},
{"Whistle_noteOn",_wrap_Whistle_noteOn,0,0,2,0},
{"Whistle_noteOff",_wrap_Whistle_noteOff,0,0,2,0},
{"Whistle_controlChange",_wrap_Whistle_controlChange,0,0,2,0},
{"Whistle_tick",_wrap_Whistle_tick,0,0,2,0},
{"new_Wurley",_wrap_new_Wurley,0,0,2,0},
{"delete_Wurley",_wrap_delete_Wurley,0,0,2,0},
{"Wurley_setFrequency",_wrap_Wurley_setFrequency,0,0,2,0},
{"Wurley_noteOn",_wrap_Wurley_noteOn,0,0,2,0},
{"Wurley_tick",_wrap_Wurley_tick,0,0,2,0},
{"delete_Socket",_wrap_delete_Socket,0,0,2,0},
{"Socket_close",_wrap_Socket_close,0,0,2,0},
{"Socket_id",_wrap_Socket_id,0,0,2,0},
{"Socket_port",_wrap_Socket_port,0,0,2,0},
{"Socket_isValid",_wrap_Socket_isValid,0,0,2,0},
{"Socket_setBlocking",_wrap_Socket_setBlocking,0,0,2,0},
{"Socket_writeBuffer",_wrap_Socket_writeBuffer,0,0,2,0},
{"Socket_readBuffer",_wrap_Socket_readBuffer,0,0,2,0},
{"new_TcpClient",_wrap_new_TcpClient,0,0,2,0},
{"delete_TcpClient",_wrap_delete_TcpClient,0,0,2,0},
{"TcpClient_connect",_wrap_TcpClient_connect,0,0,2,0},
{"TcpClient_writeBuffer",_wrap_TcpClient_writeBuffer,0,0,2,0},
{"TcpClient_readBuffer",_wrap_TcpClient_readBuffer,0,0,2,0},
{"new_TcpServer",_wrap_new_TcpServer,0,0,2,0},
{"delete_TcpServer",_wrap_delete_TcpServer,0,0,2,0},
{"TcpServer_accept",_wrap_TcpServer_accept,0,0,2,0},
{"TcpServer_writeBuffer",_wrap_TcpServer_writeBuffer,0,0,2,0},
{"TcpServer_readBuffer",_wrap_TcpServer_readBuffer,0,0,2,0},
{"new_UdpSocket",_wrap_new_UdpSocket,0,0,2,0},
{"delete_UdpSocket",_wrap_delete_UdpSocket,0,0,2,0},
{"UdpSocket_setDestination",_wrap_UdpSocket_setDestination,0,0,2,0},
{"UdpSocket_writeBuffer",_wrap_UdpSocket_writeBuffer,0,0,2,0},
{"UdpSocket_readBuffer",_wrap_UdpSocket_readBuffer,0,0,2,0},
{"UdpSocket_writeBufferTo",_wrap_UdpSocket_writeBufferTo,0,0,2,0},
{"new_Mutex",_wrap_new_Mutex,0,0,2,0},
{"delete_Mutex",_wrap_delete_Mutex,0,0,2,0},
{"Mutex_lock",_wrap_Mutex_lock,0,0,2,0},
{"Mutex_unlock",_wrap_Mutex_unlock,0,0,2,0},
{"Mutex_wait",_wrap_Mutex_wait,0,0,2,0},
{"Mutex_signal",_wrap_Mutex_signal,0,0,2,0},
{"new_Thread",_wrap_new_Thread,0,0,2,0},
{"delete_Thread",_wrap_delete_Thread,0,0,2,0},
{"Thread_start",_wrap_Thread_start,0,0,2,0},
{"Thread_cancel",_wrap_Thread_cancel,0,0,2,0},
{"Thread_wait",_wrap_Thread_wait,0,0,2,0},
{"Thread_testCancel",_wrap_Thread_testCancel,0,0,2,0},
{"new_InetWvIn",_wrap_new_InetWvIn,0,0,2,0},
{"delete_InetWvIn",_wrap_delete_InetWvIn,0,0,2,0},
{"InetWvIn_listen",_wrap_InetWvIn_listen,0,0,2,0},
{"InetWvIn_isConnected",_wrap_InetWvIn_isConnected,0,0,2,0},
{"InetWvIn_lastOut",_wrap_InetWvIn_lastOut,0,0,2,0},
{"InetWvIn_tick",_wrap_InetWvIn_tick,0,0,2,0},
{"InetWvIn_receive",_wrap_InetWvIn_receive,0,0,2,0},
{"new_InetWvOut",_wrap_new_InetWvOut,0,0,2,0},
{"delete_InetWvOut",_wrap_delete_InetWvOut,0,0,2,0},
{"InetWvOut_connect",_wrap_InetWvOut_connect,0,0,2,0},
{"InetWvOut_disconnect",_wrap_InetWvOut_disconnect,0,0,2,0},
{"InetWvOut_tick",_wrap_InetWvOut_tick,0,0,2,0},
{"new_RtWvIn",_wrap_new_RtWvIn,0,0,2,0},
{"delete_RtWvIn",_wrap_delete_RtWvIn,0,0,2,0},
{"RtWvIn_start",_wrap_RtWvIn_start,0,0,2,0},
{"RtWvIn_stop",_wrap_RtWvIn_stop,0,0,2,0},
{"RtWvIn_lastOut",_wrap_RtWvIn_lastOut,0,0,2,0},
{"RtWvIn_tick",_wrap_RtWvIn_tick,0,0,2,0},
{"RtWvIn_fillBuffer",_wrap_RtWvIn_fillBuffer,0,0,2,0},
{"new_RtWvOut",_wrap_new_RtWvOut,0,0,2,0},
{"delete_RtWvOut",_wrap_delete_RtWvOut,0,0,2,0},
{"RtWvOut_start",_wrap_RtWvOut_start,0,0,2,0},
{"RtWvOut_stop",_wrap_RtWvOut_stop,0,0,2,0},
{"RtWvOut_tick",_wrap_RtWvOut_tick,0,0,2,0},
{"RtWvOut_readBuffer",_wrap_RtWvOut_readBuffer,0,0,2,0},
{"delete_Sampler",_wrap_delete_Sampler,0,0,2,0},
{"Sampler_setFrequency",_wrap_Sampler_setFrequency,0,0,2,0},
{"Sampler_keyOn",_wrap_Sampler_keyOn,0,0,2,0},
{"Sampler_keyOff",_wrap_Sampler_keyOff,0,0,2,0},
{"Sampler_noteOff",_wrap_Sampler_noteOff,0,0,2,0},
{"Sampler_controlChange",_wrap_Sampler_controlChange,0,0,2,0},
{"Sampler_tick",_wrap_Sampler_tick,0,0,2,0},
{0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_stk__AsympTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::Asymp *) x));
}
static void *_p_stk__BlitSquareTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::BlitSquare *) x));
}
static void *_p_stk__NoiseTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::Noise *) x));
}
static void *_p_stk__BlitSawTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::BlitSaw *) x));
}
static void *_p_stk__ADSRTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::ADSR *) x));
}
static void *_p_stk__BlitTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::Blit *) x));
}
static void *_p_stk__EnvelopeTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::Envelope *) x));
}
static void *_p_stk__GranulateTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::Granulate *) x));
}
static void *_p_stk__SineWaveTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::SineWave *) x));
}
static void *_p_stk__ModulateTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::Modulate *) x));
}
static void *_p_stk__SingWaveTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::SingWave *) x));
}
static void *_p_stk__FileLoopTo_p_stk__FileWvIn(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::FileWvIn *)  ((stk::FileLoop *) x));
}
static void *_p_stk__GeneratorTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Generator *) x));
}
static void *_p_stk__DelayATo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::DelayA *) x));
}
static void *_p_stk__FluteTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Flute *) x));
}
static void *_p_stk__WhistleTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Whistle *) x));
}
static void *_p_stk__BandedWGTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::BandedWG *) x));
}
static void *_p_stk__BlitSawTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::BlitSaw *) x));
}
static void *_p_stk__SaxofonyTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Saxofony *) x));
}
static void *_p_stk__TapDelayTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::TapDelay *) x));
}
static void *_p_stk__MutexTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Mutex *) x));
}
static void *_p_stk__AsympTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::Asymp *) x));
}
static void *_p_stk__BlitTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::Blit *) x));
}
static void *_p_stk__IirTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::Iir *) x));
}
static void *_p_stk__TcpServerTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Socket *) ((stk::TcpServer *) x));
}
static void *_p_stk__DelayLTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::DelayL *) x));
}
static void *_p_stk__OnePoleTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::OnePole *) x));
}
static void *_p_stk__DelayTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::Delay *) x));
}
static void *_p_stk__ModalTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Modal *) x));
}
static void *_p_stk__FirTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::Fir *) x));
}
static void *_p_stk__BlowHoleTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::BlowHole *) x));
}
static void *_p_stk__SineWaveTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::SineWave *) x));
}
static void *_p_stk__SamplerTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Sampler *) x));
}
static void *_p_stk__RhodeyTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *)(stk::FM *) ((stk::Rhodey *) x));
}
static void *_p_stk__ModulateTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::Modulate *) x));
}
static void *_p_stk__SphereTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Sphere *) x));
}
static void *_p_stk__BeeThreeTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *)(stk::FM *) ((stk::BeeThree *) x));
}
static void *_p_stk__Mesh2DTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Mesh2D *) x));
}
static void *_p_stk__EchoTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Effect *) ((stk::Echo *) x));
}
static void *_p_stk__NoiseTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::Noise *) x));
}
static void *_p_stk__FileReadTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::FileRead *) x));
}
static void *_p_stk__MandolinTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Mandolin *) x));
}
static void *_p_stk__PhonemesTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Phonemes *) x));
}
static void *_p_stk__DrummerTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Drummer *) x));
}
static void *_p_stk__VoicFormTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::VoicForm *) x));
}
static void *_p_stk__MidiFileInTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::MidiFileIn *) x));
}
static void *_p_stk__ChorusTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Effect *) ((stk::Chorus *) x));
}
static void *_p_stk__SingWaveTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::SingWave *) x));
}
static void *_p_stk__Vector3DTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Vector3D *) x));
}
static void *_p_stk__FreeVerbTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Effect *) ((stk::FreeVerb *) x));
}
static void *_p_stk__ADSRTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::ADSR *) x));
}
static void *_p_stk__InstrmntTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Instrmnt *) x));
}
static void *_p_stk__FMVoicesTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *)(stk::FM *) ((stk::FMVoices *) x));
}
static void *_p_stk__TwoZeroTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::TwoZero *) x));
}
static void *_p_stk__FilterTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Filter *) x));
}
static void *_p_stk__SimpleTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Simple *) x));
}
static void *_p_stk__FileWriteTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::FileWrite *) x));
}
static void *_p_stk__PRCRevTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Effect *) ((stk::PRCRev *) x));
}
static void *_p_stk__PluckedTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Plucked *) x));
}
static void *_p_stk__EnvelopeTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::Envelope *) x));
}
static void *_p_stk__GuitarTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Guitar *) x));
}
static void *_p_stk__ReedTableTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Function *) ((stk::ReedTable *) x));
}
static void *_p_stk__TwangTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Twang *) x));
}
static void *_p_stk__PercFlutTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *)(stk::FM *) ((stk::PercFlut *) x));
}
static void *_p_stk__RecorderTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Recorder *) x));
}
static void *_p_stk__ModalBarTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *)(stk::Modal *) ((stk::ModalBar *) x));
}
static void *_p_stk__PoleZeroTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::PoleZero *) x));
}
static void *_p_stk__EffectTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Effect *) x));
}
static void *_p_stk__SitarTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Sitar *) x));
}
static void *_p_stk__GranulateTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::Granulate *) x));
}
static void *_p_stk__FunctionTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Function *) x));
}
static void *_p_stk__BowedTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Bowed *) x));
}
static void *_p_stk__BlitSquareTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::BlitSquare *) x));
}
static void *_p_stk__JCRevTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Effect *) ((stk::JCRev *) x));
}
static void *_p_stk__FMTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::FM *) x));
}
static void *_p_stk__TwoPoleTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::TwoPole *) x));
}
static void *_p_stk__PitShiftTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Effect *) ((stk::PitShift *) x));
}
static void *_p_stk__LentPitShiftTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Effect *) ((stk::LentPitShift *) x));
}
static void *_p_stk__BrassTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Brass *) x));
}
static void *_p_stk__ResonateTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Resonate *) x));
}
static void *_p_stk__BlowBotlTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::BlowBotl *) x));
}
static void *_p_stk__TcpClientTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Socket *) ((stk::TcpClient *) x));
}
static void *_p_stk__BowTableTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Function *) ((stk::BowTable *) x));
}
static void *_p_stk__VoicerTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Voicer *) x));
}
static void *_p_stk__StifKarpTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::StifKarp *) x));
}
static void *_p_stk__TubeBellTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *)(stk::FM *) ((stk::TubeBell *) x));
}
static void *_p_stk__ClarinetTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Clarinet *) x));
}
static void *_p_stk__NRevTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Effect *) ((stk::NRev *) x));
}
static void *_p_stk__JetTableTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Function *) ((stk::JetTable *) x));
}
static void *_p_stk__OneZeroTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::OneZero *) x));
}
static void *_p_stk__SocketTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Socket *) x));
}
static void *_p_stk__UdpSocketTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Socket *) ((stk::UdpSocket *) x));
}
static void *_p_stk__BiQuadTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::BiQuad *) x));
}
static void *_p_stk__MessagerTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Messager *) x));
}
static void *_p_stk__HevyMetlTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *)(stk::FM *) ((stk::HevyMetl *) x));
}
static void *_p_stk__ThreadTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Thread *) x));
}
static void *_p_stk__CubicTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Function *) ((stk::Cubic *) x));
}
static void *_p_stk__FormSwepTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::FormSwep *) x));
}
static void *_p_stk__ShakersTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Shakers *) x));
}
static void *_p_stk__WurleyTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *)(stk::FM *) ((stk::Wurley *) x));
}
static void *_p_stk__ModalBarTo_p_stk__Modal(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Modal *)  ((stk::ModalBar *) x));
}
static void *_p_stk__BlowHoleTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::BlowHole *) x));
}
static void *_p_stk__ShakersTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Shakers *) x));
}
static void *_p_stk__Mesh2DTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Mesh2D *) x));
}
static void *_p_stk__MandolinTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Mandolin *) x));
}
static void *_p_stk__ResonateTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Resonate *) x));
}
static void *_p_stk__SitarTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Sitar *) x));
}
static void *_p_stk__DrummerTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Drummer *) x));
}
static void *_p_stk__WhistleTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Whistle *) x));
}
static void *_p_stk__SamplerTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Sampler *) x));
}
static void *_p_stk__BlowBotlTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::BlowBotl *) x));
}
static void *_p_stk__BrassTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Brass *) x));
}
static void *_p_stk__SimpleTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Simple *) x));
}
static void *_p_stk__VoicFormTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::VoicForm *) x));
}
static void *_p_stk__ModalTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Modal *) x));
}
static void *_p_stk__RecorderTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Recorder *) x));
}
static void *_p_stk__RhodeyTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *) (stk::FM *) ((stk::Rhodey *) x));
}
static void *_p_stk__StifKarpTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::StifKarp *) x));
}
static void *_p_stk__FMVoicesTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *) (stk::FM *) ((stk::FMVoices *) x));
}
static void *_p_stk__ClarinetTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Clarinet *) x));
}
static void *_p_stk__BeeThreeTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *) (stk::FM *) ((stk::BeeThree *) x));
}
static void *_p_stk__SaxofonyTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Saxofony *) x));
}
static void *_p_stk__TubeBellTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *) (stk::FM *) ((stk::TubeBell *) x));
}
static void *_p_stk__FMTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::FM *) x));
}
static void *_p_stk__FluteTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Flute *) x));
}
static void *_p_stk__BowedTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Bowed *) x));
}
static void *_p_stk__HevyMetlTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *) (stk::FM *) ((stk::HevyMetl *) x));
}
static void *_p_stk__BandedWGTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::BandedWG *) x));
}
static void *_p_stk__ModalBarTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *) (stk::Modal *) ((stk::ModalBar *) x));
}
static void *_p_stk__PercFlutTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *) (stk::FM *) ((stk::PercFlut *) x));
}
static void *_p_stk__WurleyTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *) (stk::FM *) ((stk::Wurley *) x));
}
static void *_p_stk__PluckedTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Plucked *) x));
}
static void *_p_stk__DelayLTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::DelayL *) x));
}
static void *_p_stk__FirTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::Fir *) x));
}
static void *_p_stk__FormSwepTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::FormSwep *) x));
}
static void *_p_stk__OnePoleTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::OnePole *) x));
}
static void *_p_stk__BiQuadTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::BiQuad *) x));
}
static void *_p_stk__DelayTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::Delay *) x));
}
static void *_p_stk__DelayATo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::DelayA *) x));
}
static void *_p_stk__OneZeroTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::OneZero *) x));
}
static void *_p_stk__TapDelayTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::TapDelay *) x));
}
static void *_p_stk__TwoPoleTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::TwoPole *) x));
}
static void *_p_stk__IirTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::Iir *) x));
}
static void *_p_stk__PoleZeroTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::PoleZero *) x));
}
static void *_p_stk__TwoZeroTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::TwoZero *) x));
}
static void *_p_stk__ChorusTo_p_stk__Effect(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Effect *)  ((stk::Chorus *) x));
}
static void *_p_stk__EchoTo_p_stk__Effect(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Effect *)  ((stk::Echo *) x));
}
static void *_p_stk__PRCRevTo_p_stk__Effect(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Effect *)  ((stk::PRCRev *) x));
}
static void *_p_stk__JCRevTo_p_stk__Effect(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Effect *)  ((stk::JCRev *) x));
}
static void *_p_stk__FreeVerbTo_p_stk__Effect(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Effect *)  ((stk::FreeVerb *) x));
}
static void *_p_stk__NRevTo_p_stk__Effect(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Effect *)  ((stk::NRev *) x));
}
static void *_p_stk__LentPitShiftTo_p_stk__Effect(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Effect *)  ((stk::LentPitShift *) x));
}
static void *_p_stk__PitShiftTo_p_stk__Effect(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Effect *)  ((stk::PitShift *) x));
}
static void *_p_stk__ReedTableTo_p_stk__Function(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Function *)  ((stk::ReedTable *) x));
}
static void *_p_stk__BowTableTo_p_stk__Function(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Function *)  ((stk::BowTable *) x));
}
static void *_p_stk__CubicTo_p_stk__Function(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Function *)  ((stk::Cubic *) x));
}
static void *_p_stk__JetTableTo_p_stk__Function(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Function *)  ((stk::JetTable *) x));
}
static void *_p_stk__BeeThreeTo_p_stk__FM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::FM *)  ((stk::BeeThree *) x));
}
static void *_p_stk__HevyMetlTo_p_stk__FM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::FM *)  ((stk::HevyMetl *) x));
}
static void *_p_stk__PercFlutTo_p_stk__FM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::FM *)  ((stk::PercFlut *) x));
}
static void *_p_stk__RhodeyTo_p_stk__FM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::FM *)  ((stk::Rhodey *) x));
}
static void *_p_stk__FMVoicesTo_p_stk__FM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::FM *)  ((stk::FMVoices *) x));
}
static void *_p_stk__WurleyTo_p_stk__FM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::FM *)  ((stk::Wurley *) x));
}
static void *_p_stk__TubeBellTo_p_stk__FM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::FM *)  ((stk::TubeBell *) x));
}
static void *_p_stk__TcpServerTo_p_stk__Socket(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Socket *)  ((stk::TcpServer *) x));
}
static void *_p_stk__TcpClientTo_p_stk__Socket(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Socket *)  ((stk::TcpClient *) x));
}
static void *_p_stk__UdpSocketTo_p_stk__Socket(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Socket *)  ((stk::UdpSocket *) x));
}
static swig_type_info _swigt__p_FILE_TYPE = {"_p_FILE_TYPE", "FILE_TYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Skini__Message = {"_p_Skini__Message", "Skini::Message *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_THREAD_FUNCTION = {"_p_THREAD_FUNCTION", "THREAD_FUNCTION *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vector3D = {"_p_Vector3D", "Vector3D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "stk::FLOAT64 *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|stk::FLOAT32 *|stk::StkFloat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "stk::SINT32 *|intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|stk::SINT16 *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t = {"_p_std__vectorT_float_std__allocatorT_float_t_t", "std::vector< float,std::allocator< float > > *|std::vector< stk::StkFloat,std::allocator< stk::StkFloat > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t = {"_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t", "std::vector< unsigned char,std::allocator< unsigned char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t = {"_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t", "std::vector< unsigned long,std::allocator< unsigned long > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stk__ADSR = {"_p_stk__ADSR", "stk::ADSR *", 0, 0, (void*)&_wrap_class_ADSR, 0};
static swig_type_info _swigt__p_stk__Asymp = {"_p_stk__Asymp", "stk::Asymp *", 0, 0, (void*)&_wrap_class_Asymp, 0};
static swig_type_info _swigt__p_stk__BandedWG = {"_p_stk__BandedWG", "stk::BandedWG *", 0, 0, (void*)&_wrap_class_BandedWG, 0};
static swig_type_info _swigt__p_stk__BeeThree = {"_p_stk__BeeThree", "stk::BeeThree *", 0, 0, (void*)&_wrap_class_BeeThree, 0};
static swig_type_info _swigt__p_stk__BiQuad = {"_p_stk__BiQuad", "stk::BiQuad *", 0, 0, (void*)&_wrap_class_BiQuad, 0};
static swig_type_info _swigt__p_stk__Blit = {"_p_stk__Blit", "stk::Blit *", 0, 0, (void*)&_wrap_class_Blit, 0};
static swig_type_info _swigt__p_stk__BlitSaw = {"_p_stk__BlitSaw", "stk::BlitSaw *", 0, 0, (void*)&_wrap_class_BlitSaw, 0};
static swig_type_info _swigt__p_stk__BlitSquare = {"_p_stk__BlitSquare", "stk::BlitSquare *", 0, 0, (void*)&_wrap_class_BlitSquare, 0};
static swig_type_info _swigt__p_stk__BlowBotl = {"_p_stk__BlowBotl", "stk::BlowBotl *", 0, 0, (void*)&_wrap_class_BlowBotl, 0};
static swig_type_info _swigt__p_stk__BlowHole = {"_p_stk__BlowHole", "stk::BlowHole *", 0, 0, (void*)&_wrap_class_BlowHole, 0};
static swig_type_info _swigt__p_stk__BowTable = {"_p_stk__BowTable", "stk::BowTable *", 0, 0, (void*)&_wrap_class_BowTable, 0};
static swig_type_info _swigt__p_stk__Bowed = {"_p_stk__Bowed", "stk::Bowed *", 0, 0, (void*)&_wrap_class_Bowed, 0};
static swig_type_info _swigt__p_stk__Brass = {"_p_stk__Brass", "stk::Brass *", 0, 0, (void*)&_wrap_class_Brass, 0};
static swig_type_info _swigt__p_stk__Chorus = {"_p_stk__Chorus", "stk::Chorus *", 0, 0, (void*)&_wrap_class_Chorus, 0};
static swig_type_info _swigt__p_stk__Clarinet = {"_p_stk__Clarinet", "stk::Clarinet *", 0, 0, (void*)&_wrap_class_Clarinet, 0};
static swig_type_info _swigt__p_stk__Cubic = {"_p_stk__Cubic", "stk::Cubic *", 0, 0, (void*)&_wrap_class_Cubic, 0};
static swig_type_info _swigt__p_stk__Delay = {"_p_stk__Delay", "stk::Delay *", 0, 0, (void*)&_wrap_class_Delay, 0};
static swig_type_info _swigt__p_stk__DelayA = {"_p_stk__DelayA", "stk::DelayA *", 0, 0, (void*)&_wrap_class_DelayA, 0};
static swig_type_info _swigt__p_stk__DelayL = {"_p_stk__DelayL", "stk::DelayL *", 0, 0, (void*)&_wrap_class_DelayL, 0};
static swig_type_info _swigt__p_stk__Drummer = {"_p_stk__Drummer", "stk::Drummer *", 0, 0, (void*)&_wrap_class_Drummer, 0};
static swig_type_info _swigt__p_stk__Echo = {"_p_stk__Echo", "stk::Echo *", 0, 0, (void*)&_wrap_class_Echo, 0};
static swig_type_info _swigt__p_stk__Effect = {"_p_stk__Effect", "stk::Effect *", 0, 0, (void*)&_wrap_class_Effect, 0};
static swig_type_info _swigt__p_stk__Envelope = {"_p_stk__Envelope", "stk::Envelope *", 0, 0, (void*)&_wrap_class_Envelope, 0};
static swig_type_info _swigt__p_stk__FM = {"_p_stk__FM", "stk::FM *", 0, 0, (void*)&_wrap_class_FM, 0};
static swig_type_info _swigt__p_stk__FMVoices = {"_p_stk__FMVoices", "stk::FMVoices *", 0, 0, (void*)&_wrap_class_FMVoices, 0};
static swig_type_info _swigt__p_stk__FileLoop = {"_p_stk__FileLoop", "stk::FileLoop *", 0, 0, (void*)&_wrap_class_FileLoop, 0};
static swig_type_info _swigt__p_stk__FileRead = {"_p_stk__FileRead", "stk::FileRead *", 0, 0, (void*)&_wrap_class_FileRead, 0};
static swig_type_info _swigt__p_stk__FileWrite = {"_p_stk__FileWrite", "stk::FileWrite *", 0, 0, (void*)&_wrap_class_FileWrite, 0};
static swig_type_info _swigt__p_stk__FileWvIn = {"_p_stk__FileWvIn", "stk::FileWvIn *", 0, 0, (void*)&_wrap_class_FileWvIn, 0};
static swig_type_info _swigt__p_stk__FileWvOut = {"_p_stk__FileWvOut", "stk::FileWvOut *", 0, 0, (void*)&_wrap_class_FileWvOut, 0};
static swig_type_info _swigt__p_stk__Filter = {"_p_stk__Filter", "stk::Filter *", 0, 0, (void*)&_wrap_class_Filter, 0};
static swig_type_info _swigt__p_stk__Fir = {"_p_stk__Fir", "stk::Fir *", 0, 0, (void*)&_wrap_class_Fir, 0};
static swig_type_info _swigt__p_stk__Flute = {"_p_stk__Flute", "stk::Flute *", 0, 0, (void*)&_wrap_class_Flute, 0};
static swig_type_info _swigt__p_stk__FormSwep = {"_p_stk__FormSwep", "stk::FormSwep *", 0, 0, (void*)&_wrap_class_FormSwep, 0};
static swig_type_info _swigt__p_stk__FreeVerb = {"_p_stk__FreeVerb", "stk::FreeVerb *", 0, 0, (void*)&_wrap_class_FreeVerb, 0};
static swig_type_info _swigt__p_stk__Function = {"_p_stk__Function", "stk::Function *", 0, 0, (void*)&_wrap_class_Function, 0};
static swig_type_info _swigt__p_stk__Generator = {"_p_stk__Generator", "stk::Generator *", 0, 0, (void*)&_wrap_class_Generator, 0};
static swig_type_info _swigt__p_stk__Granulate = {"_p_stk__Granulate", "stk::Granulate *", 0, 0, (void*)&_wrap_class_Granulate, 0};
static swig_type_info _swigt__p_stk__Guitar = {"_p_stk__Guitar", "stk::Guitar *", 0, 0, (void*)&_wrap_class_Guitar, 0};
static swig_type_info _swigt__p_stk__HevyMetl = {"_p_stk__HevyMetl", "stk::HevyMetl *", 0, 0, (void*)&_wrap_class_HevyMetl, 0};
static swig_type_info _swigt__p_stk__Iir = {"_p_stk__Iir", "stk::Iir *", 0, 0, (void*)&_wrap_class_Iir, 0};
static swig_type_info _swigt__p_stk__InetWvIn = {"_p_stk__InetWvIn", "stk::InetWvIn *", 0, 0, (void*)&_wrap_class_InetWvIn, 0};
static swig_type_info _swigt__p_stk__InetWvOut = {"_p_stk__InetWvOut", "stk::InetWvOut *", 0, 0, (void*)&_wrap_class_InetWvOut, 0};
static swig_type_info _swigt__p_stk__Instrmnt = {"_p_stk__Instrmnt", "stk::Instrmnt *", 0, 0, (void*)&_wrap_class_Instrmnt, 0};
static swig_type_info _swigt__p_stk__JCRev = {"_p_stk__JCRev", "stk::JCRev *", 0, 0, (void*)&_wrap_class_JCRev, 0};
static swig_type_info _swigt__p_stk__JetTable = {"_p_stk__JetTable", "stk::JetTable *", 0, 0, (void*)&_wrap_class_JetTable, 0};
static swig_type_info _swigt__p_stk__LentPitShift = {"_p_stk__LentPitShift", "stk::LentPitShift *", 0, 0, (void*)&_wrap_class_LentPitShift, 0};
static swig_type_info _swigt__p_stk__Mandolin = {"_p_stk__Mandolin", "stk::Mandolin *", 0, 0, (void*)&_wrap_class_Mandolin, 0};
static swig_type_info _swigt__p_stk__Mesh2D = {"_p_stk__Mesh2D", "stk::Mesh2D *", 0, 0, (void*)&_wrap_class_Mesh2D, 0};
static swig_type_info _swigt__p_stk__Messager = {"_p_stk__Messager", "stk::Messager *", 0, 0, (void*)&_wrap_class_Messager, 0};
static swig_type_info _swigt__p_stk__MidiFileIn = {"_p_stk__MidiFileIn", "stk::MidiFileIn *", 0, 0, (void*)&_wrap_class_MidiFileIn, 0};
static swig_type_info _swigt__p_stk__Modal = {"_p_stk__Modal", "stk::Modal *", 0, 0, (void*)&_wrap_class_Modal, 0};
static swig_type_info _swigt__p_stk__ModalBar = {"_p_stk__ModalBar", "stk::ModalBar *", 0, 0, (void*)&_wrap_class_ModalBar, 0};
static swig_type_info _swigt__p_stk__Modulate = {"_p_stk__Modulate", "stk::Modulate *", 0, 0, (void*)&_wrap_class_Modulate, 0};
static swig_type_info _swigt__p_stk__Moog = {"_p_stk__Moog", "stk::Moog *", 0, 0, (void*)&_wrap_class_Moog, 0};
static swig_type_info _swigt__p_stk__Mutex = {"_p_stk__Mutex", "stk::Mutex *", 0, 0, (void*)&_wrap_class_Mutex, 0};
static swig_type_info _swigt__p_stk__NRev = {"_p_stk__NRev", "stk::NRev *", 0, 0, (void*)&_wrap_class_NRev, 0};
static swig_type_info _swigt__p_stk__Noise = {"_p_stk__Noise", "stk::Noise *", 0, 0, (void*)&_wrap_class_Noise, 0};
static swig_type_info _swigt__p_stk__OnePole = {"_p_stk__OnePole", "stk::OnePole *", 0, 0, (void*)&_wrap_class_OnePole, 0};
static swig_type_info _swigt__p_stk__OneZero = {"_p_stk__OneZero", "stk::OneZero *", 0, 0, (void*)&_wrap_class_OneZero, 0};
static swig_type_info _swigt__p_stk__PRCRev = {"_p_stk__PRCRev", "stk::PRCRev *", 0, 0, (void*)&_wrap_class_PRCRev, 0};
static swig_type_info _swigt__p_stk__PercFlut = {"_p_stk__PercFlut", "stk::PercFlut *", 0, 0, (void*)&_wrap_class_PercFlut, 0};
static swig_type_info _swigt__p_stk__Phonemes = {"_p_stk__Phonemes", "stk::Phonemes *", 0, 0, (void*)&_wrap_class_Phonemes, 0};
static swig_type_info _swigt__p_stk__PitShift = {"_p_stk__PitShift", "stk::PitShift *", 0, 0, (void*)&_wrap_class_PitShift, 0};
static swig_type_info _swigt__p_stk__Plucked = {"_p_stk__Plucked", "stk::Plucked *", 0, 0, (void*)&_wrap_class_Plucked, 0};
static swig_type_info _swigt__p_stk__PoleZero = {"_p_stk__PoleZero", "stk::PoleZero *", 0, 0, (void*)&_wrap_class_PoleZero, 0};
static swig_type_info _swigt__p_stk__Recorder = {"_p_stk__Recorder", "stk::Recorder *", 0, 0, (void*)&_wrap_class_Recorder, 0};
static swig_type_info _swigt__p_stk__ReedTable = {"_p_stk__ReedTable", "stk::ReedTable *", 0, 0, (void*)&_wrap_class_ReedTable, 0};
static swig_type_info _swigt__p_stk__Resonate = {"_p_stk__Resonate", "stk::Resonate *", 0, 0, (void*)&_wrap_class_Resonate, 0};
static swig_type_info _swigt__p_stk__Rhodey = {"_p_stk__Rhodey", "stk::Rhodey *", 0, 0, (void*)&_wrap_class_Rhodey, 0};
static swig_type_info _swigt__p_stk__RtWvIn = {"_p_stk__RtWvIn", "stk::RtWvIn *", 0, 0, (void*)&_wrap_class_RtWvIn, 0};
static swig_type_info _swigt__p_stk__RtWvOut = {"_p_stk__RtWvOut", "stk::RtWvOut *", 0, 0, (void*)&_wrap_class_RtWvOut, 0};
static swig_type_info _swigt__p_stk__Sampler = {"_p_stk__Sampler", "stk::Sampler *", 0, 0, (void*)&_wrap_class_Sampler, 0};
static swig_type_info _swigt__p_stk__Saxofony = {"_p_stk__Saxofony", "stk::Saxofony *", 0, 0, (void*)&_wrap_class_Saxofony, 0};
static swig_type_info _swigt__p_stk__Shakers = {"_p_stk__Shakers", "stk::Shakers *", 0, 0, (void*)&_wrap_class_Shakers, 0};
static swig_type_info _swigt__p_stk__Simple = {"_p_stk__Simple", "stk::Simple *", 0, 0, (void*)&_wrap_class_Simple, 0};
static swig_type_info _swigt__p_stk__SineWave = {"_p_stk__SineWave", "stk::SineWave *", 0, 0, (void*)&_wrap_class_SineWave, 0};
static swig_type_info _swigt__p_stk__SingWave = {"_p_stk__SingWave", "stk::SingWave *", 0, 0, (void*)&_wrap_class_SingWave, 0};
static swig_type_info _swigt__p_stk__Sitar = {"_p_stk__Sitar", "stk::Sitar *", 0, 0, (void*)&_wrap_class_Sitar, 0};
static swig_type_info _swigt__p_stk__Socket = {"_p_stk__Socket", "stk::Socket *", 0, 0, (void*)&_wrap_class_Socket, 0};
static swig_type_info _swigt__p_stk__Sphere = {"_p_stk__Sphere", "stk::Sphere *", 0, 0, (void*)&_wrap_class_Sphere, 0};
static swig_type_info _swigt__p_stk__StifKarp = {"_p_stk__StifKarp", "stk::StifKarp *", 0, 0, (void*)&_wrap_class_StifKarp, 0};
static swig_type_info _swigt__p_stk__Stk = {"_p_stk__Stk", "stk::Stk *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stk__StkError = {"_p_stk__StkError", "stk::StkError *", 0, 0, (void*)&_wrap_class_StkError, 0};
static swig_type_info _swigt__p_stk__StkFrames = {"_p_stk__StkFrames", "stk::StkFrames *", 0, 0, (void*)&_wrap_class_StkFrames, 0};
static swig_type_info _swigt__p_stk__TapDelay = {"_p_stk__TapDelay", "stk::TapDelay *", 0, 0, (void*)&_wrap_class_TapDelay, 0};
static swig_type_info _swigt__p_stk__TcpClient = {"_p_stk__TcpClient", "stk::TcpClient *", 0, 0, (void*)&_wrap_class_TcpClient, 0};
static swig_type_info _swigt__p_stk__TcpServer = {"_p_stk__TcpServer", "stk::TcpServer *", 0, 0, (void*)&_wrap_class_TcpServer, 0};
static swig_type_info _swigt__p_stk__Thread = {"_p_stk__Thread", "stk::Thread *", 0, 0, (void*)&_wrap_class_Thread, 0};
static swig_type_info _swigt__p_stk__TubeBell = {"_p_stk__TubeBell", "stk::TubeBell *", 0, 0, (void*)&_wrap_class_TubeBell, 0};
static swig_type_info _swigt__p_stk__Twang = {"_p_stk__Twang", "stk::Twang *", 0, 0, (void*)&_wrap_class_Twang, 0};
static swig_type_info _swigt__p_stk__TwoPole = {"_p_stk__TwoPole", "stk::TwoPole *", 0, 0, (void*)&_wrap_class_TwoPole, 0};
static swig_type_info _swigt__p_stk__TwoZero = {"_p_stk__TwoZero", "stk::TwoZero *", 0, 0, (void*)&_wrap_class_TwoZero, 0};
static swig_type_info _swigt__p_stk__UdpSocket = {"_p_stk__UdpSocket", "stk::UdpSocket *", 0, 0, (void*)&_wrap_class_UdpSocket, 0};
static swig_type_info _swigt__p_stk__Vector3D = {"_p_stk__Vector3D", "stk::Vector3D *", 0, 0, (void*)&_wrap_class_Vector3D, 0};
static swig_type_info _swigt__p_stk__VoicForm = {"_p_stk__VoicForm", "stk::VoicForm *", 0, 0, (void*)&_wrap_class_VoicForm, 0};
static swig_type_info _swigt__p_stk__Voicer = {"_p_stk__Voicer", "stk::Voicer *", 0, 0, (void*)&_wrap_class_Voicer, 0};
static swig_type_info _swigt__p_stk__Whistle = {"_p_stk__Whistle", "stk::Whistle *", 0, 0, (void*)&_wrap_class_Whistle, 0};
static swig_type_info _swigt__p_stk__Wurley = {"_p_stk__Wurley", "stk::Wurley *", 0, 0, (void*)&_wrap_class_Wurley, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "stk::UINT32 *|uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *|stk::UINT16 *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FILE_TYPE,
  &_swigt__p_Skini__Message,
  &_swigt__p_THREAD_FUNCTION,
  &_swigt__p_Vector3D,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_p_char,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t,
  &_swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,
  &_swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,
  &_swigt__p_stk__ADSR,
  &_swigt__p_stk__Asymp,
  &_swigt__p_stk__BandedWG,
  &_swigt__p_stk__BeeThree,
  &_swigt__p_stk__BiQuad,
  &_swigt__p_stk__Blit,
  &_swigt__p_stk__BlitSaw,
  &_swigt__p_stk__BlitSquare,
  &_swigt__p_stk__BlowBotl,
  &_swigt__p_stk__BlowHole,
  &_swigt__p_stk__BowTable,
  &_swigt__p_stk__Bowed,
  &_swigt__p_stk__Brass,
  &_swigt__p_stk__Chorus,
  &_swigt__p_stk__Clarinet,
  &_swigt__p_stk__Cubic,
  &_swigt__p_stk__Delay,
  &_swigt__p_stk__DelayA,
  &_swigt__p_stk__DelayL,
  &_swigt__p_stk__Drummer,
  &_swigt__p_stk__Echo,
  &_swigt__p_stk__Effect,
  &_swigt__p_stk__Envelope,
  &_swigt__p_stk__FM,
  &_swigt__p_stk__FMVoices,
  &_swigt__p_stk__FileLoop,
  &_swigt__p_stk__FileRead,
  &_swigt__p_stk__FileWrite,
  &_swigt__p_stk__FileWvIn,
  &_swigt__p_stk__FileWvOut,
  &_swigt__p_stk__Filter,
  &_swigt__p_stk__Fir,
  &_swigt__p_stk__Flute,
  &_swigt__p_stk__FormSwep,
  &_swigt__p_stk__FreeVerb,
  &_swigt__p_stk__Function,
  &_swigt__p_stk__Generator,
  &_swigt__p_stk__Granulate,
  &_swigt__p_stk__Guitar,
  &_swigt__p_stk__HevyMetl,
  &_swigt__p_stk__Iir,
  &_swigt__p_stk__InetWvIn,
  &_swigt__p_stk__InetWvOut,
  &_swigt__p_stk__Instrmnt,
  &_swigt__p_stk__JCRev,
  &_swigt__p_stk__JetTable,
  &_swigt__p_stk__LentPitShift,
  &_swigt__p_stk__Mandolin,
  &_swigt__p_stk__Mesh2D,
  &_swigt__p_stk__Messager,
  &_swigt__p_stk__MidiFileIn,
  &_swigt__p_stk__Modal,
  &_swigt__p_stk__ModalBar,
  &_swigt__p_stk__Modulate,
  &_swigt__p_stk__Moog,
  &_swigt__p_stk__Mutex,
  &_swigt__p_stk__NRev,
  &_swigt__p_stk__Noise,
  &_swigt__p_stk__OnePole,
  &_swigt__p_stk__OneZero,
  &_swigt__p_stk__PRCRev,
  &_swigt__p_stk__PercFlut,
  &_swigt__p_stk__Phonemes,
  &_swigt__p_stk__PitShift,
  &_swigt__p_stk__Plucked,
  &_swigt__p_stk__PoleZero,
  &_swigt__p_stk__Recorder,
  &_swigt__p_stk__ReedTable,
  &_swigt__p_stk__Resonate,
  &_swigt__p_stk__Rhodey,
  &_swigt__p_stk__RtWvIn,
  &_swigt__p_stk__RtWvOut,
  &_swigt__p_stk__Sampler,
  &_swigt__p_stk__Saxofony,
  &_swigt__p_stk__Shakers,
  &_swigt__p_stk__Simple,
  &_swigt__p_stk__SineWave,
  &_swigt__p_stk__SingWave,
  &_swigt__p_stk__Sitar,
  &_swigt__p_stk__Socket,
  &_swigt__p_stk__Sphere,
  &_swigt__p_stk__StifKarp,
  &_swigt__p_stk__Stk,
  &_swigt__p_stk__StkError,
  &_swigt__p_stk__StkFrames,
  &_swigt__p_stk__TapDelay,
  &_swigt__p_stk__TcpClient,
  &_swigt__p_stk__TcpServer,
  &_swigt__p_stk__Thread,
  &_swigt__p_stk__TubeBell,
  &_swigt__p_stk__Twang,
  &_swigt__p_stk__TwoPole,
  &_swigt__p_stk__TwoZero,
  &_swigt__p_stk__UdpSocket,
  &_swigt__p_stk__Vector3D,
  &_swigt__p_stk__VoicForm,
  &_swigt__p_stk__Voicer,
  &_swigt__p_stk__Whistle,
  &_swigt__p_stk__Wurley,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_FILE_TYPE[] = {  {&_swigt__p_FILE_TYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Skini__Message[] = {  {&_swigt__p_Skini__Message, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_THREAD_FUNCTION[] = {  {&_swigt__p_THREAD_FUNCTION, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vector3D[] = {  {&_swigt__p_Vector3D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__ADSR[] = {  {&_swigt__p_stk__ADSR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Asymp[] = {  {&_swigt__p_stk__Asymp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__BandedWG[] = {  {&_swigt__p_stk__BandedWG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__BeeThree[] = {  {&_swigt__p_stk__BeeThree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__BiQuad[] = {  {&_swigt__p_stk__BiQuad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Blit[] = {  {&_swigt__p_stk__Blit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__BlitSaw[] = {  {&_swigt__p_stk__BlitSaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__BlitSquare[] = {  {&_swigt__p_stk__BlitSquare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__BlowBotl[] = {  {&_swigt__p_stk__BlowBotl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__BlowHole[] = {  {&_swigt__p_stk__BlowHole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__BowTable[] = {  {&_swigt__p_stk__BowTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Bowed[] = {  {&_swigt__p_stk__Bowed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Brass[] = {  {&_swigt__p_stk__Brass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Chorus[] = {  {&_swigt__p_stk__Chorus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Clarinet[] = {  {&_swigt__p_stk__Clarinet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Cubic[] = {  {&_swigt__p_stk__Cubic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Delay[] = {  {&_swigt__p_stk__Delay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__DelayA[] = {  {&_swigt__p_stk__DelayA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__DelayL[] = {  {&_swigt__p_stk__DelayL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Drummer[] = {  {&_swigt__p_stk__Drummer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Echo[] = {  {&_swigt__p_stk__Echo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Effect[] = {  {&_swigt__p_stk__Chorus, _p_stk__ChorusTo_p_stk__Effect, 0, 0},  {&_swigt__p_stk__PRCRev, _p_stk__PRCRevTo_p_stk__Effect, 0, 0},  {&_swigt__p_stk__NRev, _p_stk__NRevTo_p_stk__Effect, 0, 0},  {&_swigt__p_stk__Effect, 0, 0, 0},  {&_swigt__p_stk__Echo, _p_stk__EchoTo_p_stk__Effect, 0, 0},  {&_swigt__p_stk__JCRev, _p_stk__JCRevTo_p_stk__Effect, 0, 0},  {&_swigt__p_stk__FreeVerb, _p_stk__FreeVerbTo_p_stk__Effect, 0, 0},  {&_swigt__p_stk__LentPitShift, _p_stk__LentPitShiftTo_p_stk__Effect, 0, 0},  {&_swigt__p_stk__PitShift, _p_stk__PitShiftTo_p_stk__Effect, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Envelope[] = {  {&_swigt__p_stk__Envelope, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FM[] = {  {&_swigt__p_stk__BeeThree, _p_stk__BeeThreeTo_p_stk__FM, 0, 0},  {&_swigt__p_stk__HevyMetl, _p_stk__HevyMetlTo_p_stk__FM, 0, 0},  {&_swigt__p_stk__PercFlut, _p_stk__PercFlutTo_p_stk__FM, 0, 0},  {&_swigt__p_stk__Rhodey, _p_stk__RhodeyTo_p_stk__FM, 0, 0},  {&_swigt__p_stk__FMVoices, _p_stk__FMVoicesTo_p_stk__FM, 0, 0},  {&_swigt__p_stk__FM, 0, 0, 0},  {&_swigt__p_stk__Wurley, _p_stk__WurleyTo_p_stk__FM, 0, 0},  {&_swigt__p_stk__TubeBell, _p_stk__TubeBellTo_p_stk__FM, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FMVoices[] = {  {&_swigt__p_stk__FMVoices, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FileLoop[] = {  {&_swigt__p_stk__FileLoop, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FileRead[] = {  {&_swigt__p_stk__FileRead, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FileWrite[] = {  {&_swigt__p_stk__FileWrite, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FileWvIn[] = {  {&_swigt__p_stk__FileLoop, _p_stk__FileLoopTo_p_stk__FileWvIn, 0, 0},  {&_swigt__p_stk__FileWvIn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FileWvOut[] = {  {&_swigt__p_stk__FileWvOut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Filter[] = {  {&_swigt__p_stk__PoleZero, _p_stk__PoleZeroTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__OneZero, _p_stk__OneZeroTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__Iir, _p_stk__IirTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__FormSwep, _p_stk__FormSwepTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__OnePole, _p_stk__OnePoleTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__TwoZero, _p_stk__TwoZeroTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__Delay, _p_stk__DelayTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__TapDelay, _p_stk__TapDelayTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__DelayL, _p_stk__DelayLTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__Fir, _p_stk__FirTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__Filter, 0, 0, 0},  {&_swigt__p_stk__TwoPole, _p_stk__TwoPoleTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__BiQuad, _p_stk__BiQuadTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__DelayA, _p_stk__DelayATo_p_stk__Filter, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Fir[] = {  {&_swigt__p_stk__Fir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Flute[] = {  {&_swigt__p_stk__Flute, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FormSwep[] = {  {&_swigt__p_stk__FormSwep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FreeVerb[] = {  {&_swigt__p_stk__FreeVerb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Function[] = {  {&_swigt__p_stk__ReedTable, _p_stk__ReedTableTo_p_stk__Function, 0, 0},  {&_swigt__p_stk__Function, 0, 0, 0},  {&_swigt__p_stk__BowTable, _p_stk__BowTableTo_p_stk__Function, 0, 0},  {&_swigt__p_stk__JetTable, _p_stk__JetTableTo_p_stk__Function, 0, 0},  {&_swigt__p_stk__Cubic, _p_stk__CubicTo_p_stk__Function, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Generator[] = {  {&_swigt__p_stk__BlitSquare, _p_stk__BlitSquareTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__Asymp, _p_stk__AsympTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__Noise, _p_stk__NoiseTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__BlitSaw, _p_stk__BlitSawTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__Generator, 0, 0, 0},  {&_swigt__p_stk__Envelope, _p_stk__EnvelopeTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__Granulate, _p_stk__GranulateTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__SineWave, _p_stk__SineWaveTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__ADSR, _p_stk__ADSRTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__Blit, _p_stk__BlitTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__Modulate, _p_stk__ModulateTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__SingWave, _p_stk__SingWaveTo_p_stk__Generator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Granulate[] = {  {&_swigt__p_stk__Granulate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Guitar[] = {  {&_swigt__p_stk__Guitar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__HevyMetl[] = {  {&_swigt__p_stk__HevyMetl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Iir[] = {  {&_swigt__p_stk__Iir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__InetWvIn[] = {  {&_swigt__p_stk__InetWvIn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__InetWvOut[] = {  {&_swigt__p_stk__InetWvOut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Instrmnt[] = {  {&_swigt__p_stk__FM, _p_stk__FMTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__BlowHole, _p_stk__BlowHoleTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Shakers, _p_stk__ShakersTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Instrmnt, 0, 0, 0},  {&_swigt__p_stk__Mandolin, _p_stk__MandolinTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Resonate, _p_stk__ResonateTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Simple, _p_stk__SimpleTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Drummer, _p_stk__DrummerTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Whistle, _p_stk__WhistleTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Sitar, _p_stk__SitarTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Sampler, _p_stk__SamplerTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Rhodey, _p_stk__RhodeyTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__BlowBotl, _p_stk__BlowBotlTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__VoicForm, _p_stk__VoicFormTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Brass, _p_stk__BrassTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Recorder, _p_stk__RecorderTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__StifKarp, _p_stk__StifKarpTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Wurley, _p_stk__WurleyTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__FMVoices, _p_stk__FMVoicesTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__BeeThree, _p_stk__BeeThreeTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Modal, _p_stk__ModalTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Clarinet, _p_stk__ClarinetTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Saxofony, _p_stk__SaxofonyTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__TubeBell, _p_stk__TubeBellTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__HevyMetl, _p_stk__HevyMetlTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__BandedWG, _p_stk__BandedWGTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__ModalBar, _p_stk__ModalBarTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Flute, _p_stk__FluteTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Bowed, _p_stk__BowedTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__PercFlut, _p_stk__PercFlutTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Mesh2D, _p_stk__Mesh2DTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Plucked, _p_stk__PluckedTo_p_stk__Instrmnt, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__JCRev[] = {  {&_swigt__p_stk__JCRev, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__JetTable[] = {  {&_swigt__p_stk__JetTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__LentPitShift[] = {  {&_swigt__p_stk__LentPitShift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Mandolin[] = {  {&_swigt__p_stk__Mandolin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Mesh2D[] = {  {&_swigt__p_stk__Mesh2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Messager[] = {  {&_swigt__p_stk__Messager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__MidiFileIn[] = {  {&_swigt__p_stk__MidiFileIn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Modal[] = {  {&_swigt__p_stk__Modal, 0, 0, 0},  {&_swigt__p_stk__ModalBar, _p_stk__ModalBarTo_p_stk__Modal, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__ModalBar[] = {  {&_swigt__p_stk__ModalBar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Modulate[] = {  {&_swigt__p_stk__Modulate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Moog[] = {  {&_swigt__p_stk__Moog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Mutex[] = {  {&_swigt__p_stk__Mutex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__NRev[] = {  {&_swigt__p_stk__NRev, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Noise[] = {  {&_swigt__p_stk__Noise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__OnePole[] = {  {&_swigt__p_stk__OnePole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__OneZero[] = {  {&_swigt__p_stk__OneZero, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__PRCRev[] = {  {&_swigt__p_stk__PRCRev, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__PercFlut[] = {  {&_swigt__p_stk__PercFlut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Phonemes[] = {  {&_swigt__p_stk__Phonemes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__PitShift[] = {  {&_swigt__p_stk__PitShift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Plucked[] = {  {&_swigt__p_stk__Plucked, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__PoleZero[] = {  {&_swigt__p_stk__PoleZero, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Recorder[] = {  {&_swigt__p_stk__Recorder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__ReedTable[] = {  {&_swigt__p_stk__ReedTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Resonate[] = {  {&_swigt__p_stk__Resonate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Rhodey[] = {  {&_swigt__p_stk__Rhodey, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__RtWvIn[] = {  {&_swigt__p_stk__RtWvIn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__RtWvOut[] = {  {&_swigt__p_stk__RtWvOut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Sampler[] = {  {&_swigt__p_stk__Sampler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Saxofony[] = {  {&_swigt__p_stk__Saxofony, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Shakers[] = {  {&_swigt__p_stk__Shakers, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Simple[] = {  {&_swigt__p_stk__Simple, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__SineWave[] = {  {&_swigt__p_stk__SineWave, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__SingWave[] = {  {&_swigt__p_stk__SingWave, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Sitar[] = {  {&_swigt__p_stk__Sitar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Socket[] = {  {&_swigt__p_stk__Socket, 0, 0, 0},  {&_swigt__p_stk__TcpServer, _p_stk__TcpServerTo_p_stk__Socket, 0, 0},  {&_swigt__p_stk__TcpClient, _p_stk__TcpClientTo_p_stk__Socket, 0, 0},  {&_swigt__p_stk__UdpSocket, _p_stk__UdpSocketTo_p_stk__Socket, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Sphere[] = {  {&_swigt__p_stk__Sphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__StifKarp[] = {  {&_swigt__p_stk__StifKarp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Stk[] = {  {&_swigt__p_stk__Whistle, _p_stk__WhistleTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Generator, _p_stk__GeneratorTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__BandedWG, _p_stk__BandedWGTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__BlitSaw, _p_stk__BlitSawTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Saxofony, _p_stk__SaxofonyTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__TapDelay, _p_stk__TapDelayTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Chorus, _p_stk__ChorusTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Delay, _p_stk__DelayTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Echo, _p_stk__EchoTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Modal, _p_stk__ModalTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__TcpServer, _p_stk__TcpServerTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__OnePole, _p_stk__OnePoleTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Simple, _p_stk__SimpleTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__PRCRev, _p_stk__PRCRevTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Filter, _p_stk__FilterTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Sampler, _p_stk__SamplerTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__BlowHole, _p_stk__BlowHoleTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__SineWave, _p_stk__SineWaveTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Noise, _p_stk__NoiseTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Guitar, _p_stk__GuitarTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Modulate, _p_stk__ModulateTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__ADSR, _p_stk__ADSRTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__BeeThree, _p_stk__BeeThreeTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Effect, _p_stk__EffectTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__FileRead, _p_stk__FileReadTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Stk, 0, 0, 0},  {&_swigt__p_stk__Iir, _p_stk__IirTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Mandolin, _p_stk__MandolinTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Phonemes, _p_stk__PhonemesTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__VoicForm, _p_stk__VoicFormTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Drummer, _p_stk__DrummerTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__MidiFileIn, _p_stk__MidiFileInTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__FM, _p_stk__FMTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__SingWave, _p_stk__SingWaveTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Fir, _p_stk__FirTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Vector3D, _p_stk__Vector3DTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__FreeVerb, _p_stk__FreeVerbTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Instrmnt, _p_stk__InstrmntTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Twang, _p_stk__TwangTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Voicer, _p_stk__VoicerTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__FMVoices, _p_stk__FMVoicesTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__TwoZero, _p_stk__TwoZeroTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Sitar, _p_stk__SitarTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Plucked, _p_stk__PluckedTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__FileWrite, _p_stk__FileWriteTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Envelope, _p_stk__EnvelopeTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__ReedTable, _p_stk__ReedTableTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Socket, _p_stk__SocketTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__PercFlut, _p_stk__PercFlutTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__BiQuad, _p_stk__BiQuadTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Recorder, _p_stk__RecorderTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Thread, _p_stk__ThreadTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__ModalBar, _p_stk__ModalBarTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__PoleZero, _p_stk__PoleZeroTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Bowed, _p_stk__BowedTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Wurley, _p_stk__WurleyTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__DelayA, _p_stk__DelayATo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__JCRev, _p_stk__JCRevTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__NRev, _p_stk__NRevTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Brass, _p_stk__BrassTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Granulate, _p_stk__GranulateTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Function, _p_stk__FunctionTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__BlitSquare, _p_stk__BlitSquareTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__TwoPole, _p_stk__TwoPoleTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__PitShift, _p_stk__PitShiftTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__LentPitShift, _p_stk__LentPitShiftTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__DelayL, _p_stk__DelayLTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Resonate, _p_stk__ResonateTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__BlowBotl, _p_stk__BlowBotlTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__TcpClient, _p_stk__TcpClientTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__BowTable, _p_stk__BowTableTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__StifKarp, _p_stk__StifKarpTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__TubeBell, _p_stk__TubeBellTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Blit, _p_stk__BlitTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Cubic, _p_stk__CubicTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Rhodey, _p_stk__RhodeyTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Clarinet, _p_stk__ClarinetTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Flute, _p_stk__FluteTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__JetTable, _p_stk__JetTableTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__OneZero, _p_stk__OneZeroTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__UdpSocket, _p_stk__UdpSocketTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Sphere, _p_stk__SphereTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__HevyMetl, _p_stk__HevyMetlTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Messager, _p_stk__MessagerTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Mesh2D, _p_stk__Mesh2DTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Mutex, _p_stk__MutexTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Asymp, _p_stk__AsympTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__FormSwep, _p_stk__FormSwepTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Shakers, _p_stk__ShakersTo_p_stk__Stk, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__StkError[] = {  {&_swigt__p_stk__StkError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__StkFrames[] = {  {&_swigt__p_stk__StkFrames, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__TapDelay[] = {  {&_swigt__p_stk__TapDelay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__TcpClient[] = {  {&_swigt__p_stk__TcpClient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__TcpServer[] = {  {&_swigt__p_stk__TcpServer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Thread[] = {  {&_swigt__p_stk__Thread, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__TubeBell[] = {  {&_swigt__p_stk__TubeBell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Twang[] = {  {&_swigt__p_stk__Twang, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__TwoPole[] = {  {&_swigt__p_stk__TwoPole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__TwoZero[] = {  {&_swigt__p_stk__TwoZero, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__UdpSocket[] = {  {&_swigt__p_stk__UdpSocket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Vector3D[] = {  {&_swigt__p_stk__Vector3D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__VoicForm[] = {  {&_swigt__p_stk__VoicForm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Voicer[] = {  {&_swigt__p_stk__Voicer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Whistle[] = {  {&_swigt__p_stk__Whistle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Wurley[] = {  {&_swigt__p_stk__Wurley, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FILE_TYPE,
  _swigc__p_Skini__Message,
  _swigc__p_THREAD_FUNCTION,
  _swigc__p_Vector3D,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_p_char,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t,
  _swigc__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,
  _swigc__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,
  _swigc__p_stk__ADSR,
  _swigc__p_stk__Asymp,
  _swigc__p_stk__BandedWG,
  _swigc__p_stk__BeeThree,
  _swigc__p_stk__BiQuad,
  _swigc__p_stk__Blit,
  _swigc__p_stk__BlitSaw,
  _swigc__p_stk__BlitSquare,
  _swigc__p_stk__BlowBotl,
  _swigc__p_stk__BlowHole,
  _swigc__p_stk__BowTable,
  _swigc__p_stk__Bowed,
  _swigc__p_stk__Brass,
  _swigc__p_stk__Chorus,
  _swigc__p_stk__Clarinet,
  _swigc__p_stk__Cubic,
  _swigc__p_stk__Delay,
  _swigc__p_stk__DelayA,
  _swigc__p_stk__DelayL,
  _swigc__p_stk__Drummer,
  _swigc__p_stk__Echo,
  _swigc__p_stk__Effect,
  _swigc__p_stk__Envelope,
  _swigc__p_stk__FM,
  _swigc__p_stk__FMVoices,
  _swigc__p_stk__FileLoop,
  _swigc__p_stk__FileRead,
  _swigc__p_stk__FileWrite,
  _swigc__p_stk__FileWvIn,
  _swigc__p_stk__FileWvOut,
  _swigc__p_stk__Filter,
  _swigc__p_stk__Fir,
  _swigc__p_stk__Flute,
  _swigc__p_stk__FormSwep,
  _swigc__p_stk__FreeVerb,
  _swigc__p_stk__Function,
  _swigc__p_stk__Generator,
  _swigc__p_stk__Granulate,
  _swigc__p_stk__Guitar,
  _swigc__p_stk__HevyMetl,
  _swigc__p_stk__Iir,
  _swigc__p_stk__InetWvIn,
  _swigc__p_stk__InetWvOut,
  _swigc__p_stk__Instrmnt,
  _swigc__p_stk__JCRev,
  _swigc__p_stk__JetTable,
  _swigc__p_stk__LentPitShift,
  _swigc__p_stk__Mandolin,
  _swigc__p_stk__Mesh2D,
  _swigc__p_stk__Messager,
  _swigc__p_stk__MidiFileIn,
  _swigc__p_stk__Modal,
  _swigc__p_stk__ModalBar,
  _swigc__p_stk__Modulate,
  _swigc__p_stk__Moog,
  _swigc__p_stk__Mutex,
  _swigc__p_stk__NRev,
  _swigc__p_stk__Noise,
  _swigc__p_stk__OnePole,
  _swigc__p_stk__OneZero,
  _swigc__p_stk__PRCRev,
  _swigc__p_stk__PercFlut,
  _swigc__p_stk__Phonemes,
  _swigc__p_stk__PitShift,
  _swigc__p_stk__Plucked,
  _swigc__p_stk__PoleZero,
  _swigc__p_stk__Recorder,
  _swigc__p_stk__ReedTable,
  _swigc__p_stk__Resonate,
  _swigc__p_stk__Rhodey,
  _swigc__p_stk__RtWvIn,
  _swigc__p_stk__RtWvOut,
  _swigc__p_stk__Sampler,
  _swigc__p_stk__Saxofony,
  _swigc__p_stk__Shakers,
  _swigc__p_stk__Simple,
  _swigc__p_stk__SineWave,
  _swigc__p_stk__SingWave,
  _swigc__p_stk__Sitar,
  _swigc__p_stk__Socket,
  _swigc__p_stk__Sphere,
  _swigc__p_stk__StifKarp,
  _swigc__p_stk__Stk,
  _swigc__p_stk__StkError,
  _swigc__p_stk__StkFrames,
  _swigc__p_stk__TapDelay,
  _swigc__p_stk__TcpClient,
  _swigc__p_stk__TcpServer,
  _swigc__p_stk__Thread,
  _swigc__p_stk__TubeBell,
  _swigc__p_stk__Twang,
  _swigc__p_stk__TwoPole,
  _swigc__p_stk__TwoZero,
  _swigc__p_stk__UdpSocket,
  _swigc__p_stk__Vector3D,
  _swigc__p_stk__VoicForm,
  _swigc__p_stk__Voicer,
  _swigc__p_stk__Whistle,
  _swigc__p_stk__Wurley,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



static bool SWIG_init_user(octave_swig_type* module_ns);

SWIGINTERN bool SWIG_Octave_LoadModule(std::string name) {
  bool retn = false;
  {
#if SWIG_OCTAVE_PREREQ(6,0,0)
#elif SWIG_OCTAVE_PREREQ(4,2,0)
    octave::unwind_protect frame;
    frame.protect_var(discard_error_messages);          discard_error_messages = true;
    frame.protect_var(discard_warning_messages);        discard_warning_messages = true;
#elif SWIG_OCTAVE_PREREQ(3,3,50)
    unwind_protect frame;
    frame.protect_var(error_state);                     error_state = 0;
    frame.protect_var(warning_state);                   warning_state = 0;
    frame.protect_var(discard_error_messages);          discard_error_messages = true;
    frame.protect_var(discard_warning_messages);        discard_warning_messages = true;
#else
    unwind_protect::begin_frame("SWIG_Octave_LoadModule");
    unwind_protect_int(error_state);                    error_state = 0;
    unwind_protect_int(warning_state);                  warning_state = 0;
    unwind_protect_bool(discard_error_messages);        discard_error_messages = true;
    unwind_protect_bool(discard_warning_messages);      discard_warning_messages = true;
#endif
#if SWIG_OCTAVE_PREREQ(4,2,0)
    try {
#if SWIG_OCTAVE_PREREQ(4,4,0)
      octave::feval(name, octave_value_list(), 0);
#else
      feval(name, octave_value_list(), 0);
#endif
      retn = true;
    } catch (octave::execution_exception&) { }
#else
    feval(name, octave_value_list(), 0);
    retn = (error_state == 0);
#endif
#if !SWIG_OCTAVE_PREREQ(3,3,50)
    unwind_protect::run_frame("SWIG_Octave_LoadModule");
#endif
  }
  if (!retn) {
    error(SWIG_name_d ": could not load module `%s'", name.c_str());
  }
  return retn;
}

SWIGINTERN bool SWIG_Octave_InstallFunction(octave_function *octloadfcn, std::string name) {
  bool retn = false;
  {
#if SWIG_OCTAVE_PREREQ(6,0,0)
#elif SWIG_OCTAVE_PREREQ(4,2,0)
    octave::unwind_protect frame;
    frame.protect_var(discard_error_messages);          discard_error_messages = true;
    frame.protect_var(discard_warning_messages);        discard_warning_messages = true;
#elif SWIG_OCTAVE_PREREQ(3,3,50)
    unwind_protect frame;
    frame.protect_var(error_state);                     error_state = 0;
    frame.protect_var(warning_state);                   warning_state = 0;
    frame.protect_var(discard_error_messages);          discard_error_messages = true;
    frame.protect_var(discard_warning_messages);        discard_warning_messages = true;
#else
    unwind_protect::begin_frame("SWIG_Octave_InstallFunction");
    unwind_protect_int(error_state);                    error_state = 0;
    unwind_protect_int(warning_state);                  warning_state = 0;
    unwind_protect_bool(discard_error_messages);        discard_error_messages = true;
    unwind_protect_bool(discard_warning_messages);      discard_warning_messages = true;
#endif
    octave_value_list args;
    args.append(name);
    args.append(octloadfcn->fcn_file_name());
#if SWIG_OCTAVE_PREREQ(4,2,0)
    try {
#if SWIG_OCTAVE_PREREQ(4,4,0)
      octave::feval("autoload", args, 0);
#else
      feval("autoload", args, 0);
#endif
      retn = true;
    } catch (octave::execution_exception&) { }
#else
    feval("autoload", args, 0);
    retn = (error_state == 0);
#endif
#if !SWIG_OCTAVE_PREREQ(3,3,50)
    unwind_protect::run_frame("SWIG_Octave_InstallFunction");
#endif
  }
  if (!retn) {
    error(SWIG_name_d ": could not load function `%s'", name.c_str());
  }
  return retn;
}

static const char *const subclass_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Function} {} subclass()\n\
@deftypefnx{Loadable Function} {} subclass(@var{swigclass}, @var{name}, @var{fcn}, @dots{})\n\
Subclass a C++ class from within Octave, and provide implementations of its virtual methods.\n\
\n\
See the SWIG manual for usage examples.\n\
@end deftypefn";

DEFUN_DLD( subclass, args, nargout, subclass_usage ) {
  octave_swig_type *top = new octave_swig_type;
  for (int j = 0; j < args.length(); ++j) {
    if (args(j).type_id() == octave_swig_ref::static_type_id()) {
      octave_swig_ref *osr = static_cast < octave_swig_ref *>(args(j).internal_rep());
      octave_swig_type *ost = osr->get_ptr();
      if (!ost->is_owned()) {
        error("subclass: cannot subclass object not constructed on octave side");
        return octave_value_list();
      }
      top->merge(*ost);
    } else if (args(j).is_function_handle()) {
      top->assign(args(j).fcn_handle_value()->fcn_name(), args(j));
    } else if (args(j).is_string()) {
      if (j + 1 >= args.length()) {
        error("subclass: member assignments must be of string,value form");
        return octave_value_list();
      }
      top->assign(args(j).string_value(), args(j + 1));
      ++j;
    } else {
      error("subclass: invalid arguments to subclass()");
      return octave_value_list();
    }
  }
  return octave_value(Swig::swig_value_ref(top));
}

static const char *const swig_type_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Function} {} swig_type(@var{swigref})\n\
Return the underlying C/C++ type name of a SWIG-wrapped object.\n\
@end deftypefn";

DEFUN_DLD( swig_type, args, nargout, swig_type_usage ) {
  if (args.length() != 1) {
    error("swig_type: must be called with only a single object");
    return octave_value_list();
  }
  octave_swig_type *ost = Swig::swig_value_deref(args(0));
  if (!ost) {
    error("swig_type: object is not a swig_ref");
    return octave_value_list();
  }
  return octave_value(ost->swig_type_name());
}

static const char *const swig_typequery_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Function} {} swig_typequery(@var{string})\n\
Return @var{string} if it is a recognised SWIG-wrapped C/C++ type name;\n\
otherwise return `<unknown>'.\n\
@end deftypefn";

DEFUN_DLD( swig_typequery, args, nargout, swig_typequery_usage ) {
  if (args.length() != 1 || !args(0).is_string()) {
    error("swig_typequery: must be called with single string argument");
    return octave_value_list();
  }
  swig_module_info *module = SWIG_GetModule(0);
  swig_type_info *type = SWIG_TypeQueryModule(module, module, args(0).string_value().c_str());
  if (!type)
    return octave_value("<unknown>");
  return octave_value(type->name);
}

static const char *const swig_this_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Function} {} swig_this(@var{swigref})\n\
Return the underlying C/C++ pointer of a SWIG-wrapped object.\n\
@end deftypefn";

DEFUN_DLD( swig_this, args, nargout, swig_this_usage ) {
  if (args.length() != 1) {
    error("swig_this: must be called with only a single object");
    return octave_value_list();
  }
  if (args(0).is_matrix_type() && args(0).rows() == 0 && args(0).columns() == 0)
    return octave_value(octave_uint64(0));
  octave_swig_type *ost = Swig::swig_value_deref(args(0));
  if (!ost) {
    error("swig_this: object is not a swig_ref");
    return octave_value_list();
  }
  return octave_value(octave_uint64((unsigned long long) ost->swig_this()));
}

static const char *const swig_octave_prereq_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Function} {} swig_octave_prereq(@var{major}, @var{minor}, @var{patch})\n\
Return true if the version of Octave is at least @var{major}.@var{minor}.@var{patch}.\n\
@end deftypefn";

DEFUN_DLD( swig_octave_prereq, args, nargout, swig_octave_prereq_usage ) {
  if (args.length() != 3) {
    error("swig_octave_prereq: must be called with 3 arguments");
    return octave_value_list();
  }
  const int major = args(0).int_value();
  const int minor = args(1).int_value();
  const int patch = args(2).int_value();
  const bool prereq = SWIG_OCTAVE_PREREQ(major, minor, patch);
  return octave_value(prereq);
}

static const char *const swig_exit_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Function} {} swig_exit([@var{exit_status}])\n\
Exit Octave without performing any memory cleanup.\n\
@end deftypefn";

DEFUN_DLD( swig_exit, args, nargout, swig_exit_usage ) {
  if (args.length() > 1) {
    error("swig_exit: must be called with at most one arguments");
    return octave_value_list();
  }
  int exit_status = 0;
  if (args.length() == 1) {
    exit_status = args(0).int_value();
  }
  ::_Exit(exit_status);
  return octave_value();
}

static const char *const SWIG_name_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Module} {} " SWIG_name_d "\n\
Loads the SWIG-generated module `" SWIG_name_d "'.\n\
@end deftypefn";

DEFUN_DLD( SWIG_name, args, nargout, SWIG_name_usage ) {

  static octave_swig_type* module_ns = 0;

  // workaround to prevent octave seg-faulting on exit: set Octave exit function
  // octave_exit to _Exit, which exits immediately without trying to cleanup memory.
  // definitely affected version 3.2.*, not sure about 3.3.*, seems to be fixed in
  // version 3.4.*, reappeared in 4.2.*, hack not possible in 4.4.* or later due to
  // removal of octave_exit, so turn on for all versions between 3.2.*. and 4.4.*.
  // can be turned off with macro definition.
#ifndef SWIG_OCTAVE_NO_SEGFAULT_HACK
#if !SWIG_OCTAVE_PREREQ(4,4,0)
#if SWIG_OCTAVE_PREREQ(3,2,0)
  octave_exit = ::_Exit;
#endif
#endif
#endif

  // check for no input and output args
  if (args.length() != 0 || nargout != 0) {
    print_usage();
    return octave_value_list();
  }

  // create module on first function call
  if (!module_ns) {

    // workaround bug in octave where installing global variable of custom type and then
    // exiting without explicitly clearing the variable causes octave to segfault.
#if SWIG_OCTAVE_PREREQ(3,2,0)
    octave_value_list eval_args;
    eval_args.append("base");
    eval_args.append("function __swig_atexit__; "
                     "  if mislocked() "
                     "    clear -all; "
                     "  else "
                     "    mlock(); "
                     "  endif; "
                     "endfunction; "
                     "__swig_atexit__; "
                     "atexit(\"__swig_atexit__\", false); "
                     "atexit(\"__swig_atexit__\")");
#if SWIG_OCTAVE_PREREQ(4,4,0)
    octave::feval("evalin", eval_args, 0);
#else
    feval("evalin", eval_args, 0);
#endif
#endif

#if SWIG_OCTAVE_PREREQ(4,4,0)
    {
      octave::type_info& typeinfo = octave::interpreter::the_interpreter()->get_type_info();
      string_vector types = typeinfo.installed_type_names();
      bool register_octave_swig_ref = true;
      bool register_octave_swig_packed = true;
      for (int i = 0; i < types.numel(); ++i) {
        if (types(i) == octave_swig_ref::static_type_name()) {
          register_octave_swig_ref = false;
          octave_swig_ref::set_type_id(i);
        }
        if (types(i) == octave_swig_packed::static_type_name()) {
          register_octave_swig_packed = false;
	  octave_swig_packed::set_type_id(i);
        }
      }
      if (register_octave_swig_ref) {
        octave_swig_ref::register_type();
      }
      if (register_octave_swig_packed) {
        octave_swig_packed::register_type();
      }
    }
#else
    octave_swig_ref::register_type();
    octave_swig_packed::register_type();
#endif
    SWIG_InitializeModule(0);
    SWIG_PropagateClientData();

#if SWIG_OCTAVE_PREREQ(6,0,0)
    octave::tree_evaluator& tree_eval = octave::interpreter::the_interpreter()->get_evaluator();
    octave::call_stack& stack = tree_eval.get_call_stack();
    octave_function *me = stack.current_function();
#elif SWIG_OCTAVE_PREREQ(4,4,0)
    octave::call_stack& stack = octave::interpreter::the_interpreter()->get_call_stack();
    octave_function *me = stack.current();
#else
    octave_function *me = octave_call_stack::current();
#endif

    if (!SWIG_Octave_InstallFunction(me, "subclass")) {
      return octave_value_list();
    }
    if (!SWIG_Octave_InstallFunction(me, "swig_type")) {
      return octave_value_list();
    }
    if (!SWIG_Octave_InstallFunction(me, "swig_typequery")) {
      return octave_value_list();
    }
    if (!SWIG_Octave_InstallFunction(me, "swig_this")) {
      return octave_value_list();
    }
    if (!SWIG_Octave_InstallFunction(me, "swig_octave_prereq")) {
      return octave_value_list();
    }
    if (!SWIG_Octave_InstallFunction(me, "swig_exit")) {
      return octave_value_list();
    }

    octave_swig_type* cvar_ns=0;
    if (std::string(SWIG_global_name) != ".") {
      cvar_ns=new octave_swig_type;
      for (int j=0;swig_globals[j].name;++j)
        if (swig_globals[j].get_method)
          cvar_ns->assign(swig_globals[j].name,&swig_globals[j]);
    }

    module_ns=new octave_swig_type(0, 0, 0, true);
    if (std::string(SWIG_global_name) != ".") {
      module_ns->assign(SWIG_global_name,Swig::swig_value_ref(cvar_ns));
    }
    else {
      for (int j=0;swig_globals[j].name;++j)
        if (swig_globals[j].get_method)
          module_ns->assign(swig_globals[j].name,&swig_globals[j]);
    }
    for (int j=0;swig_globals[j].name;++j)
      if (swig_globals[j].method)
        module_ns->assign(swig_globals[j].name,&swig_globals[j]);

    // * need better solution here; swig_type -> octave_class mapping is
    // * really n-to-1, in some cases such as template partial spec, etc.
    // * see failing tests.
    for (int j=0;swig_types[j];++j)
      if (swig_types[j]->clientdata) {
        swig_octave_class* c=(swig_octave_class*)swig_types[j]->clientdata;
        module_ns->assign(c->name,
                        Swig::swig_value_ref
                        (new octave_swig_type(0,swig_types[j])));
      }

    if (!SWIG_init_user(module_ns)) {
      delete module_ns;
      module_ns=0;
      return octave_value_list();
    }

    SWIG_InstallOps(octave_swig_ref::static_type_id());

    octave_swig_type::swig_member_const_iterator mb;
    for (mb = module_ns->swig_members_begin(); mb != module_ns->swig_members_end(); ++mb) {
      if (mb->second.first && mb->second.first->method) {
        if (!SWIG_Octave_InstallFunction(me, mb->first)) {
          return octave_value_list();
        }
      }
    }

#if SWIG_OCTAVE_PREREQ(4,4,0)
    octave::interpreter::the_interpreter()->mlock();
#elif SWIG_OCTAVE_PREREQ(3,2,0)
    mlock();
#else
    mlock(me->name());
#endif

  }

  octave_swig_type::swig_member_const_iterator mb;
  for (mb = module_ns->swig_members_begin(); mb != module_ns->swig_members_end(); ++mb) {
    if (mb->second.second.is_defined()) {
      SWIG_Octave_SetGlobalValue(mb->first, mb->second.second);
      SWIG_Octave_LinkGlobalValue(mb->first);
    }
  }

  SWIG_Octave_SetGlobalValue(SWIG_name_d, module_ns->as_value());
  SWIG_Octave_LinkGlobalValue(SWIG_name_d);

  return octave_value_list();

}


static bool SWIG_init_user(octave_swig_type* module_ns)
{
  SWIG_Octave_SetConstant(module_ns,"StkError_STATUS",SWIG_From_int(static_cast< int >(stk::StkError::STATUS)));
  SWIG_Octave_SetConstant(module_ns,"StkError_WARNING",SWIG_From_int(static_cast< int >(stk::StkError::WARNING)));
  SWIG_Octave_SetConstant(module_ns,"StkError_DEBUG_PRINT",SWIG_From_int(static_cast< int >(stk::StkError::DEBUG_PRINT)));
  SWIG_Octave_SetConstant(module_ns,"StkError_MEMORY_ALLOCATION",SWIG_From_int(static_cast< int >(stk::StkError::MEMORY_ALLOCATION)));
  SWIG_Octave_SetConstant(module_ns,"StkError_MEMORY_ACCESS",SWIG_From_int(static_cast< int >(stk::StkError::MEMORY_ACCESS)));
  SWIG_Octave_SetConstant(module_ns,"StkError_FUNCTION_ARGUMENT",SWIG_From_int(static_cast< int >(stk::StkError::FUNCTION_ARGUMENT)));
  SWIG_Octave_SetConstant(module_ns,"StkError_FILE_NOT_FOUND",SWIG_From_int(static_cast< int >(stk::StkError::FILE_NOT_FOUND)));
  SWIG_Octave_SetConstant(module_ns,"StkError_FILE_UNKNOWN_FORMAT",SWIG_From_int(static_cast< int >(stk::StkError::FILE_UNKNOWN_FORMAT)));
  SWIG_Octave_SetConstant(module_ns,"StkError_FILE_ERROR",SWIG_From_int(static_cast< int >(stk::StkError::FILE_ERROR)));
  SWIG_Octave_SetConstant(module_ns,"StkError_PROCESS_THREAD",SWIG_From_int(static_cast< int >(stk::StkError::PROCESS_THREAD)));
  SWIG_Octave_SetConstant(module_ns,"StkError_PROCESS_SOCKET",SWIG_From_int(static_cast< int >(stk::StkError::PROCESS_SOCKET)));
  SWIG_Octave_SetConstant(module_ns,"StkError_PROCESS_SOCKET_IPADDR",SWIG_From_int(static_cast< int >(stk::StkError::PROCESS_SOCKET_IPADDR)));
  SWIG_Octave_SetConstant(module_ns,"StkError_AUDIO_SYSTEM",SWIG_From_int(static_cast< int >(stk::StkError::AUDIO_SYSTEM)));
  SWIG_Octave_SetConstant(module_ns,"StkError_MIDI_SYSTEM",SWIG_From_int(static_cast< int >(stk::StkError::MIDI_SYSTEM)));
  SWIG_Octave_SetConstant(module_ns,"StkError_UNSPECIFIED",SWIG_From_int(static_cast< int >(stk::StkError::UNSPECIFIED)));
  SWIG_Octave_SetConstant(module_ns,"ADSR_ATTACK",SWIG_From_int(static_cast< int >(stk::ADSR::ATTACK)));
  SWIG_Octave_SetConstant(module_ns,"ADSR_DECAY",SWIG_From_int(static_cast< int >(stk::ADSR::DECAY)));
  SWIG_Octave_SetConstant(module_ns,"ADSR_SUSTAIN",SWIG_From_int(static_cast< int >(stk::ADSR::SUSTAIN)));
  SWIG_Octave_SetConstant(module_ns,"ADSR_RELEASE",SWIG_From_int(static_cast< int >(stk::ADSR::RELEASE)));
  SWIG_Octave_SetConstant(module_ns,"ADSR_IDLE",SWIG_From_int(static_cast< int >(stk::ADSR::IDLE)));
  SWIG_Octave_SetConstant(module_ns,"Granulate_GRAIN_STOPPED",SWIG_From_int(static_cast< int >(stk::Granulate::GRAIN_STOPPED)));
  SWIG_Octave_SetConstant(module_ns,"Granulate_GRAIN_FADEIN",SWIG_From_int(static_cast< int >(stk::Granulate::GRAIN_FADEIN)));
  SWIG_Octave_SetConstant(module_ns,"Granulate_GRAIN_SUSTAIN",SWIG_From_int(static_cast< int >(stk::Granulate::GRAIN_SUSTAIN)));
  SWIG_Octave_SetConstant(module_ns,"Granulate_GRAIN_FADEOUT",SWIG_From_int(static_cast< int >(stk::Granulate::GRAIN_FADEOUT)));
  SWIG_Octave_SetConstant(module_ns,"Socket_PROTO_TCP",SWIG_From_int(static_cast< int >(stk::Socket::PROTO_TCP)));
  SWIG_Octave_SetConstant(module_ns,"Socket_PROTO_UDP",SWIG_From_int(static_cast< int >(stk::Socket::PROTO_UDP)));
  return true;
}

