# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Analog
else:
    import _Analog

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class float_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Analog.float_numeric_limits_min(self)

    def max(self):
        return _Analog.float_numeric_limits_max(self)

    def epsilon(self):
        return _Analog.float_numeric_limits_epsilon(self)

    def round_error(self):
        return _Analog.float_numeric_limits_round_error(self)

    def infinity(self):
        return _Analog.float_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Analog.float_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Analog.float_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Analog.float_numeric_limits_denorm_min(self)

    def __init__(self):
        _Analog.float_numeric_limits_swiginit(self, _Analog.new_float_numeric_limits())
    __swig_destroy__ = _Analog.delete_float_numeric_limits

# Register float_numeric_limits in _Analog:
_Analog.float_numeric_limits_swigregister(float_numeric_limits)

class double_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Analog.double_numeric_limits_min(self)

    def max(self):
        return _Analog.double_numeric_limits_max(self)

    def epsilon(self):
        return _Analog.double_numeric_limits_epsilon(self)

    def round_error(self):
        return _Analog.double_numeric_limits_round_error(self)

    def infinity(self):
        return _Analog.double_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Analog.double_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Analog.double_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Analog.double_numeric_limits_denorm_min(self)

    def __init__(self):
        _Analog.double_numeric_limits_swiginit(self, _Analog.new_double_numeric_limits())
    __swig_destroy__ = _Analog.delete_double_numeric_limits

# Register double_numeric_limits in _Analog:
_Analog.double_numeric_limits_swigregister(double_numeric_limits)

class int_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Analog.int_numeric_limits_min(self)

    def max(self):
        return _Analog.int_numeric_limits_max(self)

    def epsilon(self):
        return _Analog.int_numeric_limits_epsilon(self)

    def round_error(self):
        return _Analog.int_numeric_limits_round_error(self)

    def infinity(self):
        return _Analog.int_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Analog.int_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Analog.int_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Analog.int_numeric_limits_denorm_min(self)

    def __init__(self):
        _Analog.int_numeric_limits_swiginit(self, _Analog.new_int_numeric_limits())
    __swig_destroy__ = _Analog.delete_int_numeric_limits

# Register int_numeric_limits in _Analog:
_Analog.int_numeric_limits_swigregister(int_numeric_limits)

class uint_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Analog.uint_numeric_limits_min(self)

    def max(self):
        return _Analog.uint_numeric_limits_max(self)

    def epsilon(self):
        return _Analog.uint_numeric_limits_epsilon(self)

    def round_error(self):
        return _Analog.uint_numeric_limits_round_error(self)

    def infinity(self):
        return _Analog.uint_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Analog.uint_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Analog.uint_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Analog.uint_numeric_limits_denorm_min(self)

    def __init__(self):
        _Analog.uint_numeric_limits_swiginit(self, _Analog.new_uint_numeric_limits())
    __swig_destroy__ = _Analog.delete_uint_numeric_limits

# Register uint_numeric_limits in _Analog:
_Analog.uint_numeric_limits_swigregister(uint_numeric_limits)

class short_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Analog.short_numeric_limits_min(self)

    def max(self):
        return _Analog.short_numeric_limits_max(self)

    def epsilon(self):
        return _Analog.short_numeric_limits_epsilon(self)

    def round_error(self):
        return _Analog.short_numeric_limits_round_error(self)

    def infinity(self):
        return _Analog.short_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Analog.short_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Analog.short_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Analog.short_numeric_limits_denorm_min(self)

    def __init__(self):
        _Analog.short_numeric_limits_swiginit(self, _Analog.new_short_numeric_limits())
    __swig_destroy__ = _Analog.delete_short_numeric_limits

# Register short_numeric_limits in _Analog:
_Analog.short_numeric_limits_swigregister(short_numeric_limits)

class ushort_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Analog.ushort_numeric_limits_min(self)

    def max(self):
        return _Analog.ushort_numeric_limits_max(self)

    def epsilon(self):
        return _Analog.ushort_numeric_limits_epsilon(self)

    def round_error(self):
        return _Analog.ushort_numeric_limits_round_error(self)

    def infinity(self):
        return _Analog.ushort_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Analog.ushort_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Analog.ushort_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Analog.ushort_numeric_limits_denorm_min(self)

    def __init__(self):
        _Analog.ushort_numeric_limits_swiginit(self, _Analog.new_ushort_numeric_limits())
    __swig_destroy__ = _Analog.delete_ushort_numeric_limits

# Register ushort_numeric_limits in _Analog:
_Analog.ushort_numeric_limits_swigregister(ushort_numeric_limits)

class long_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Analog.long_numeric_limits_min(self)

    def max(self):
        return _Analog.long_numeric_limits_max(self)

    def epsilon(self):
        return _Analog.long_numeric_limits_epsilon(self)

    def round_error(self):
        return _Analog.long_numeric_limits_round_error(self)

    def infinity(self):
        return _Analog.long_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Analog.long_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Analog.long_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Analog.long_numeric_limits_denorm_min(self)

    def __init__(self):
        _Analog.long_numeric_limits_swiginit(self, _Analog.new_long_numeric_limits())
    __swig_destroy__ = _Analog.delete_long_numeric_limits

# Register long_numeric_limits in _Analog:
_Analog.long_numeric_limits_swigregister(long_numeric_limits)

class ulong_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Analog.ulong_numeric_limits_min(self)

    def max(self):
        return _Analog.ulong_numeric_limits_max(self)

    def epsilon(self):
        return _Analog.ulong_numeric_limits_epsilon(self)

    def round_error(self):
        return _Analog.ulong_numeric_limits_round_error(self)

    def infinity(self):
        return _Analog.ulong_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Analog.ulong_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Analog.ulong_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Analog.ulong_numeric_limits_denorm_min(self)

    def __init__(self):
        _Analog.ulong_numeric_limits_swiginit(self, _Analog.new_ulong_numeric_limits())
    __swig_destroy__ = _Analog.delete_ulong_numeric_limits

# Register ulong_numeric_limits in _Analog:
_Analog.ulong_numeric_limits_swigregister(ulong_numeric_limits)

class llong_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Analog.llong_numeric_limits_min(self)

    def max(self):
        return _Analog.llong_numeric_limits_max(self)

    def epsilon(self):
        return _Analog.llong_numeric_limits_epsilon(self)

    def round_error(self):
        return _Analog.llong_numeric_limits_round_error(self)

    def infinity(self):
        return _Analog.llong_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Analog.llong_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Analog.llong_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Analog.llong_numeric_limits_denorm_min(self)

    def __init__(self):
        _Analog.llong_numeric_limits_swiginit(self, _Analog.new_llong_numeric_limits())
    __swig_destroy__ = _Analog.delete_llong_numeric_limits

# Register llong_numeric_limits in _Analog:
_Analog.llong_numeric_limits_swigregister(llong_numeric_limits)

class ullong_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Analog.ullong_numeric_limits_min(self)

    def max(self):
        return _Analog.ullong_numeric_limits_max(self)

    def epsilon(self):
        return _Analog.ullong_numeric_limits_epsilon(self)

    def round_error(self):
        return _Analog.ullong_numeric_limits_round_error(self)

    def infinity(self):
        return _Analog.ullong_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Analog.ullong_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Analog.ullong_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Analog.ullong_numeric_limits_denorm_min(self)

    def __init__(self):
        _Analog.ullong_numeric_limits_swiginit(self, _Analog.new_ullong_numeric_limits())
    __swig_destroy__ = _Analog.delete_ullong_numeric_limits

# Register ullong_numeric_limits in _Analog:
_Analog.ullong_numeric_limits_swigregister(ullong_numeric_limits)


def Huge():
    return _Analog.Huge()

def Hugef():
    return _Analog.Hugef()

def Infinity():
    return _Analog.Infinity()

def NaN():
    return _Analog.NaN()
char_bit = _Analog.char_bit
schar_min = _Analog.schar_min
schar_max = _Analog.schar_max
uchar_max = _Analog.uchar_max
char_min = _Analog.char_min
char_max = _Analog.char_max
mb_len_max = _Analog.mb_len_max
shrt_min = _Analog.shrt_min
shrt_max = _Analog.shrt_max
ushrt_max = _Analog.ushrt_max
int_min = _Analog.int_min
int_max = _Analog.int_max
uint_max = _Analog.uint_max
long_min = _Analog.long_min
long_max = _Analog.long_max
ulong_max = _Analog.ulong_max
llong_min = _Analog.llong_min
llong_max = _Analog.llong_max
ullong_max = _Analog.ullong_max
class Random(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.Random_swiginit(self, _Analog.new_Random())

    @staticmethod
    def seed():
        return _Analog.Random_seed()

    def frand(self):
        return _Analog.Random_frand(self)

    def rand(self):
        return _Analog.Random_rand(self)

    def randint(self, min, max):
        return _Analog.Random_randint(self, min, max)

    def flip(self, prob):
        return _Analog.Random_flip(self, prob)

    def random(self, mod):
        return _Analog.Random_random(self, mod)
    __swig_destroy__ = _Analog.delete_Random

# Register Random in _Analog:
_Analog.Random_swigregister(Random)

PARAMETER2_PROCESSOR = _Analog.PARAMETER2_PROCESSOR
STEREOSPLITTER_PROCESSOR = _Analog.STEREOSPLITTER_PROCESSOR
MONO_GENERATOR_PROCESSOR = _Analog.MONO_GENERATOR_PROCESSOR
MONO_FUNCTION_PROCESSOR = _Analog.MONO_FUNCTION_PROCESSOR
MONO_OSCILLATOR_PROCESSOR = _Analog.MONO_OSCILLATOR_PROCESSOR
MONO_FILTER_PROCESSOR = _Analog.MONO_FILTER_PROCESSOR
MONO_AMPLIFIER_PROCESSOR = _Analog.MONO_AMPLIFIER_PROCESSOR
MONO_FX_PROCESSOR = _Analog.MONO_FX_PROCESSOR
MONO_CASCADE_PROCESSOR = _Analog.MONO_CASCADE_PROCESSOR
MONO_MIXER_PROCESSOR = _Analog.MONO_MIXER_PROCESSOR
MONO_MORPHER_PROCESSOR = _Analog.MONO_MORPHER_PROCESSOR
MONO_OPERATOR_PROCESSOR = _Analog.MONO_OPERATOR_PROCESSOR
MONO_OVERSAMPLE_PROCESSOR = _Analog.MONO_OVERSAMPLE_PROCESSOR
MONO_UPSAMPLE_PROCESSOR = _Analog.MONO_UPSAMPLE_PROCESSOR
MONO_DOWNSAMPLE_PROCESSOR = _Analog.MONO_DOWNSAMPLE_PROCESSOR
STEREO_FX_PROCESSOR = _Analog.STEREO_FX_PROCESSOR
STEREO_OVERSAMPLER_PROCESSOR = _Analog.STEREO_OVERSAMPLER_PROCESSOR
STEREO_UPSAMPLER_PROCESSOR = _Analog.STEREO_UPSAMPLER_PROCESSOR
STEREO_DOWNSAMPLER_PROCESSOR = _Analog.STEREO_DOWNSAMPLER_PROCESSOR
STEREO_GENERATOR_PROCESSOR = _Analog.STEREO_GENERATOR_PROCESSOR
STEREO_FUNCTION_PROCESSOR = _Analog.STEREO_FUNCTION_PROCESSOR
STEREO_PARAMETER2_PROCESSOR = _Analog.STEREO_PARAMETER2_PROCESSOR
STEREO_OSCILLATOR_PROCESSOR = _Analog.STEREO_OSCILLATOR_PROCESSOR
STEREO_FILTER_PROCESSOR = _Analog.STEREO_FILTER_PROCESSOR
STEREO_AMPLIFIER_PROCESSOR = _Analog.STEREO_AMPLIFIER_PROCESSOR
STEREO_CASCADE_PROCESSOR = _Analog.STEREO_CASCADE_PROCESSOR
STEREO_OPERATOR_PROCESSOR = _Analog.STEREO_OPERATOR_PROCESSOR
MONO_SIGNAL_SOURCE_PROCESSOR = _Analog.MONO_SIGNAL_SOURCE_PROCESSOR
STEREO_SIGNAL_SOURCE_PROCESSOR = _Analog.STEREO_SIGNAL_SOURCE_PROCESSOR
MONO_SIGNAL_SINK_PROCESSOR = _Analog.MONO_SIGNAL_SINK_PROCESSOR
STEREO_SIGNAL_SINK_PROCESSOR = _Analog.STEREO_SIGNAL_SINK_PROCESSOR
INTERLEAVE_PROCESSOR = _Analog.INTERLEAVE_PROCESSOR
DEINERLEAVE_PROCESSOR = _Analog.DEINERLEAVE_PROCESSOR
FILTER_BANK_PROCESSOR = _Analog.FILTER_BANK_PROCESSOR
SPECTRUM_PROCESSOR = _Analog.SPECTRUM_PROCESSOR
class SoundProcessor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    preGain = property(_Analog.SoundProcessor_preGain_get, _Analog.SoundProcessor_preGain_set)
    postGain = property(_Analog.SoundProcessor_postGain_get, _Analog.SoundProcessor_postGain_set)

    def getType(self):
        return _Analog.SoundProcessor_getType(self)

    def setPort(self, port, value):
        return _Analog.SoundProcessor_setPort(self, port, value)

    def setPort2(self, port, a, b):
        return _Analog.SoundProcessor_setPort2(self, port, a, b)

    def setPortV(self, port, v):
        return _Analog.SoundProcessor_setPortV(self, port, v)

    def getPort(self, port):
        return _Analog.SoundProcessor_getPort(self, port)

    def getPort2(self, port, v):
        return _Analog.SoundProcessor_getPort2(self, port, v)

    def getPortV(self, port, v):
        return _Analog.SoundProcessor_getPortV(self, port, v)

    def printPortMap(self):
        return _Analog.SoundProcessor_printPortMap(self)

    def randomize(self):
        return _Analog.SoundProcessor_randomize(self)

    def loadPreset(self, filename):
        return _Analog.SoundProcessor_loadPreset(self, filename)

    def savePreset(self, filename):
        return _Analog.SoundProcessor_savePreset(self, filename)
    __swig_destroy__ = _Analog.delete_SoundProcessor

# Register SoundProcessor in _Analog:
_Analog.SoundProcessor_swigregister(SoundProcessor)

class Port(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    port = property(_Analog.Port_port_get, _Analog.Port_port_set)
    value = property(_Analog.Port_value_get, _Analog.Port_value_set)
    p = property(_Analog.Port_p_get, _Analog.Port_p_set)

    def __init__(self):
        _Analog.Port_swiginit(self, _Analog.new_Port())
    __swig_destroy__ = _Analog.delete_Port

# Register Port in _Analog:
_Analog.Port_swigregister(Port)

class Ports(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ports = property(_Analog.Ports_ports_get, _Analog.Ports_ports_set)
    portmap = property(_Analog.Ports_portmap_get, _Analog.Ports_portmap_set)

    def __init__(self):
        _Analog.Ports_swiginit(self, _Analog.new_Ports())

    def addPort(self, name, p):
        return _Analog.Ports_addPort(self, name, p)

    def Run(self):
        return _Analog.Ports_Run(self)
    __swig_destroy__ = _Analog.delete_Ports

# Register Ports in _Analog:
_Analog.Ports_swigregister(Ports)

class MonoProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InplaceProcess(self, n, buffer):
        return _Analog.MonoProcessor_InplaceProcess(self, n, buffer)

    def Tick(self, I=1, A=1, X=0, Y=0):
        return _Analog.MonoProcessor_Tick(self, I, A, X, Y)

    def ProcessBlock(self, n, inputs, outputs):
        return _Analog.MonoProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Analog.delete_MonoProcessor

# Register MonoProcessor in _Analog:
_Analog.MonoProcessor_swigregister(MonoProcessor)

class MonoCascadeProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    procs = property(_Analog.MonoCascadeProcessor_procs_get, _Analog.MonoCascadeProcessor_procs_set)

    def __init__(self):
        _Analog.MonoCascadeProcessor_swiginit(self, _Analog.new_MonoCascadeProcessor())

    def getType(self):
        return _Analog.MonoCascadeProcessor_getType(self)

    def ProcessBlock(self, n, inputs, outputs):
        return _Analog.MonoCascadeProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Analog.delete_MonoCascadeProcessor

# Register MonoCascadeProcessor in _Analog:
_Analog.MonoCascadeProcessor_swigregister(MonoCascadeProcessor)

class StereoProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    pan = property(_Analog.StereoProcessor_pan_get, _Analog.StereoProcessor_pan_set)

    def ProcessBlock(self, n, inputs, outputs):
        return _Analog.StereoProcessor_ProcessBlock(self, n, inputs, outputs)

    def Tick(self, IL, IR, L, R, A=1, X=0, Y=0):
        return _Analog.StereoProcessor_Tick(self, IL, IR, L, R, A, X, Y)

    def InplaceProcess(self, n, buffer):
        return _Analog.StereoProcessor_InplaceProcess(self, n, buffer)

    def Run(self, n, inputs, outputs):
        return _Analog.StereoProcessor_Run(self, n, inputs, outputs)
    __swig_destroy__ = _Analog.delete_StereoProcessor

# Register StereoProcessor in _Analog:
_Analog.StereoProcessor_swigregister(StereoProcessor)

class StereoCascadeProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    procs = property(_Analog.StereoCascadeProcessor_procs_get, _Analog.StereoCascadeProcessor_procs_set)

    def __init__(self):
        _Analog.StereoCascadeProcessor_swiginit(self, _Analog.new_StereoCascadeProcessor())

    def getType(self):
        return _Analog.StereoCascadeProcessor_getType(self)

    def ProcessBlock(self, n, inputs, outputs):
        return _Analog.StereoCascadeProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Analog.delete_StereoCascadeProcessor

# Register StereoCascadeProcessor in _Analog:
_Analog.StereoCascadeProcessor_swigregister(StereoCascadeProcessor)

class MonoFXProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _Analog.MonoFXProcessor_getType(self)

    def ProcessBlock(self, n, inputs, outputs):
        return _Analog.MonoFXProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Analog.delete_MonoFXProcessor

# Register MonoFXProcessor in _Analog:
_Analog.MonoFXProcessor_swigregister(MonoFXProcessor)

class StereoFXProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _Analog.StereoFXProcessor_getType(self)

    def ProcessBlock(self, n, inputs, outputs):
        return _Analog.StereoFXProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Analog.delete_StereoFXProcessor

# Register StereoFXProcessor in _Analog:
_Analog.StereoFXProcessor_swigregister(StereoFXProcessor)

class GeneratorProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _Analog.GeneratorProcessor_getType(self)

    def Tick(self, I=0, A=0, X=0, Y=0):
        return _Analog.GeneratorProcessor_Tick(self, I, A, X, Y)

    def Generate(self, n, output):
        return _Analog.GeneratorProcessor_Generate(self, n, output)

    def ProcessBlock(self, n, _in, out):
        return _Analog.GeneratorProcessor_ProcessBlock(self, n, _in, out)
    __swig_destroy__ = _Analog.delete_GeneratorProcessor

# Register GeneratorProcessor in _Analog:
_Analog.GeneratorProcessor_swigregister(GeneratorProcessor)

class MixerProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.MixerProcessor_swiginit(self, _Analog.new_MixerProcessor())

    def getType(self):
        return _Analog.MixerProcessor_getType(self)

    def ProcessBlock(self, *args):
        return _Analog.MixerProcessor_ProcessBlock(self, *args)
    __swig_destroy__ = _Analog.delete_MixerProcessor

# Register MixerProcessor in _Analog:
_Analog.MixerProcessor_swigregister(MixerProcessor)

class FunctionProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _Analog.FunctionProcessor_getType(self)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Analog.FunctionProcessor_Tick(self, I, A, X, Y)

    def ProcessBlock(self, n, input, output):
        return _Analog.FunctionProcessor_ProcessBlock(self, n, input, output)
    __swig_destroy__ = _Analog.delete_FunctionProcessor

# Register FunctionProcessor in _Analog:
_Analog.FunctionProcessor_swigregister(FunctionProcessor)

class Parameter2Processor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _Analog.Parameter2Processor_getType(self)

    def Tick(self, a, b):
        return _Analog.Parameter2Processor_Tick(self, a, b)

    def ProcessBlock(self, n, x, y, output):
        return _Analog.Parameter2Processor_ProcessBlock(self, n, x, y, output)
    __swig_destroy__ = _Analog.delete_Parameter2Processor

# Register Parameter2Processor in _Analog:
_Analog.Parameter2Processor_swigregister(Parameter2Processor)

class StereoSplitterProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _Analog.StereoSplitterProcessor_getType(self)

    def Tick(self, _in, a, b):
        return _Analog.StereoSplitterProcessor_Tick(self, _in, a, b)

    def ProcessBlock(self, n, _in, a, b):
        return _Analog.StereoSplitterProcessor_ProcessBlock(self, n, _in, a, b)
    __swig_destroy__ = _Analog.delete_StereoSplitterProcessor

# Register StereoSplitterProcessor in _Analog:
_Analog.StereoSplitterProcessor_swigregister(StereoSplitterProcessor)

class OscillatorProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    slaves = property(_Analog.OscillatorProcessor_slaves_get, _Analog.OscillatorProcessor_slaves_set)
    m_waveform = property(_Analog.OscillatorProcessor_m_waveform_get, _Analog.OscillatorProcessor_m_waveform_set)
    m_morph = property(_Analog.OscillatorProcessor_m_morph_get, _Analog.OscillatorProcessor_m_morph_set)
    m_freq = property(_Analog.OscillatorProcessor_m_freq_get, _Analog.OscillatorProcessor_m_freq_set)
    m_phase = property(_Analog.OscillatorProcessor_m_phase_get, _Analog.OscillatorProcessor_m_phase_set)
    m_index = property(_Analog.OscillatorProcessor_m_index_get, _Analog.OscillatorProcessor_m_index_set)
    m_gain = property(_Analog.OscillatorProcessor_m_gain_get, _Analog.OscillatorProcessor_m_gain_set)
    m_fm = property(_Analog.OscillatorProcessor_m_fm_get, _Analog.OscillatorProcessor_m_fm_set)
    m_pm = property(_Analog.OscillatorProcessor_m_pm_get, _Analog.OscillatorProcessor_m_pm_set)
    m_fenv = property(_Analog.OscillatorProcessor_m_fenv_get, _Analog.OscillatorProcessor_m_fenv_set)
    m_penv = property(_Analog.OscillatorProcessor_m_penv_get, _Analog.OscillatorProcessor_m_penv_set)
    m_drift = property(_Analog.OscillatorProcessor_m_drift_get, _Analog.OscillatorProcessor_m_drift_set)
    m_mod = property(_Analog.OscillatorProcessor_m_mod_get, _Analog.OscillatorProcessor_m_mod_set)
    m_cmod = property(_Analog.OscillatorProcessor_m_cmod_get, _Analog.OscillatorProcessor_m_cmod_set)
    m_env = property(_Analog.OscillatorProcessor_m_env_get, _Analog.OscillatorProcessor_m_env_set)
    m_lfo = property(_Analog.OscillatorProcessor_m_lfo_get, _Analog.OscillatorProcessor_m_lfo_set)
    m_pwm = property(_Analog.OscillatorProcessor_m_pwm_get, _Analog.OscillatorProcessor_m_pwm_set)

    def getType(self):
        return _Analog.OscillatorProcessor_getType(self)

    def Tick(self, I=0, A=1, X=0, Y=0):
        return _Analog.OscillatorProcessor_Tick(self, I, A, X, Y)

    def ProcessBlock(self, n, _in, out):
        return _Analog.OscillatorProcessor_ProcessBlock(self, n, _in, out)
    __swig_destroy__ = _Analog.delete_OscillatorProcessor

# Register OscillatorProcessor in _Analog:
_Analog.OscillatorProcessor_swigregister(OscillatorProcessor)

class FilterProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _Analog.FilterProcessor_getType(self)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Analog.FilterProcessor_Tick(self, I, A, X, Y)

    def Run(self, I, A=1, X=0, Y=0):
        return _Analog.FilterProcessor_Run(self, I, A, X, Y)

    def ProcessBlock(self, numSamples, inputs, outputs):
        return _Analog.FilterProcessor_ProcessBlock(self, numSamples, inputs, outputs)
    __swig_destroy__ = _Analog.delete_FilterProcessor

# Register FilterProcessor in _Analog:
_Analog.FilterProcessor_swigregister(FilterProcessor)

class AmplifierProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.AmplifierProcessor_Tick(self, I, A, X, Y)

    def getType(self):
        return _Analog.AmplifierProcessor_getType(self)

    def ProcessBlock(self, numSamples, inputs, outputs):
        return _Analog.AmplifierProcessor_ProcessBlock(self, numSamples, inputs, outputs)
    __swig_destroy__ = _Analog.delete_AmplifierProcessor

# Register AmplifierProcessor in _Analog:
_Analog.AmplifierProcessor_swigregister(AmplifierProcessor)

class StereoOscillatorProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    osc = property(_Analog.StereoOscillatorProcessor_osc_get, _Analog.StereoOscillatorProcessor_osc_set)

    def __init__(self, o):
        _Analog.StereoOscillatorProcessor_swiginit(self, _Analog.new_StereoOscillatorProcessor(o))

    def getType(self):
        return _Analog.StereoOscillatorProcessor_getType(self)

    def setPan(self, p):
        return _Analog.StereoOscillatorProcessor_setPan(self, p)

    def ProcessBlock(self, n, out):
        return _Analog.StereoOscillatorProcessor_ProcessBlock(self, n, out)

    def Tick(self, iL, iR, L, R, A=1, X=1, Y=1):
        return _Analog.StereoOscillatorProcessor_Tick(self, iL, iR, L, R, A, X, Y)
    __swig_destroy__ = _Analog.delete_StereoOscillatorProcessor

# Register StereoOscillatorProcessor in _Analog:
_Analog.StereoOscillatorProcessor_swigregister(StereoOscillatorProcessor)

class StereoGeneratorProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    osc = property(_Analog.StereoGeneratorProcessor_osc_get, _Analog.StereoGeneratorProcessor_osc_set)

    def __init__(self, o):
        _Analog.StereoGeneratorProcessor_swiginit(self, _Analog.new_StereoGeneratorProcessor(o))

    def getType(self):
        return _Analog.StereoGeneratorProcessor_getType(self)

    def setPan(self, p):
        return _Analog.StereoGeneratorProcessor_setPan(self, p)

    def Tick(self, iL, iR, L, R, A=1, X=1, Y=1):
        return _Analog.StereoGeneratorProcessor_Tick(self, iL, iR, L, R, A, X, Y)

    def ProcessBlock(self, n, out):
        return _Analog.StereoGeneratorProcessor_ProcessBlock(self, n, out)
    __swig_destroy__ = _Analog.delete_StereoGeneratorProcessor

# Register StereoGeneratorProcessor in _Analog:
_Analog.StereoGeneratorProcessor_swigregister(StereoGeneratorProcessor)

class StereoFunctionProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filter = property(_Analog.StereoFunctionProcessor_filter_get, _Analog.StereoFunctionProcessor_filter_set)

    def __init__(self, L, R):
        _Analog.StereoFunctionProcessor_swiginit(self, _Analog.new_StereoFunctionProcessor(L, R))

    def getType(self):
        return _Analog.StereoFunctionProcessor_getType(self)

    def ProcessBlock(self, n, _in, out):
        return _Analog.StereoFunctionProcessor_ProcessBlock(self, n, _in, out)

    def Tick(self, iL, iR, L, R, A=1, X=1, Y=1):
        return _Analog.StereoFunctionProcessor_Tick(self, iL, iR, L, R, A, X, Y)
    __swig_destroy__ = _Analog.delete_StereoFunctionProcessor

# Register StereoFunctionProcessor in _Analog:
_Analog.StereoFunctionProcessor_swigregister(StereoFunctionProcessor)

class StereoFilterProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filter = property(_Analog.StereoFilterProcessor_filter_get, _Analog.StereoFilterProcessor_filter_set)

    def __init__(self, L, R):
        _Analog.StereoFilterProcessor_swiginit(self, _Analog.new_StereoFilterProcessor(L, R))

    def getType(self):
        return _Analog.StereoFilterProcessor_getType(self)

    def ProcessBlock(self, n, _in, out):
        return _Analog.StereoFilterProcessor_ProcessBlock(self, n, _in, out)

    def Tick(self, iL, iR, L, R, A=1, X=1, Y=1):
        return _Analog.StereoFilterProcessor_Tick(self, iL, iR, L, R, A, X, Y)
    __swig_destroy__ = _Analog.delete_StereoFilterProcessor

# Register StereoFilterProcessor in _Analog:
_Analog.StereoFilterProcessor_swigregister(StereoFilterProcessor)

class StereoAmplifierProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    amp = property(_Analog.StereoAmplifierProcessor_amp_get, _Analog.StereoAmplifierProcessor_amp_set)

    def __init__(self, L, R):
        _Analog.StereoAmplifierProcessor_swiginit(self, _Analog.new_StereoAmplifierProcessor(L, R))

    def getType(self):
        return _Analog.StereoAmplifierProcessor_getType(self)

    def ProcessBlock(self, n, _in, out):
        return _Analog.StereoAmplifierProcessor_ProcessBlock(self, n, _in, out)

    def Tick(self, iL, iR, L, R, A=0, X=0, Y=0):
        return _Analog.StereoAmplifierProcessor_Tick(self, iL, iR, L, R, A, X, Y)
    __swig_destroy__ = _Analog.delete_StereoAmplifierProcessor

# Register StereoAmplifierProcessor in _Analog:
_Analog.StereoAmplifierProcessor_swigregister(StereoAmplifierProcessor)

class SpectrumProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getType(self):
        return _Analog.SpectrumProcessor_getType(self)

    def __init__(self):
        _Analog.SpectrumProcessor_swiginit(self, _Analog.new_SpectrumProcessor())
    __swig_destroy__ = _Analog.delete_SpectrumProcessor

# Register SpectrumProcessor in _Analog:
_Analog.SpectrumProcessor_swigregister(SpectrumProcessor)

class SignalSourceProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Analog.delete_SignalSourceProcessor

# Register SignalSourceProcessor in _Analog:
_Analog.SignalSourceProcessor_swigregister(SignalSourceProcessor)

class SignalSinkProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Analog.delete_SignalSinkProcessor

# Register SignalSinkProcessor in _Analog:
_Analog.SignalSinkProcessor_swigregister(SignalSinkProcessor)

class MonoOversampleProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getType(self):
        return _Analog.MonoOversampleProcessor_getType(self)

    def __init__(self):
        _Analog.MonoOversampleProcessor_swiginit(self, _Analog.new_MonoOversampleProcessor())
    __swig_destroy__ = _Analog.delete_MonoOversampleProcessor

# Register MonoOversampleProcessor in _Analog:
_Analog.MonoOversampleProcessor_swigregister(MonoOversampleProcessor)

class MonoUpsampleProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getType(self):
        return _Analog.MonoUpsampleProcessor_getType(self)

    def __init__(self):
        _Analog.MonoUpsampleProcessor_swiginit(self, _Analog.new_MonoUpsampleProcessor())
    __swig_destroy__ = _Analog.delete_MonoUpsampleProcessor

# Register MonoUpsampleProcessor in _Analog:
_Analog.MonoUpsampleProcessor_swigregister(MonoUpsampleProcessor)

class MonoDownsampleProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getType(self):
        return _Analog.MonoDownsampleProcessor_getType(self)

    def __init__(self):
        _Analog.MonoDownsampleProcessor_swiginit(self, _Analog.new_MonoDownsampleProcessor())
    __swig_destroy__ = _Analog.delete_MonoDownsampleProcessor

# Register MonoDownsampleProcessor in _Analog:
_Analog.MonoDownsampleProcessor_swigregister(MonoDownsampleProcessor)

class OperatorProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Analog.delete_OperatorProcessor

# Register OperatorProcessor in _Analog:
_Analog.OperatorProcessor_swigregister(OperatorProcessor)

class MonoOperatorProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    list = property(_Analog.MonoOperatorProcessor_list_get, _Analog.MonoOperatorProcessor_list_set)

    def __init__(self):
        _Analog.MonoOperatorProcessor_swiginit(self, _Analog.new_MonoOperatorProcessor())

    def getType(self):
        return _Analog.MonoOperatorProcessor_getType(self)

    def GetSamples(self, p, n, input, output):
        return _Analog.MonoOperatorProcessor_GetSamples(self, p, n, input, output)
    __swig_destroy__ = _Analog.delete_MonoOperatorProcessor

# Register MonoOperatorProcessor in _Analog:
_Analog.MonoOperatorProcessor_swigregister(MonoOperatorProcessor)

class MonoCascadeOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.MonoCascadeOperatorProcessor_swiginit(self, _Analog.new_MonoCascadeOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _Analog.MonoCascadeOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Analog.delete_MonoCascadeOperatorProcessor

# Register MonoCascadeOperatorProcessor in _Analog:
_Analog.MonoCascadeOperatorProcessor_swigregister(MonoCascadeOperatorProcessor)

class MonoMultiplierOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.MonoMultiplierOperatorProcessor_swiginit(self, _Analog.new_MonoMultiplierOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _Analog.MonoMultiplierOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Analog.delete_MonoMultiplierOperatorProcessor

# Register MonoMultiplierOperatorProcessor in _Analog:
_Analog.MonoMultiplierOperatorProcessor_swigregister(MonoMultiplierOperatorProcessor)

class MonoAdderOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.MonoAdderOperatorProcessor_swiginit(self, _Analog.new_MonoAdderOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _Analog.MonoAdderOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Analog.delete_MonoAdderOperatorProcessor

# Register MonoAdderOperatorProcessor in _Analog:
_Analog.MonoAdderOperatorProcessor_swigregister(MonoAdderOperatorProcessor)

class MonoSubtractorOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.MonoSubtractorOperatorProcessor_swiginit(self, _Analog.new_MonoSubtractorOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _Analog.MonoSubtractorOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Analog.delete_MonoSubtractorOperatorProcessor

# Register MonoSubtractorOperatorProcessor in _Analog:
_Analog.MonoSubtractorOperatorProcessor_swigregister(MonoSubtractorOperatorProcessor)

class MonoModulatorOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.MonoModulatorOperatorProcessor_swiginit(self, _Analog.new_MonoModulatorOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _Analog.MonoModulatorOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Analog.delete_MonoModulatorOperatorProcessor

# Register MonoModulatorOperatorProcessor in _Analog:
_Analog.MonoModulatorOperatorProcessor_swigregister(MonoModulatorOperatorProcessor)

class MonoBlendOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    blend = property(_Analog.MonoBlendOperatorProcessor_blend_get, _Analog.MonoBlendOperatorProcessor_blend_set)

    def __init__(self):
        _Analog.MonoBlendOperatorProcessor_swiginit(self, _Analog.new_MonoBlendOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _Analog.MonoBlendOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Analog.delete_MonoBlendOperatorProcessor

# Register MonoBlendOperatorProcessor in _Analog:
_Analog.MonoBlendOperatorProcessor_swigregister(MonoBlendOperatorProcessor)

class BlitSaw(OscillatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frequency=220.0, sampleRate=44100):
        _Analog.BlitSaw_swiginit(self, _Analog.new_BlitSaw(frequency, sampleRate))
    __swig_destroy__ = _Analog.delete_BlitSaw

    def reset(self):
        return _Analog.BlitSaw_reset(self)

    def setFrequency(self, frequency):
        return _Analog.BlitSaw_setFrequency(self, frequency)

    def setHarmonics(self, nHarmonics=0):
        return _Analog.BlitSaw_setHarmonics(self, nHarmonics)

    def setGain(self, g):
        return _Analog.BlitSaw_setGain(self, g)

    def setPhaseOffset(self, o):
        return _Analog.BlitSaw_setPhaseOffset(self, o)

    def getPhase(self):
        return _Analog.BlitSaw_getPhase(self)

    def updateHarmonics(self):
        return _Analog.BlitSaw_updateHarmonics(self)
    PORT_FREQ = _Analog.BlitSaw_PORT_FREQ
    PORT_HARMONICS = _Analog.BlitSaw_PORT_HARMONICS
    PORT_GAIN = _Analog.BlitSaw_PORT_GAIN
    PORT_PHASE = _Analog.BlitSaw_PORT_PHASE

    def setPort(self, port, v):
        return _Analog.BlitSaw_setPort(self, port, v)

    def lastOut(self):
        return _Analog.BlitSaw_lastOut(self)

    def Tick(self, I=1, A=1, X=0, Y=0):
        return _Analog.BlitSaw_Tick(self, I, A, X, Y)
    block = property(_Analog.BlitSaw_block_get, _Analog.BlitSaw_block_set)
    nHarmonics_ = property(_Analog.BlitSaw_nHarmonics__get, _Analog.BlitSaw_nHarmonics__set)
    m_ = property(_Analog.BlitSaw_m__get, _Analog.BlitSaw_m__set)
    rate_ = property(_Analog.BlitSaw_rate__get, _Analog.BlitSaw_rate__set)
    phase_ = property(_Analog.BlitSaw_phase__get, _Analog.BlitSaw_phase__set)
    offset = property(_Analog.BlitSaw_offset_get, _Analog.BlitSaw_offset_set)
    p_ = property(_Analog.BlitSaw_p__get, _Analog.BlitSaw_p__set)
    C2_ = property(_Analog.BlitSaw_C2__get, _Analog.BlitSaw_C2__set)
    a_ = property(_Analog.BlitSaw_a__get, _Analog.BlitSaw_a__set)
    state_ = property(_Analog.BlitSaw_state__get, _Analog.BlitSaw_state__set)
    y = property(_Analog.BlitSaw_y_get, _Analog.BlitSaw_y_set)
    gain = property(_Analog.BlitSaw_gain_get, _Analog.BlitSaw_gain_set)
    sampleRate = property(_Analog.BlitSaw_sampleRate_get, _Analog.BlitSaw_sampleRate_set)

# Register BlitSaw in _Analog:
_Analog.BlitSaw_swigregister(BlitSaw)

class BlitSquare(OscillatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    block = property(_Analog.BlitSquare_block_get, _Analog.BlitSquare_block_set)
    s1 = property(_Analog.BlitSquare_s1_get, _Analog.BlitSquare_s1_set)
    s2 = property(_Analog.BlitSquare_s2_get, _Analog.BlitSquare_s2_set)
    _out = property(_Analog.BlitSquare__out_get, _Analog.BlitSquare__out_set)
    _duty = property(_Analog.BlitSquare__duty_get, _Analog.BlitSquare__duty_set)
    sampleRate = property(_Analog.BlitSquare_sampleRate_get, _Analog.BlitSquare_sampleRate_set)

    def __init__(self, freq=220, sampleRate=44100):
        _Analog.BlitSquare_swiginit(self, _Analog.new_BlitSquare(freq, sampleRate))

    def setFrequency(self, f):
        return _Analog.BlitSquare_setFrequency(self, f)

    def setDuty(self, d):
        return _Analog.BlitSquare_setDuty(self, d)

    def reset(self):
        return _Analog.BlitSquare_reset(self)
    PORT_FREQ = _Analog.BlitSquare_PORT_FREQ
    PORT_DUTY = _Analog.BlitSquare_PORT_DUTY
    PORT_RESET = _Analog.BlitSquare_PORT_RESET

    def setPort(self, port, v):
        return _Analog.BlitSquare_setPort(self, port, v)

    def Tick(self, I=1, A=1, X=0, Y=0):
        return _Analog.BlitSquare_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_BlitSquare

# Register BlitSquare in _Analog:
_Analog.BlitSquare_swigregister(BlitSquare)

class BlitTriangle(OscillatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    b1 = property(_Analog.BlitTriangle_b1_get, _Analog.BlitTriangle_b1_set)
    b2 = property(_Analog.BlitTriangle_b2_get, _Analog.BlitTriangle_b2_set)
    s1 = property(_Analog.BlitTriangle_s1_get, _Analog.BlitTriangle_s1_set)
    _out = property(_Analog.BlitTriangle__out_get, _Analog.BlitTriangle__out_set)
    sampleRate = property(_Analog.BlitTriangle_sampleRate_get, _Analog.BlitTriangle_sampleRate_set)

    def __init__(self, freq=220.0, sampleRate=44100):
        _Analog.BlitTriangle_swiginit(self, _Analog.new_BlitTriangle(freq, sampleRate))

    def setFrequency(self, f):
        return _Analog.BlitTriangle_setFrequency(self, f)

    def setDuty(self, d):
        return _Analog.BlitTriangle_setDuty(self, d)

    def reset(self):
        return _Analog.BlitTriangle_reset(self)
    PORT_FREQ = _Analog.BlitTriangle_PORT_FREQ
    PORT_DUTY = _Analog.BlitTriangle_PORT_DUTY
    PORT_RESET = _Analog.BlitTriangle_PORT_RESET

    def setPort(self, port, v):
        return _Analog.BlitTriangle_setPort(self, port, v)

    def Tick(self, I=1, A=1, X=0, Y=0):
        return _Analog.BlitTriangle_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_BlitTriangle

# Register BlitTriangle in _Analog:
_Analog.BlitTriangle_swigregister(BlitTriangle)


def BlitDSF(phase, m, p, a):
    return _Analog.BlitDSF(phase, m, p, a)
class blitSaw(OscillatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    block = property(_Analog.blitSaw_block_get, _Analog.blitSaw_block_set)
    nHarmonics_ = property(_Analog.blitSaw_nHarmonics__get, _Analog.blitSaw_nHarmonics__set)
    m_ = property(_Analog.blitSaw_m__get, _Analog.blitSaw_m__set)
    rate_ = property(_Analog.blitSaw_rate__get, _Analog.blitSaw_rate__set)
    phase_ = property(_Analog.blitSaw_phase__get, _Analog.blitSaw_phase__set)
    offset = property(_Analog.blitSaw_offset_get, _Analog.blitSaw_offset_set)
    p_ = property(_Analog.blitSaw_p__get, _Analog.blitSaw_p__set)
    C2_ = property(_Analog.blitSaw_C2__get, _Analog.blitSaw_C2__set)
    a_ = property(_Analog.blitSaw_a__get, _Analog.blitSaw_a__set)
    state_ = property(_Analog.blitSaw_state__get, _Analog.blitSaw_state__set)
    y = property(_Analog.blitSaw_y_get, _Analog.blitSaw_y_set)
    sampleRate = property(_Analog.blitSaw_sampleRate_get, _Analog.blitSaw_sampleRate_set)

    def __init__(self, sampleRate=44100.0, frequency=440.0):
        _Analog.blitSaw_swiginit(self, _Analog.new_blitSaw(sampleRate, frequency))

    def reset(self):
        return _Analog.blitSaw_reset(self)

    def setFrequency(self, frequency):
        return _Analog.blitSaw_setFrequency(self, frequency)

    def setHarmonics(self, nHarmonics=0):
        return _Analog.blitSaw_setHarmonics(self, nHarmonics)

    def getPhase(self):
        return _Analog.blitSaw_getPhase(self)

    def setPhaseOffset(self, o):
        return _Analog.blitSaw_setPhaseOffset(self, o)

    def updateHarmonics(self):
        return _Analog.blitSaw_updateHarmonics(self)
    PORT_FREQ = _Analog.blitSaw_PORT_FREQ
    PORT_HARMONICS = _Analog.blitSaw_PORT_HARMONICS
    PORT_PHASE = _Analog.blitSaw_PORT_PHASE

    def setPort(self, port, v):
        return _Analog.blitSaw_setPort(self, port, v)

    def lastOut(self):
        return _Analog.blitSaw_lastOut(self)

    def Tick(self, I=1, A=1, X=0, Y=0):
        return _Analog.blitSaw_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_blitSaw

# Register blitSaw in _Analog:
_Analog.blitSaw_swigregister(blitSaw)

class blitSquare(OscillatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    block = property(_Analog.blitSquare_block_get, _Analog.blitSquare_block_set)
    nHarmonics_ = property(_Analog.blitSquare_nHarmonics__get, _Analog.blitSquare_nHarmonics__set)
    m_ = property(_Analog.blitSquare_m__get, _Analog.blitSquare_m__set)
    f = property(_Analog.blitSquare_f_get, _Analog.blitSquare_f_set)
    rate_ = property(_Analog.blitSquare_rate__get, _Analog.blitSquare_rate__set)
    phase_ = property(_Analog.blitSquare_phase__get, _Analog.blitSquare_phase__set)
    offset = property(_Analog.blitSquare_offset_get, _Analog.blitSquare_offset_set)
    p_ = property(_Analog.blitSquare_p__get, _Analog.blitSquare_p__set)
    C2_ = property(_Analog.blitSquare_C2__get, _Analog.blitSquare_C2__set)
    a_ = property(_Analog.blitSquare_a__get, _Analog.blitSquare_a__set)
    state_ = property(_Analog.blitSquare_state__get, _Analog.blitSquare_state__set)
    y = property(_Analog.blitSquare_y_get, _Analog.blitSquare_y_set)
    D = property(_Analog.blitSquare_D_get, _Analog.blitSquare_D_set)
    sampleRate = property(_Analog.blitSquare_sampleRate_get, _Analog.blitSquare_sampleRate_set)

    def __init__(self, sampleRate=44100.0, frequency=440.0):
        _Analog.blitSquare_swiginit(self, _Analog.new_blitSquare(sampleRate, frequency))

    def reset(self):
        return _Analog.blitSquare_reset(self)

    def setFrequency(self, frequency):
        return _Analog.blitSquare_setFrequency(self, frequency)

    def setHarmonics(self, nHarmonics=0):
        return _Analog.blitSquare_setHarmonics(self, nHarmonics)

    def setDuty(self, d):
        return _Analog.blitSquare_setDuty(self, d)

    def getPhase(self):
        return _Analog.blitSquare_getPhase(self)

    def setPhaseOffset(self, o):
        return _Analog.blitSquare_setPhaseOffset(self, o)

    def updateHarmonics(self):
        return _Analog.blitSquare_updateHarmonics(self)
    PORT_FREQ = _Analog.blitSquare_PORT_FREQ
    PORT_HARMONICS = _Analog.blitSquare_PORT_HARMONICS
    PORT_PHASE = _Analog.blitSquare_PORT_PHASE

    def setPort(self, port, v):
        return _Analog.blitSquare_setPort(self, port, v)

    def lastOut(self):
        return _Analog.blitSquare_lastOut(self)

    def Tick(self, I=1, A=1, X=0, Y=0):
        return _Analog.blitSquare_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_blitSquare

# Register blitSquare in _Analog:
_Analog.blitSquare_swigregister(blitSquare)

class blitTriangle(OscillatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sqr = property(_Analog.blitTriangle_sqr_get, _Analog.blitTriangle_sqr_set)
    b1 = property(_Analog.blitTriangle_b1_get, _Analog.blitTriangle_b1_set)
    sampleRate = property(_Analog.blitTriangle_sampleRate_get, _Analog.blitTriangle_sampleRate_set)
    triangle = property(_Analog.blitTriangle_triangle_get, _Analog.blitTriangle_triangle_set)

    def __init__(self, sampleRate=44100.0, frequency=440.0):
        _Analog.blitTriangle_swiginit(self, _Analog.new_blitTriangle(sampleRate, frequency))

    def reset(self):
        return _Analog.blitTriangle_reset(self)

    def setDuty(self, d):
        return _Analog.blitTriangle_setDuty(self, d)

    def setFrequency(self, f):
        return _Analog.blitTriangle_setFrequency(self, f)
    PORT_FREQ = _Analog.blitTriangle_PORT_FREQ
    PORT_DUTY = _Analog.blitTriangle_PORT_DUTY
    PORT_RESET = _Analog.blitTriangle_PORT_RESET
    PORT_HARMONICS = _Analog.blitTriangle_PORT_HARMONICS
    PORT_PHASE = _Analog.blitTriangle_PORT_PHASE

    def setPort(self, port, v):
        return _Analog.blitTriangle_setPort(self, port, v)

    def Tick(self, I=1, A=1, X=1, Y=1):
        return _Analog.blitTriangle_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_blitTriangle

# Register blitTriangle in _Analog:
_Analog.blitTriangle_swigregister(blitTriangle)

class DPWSaw(OscillatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    freq = property(_Analog.DPWSaw_freq_get, _Analog.DPWSaw_freq_set)
    fs = property(_Analog.DPWSaw_fs_get, _Analog.DPWSaw_fs_set)
    inc = property(_Analog.DPWSaw_inc_get, _Analog.DPWSaw_inc_set)
    phase = property(_Analog.DPWSaw_phase_get, _Analog.DPWSaw_phase_set)
    lastPhase = property(_Analog.DPWSaw_lastPhase_get, _Analog.DPWSaw_lastPhase_set)
    lastValue = property(_Analog.DPWSaw_lastValue_get, _Analog.DPWSaw_lastValue_set)
    position = property(_Analog.DPWSaw_position_get, _Analog.DPWSaw_position_set)
    scaleFactor = property(_Analog.DPWSaw_scaleFactor_get, _Analog.DPWSaw_scaleFactor_set)

    def __init__(self, sampleRate=44100):
        _Analog.DPWSaw_swiginit(self, _Analog.new_DPWSaw(sampleRate))

    def setFrequency(self, f):
        return _Analog.DPWSaw_setFrequency(self, f)
    PORT_FREQ = _Analog.DPWSaw_PORT_FREQ

    def setPort(self, port, v):
        return _Analog.DPWSaw_setPort(self, port, v)

    def Tick(self, I=1, A=1, X=1, Y=1):
        return _Analog.DPWSaw_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_DPWSaw

# Register DPWSaw in _Analog:
_Analog.DPWSaw_swigregister(DPWSaw)

class DPWPulse(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    freq = property(_Analog.DPWPulse_freq_get, _Analog.DPWPulse_freq_set)
    fs = property(_Analog.DPWPulse_fs_get, _Analog.DPWPulse_fs_set)
    inc = property(_Analog.DPWPulse_inc_get, _Analog.DPWPulse_inc_set)
    phase = property(_Analog.DPWPulse_phase_get, _Analog.DPWPulse_phase_set)
    lastPhase = property(_Analog.DPWPulse_lastPhase_get, _Analog.DPWPulse_lastPhase_set)
    lastValueA = property(_Analog.DPWPulse_lastValueA_get, _Analog.DPWPulse_lastValueA_set)
    lastValueB = property(_Analog.DPWPulse_lastValueB_get, _Analog.DPWPulse_lastValueB_set)
    position = property(_Analog.DPWPulse_position_get, _Analog.DPWPulse_position_set)
    positionA = property(_Analog.DPWPulse_positionA_get, _Analog.DPWPulse_positionA_set)
    positionB = property(_Analog.DPWPulse_positionB_get, _Analog.DPWPulse_positionB_set)
    scaleFactor = property(_Analog.DPWPulse_scaleFactor_get, _Analog.DPWPulse_scaleFactor_set)
    invSampleRate = property(_Analog.DPWPulse_invSampleRate_get, _Analog.DPWPulse_invSampleRate_set)

    def __init__(self, sampleRate=44100):
        _Analog.DPWPulse_swiginit(self, _Analog.new_DPWPulse(sampleRate))

    def setFrequency(self, f):
        return _Analog.DPWPulse_setFrequency(self, f)

    def setDuty(self, d):
        return _Analog.DPWPulse_setDuty(self, d)
    PORT_FREQ = _Analog.DPWPulse_PORT_FREQ
    PORT_DUTY = _Analog.DPWPulse_PORT_DUTY

    def setPort(self, port, v):
        return _Analog.DPWPulse_setPort(self, port, v)

    def Tick(self, I=1, A=1, X=0, Y=0):
        return _Analog.DPWPulse_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_DPWPulse

# Register DPWPulse in _Analog:
_Analog.DPWPulse_swigregister(DPWPulse)

class DPWTriangle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    freq = property(_Analog.DPWTriangle_freq_get, _Analog.DPWTriangle_freq_set)
    fs = property(_Analog.DPWTriangle_fs_get, _Analog.DPWTriangle_fs_set)
    inc = property(_Analog.DPWTriangle_inc_get, _Analog.DPWTriangle_inc_set)
    phase = property(_Analog.DPWTriangle_phase_get, _Analog.DPWTriangle_phase_set)
    lastPhase = property(_Analog.DPWTriangle_lastPhase_get, _Analog.DPWTriangle_lastPhase_set)
    lastValue = property(_Analog.DPWTriangle_lastValue_get, _Analog.DPWTriangle_lastValue_set)
    position = property(_Analog.DPWTriangle_position_get, _Analog.DPWTriangle_position_set)
    scaleFactor = property(_Analog.DPWTriangle_scaleFactor_get, _Analog.DPWTriangle_scaleFactor_set)
    invSampleRate = property(_Analog.DPWTriangle_invSampleRate_get, _Analog.DPWTriangle_invSampleRate_set)

    def __init__(self, sampleRate=44100):
        _Analog.DPWTriangle_swiginit(self, _Analog.new_DPWTriangle(sampleRate))

    def setFrequency(self, f):
        return _Analog.DPWTriangle_setFrequency(self, f)

    def setDuty(self, d):
        return _Analog.DPWTriangle_setDuty(self, d)
    PORT_FREQ = _Analog.DPWTriangle_PORT_FREQ
    PORT_DUTY = _Analog.DPWTriangle_PORT_DUTY

    def setPort(self, port, v):
        return _Analog.DPWTriangle_setPort(self, port, v)

    def Tick(self, I=1, A=1, X=1, Y=1):
        return _Analog.DPWTriangle_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_DPWTriangle

# Register DPWTriangle in _Analog:
_Analog.DPWTriangle_swigregister(DPWTriangle)

KTABLE = _Analog.KTABLE
OT_SAW = _Analog.OT_SAW
OT_RSAW = _Analog.OT_RSAW
OT_SQUARE = _Analog.OT_SQUARE
OT_TRIANGLE = _Analog.OT_TRIANGLE
class osc_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    f = property(_Analog.osc_t_f_get, _Analog.osc_t_f_set)
    p = property(_Analog.osc_t_p_get, _Analog.osc_t_p_set)
    v = property(_Analog.osc_t_v_get, _Analog.osc_t_v_set)
    triangle = property(_Analog.osc_t_triangle_get, _Analog.osc_t_triangle_set)
    saw = property(_Analog.osc_t_saw_get, _Analog.osc_t_saw_set)
    rsaw = property(_Analog.osc_t_rsaw_get, _Analog.osc_t_rsaw_set)
    square = property(_Analog.osc_t_square_get, _Analog.osc_t_square_set)
    sine = property(_Analog.osc_t_sine_get, _Analog.osc_t_sine_set)
    bSync = property(_Analog.osc_t_bSync_get, _Analog.osc_t_bSync_set)
    fSync = property(_Analog.osc_t_fSync_get, _Analog.osc_t_fSync_set)
    fPWM = property(_Analog.osc_t_fPWM_get, _Analog.osc_t_fPWM_set)
    s_rate = property(_Analog.osc_t_s_rate_get, _Analog.osc_t_s_rate_set)
    type = property(_Analog.osc_t_type_get, _Analog.osc_t_type_set)
    buffer = property(_Analog.osc_t_buffer_get, _Analog.osc_t_buffer_set)
    cBuffer = property(_Analog.osc_t_cBuffer_get, _Analog.osc_t_cBuffer_set)
    iBuffer = property(_Analog.osc_t_iBuffer_get, _Analog.osc_t_iBuffer_set)
    nInit = property(_Analog.osc_t_nInit_get, _Analog.osc_t_nInit_set)

    def __init__(self):
        _Analog.osc_t_swiginit(self, _Analog.new_osc_t())
    __swig_destroy__ = _Analog.delete_osc_t

# Register osc_t in _Analog:
_Analog.osc_t_swigregister(osc_t)
cvar = _Analog.cvar
minBlep_Table = cvar.minBlep_Table

class minBLEP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sampleRate):
        _Analog.minBLEP_swiginit(self, _Analog.new_minBLEP(sampleRate))
    __swig_destroy__ = _Analog.delete_minBLEP

    def setFrequency(self, f):
        return _Analog.minBLEP_setFrequency(self, f)

    def setWaveform(self, type):
        return _Analog.minBLEP_setWaveform(self, type)

    def Tick(self, I=0, A=1, X=0, Y=0):
        return _Analog.minBLEP_Tick(self, I, A, X, Y)

    def syncSlave(self):
        return _Analog.minBLEP_syncSlave(self)

    def setSlave(self, o):
        return _Analog.minBLEP_setSlave(self, o)

    def blepInit(self, v):
        return _Analog.minBLEP_blepInit(self, v)
    block = property(_Analog.minBLEP_block_get, _Analog.minBLEP_block_set)
    fc = property(_Analog.minBLEP_fc_get, _Analog.minBLEP_fc_set)
    sr = property(_Analog.minBLEP_sr_get, _Analog.minBLEP_sr_set)
    lpO = property(_Analog.minBLEP_lpO_get, _Analog.minBLEP_lpO_set)
    lpS = property(_Analog.minBLEP_lpS_get, _Analog.minBLEP_lpS_set)

    def osc_Play(self, lpO):
        return _Analog.minBLEP_osc_Play(self, lpO)

    def osc_AddBLEP(self, lpO, offset, amp):
        return _Analog.minBLEP_osc_AddBLEP(self, lpO, offset, amp)

    def osc_Create(self, rate):
        return _Analog.minBLEP_osc_Create(self, rate)

    def osc_Free(self, lp):
        return _Analog.minBLEP_osc_Free(self, lp)

# Register minBLEP in _Analog:
_Analog.minBLEP_swigregister(minBLEP)

class PolyBLEP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SINE = _Analog.PolyBLEP_SINE
    COSINE = _Analog.PolyBLEP_COSINE
    TRIANGLE = _Analog.PolyBLEP_TRIANGLE
    SQUARE = _Analog.PolyBLEP_SQUARE
    RECTANGLE = _Analog.PolyBLEP_RECTANGLE
    SAWTOOTH = _Analog.PolyBLEP_SAWTOOTH
    RAMP = _Analog.PolyBLEP_RAMP
    MODIFIED_TRIANGLE = _Analog.PolyBLEP_MODIFIED_TRIANGLE
    MODIFIED_SQUARE = _Analog.PolyBLEP_MODIFIED_SQUARE
    HALF_WAVE_RECTIFIED_SINE = _Analog.PolyBLEP_HALF_WAVE_RECTIFIED_SINE
    FULL_WAVE_RECTIFIED_SINE = _Analog.PolyBLEP_FULL_WAVE_RECTIFIED_SINE
    TRIANGULAR_PULSE = _Analog.PolyBLEP_TRIANGULAR_PULSE
    TRAPEZOID_FIXED = _Analog.PolyBLEP_TRAPEZOID_FIXED
    TRAPEZOID_VARIABLE = _Analog.PolyBLEP_TRAPEZOID_VARIABLE
    waveform = property(_Analog.PolyBLEP_waveform_get, _Analog.PolyBLEP_waveform_set)
    sampleRate = property(_Analog.PolyBLEP_sampleRate_get, _Analog.PolyBLEP_sampleRate_set)
    freqInSecondsPerSample = property(_Analog.PolyBLEP_freqInSecondsPerSample_get, _Analog.PolyBLEP_freqInSecondsPerSample_set)
    amplitude = property(_Analog.PolyBLEP_amplitude_get, _Analog.PolyBLEP_amplitude_set)
    pulseWidth = property(_Analog.PolyBLEP_pulseWidth_get, _Analog.PolyBLEP_pulseWidth_set)
    t = property(_Analog.PolyBLEP_t_get, _Analog.PolyBLEP_t_set)

    def __init__(self, *args):
        _Analog.PolyBLEP_swiginit(self, _Analog.new_PolyBLEP(*args))
    __swig_destroy__ = _Analog.delete_PolyBLEP

    def setFrequency(self, freqInHz):
        return _Analog.PolyBLEP_setFrequency(self, freqInHz)

    def setSampleRate(self, sampleRate):
        return _Analog.PolyBLEP_setSampleRate(self, sampleRate)

    def setWaveform(self, waveform):
        return _Analog.PolyBLEP_setWaveform(self, waveform)

    def setPhase(self, p):
        return _Analog.PolyBLEP_setPhase(self, p)

    def getPhase(self):
        return _Analog.PolyBLEP_getPhase(self)

    def setPulseWidth(self, pw):
        return _Analog.PolyBLEP_setPulseWidth(self, pw)
    PORT_FREQ = _Analog.PolyBLEP_PORT_FREQ
    PORT_WAVEFORM = _Analog.PolyBLEP_PORT_WAVEFORM
    PORT_PHASE = _Analog.PolyBLEP_PORT_PHASE
    PORT_PULSEWIDTH = _Analog.PolyBLEP_PORT_PULSEWIDTH

    def setPort(self, port, v):
        return _Analog.PolyBLEP_setPort(self, port, v)

    def get(self):
        return _Analog.PolyBLEP_get(self)

    def Tick(self, I=1, A=1, X=0, Y=0):
        return _Analog.PolyBLEP_Tick(self, I, A, X, Y)

    def inc(self):
        return _Analog.PolyBLEP_inc(self)

    def getAndInc(self):
        return _Analog.PolyBLEP_getAndInc(self)

    def getFreqInHz(self):
        return _Analog.PolyBLEP_getFreqInHz(self)

    def sync(self, phase):
        return _Analog.PolyBLEP_sync(self, phase)

    def setdt(self, time):
        return _Analog.PolyBLEP_setdt(self, time)

    def sin(self):
        return _Analog.PolyBLEP_sin(self)

    def cos(self):
        return _Analog.PolyBLEP_cos(self)

    def half(self):
        return _Analog.PolyBLEP_half(self)

    def full(self):
        return _Analog.PolyBLEP_full(self)

    def tri(self):
        return _Analog.PolyBLEP_tri(self)

    def tri2(self):
        return _Analog.PolyBLEP_tri2(self)

    def trip(self):
        return _Analog.PolyBLEP_trip(self)

    def trap(self):
        return _Analog.PolyBLEP_trap(self)

    def trap2(self):
        return _Analog.PolyBLEP_trap2(self)

    def sqr(self):
        return _Analog.PolyBLEP_sqr(self)

    def sqr2(self):
        return _Analog.PolyBLEP_sqr2(self)

    def rect(self):
        return _Analog.PolyBLEP_rect(self)

    def saw(self):
        return _Analog.PolyBLEP_saw(self)

    def ramp(self):
        return _Analog.PolyBLEP_ramp(self)

# Register PolyBLEP in _Analog:
_Analog.PolyBLEP_swigregister(PolyBLEP)

class AnalogSVF(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fc = property(_Analog.AnalogSVF_fc_get, _Analog.AnalogSVF_fc_set)
    fs = property(_Analog.AnalogSVF_fs_get, _Analog.AnalogSVF_fs_set)
    q = property(_Analog.AnalogSVF_q_get, _Analog.AnalogSVF_q_set)
    K = property(_Analog.AnalogSVF_K_get, _Analog.AnalogSVF_K_set)
    lp = property(_Analog.AnalogSVF_lp_get, _Analog.AnalogSVF_lp_set)
    hp = property(_Analog.AnalogSVF_hp_get, _Analog.AnalogSVF_hp_set)
    bp = property(_Analog.AnalogSVF_bp_get, _Analog.AnalogSVF_bp_set)
    ubp = property(_Analog.AnalogSVF_ubp_get, _Analog.AnalogSVF_ubp_set)
    shelf = property(_Analog.AnalogSVF_shelf_get, _Analog.AnalogSVF_shelf_set)
    notch = property(_Analog.AnalogSVF_notch_get, _Analog.AnalogSVF_notch_set)
    apf = property(_Analog.AnalogSVF_apf_get, _Analog.AnalogSVF_apf_set)
    peak = property(_Analog.AnalogSVF_peak_get, _Analog.AnalogSVF_peak_set)
    z1 = property(_Analog.AnalogSVF_z1_get, _Analog.AnalogSVF_z1_set)
    z2 = property(_Analog.AnalogSVF_z2_get, _Analog.AnalogSVF_z2_set)
    minC = property(_Analog.AnalogSVF_minC_get, _Analog.AnalogSVF_minC_set)
    maxC = property(_Analog.AnalogSVF_maxC_get, _Analog.AnalogSVF_maxC_set)
    gain = property(_Analog.AnalogSVF_gain_get, _Analog.AnalogSVF_gain_set)
    LP = _Analog.AnalogSVF_LP
    HP = _Analog.AnalogSVF_HP
    BP = _Analog.AnalogSVF_BP
    UBP = _Analog.AnalogSVF_UBP
    SHELF = _Analog.AnalogSVF_SHELF
    NOTCH = _Analog.AnalogSVF_NOTCH
    APF = _Analog.AnalogSVF_APF
    PEAK = _Analog.AnalogSVF_PEAK
    type = property(_Analog.AnalogSVF_type_get, _Analog.AnalogSVF_type_set)

    def __init__(self, Fs, Fc, Q):
        _Analog.AnalogSVF_swiginit(self, _Analog.new_AnalogSVF(Fs, Fc, Q))

    def setCutoff(self, f):
        return _Analog.AnalogSVF_setCutoff(self, f)

    def setQ(self, Q):
        return _Analog.AnalogSVF_setQ(self, Q)
    PORT_CUTOFF = _Analog.AnalogSVF_PORT_CUTOFF
    PORT_Q = _Analog.AnalogSVF_PORT_Q
    PORT_TYPE = _Analog.AnalogSVF_PORT_TYPE
    PORT_GAIN = _Analog.AnalogSVF_PORT_GAIN
    PORT_MINC = _Analog.AnalogSVF_PORT_MINC
    PORT_MAXC = _Analog.AnalogSVF_PORT_MAXC

    def setPort(self, port, v):
        return _Analog.AnalogSVF_setPort(self, port, v)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.AnalogSVF_Tick(self, I, A, X, Y)

    def ProcessBlock(self, n, input, output, A=None, X=None, Y=None):
        return _Analog.AnalogSVF_ProcessBlock(self, n, input, output, A, X, Y)

    def InplaceProcess(self, n, input, A=None, X=None, Y=None):
        return _Analog.AnalogSVF_InplaceProcess(self, n, input, A, X, Y)
    __swig_destroy__ = _Analog.delete_AnalogSVF

# Register AnalogSVF in _Analog:
_Analog.AnalogSVF_swigregister(AnalogSVF)

class GeneralSVF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.GeneralSVF_swiginit(self, _Analog.new_GeneralSVF())

    def reset(self):
        return _Analog.GeneralSVF_reset(self)

    def calcCoefs(self, r, k, wc):
        return _Analog.GeneralSVF_calcCoefs(self, r, k, wc)

    def setDrive(self, newDrive):
        return _Analog.GeneralSVF_setDrive(self, newDrive)

    def process(self, x):
        return _Analog.GeneralSVF_process(self, x)

    def nonlinearity(self, v):
        return _Analog.GeneralSVF_nonlinearity(self, v)
    __swig_destroy__ = _Analog.delete_GeneralSVF

# Register GeneralSVF in _Analog:
_Analog.GeneralSVF_swigregister(GeneralSVF)

VASVFLowPassFilter = _Analog.VASVFLowPassFilter
VASVFBandPassFilter = _Analog.VASVFBandPassFilter
VASVFHighPassFilter = _Analog.VASVFHighPassFilter
VASVFUnitGainBandpassFilter = _Analog.VASVFUnitGainBandpassFilter
VASVFBandShelvingFilter = _Analog.VASVFBandShelvingFilter
VASVFNotchFilter = _Analog.VASVFNotchFilter
VASVFAllpassFilter = _Analog.VASVFAllpassFilter
VASVFPeakFilter = _Analog.VASVFPeakFilter
class VAStateVariableFilter(MonoFXProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.VAStateVariableFilter_swiginit(self, _Analog.new_VAStateVariableFilter())
    __swig_destroy__ = _Analog.delete_VAStateVariableFilter

    def setFilterType(self, newType):
        return _Analog.VAStateVariableFilter_setFilterType(self, newType)

    def setCutoffFreq(self, newCutoffFreq):
        return _Analog.VAStateVariableFilter_setCutoffFreq(self, newCutoffFreq)

    def setResonance(self, newResonance):
        return _Analog.VAStateVariableFilter_setResonance(self, newResonance)

    def setQ(self, newQ):
        return _Analog.VAStateVariableFilter_setQ(self, newQ)

    def setShelfGain(self, newGain):
        return _Analog.VAStateVariableFilter_setShelfGain(self, newGain)

    def setFilter(self, newType, newCutoff, newResonance, newShelfGain):
        return _Analog.VAStateVariableFilter_setFilter(self, newType, newCutoff, newResonance, newShelfGain)

    def setSampleRate(self, newSampleRate):
        return _Analog.VAStateVariableFilter_setSampleRate(self, newSampleRate)

    def process(self, gain, input, output, count):
        return _Analog.VAStateVariableFilter_process(self, gain, input, output, count)

    def clear(self):
        return _Analog.VAStateVariableFilter_clear(self)

    def calcTransfer(self, freq):
        return _Analog.VAStateVariableFilter_calcTransfer(self, freq)
    PORT_CUTOFF = _Analog.VAStateVariableFilter_PORT_CUTOFF
    PORT_FILTERTYPE = _Analog.VAStateVariableFilter_PORT_FILTERTYPE
    PORT_Q = _Analog.VAStateVariableFilter_PORT_Q
    PORT_SHELFGAIN = _Analog.VAStateVariableFilter_PORT_SHELFGAIN

    def setPort(self, port, v):
        return _Analog.VAStateVariableFilter_setPort(self, port, v)

    def getCutoffFreq(self):
        return _Analog.VAStateVariableFilter_getCutoffFreq(self)

    def getFilterType(self):
        return _Analog.VAStateVariableFilter_getFilterType(self)

    def getQ(self):
        return _Analog.VAStateVariableFilter_getQ(self)

    def getShelfGain(self):
        return _Analog.VAStateVariableFilter_getShelfGain(self)

    def ProcessBlock(self, n, input, output):
        return _Analog.VAStateVariableFilter_ProcessBlock(self, n, input, output)

# Register VAStateVariableFilter in _Analog:
_Analog.VAStateVariableFilter_swigregister(VAStateVariableFilter)


def analogSaturate(x):
    return _Analog.analogSaturate(x)
SVFLowpass = _Analog.SVFLowpass
SVFBandpass = _Analog.SVFBandpass
SVFHighpass = _Analog.SVFHighpass
SVFUnitGainBandpass = _Analog.SVFUnitGainBandpass
SVFBandShelving = _Analog.SVFBandShelving
SVFNotch = _Analog.SVFNotch
SVFAllpass = _Analog.SVFAllpass
SVFPeak = _Analog.SVFPeak
class StateVariableFilter(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.StateVariableFilter_swiginit(self, _Analog.new_StateVariableFilter())
    __swig_destroy__ = _Analog.delete_StateVariableFilter

    def setFilterType(self, newType):
        return _Analog.StateVariableFilter_setFilterType(self, newType)

    def setCutoffPitch(self, newCutoff):
        return _Analog.StateVariableFilter_setCutoffPitch(self, newCutoff)

    def setCutoffFreq(self, newCutoff):
        return _Analog.StateVariableFilter_setCutoffFreq(self, newCutoff)

    def setResonance(self, newResonance):
        return _Analog.StateVariableFilter_setResonance(self, newResonance)

    def setQ(self, newQ):
        return _Analog.StateVariableFilter_setQ(self, newQ)

    def setShelfGain(self, newGain):
        return _Analog.StateVariableFilter_setShelfGain(self, newGain)

    def setFilter(self, newType, newCutoff, newResonance, newShelfGain):
        return _Analog.StateVariableFilter_setFilter(self, newType, newCutoff, newResonance, newShelfGain)

    def setSampleRate(self, newSampleRate):
        return _Analog.StateVariableFilter_setSampleRate(self, newSampleRate)

    def setIsActive(self, isActive):
        return _Analog.StateVariableFilter_setIsActive(self, isActive)

    def processAudioSample(self, input, channelIndex):
        return _Analog.StateVariableFilter_processAudioSample(self, input, channelIndex)

    def processAudioBlock(self, samples, numSamples, channelIndex):
        return _Analog.StateVariableFilter_processAudioBlock(self, samples, numSamples, channelIndex)
    PORT_CUTOFF = _Analog.StateVariableFilter_PORT_CUTOFF
    PORT_FILTERTYPE = _Analog.StateVariableFilter_PORT_FILTERTYPE
    PORT_Q = _Analog.StateVariableFilter_PORT_Q
    PORT_SHELFGAIN = _Analog.StateVariableFilter_PORT_SHELFGAIN

    def setPort(self, port, v):
        return _Analog.StateVariableFilter_setPort(self, port, v)

    def Tick(self, input, A=1, X=1, Y=1):
        return _Analog.StateVariableFilter_Tick(self, input, A, X, Y)

    def ProcessBlock(self, n, input, output):
        return _Analog.StateVariableFilter_ProcessBlock(self, n, input, output)

# Register StateVariableFilter in _Analog:
_Analog.StateVariableFilter_swigregister(StateVariableFilter)


def pitchToFreq(pitch):
    return _Analog.pitchToFreq(pitch)

def freqToPitch(freq):
    return _Analog.freqToPitch(freq)

def clipMinMax(_in, minValue, maxValue):
    return _Analog.clipMinMax(_in, minValue, maxValue)

def clipMin(_in, minValue):
    return _Analog.clipMin(_in, minValue)

def xFadeLin(xFadeCtrl, in0, in1):
    return _Analog.xFadeLin(xFadeCtrl, in0, in1)

def parCtrlShaper(input, bend):
    return _Analog.parCtrlShaper(input, bend)

def normalizeRange(input, start, end):
    return _Analog.normalizeRange(input, start, end)

def resonanceToQ(resonance):
    return _Analog.resonanceToQ(resonance)
class VAStateVariableFilter2(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cutoff = property(_Analog.VAStateVariableFilter2_cutoff_get, _Analog.VAStateVariableFilter2_cutoff_set)
    scale = property(_Analog.VAStateVariableFilter2_scale_get, _Analog.VAStateVariableFilter2_scale_set)
    fs = property(_Analog.VAStateVariableFilter2_fs_get, _Analog.VAStateVariableFilter2_fs_set)
    low = property(_Analog.VAStateVariableFilter2_low_get, _Analog.VAStateVariableFilter2_low_set)
    high = property(_Analog.VAStateVariableFilter2_high_get, _Analog.VAStateVariableFilter2_high_set)
    band = property(_Analog.VAStateVariableFilter2_band_get, _Analog.VAStateVariableFilter2_band_set)
    notch = property(_Analog.VAStateVariableFilter2_notch_get, _Analog.VAStateVariableFilter2_notch_set)

    def __init__(self, Fc, Q, Fs):
        _Analog.VAStateVariableFilter2_swiginit(self, _Analog.new_VAStateVariableFilter2(Fc, Q, Fs))

    def setCutoff(self, F):
        return _Analog.VAStateVariableFilter2_setCutoff(self, F)

    def setResonance(self, R):
        return _Analog.VAStateVariableFilter2_setResonance(self, R)
    PORT_CUTOFF = _Analog.VAStateVariableFilter2_PORT_CUTOFF
    PORT_RESONANCE = _Analog.VAStateVariableFilter2_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.VAStateVariableFilter2_setPort(self, port, v)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Analog.VAStateVariableFilter2_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_VAStateVariableFilter2

# Register VAStateVariableFilter2 in _Analog:
_Analog.VAStateVariableFilter2_swigregister(VAStateVariableFilter2)

class VASVF(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fc = property(_Analog.VASVF_fc_get, _Analog.VASVF_fc_set)
    fs = property(_Analog.VASVF_fs_get, _Analog.VASVF_fs_set)
    q = property(_Analog.VASVF_q_get, _Analog.VASVF_q_set)
    K = property(_Analog.VASVF_K_get, _Analog.VASVF_K_set)
    lp = property(_Analog.VASVF_lp_get, _Analog.VASVF_lp_set)
    hp = property(_Analog.VASVF_hp_get, _Analog.VASVF_hp_set)
    bp = property(_Analog.VASVF_bp_get, _Analog.VASVF_bp_set)
    ubp = property(_Analog.VASVF_ubp_get, _Analog.VASVF_ubp_set)
    shelf = property(_Analog.VASVF_shelf_get, _Analog.VASVF_shelf_set)
    notch = property(_Analog.VASVF_notch_get, _Analog.VASVF_notch_set)
    apf = property(_Analog.VASVF_apf_get, _Analog.VASVF_apf_set)
    peak = property(_Analog.VASVF_peak_get, _Analog.VASVF_peak_set)
    z1 = property(_Analog.VASVF_z1_get, _Analog.VASVF_z1_set)
    z2 = property(_Analog.VASVF_z2_get, _Analog.VASVF_z2_set)
    LP = _Analog.VASVF_LP
    HP = _Analog.VASVF_HP
    BP = _Analog.VASVF_BP
    UBP = _Analog.VASVF_UBP
    SHELF = _Analog.VASVF_SHELF
    NOTCH = _Analog.VASVF_NOTCH
    APF = _Analog.VASVF_APF
    PEAK = _Analog.VASVF_PEAK
    LAST = _Analog.VASVF_LAST
    type = property(_Analog.VASVF_type_get, _Analog.VASVF_type_set)

    def __init__(self, Fs, Fc, Q):
        _Analog.VASVF_swiginit(self, _Analog.new_VASVF(Fs, Fc, Q))

    def setCutoff(self, f):
        return _Analog.VASVF_setCutoff(self, f)

    def setQ(self, Q):
        return _Analog.VASVF_setQ(self, Q)
    PORT_CUTOFF = _Analog.VASVF_PORT_CUTOFF
    PORT_Q = _Analog.VASVF_PORT_Q
    PORT_TYPE = _Analog.VASVF_PORT_TYPE

    def setPort(self, port, v):
        return _Analog.VASVF_setPort(self, port, v)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.VASVF_Tick(self, I, A, X, Y)

    def ProcessBlock(self, n, input, output):
        return _Analog.VASVF_ProcessBlock(self, n, input, output)

    def InplaceProcess(self, n, input):
        return _Analog.VASVF_InplaceProcess(self, n, input)
    __swig_destroy__ = _Analog.delete_VASVF

# Register VASVF in _Analog:
_Analog.VASVF_swigregister(VASVF)

class StereoSVF(StereoFXProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    left = property(_Analog.StereoSVF_left_get, _Analog.StereoSVF_left_set)
    right = property(_Analog.StereoSVF_right_get, _Analog.StereoSVF_right_set)

    def __init__(self, sr):
        _Analog.StereoSVF_swiginit(self, _Analog.new_StereoSVF(sr))

    def setCutoff(self, f):
        return _Analog.StereoSVF_setCutoff(self, f)

    def setQ(self, q):
        return _Analog.StereoSVF_setQ(self, q)

    def ProcessBlock(self, n, inputs, outputs):
        return _Analog.StereoSVF_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Analog.delete_StereoSVF

# Register StereoSVF in _Analog:
_Analog.StereoSVF_swigregister(StereoSVF)

class ChamberlinSVF(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_Analog.ChamberlinSVF_x_get, _Analog.ChamberlinSVF_x_set)
    L = property(_Analog.ChamberlinSVF_L_get, _Analog.ChamberlinSVF_L_set)
    B = property(_Analog.ChamberlinSVF_B_get, _Analog.ChamberlinSVF_B_set)
    H = property(_Analog.ChamberlinSVF_H_get, _Analog.ChamberlinSVF_H_set)
    N = property(_Analog.ChamberlinSVF_N_get, _Analog.ChamberlinSVF_N_set)
    F1 = property(_Analog.ChamberlinSVF_F1_get, _Analog.ChamberlinSVF_F1_set)
    Q1 = property(_Analog.ChamberlinSVF_Q1_get, _Analog.ChamberlinSVF_Q1_set)
    D1 = property(_Analog.ChamberlinSVF_D1_get, _Analog.ChamberlinSVF_D1_set)
    D2 = property(_Analog.ChamberlinSVF_D2_get, _Analog.ChamberlinSVF_D2_set)
    Fc = property(_Analog.ChamberlinSVF_Fc_get, _Analog.ChamberlinSVF_Fc_set)
    Fs = property(_Analog.ChamberlinSVF_Fs_get, _Analog.ChamberlinSVF_Fs_set)
    R = property(_Analog.ChamberlinSVF_R_get, _Analog.ChamberlinSVF_R_set)

    def __init__(self, sr, fc, q):
        _Analog.ChamberlinSVF_swiginit(self, _Analog.new_ChamberlinSVF(sr, fc, q))

    def setCutoff(self, fc):
        return _Analog.ChamberlinSVF_setCutoff(self, fc)

    def setResonance(self, r):
        return _Analog.ChamberlinSVF_setResonance(self, r)
    PORT_CUTOFF = _Analog.ChamberlinSVF_PORT_CUTOFF
    PORT_RESONANCE = _Analog.ChamberlinSVF_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.ChamberlinSVF_setPort(self, port, v)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Analog.ChamberlinSVF_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_ChamberlinSVF

# Register ChamberlinSVF in _Analog:
_Analog.ChamberlinSVF_swigregister(ChamberlinSVF)

class VASVFFilter(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cutoff = property(_Analog.VASVFFilter_cutoff_get, _Analog.VASVFFilter_cutoff_set)
    scale = property(_Analog.VASVFFilter_scale_get, _Analog.VASVFFilter_scale_set)
    fs = property(_Analog.VASVFFilter_fs_get, _Analog.VASVFFilter_fs_set)
    low = property(_Analog.VASVFFilter_low_get, _Analog.VASVFFilter_low_set)
    high = property(_Analog.VASVFFilter_high_get, _Analog.VASVFFilter_high_set)
    band = property(_Analog.VASVFFilter_band_get, _Analog.VASVFFilter_band_set)
    notch = property(_Analog.VASVFFilter_notch_get, _Analog.VASVFFilter_notch_set)
    LP = _Analog.VASVFFilter_LP
    HP = _Analog.VASVFFilter_HP
    BP = _Analog.VASVFFilter_BP
    NOTCH = _Analog.VASVFFilter_NOTCH
    type = property(_Analog.VASVFFilter_type_get, _Analog.VASVFFilter_type_set)

    def __init__(self, *args):
        _Analog.VASVFFilter_swiginit(self, _Analog.new_VASVFFilter(*args))

    def setCutoff(self, F):
        return _Analog.VASVFFilter_setCutoff(self, F)

    def setResonance(self, R):
        return _Analog.VASVFFilter_setResonance(self, R)
    PORT_CUTOFF = _Analog.VASVFFilter_PORT_CUTOFF
    PORT_RESONANCE = _Analog.VASVFFilter_PORT_RESONANCE
    PORT_LP = _Analog.VASVFFilter_PORT_LP
    PORT_HP = _Analog.VASVFFilter_PORT_HP
    PORT_BP = _Analog.VASVFFilter_PORT_BP
    PORT_NOTCH = _Analog.VASVFFilter_PORT_NOTCH

    def setPort(self, port, v):
        return _Analog.VASVFFilter_setPort(self, port, v)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Analog.VASVFFilter_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_VASVFFilter

# Register VASVFFilter in _Analog:
_Analog.VASVFFilter_swigregister(VASVFFilter)

class SVFSmoother(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cutoff = property(_Analog.SVFSmoother_cutoff_get, _Analog.SVFSmoother_cutoff_set)
    scale = property(_Analog.SVFSmoother_scale_get, _Analog.SVFSmoother_scale_set)
    fs = property(_Analog.SVFSmoother_fs_get, _Analog.SVFSmoother_fs_set)
    low = property(_Analog.SVFSmoother_low_get, _Analog.SVFSmoother_low_set)
    high = property(_Analog.SVFSmoother_high_get, _Analog.SVFSmoother_high_set)
    band = property(_Analog.SVFSmoother_band_get, _Analog.SVFSmoother_band_set)
    notch = property(_Analog.SVFSmoother_notch_get, _Analog.SVFSmoother_notch_set)
    target = property(_Analog.SVFSmoother_target_get, _Analog.SVFSmoother_target_set)
    LOW = _Analog.SVFSmoother_LOW
    HIGH = _Analog.SVFSmoother_HIGH
    BAND = _Analog.SVFSmoother_BAND
    NOTCH = _Analog.SVFSmoother_NOTCH
    type = property(_Analog.SVFSmoother_type_get, _Analog.SVFSmoother_type_set)

    def __init__(self, Fc, Fs, Q):
        _Analog.SVFSmoother_swiginit(self, _Analog.new_SVFSmoother(Fc, Fs, Q))

    def setTarget(self, t):
        return _Analog.SVFSmoother_setTarget(self, t)

    def setCutoff(self, F):
        return _Analog.SVFSmoother_setCutoff(self, F)

    def setResonance(self, R):
        return _Analog.SVFSmoother_setResonance(self, R)

    def lowPassOutput(self):
        return _Analog.SVFSmoother_lowPassOutput(self)

    def highPassOutput(self):
        return _Analog.SVFSmoother_highPassOutput(self)

    def bandPassOutput(self):
        return _Analog.SVFSmoother_bandPassOutput(self)

    def notchOutput(self):
        return _Analog.SVFSmoother_notchOutput(self)
    PORT_TARGET = _Analog.SVFSmoother_PORT_TARGET
    PORT_CUTOFF = _Analog.SVFSmoother_PORT_CUTOFF
    PORT_RESONANCE = _Analog.SVFSmoother_PORT_RESONANCE
    PORT_LP = _Analog.SVFSmoother_PORT_LP
    PORT_HP = _Analog.SVFSmoother_PORT_HP
    PORT_BP = _Analog.SVFSmoother_PORT_BP
    PORT_NOTCH = _Analog.SVFSmoother_PORT_NOTCH

    def setPort(self, port, v):
        return _Analog.SVFSmoother_setPort(self, port, v)

    def Tick(self, In=1, A=1, X=1, Y=1):
        return _Analog.SVFSmoother_Tick(self, In, A, X, Y)
    __swig_destroy__ = _Analog.delete_SVFSmoother

# Register SVFSmoother in _Analog:
_Analog.SVFSmoother_swigregister(SVFSmoother)

class SmoothSVF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Ftarget = property(_Analog.SmoothSVF_Ftarget_get, _Analog.SmoothSVF_Ftarget_set)
    Qtarget = property(_Analog.SmoothSVF_Qtarget_get, _Analog.SmoothSVF_Qtarget_set)
    cutoff = property(_Analog.SmoothSVF_cutoff_get, _Analog.SmoothSVF_cutoff_set)
    scale = property(_Analog.SmoothSVF_scale_get, _Analog.SmoothSVF_scale_set)
    fs = property(_Analog.SmoothSVF_fs_get, _Analog.SmoothSVF_fs_set)
    low = property(_Analog.SmoothSVF_low_get, _Analog.SmoothSVF_low_set)
    high = property(_Analog.SmoothSVF_high_get, _Analog.SmoothSVF_high_set)
    band = property(_Analog.SmoothSVF_band_get, _Analog.SmoothSVF_band_set)
    notch = property(_Analog.SmoothSVF_notch_get, _Analog.SmoothSVF_notch_set)
    lpSmooth = property(_Analog.SmoothSVF_lpSmooth_get, _Analog.SmoothSVF_lpSmooth_set)
    hpSmooth = property(_Analog.SmoothSVF_hpSmooth_get, _Analog.SmoothSVF_hpSmooth_set)
    bpSmooth = property(_Analog.SmoothSVF_bpSmooth_get, _Analog.SmoothSVF_bpSmooth_set)
    npSmooth = property(_Analog.SmoothSVF_npSmooth_get, _Analog.SmoothSVF_npSmooth_set)
    cutSmooth = property(_Analog.SmoothSVF_cutSmooth_get, _Analog.SmoothSVF_cutSmooth_set)
    resSmooth = property(_Analog.SmoothSVF_resSmooth_get, _Analog.SmoothSVF_resSmooth_set)
    LOW = _Analog.SmoothSVF_LOW
    HIGH = _Analog.SmoothSVF_HIGH
    BAND = _Analog.SmoothSVF_BAND
    NOTCH = _Analog.SmoothSVF_NOTCH
    LPHMORPH = _Analog.SmoothSVF_LPHMORPH
    LPBMORPH = _Analog.SmoothSVF_LPBMORPH
    LPNMORPH = _Analog.SmoothSVF_LPNMORPH
    type = property(_Analog.SmoothSVF_type_get, _Analog.SmoothSVF_type_set)
    morph = property(_Analog.SmoothSVF_morph_get, _Analog.SmoothSVF_morph_set)

    def __init__(self, Fc, Fs, Q):
        _Analog.SmoothSVF_swiginit(self, _Analog.new_SmoothSVF(Fc, Fs, Q))

    def __call__(self, I, A=1, X=0, Y=0):
        return _Analog.SmoothSVF___call__(self, I, A, X, Y)

    def setCutoff(self, F):
        return _Analog.SmoothSVF_setCutoff(self, F)

    def setResonance(self, R):
        return _Analog.SmoothSVF_setResonance(self, R)

    def getLP(self):
        return _Analog.SmoothSVF_getLP(self)

    def getHP(self):
        return _Analog.SmoothSVF_getHP(self)

    def getBP(self):
        return _Analog.SmoothSVF_getBP(self)

    def getNotch(self):
        return _Analog.SmoothSVF_getNotch(self)

    def LPHMorph(self, f):
        return _Analog.SmoothSVF_LPHMorph(self, f)

    def LPBMorph(self, f):
        return _Analog.SmoothSVF_LPBMorph(self, f)

    def LPNMorph(self, f):
        return _Analog.SmoothSVF_LPNMorph(self, f)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.SmoothSVF_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_SmoothSVF

# Register SmoothSVF in _Analog:
_Analog.SmoothSVF_swigregister(SmoothSVF)

class ImprovedMoog(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    VT = property(_Analog.ImprovedMoog_VT_get, _Analog.ImprovedMoog_VT_set)

    def __init__(self, sr):
        _Analog.ImprovedMoog_swiginit(self, _Analog.new_ImprovedMoog(sr))
    __swig_destroy__ = _Analog.delete_ImprovedMoog

    def ProcessBlock(self, n, samples, output, A=None, X=None, Y=None):
        return _Analog.ImprovedMoog_ProcessBlock(self, n, samples, output, A, X, Y)

    def InplaceProcess(self, n, i):
        return _Analog.ImprovedMoog_InplaceProcess(self, n, i)

    def SetResonance(self, r):
        return _Analog.ImprovedMoog_SetResonance(self, r)

    def SetCutoff(self, c):
        return _Analog.ImprovedMoog_SetCutoff(self, c)

    def GetResonance(self):
        return _Analog.ImprovedMoog_GetResonance(self)

    def GetCutoff(self):
        return _Analog.ImprovedMoog_GetCutoff(self)
    PORT_CUTOFF = _Analog.ImprovedMoog_PORT_CUTOFF
    PORT_RESONANCE = _Analog.ImprovedMoog_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.ImprovedMoog_setPort(self, port, v)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.ImprovedMoog_Tick(self, I, A, X, Y)
    V = property(_Analog.ImprovedMoog_V_get, _Analog.ImprovedMoog_V_set)
    dV = property(_Analog.ImprovedMoog_dV_get, _Analog.ImprovedMoog_dV_set)
    tV = property(_Analog.ImprovedMoog_tV_get, _Analog.ImprovedMoog_tV_set)
    x = property(_Analog.ImprovedMoog_x_get, _Analog.ImprovedMoog_x_set)
    g = property(_Analog.ImprovedMoog_g_get, _Analog.ImprovedMoog_g_set)
    drive = property(_Analog.ImprovedMoog_drive_get, _Analog.ImprovedMoog_drive_set)
    cutoff = property(_Analog.ImprovedMoog_cutoff_get, _Analog.ImprovedMoog_cutoff_set)
    resonance = property(_Analog.ImprovedMoog_resonance_get, _Analog.ImprovedMoog_resonance_set)
    sampleRate = property(_Analog.ImprovedMoog_sampleRate_get, _Analog.ImprovedMoog_sampleRate_set)

# Register ImprovedMoog in _Analog:
_Analog.ImprovedMoog_swigregister(ImprovedMoog)

class KrajeskiMoog(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sr):
        _Analog.KrajeskiMoog_swiginit(self, _Analog.new_KrajeskiMoog(sr))
    __swig_destroy__ = _Analog.delete_KrajeskiMoog

    def Process(self, *args):
        return _Analog.KrajeskiMoog_Process(self, *args)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.KrajeskiMoog_Tick(self, I, A, X, Y)

    def SetResonance(self, r):
        return _Analog.KrajeskiMoog_SetResonance(self, r)

    def SetCutoff(self, c):
        return _Analog.KrajeskiMoog_SetCutoff(self, c)

    def setDrive(self, d):
        return _Analog.KrajeskiMoog_setDrive(self, d)

    def GetResonance(self):
        return _Analog.KrajeskiMoog_GetResonance(self)

    def GetCutoff(self):
        return _Analog.KrajeskiMoog_GetCutoff(self)
    PORT_CUTOFF = _Analog.KrajeskiMoog_PORT_CUTOFF
    PORT_RESONANCE = _Analog.KrajeskiMoog_PORT_RESONANCE
    PORT_DRIVE = _Analog.KrajeskiMoog_PORT_DRIVE

    def setPort(self, port, v):
        return _Analog.KrajeskiMoog_setPort(self, port, v)
    state = property(_Analog.KrajeskiMoog_state_get, _Analog.KrajeskiMoog_state_set)
    delay = property(_Analog.KrajeskiMoog_delay_get, _Analog.KrajeskiMoog_delay_set)
    wc = property(_Analog.KrajeskiMoog_wc_get, _Analog.KrajeskiMoog_wc_set)
    g = property(_Analog.KrajeskiMoog_g_get, _Analog.KrajeskiMoog_g_set)
    gRes = property(_Analog.KrajeskiMoog_gRes_get, _Analog.KrajeskiMoog_gRes_set)
    gComp = property(_Analog.KrajeskiMoog_gComp_get, _Analog.KrajeskiMoog_gComp_set)
    drive = property(_Analog.KrajeskiMoog_drive_get, _Analog.KrajeskiMoog_drive_set)
    sampleRate = property(_Analog.KrajeskiMoog_sampleRate_get, _Analog.KrajeskiMoog_sampleRate_set)
    resonance = property(_Analog.KrajeskiMoog_resonance_get, _Analog.KrajeskiMoog_resonance_set)
    cutoff = property(_Analog.KrajeskiMoog_cutoff_get, _Analog.KrajeskiMoog_cutoff_set)

# Register KrajeskiMoog in _Analog:
_Analog.KrajeskiMoog_swigregister(KrajeskiMoog)

class MicrotrackerMoog(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sr):
        _Analog.MicrotrackerMoog_swiginit(self, _Analog.new_MicrotrackerMoog(sr))
    __swig_destroy__ = _Analog.delete_MicrotrackerMoog

    def fast_tanh(self, x):
        return _Analog.MicrotrackerMoog_fast_tanh(self, x)

    def Process(self, *args):
        return _Analog.MicrotrackerMoog_Process(self, *args)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.MicrotrackerMoog_Tick(self, I, A, X, Y)

    def SetResonance(self, r):
        return _Analog.MicrotrackerMoog_SetResonance(self, r)

    def SetCutoff(self, c):
        return _Analog.MicrotrackerMoog_SetCutoff(self, c)

    def GetResonance(self):
        return _Analog.MicrotrackerMoog_GetResonance(self)

    def GetCutoff(self):
        return _Analog.MicrotrackerMoog_GetCutoff(self)
    PORT_CUTOFF = _Analog.MicrotrackerMoog_PORT_CUTOFF
    PORT_RESONANCE = _Analog.MicrotrackerMoog_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.MicrotrackerMoog_setPort(self, port, v)

# Register MicrotrackerMoog in _Analog:
_Analog.MicrotrackerMoog_swigregister(MicrotrackerMoog)
TEMP = cvar.TEMP
THERMAL_VOLT = cvar.THERMAL_VOLT
OVER_TWO_THERMAL_VOLT = cvar.OVER_TWO_THERMAL_VOLT
NUMBER_OF_FILTERS = cvar.NUMBER_OF_FILTERS

class MoogCat(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fc = property(_Analog.MoogCat_fc_get, _Analog.MoogCat_fc_set)
    res = property(_Analog.MoogCat_res_get, _Analog.MoogCat_res_set)
    Fs = property(_Analog.MoogCat_Fs_get, _Analog.MoogCat_Fs_set)
    g = property(_Analog.MoogCat_g_get, _Analog.MoogCat_g_set)
    r_cat = property(_Analog.MoogCat_r_cat_get, _Analog.MoogCat_r_cat_set)
    numStates = _Analog.MoogCat_numStates
    state = property(_Analog.MoogCat_state_get, _Analog.MoogCat_state_set)

    def __init__(self):
        _Analog.MoogCat_swiginit(self, _Analog.new_MoogCat())

    def setCutoff(self, f):
        return _Analog.MoogCat_setCutoff(self, f)

    def setResonance(self, r):
        return _Analog.MoogCat_setResonance(self, r)
    PORT_CUTOFF = _Analog.MoogCat_PORT_CUTOFF
    PORT_RESONANCE = _Analog.MoogCat_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.MoogCat_setPort(self, port, v)

    def processSample(self, input, channel):
        return _Analog.MoogCat_processSample(self, input, channel)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.MoogCat_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_MoogCat

# Register MoogCat in _Analog:
_Analog.MoogCat_swigregister(MoogCat)

class MoogFilter(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    s0 = property(_Analog.MoogFilter_s0_get, _Analog.MoogFilter_s0_set)
    s1 = property(_Analog.MoogFilter_s1_get, _Analog.MoogFilter_s1_set)
    s2 = property(_Analog.MoogFilter_s2_get, _Analog.MoogFilter_s2_set)
    s3 = property(_Analog.MoogFilter_s3_get, _Analog.MoogFilter_s3_set)
    zi = property(_Analog.MoogFilter_zi_get, _Analog.MoogFilter_zi_set)
    xx = property(_Analog.MoogFilter_xx_get, _Analog.MoogFilter_xx_set)
    y0 = property(_Analog.MoogFilter_y0_get, _Analog.MoogFilter_y0_set)
    y1 = property(_Analog.MoogFilter_y1_get, _Analog.MoogFilter_y1_set)
    y2 = property(_Analog.MoogFilter_y2_get, _Analog.MoogFilter_y2_set)
    y3 = property(_Analog.MoogFilter_y3_get, _Analog.MoogFilter_y3_set)
    fc = property(_Analog.MoogFilter_fc_get, _Analog.MoogFilter_fc_set)
    q = property(_Analog.MoogFilter_q_get, _Analog.MoogFilter_q_set)
    sr = property(_Analog.MoogFilter_sr_get, _Analog.MoogFilter_sr_set)
    dbGain = property(_Analog.MoogFilter_dbGain_get, _Analog.MoogFilter_dbGain_set)

    def __init__(self, Fs):
        _Analog.MoogFilter_swiginit(self, _Analog.new_MoogFilter(Fs))

    def setCutoff(self, f):
        return _Analog.MoogFilter_setCutoff(self, f)

    def setResonance(self, r):
        return _Analog.MoogFilter_setResonance(self, r)

    def setGain(self, db):
        return _Analog.MoogFilter_setGain(self, db)
    PORT_CUTOFF = _Analog.MoogFilter_PORT_CUTOFF
    PORT_RESONANCE = _Analog.MoogFilter_PORT_RESONANCE
    PORT_DBGAIN = _Analog.MoogFilter_PORT_DBGAIN

    def setPort(self, port, v):
        return _Analog.MoogFilter_setPort(self, port, v)

    def Tick(self, sample, A=1, X=1, Y=1):
        return _Analog.MoogFilter_Tick(self, sample, A, X, Y)

    def reset(self):
        return _Analog.MoogFilter_reset(self)
    __swig_destroy__ = _Analog.delete_MoogFilter

# Register MoogFilter in _Analog:
_Analog.MoogFilter_swigregister(MoogFilter)

class MoogFilter1(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    f = property(_Analog.MoogFilter1_f_get, _Analog.MoogFilter1_f_set)
    fs = property(_Analog.MoogFilter1_fs_get, _Analog.MoogFilter1_fs_set)
    k = property(_Analog.MoogFilter1_k_get, _Analog.MoogFilter1_k_set)
    p = property(_Analog.MoogFilter1_p_get, _Analog.MoogFilter1_p_set)
    scale = property(_Analog.MoogFilter1_scale_get, _Analog.MoogFilter1_scale_set)
    r = property(_Analog.MoogFilter1_r_get, _Analog.MoogFilter1_r_set)
    y1 = property(_Analog.MoogFilter1_y1_get, _Analog.MoogFilter1_y1_set)
    y2 = property(_Analog.MoogFilter1_y2_get, _Analog.MoogFilter1_y2_set)
    y3 = property(_Analog.MoogFilter1_y3_get, _Analog.MoogFilter1_y3_set)
    y4 = property(_Analog.MoogFilter1_y4_get, _Analog.MoogFilter1_y4_set)
    oldx = property(_Analog.MoogFilter1_oldx_get, _Analog.MoogFilter1_oldx_set)
    oldy1 = property(_Analog.MoogFilter1_oldy1_get, _Analog.MoogFilter1_oldy1_set)
    oldy2 = property(_Analog.MoogFilter1_oldy2_get, _Analog.MoogFilter1_oldy2_set)
    oldy3 = property(_Analog.MoogFilter1_oldy3_get, _Analog.MoogFilter1_oldy3_set)
    cutoff = property(_Analog.MoogFilter1_cutoff_get, _Analog.MoogFilter1_cutoff_set)
    Q = property(_Analog.MoogFilter1_Q_get, _Analog.MoogFilter1_Q_set)
    x = property(_Analog.MoogFilter1_x_get, _Analog.MoogFilter1_x_set)

    def __init__(self, sampleRate, cutoff, resonance):
        _Analog.MoogFilter1_swiginit(self, _Analog.new_MoogFilter1(sampleRate, cutoff, resonance))

    def coefficients(self, sampleRate, frequency, resonance):
        return _Analog.MoogFilter1_coefficients(self, sampleRate, frequency, resonance)

    def setCutoff(self, c):
        return _Analog.MoogFilter1_setCutoff(self, c)

    def setResonance(self, res):
        return _Analog.MoogFilter1_setResonance(self, res)
    PORT_CUTOFF = _Analog.MoogFilter1_PORT_CUTOFF
    PORT_RESONANCE = _Analog.MoogFilter1_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.MoogFilter1_setPort(self, port, v)

    def Tick(self, input, A=1, X=0, Y=0):
        return _Analog.MoogFilter1_Tick(self, input, A, X, Y)
    __swig_destroy__ = _Analog.delete_MoogFilter1

# Register MoogFilter1 in _Analog:
_Analog.MoogFilter1_swigregister(MoogFilter1)

class MoogFilter2(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    f = property(_Analog.MoogFilter2_f_get, _Analog.MoogFilter2_f_set)
    p = property(_Analog.MoogFilter2_p_get, _Analog.MoogFilter2_p_set)
    q = property(_Analog.MoogFilter2_q_get, _Analog.MoogFilter2_q_set)
    b0 = property(_Analog.MoogFilter2_b0_get, _Analog.MoogFilter2_b0_set)
    b1 = property(_Analog.MoogFilter2_b1_get, _Analog.MoogFilter2_b1_set)
    b2 = property(_Analog.MoogFilter2_b2_get, _Analog.MoogFilter2_b2_set)
    b3 = property(_Analog.MoogFilter2_b3_get, _Analog.MoogFilter2_b3_set)
    b4 = property(_Analog.MoogFilter2_b4_get, _Analog.MoogFilter2_b4_set)
    t1 = property(_Analog.MoogFilter2_t1_get, _Analog.MoogFilter2_t1_set)
    t2 = property(_Analog.MoogFilter2_t2_get, _Analog.MoogFilter2_t2_set)
    fs = property(_Analog.MoogFilter2_fs_get, _Analog.MoogFilter2_fs_set)
    fc = property(_Analog.MoogFilter2_fc_get, _Analog.MoogFilter2_fc_set)
    res = property(_Analog.MoogFilter2_res_get, _Analog.MoogFilter2_res_set)

    def __init__(self, sr, cutoff, r):
        _Analog.MoogFilter2_swiginit(self, _Analog.new_MoogFilter2(sr, cutoff, r))

    def calc(self):
        return _Analog.MoogFilter2_calc(self)

    def setCutoff(self, f):
        return _Analog.MoogFilter2_setCutoff(self, f)

    def setResonance(self, r):
        return _Analog.MoogFilter2_setResonance(self, r)
    PORT_CUTOFF = _Analog.MoogFilter2_PORT_CUTOFF
    PORT_RESONANCE = _Analog.MoogFilter2_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.MoogFilter2_setPort(self, port, v)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Analog.MoogFilter2_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_MoogFilter2

# Register MoogFilter2 in _Analog:
_Analog.MoogFilter2_swigregister(MoogFilter2)

class MoogVCF(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fc = property(_Analog.MoogVCF_fc_get, _Analog.MoogVCF_fc_set)
    fs = property(_Analog.MoogVCF_fs_get, _Analog.MoogVCF_fs_set)
    res = property(_Analog.MoogVCF_res_get, _Analog.MoogVCF_res_set)
    out1 = property(_Analog.MoogVCF_out1_get, _Analog.MoogVCF_out1_set)
    out2 = property(_Analog.MoogVCF_out2_get, _Analog.MoogVCF_out2_set)
    out3 = property(_Analog.MoogVCF_out3_get, _Analog.MoogVCF_out3_set)
    out4 = property(_Analog.MoogVCF_out4_get, _Analog.MoogVCF_out4_set)
    in1 = property(_Analog.MoogVCF_in1_get, _Analog.MoogVCF_in1_set)
    in2 = property(_Analog.MoogVCF_in2_get, _Analog.MoogVCF_in2_set)
    in3 = property(_Analog.MoogVCF_in3_get, _Analog.MoogVCF_in3_set)
    in4 = property(_Analog.MoogVCF_in4_get, _Analog.MoogVCF_in4_set)

    def __init__(self, sr, Fc, R):
        _Analog.MoogVCF_swiginit(self, _Analog.new_MoogVCF(sr, Fc, R))

    def setCutoff(self, f):
        return _Analog.MoogVCF_setCutoff(self, f)

    def setResonance(self, r):
        return _Analog.MoogVCF_setResonance(self, r)
    PORT_CUTOFF = _Analog.MoogVCF_PORT_CUTOFF
    PORT_RESONANCE = _Analog.MoogVCF_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.MoogVCF_setPort(self, port, v)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Analog.MoogVCF_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_MoogVCF

# Register MoogVCF in _Analog:
_Analog.MoogVCF_swigregister(MoogVCF)

class VAMoogFilter4(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.VAMoogFilter4_swiginit(self, _Analog.new_VAMoogFilter4())
    __swig_destroy__ = _Analog.delete_VAMoogFilter4

    def processSamples(self, samples, numSamples):
        return _Analog.VAMoogFilter4_processSamples(self, samples, numSamples)

    def getFrequency(self):
        return _Analog.VAMoogFilter4_getFrequency(self)

    def getResonance(self):
        return _Analog.VAMoogFilter4_getResonance(self)

    def getDrive(self):
        return _Analog.VAMoogFilter4_getDrive(self)

    def setFrequency(self, f):
        return _Analog.VAMoogFilter4_setFrequency(self, f)

    def setResonance(self, r):
        return _Analog.VAMoogFilter4_setResonance(self, r)

    def setSampleRate(self, s):
        return _Analog.VAMoogFilter4_setSampleRate(self, s)

    def setDrive(self, d):
        return _Analog.VAMoogFilter4_setDrive(self, d)
    PORT_CUTOFF = _Analog.VAMoogFilter4_PORT_CUTOFF
    PORT_RESONANCE = _Analog.VAMoogFilter4_PORT_RESONANCE
    PORT_DRIVE = _Analog.VAMoogFilter4_PORT_DRIVE

    def setPort(self, port, v):
        return _Analog.VAMoogFilter4_setPort(self, port, v)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.VAMoogFilter4_Tick(self, I, A, X, Y)

# Register VAMoogFilter4 in _Analog:
_Analog.VAMoogFilter4_swigregister(VAMoogFilter4)

class MoogFilterI(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LOWPASS = _Analog.MoogFilterI_LOWPASS
    HIGHPASS = _Analog.MoogFilterI_HIGHPASS
    BANDPASS = _Analog.MoogFilterI_BANDPASS

    def __init__(self):
        _Analog.MoogFilterI_swiginit(self, _Analog.new_MoogFilterI())

    def init(self, sampleRate):
        return _Analog.MoogFilterI_init(self, sampleRate)

    def setCutoff(self, cutoff):
        return _Analog.MoogFilterI_setCutoff(self, cutoff)

    def setResonance(self, resonance):
        return _Analog.MoogFilterI_setResonance(self, resonance)

    def setSaturation(self, saturationAmount):
        return _Analog.MoogFilterI_setSaturation(self, saturationAmount)

    def ProcessBlock(self, n, input, output):
        return _Analog.MoogFilterI_ProcessBlock(self, n, input, output)

    def calculateCoefficients(self):
        return _Analog.MoogFilterI_calculateCoefficients(self)

    def process(self, x):
        return _Analog.MoogFilterI_process(self, x)

    def saturate(self, input):
        return _Analog.MoogFilterI_saturate(self, input)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.MoogFilterI_Tick(self, I, A, X, Y)
    PORT_CUTOFF = _Analog.MoogFilterI_PORT_CUTOFF
    PORT_RESONANCE = _Analog.MoogFilterI_PORT_RESONANCE
    PORT_SATURATION = _Analog.MoogFilterI_PORT_SATURATION

    def setPort(self, port, v):
        return _Analog.MoogFilterI_setPort(self, port, v)
    passMode = property(_Analog.MoogFilterI_passMode_get, _Analog.MoogFilterI_passMode_set)
    cutoff = property(_Analog.MoogFilterI_cutoff_get, _Analog.MoogFilterI_cutoff_set)
    resonance = property(_Analog.MoogFilterI_resonance_get, _Analog.MoogFilterI_resonance_set)
    saturationAmount = property(_Analog.MoogFilterI_saturationAmount_get, _Analog.MoogFilterI_saturationAmount_set)
    sampleRate = property(_Analog.MoogFilterI_sampleRate_get, _Analog.MoogFilterI_sampleRate_set)
    out1 = property(_Analog.MoogFilterI_out1_get, _Analog.MoogFilterI_out1_set)
    out2 = property(_Analog.MoogFilterI_out2_get, _Analog.MoogFilterI_out2_set)
    out3 = property(_Analog.MoogFilterI_out3_get, _Analog.MoogFilterI_out3_set)
    out4 = property(_Analog.MoogFilterI_out4_get, _Analog.MoogFilterI_out4_set)
    in1 = property(_Analog.MoogFilterI_in1_get, _Analog.MoogFilterI_in1_set)
    in2 = property(_Analog.MoogFilterI_in2_get, _Analog.MoogFilterI_in2_set)
    in3 = property(_Analog.MoogFilterI_in3_get, _Analog.MoogFilterI_in3_set)
    in4 = property(_Analog.MoogFilterI_in4_get, _Analog.MoogFilterI_in4_set)
    r = property(_Analog.MoogFilterI_r_get, _Analog.MoogFilterI_r_set)
    p = property(_Analog.MoogFilterI_p_get, _Analog.MoogFilterI_p_set)
    k = property(_Analog.MoogFilterI_k_get, _Analog.MoogFilterI_k_set)
    saturationLimit = property(_Analog.MoogFilterI_saturationLimit_get)
    __swig_destroy__ = _Analog.delete_MoogFilterI

# Register MoogFilterI in _Analog:
_Analog.MoogFilterI_swigregister(MoogFilterI)

class MoogFilterII(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LOWPASS = _Analog.MoogFilterII_LOWPASS
    HIGHPASS = _Analog.MoogFilterII_HIGHPASS
    BANDPASS = _Analog.MoogFilterII_BANDPASS

    def __init__(self):
        _Analog.MoogFilterII_swiginit(self, _Analog.new_MoogFilterII())

    def init(self, sampleRate):
        return _Analog.MoogFilterII_init(self, sampleRate)

    def set(self, cutoff, resonance):
        return _Analog.MoogFilterII_set(self, cutoff, resonance)

    def processSample(self, _in):
        return _Analog.MoogFilterII_processSample(self, _in)

    def ProcessBlock(self, n, inputs, outputs):
        return _Analog.MoogFilterII_ProcessBlock(self, n, inputs, outputs)
    PORT_CUTOFF = _Analog.MoogFilterII_PORT_CUTOFF
    PORT_RESONANCE = _Analog.MoogFilterII_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.MoogFilterII_setPort(self, port, v)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.MoogFilterII_Tick(self, I, A, X, Y)
    passMode = property(_Analog.MoogFilterII_passMode_get, _Analog.MoogFilterII_passMode_set)
    sampleRate = property(_Analog.MoogFilterII_sampleRate_get, _Analog.MoogFilterII_sampleRate_set)
    cutoff = property(_Analog.MoogFilterII_cutoff_get, _Analog.MoogFilterII_cutoff_set)
    resonance = property(_Analog.MoogFilterII_resonance_get, _Analog.MoogFilterII_resonance_set)
    out1 = property(_Analog.MoogFilterII_out1_get, _Analog.MoogFilterII_out1_set)
    out2 = property(_Analog.MoogFilterII_out2_get, _Analog.MoogFilterII_out2_set)
    out3 = property(_Analog.MoogFilterII_out3_get, _Analog.MoogFilterII_out3_set)
    out4 = property(_Analog.MoogFilterII_out4_get, _Analog.MoogFilterII_out4_set)
    in1 = property(_Analog.MoogFilterII_in1_get, _Analog.MoogFilterII_in1_set)
    in2 = property(_Analog.MoogFilterII_in2_get, _Analog.MoogFilterII_in2_set)
    in3 = property(_Analog.MoogFilterII_in3_get, _Analog.MoogFilterII_in3_set)
    in4 = property(_Analog.MoogFilterII_in4_get, _Analog.MoogFilterII_in4_set)
    __swig_destroy__ = _Analog.delete_MoogFilterII

# Register MoogFilterII in _Analog:
_Analog.MoogFilterII_swigregister(MoogFilterII)

MOOG_E = _Analog.MOOG_E
MOOG_LOG2E = _Analog.MOOG_LOG2E
MOOG_LOG10E = _Analog.MOOG_LOG10E
MOOG_LN2 = _Analog.MOOG_LN2
MOOG_LN10 = _Analog.MOOG_LN10
MOOG_PI = _Analog.MOOG_PI
MOOG_PI_2 = _Analog.MOOG_PI_2
MOOG_PI_4 = _Analog.MOOG_PI_4
MOOG_1_PI = _Analog.MOOG_1_PI
MOOG_2_PI = _Analog.MOOG_2_PI
MOOG_2_SQRTPI = _Analog.MOOG_2_SQRTPI
MOOG_SQRT2 = _Analog.MOOG_SQRT2
MOOG_SQRT1_2 = _Analog.MOOG_SQRT1_2
MOOG_INV_PI_2 = _Analog.MOOG_INV_PI_2

def moog_lerp(amount, a, b):
    return _Analog.moog_lerp(amount, a, b)

def moog_min(a, b):
    return _Analog.moog_min(a, b)

def moog_saturate(input):
    return _Analog.moog_saturate(input)

def fast_tanh(x):
    return _Analog.fast_tanh(x)
class BiQuadBase(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.BiQuadBase_swiginit(self, _Analog.new_BiQuadBase())
    __swig_destroy__ = _Analog.delete_BiQuadBase

    def Process(self, n, samples):
        return _Analog.BiQuadBase_Process(self, n, samples)

    def Tick(self, s, A=1, X=1, Y=1):
        return _Analog.BiQuadBase_Tick(self, s, A, X, Y)

    def SetBiquadCoefs(self, b, a):
        return _Analog.BiQuadBase_SetBiquadCoefs(self, b, a)

# Register BiQuadBase in _Analog:
_Analog.BiQuadBase_swigregister(BiQuadBase)

class RBJFilter(BiQuadBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LOWPASS = _Analog.RBJFilter_LOWPASS
    HIGHPASS = _Analog.RBJFilter_HIGHPASS
    BANDPASS = _Analog.RBJFilter_BANDPASS
    ALLPASS = _Analog.RBJFilter_ALLPASS
    NOTCH = _Analog.RBJFilter_NOTCH
    PEAK = _Analog.RBJFilter_PEAK
    LOW_SHELF = _Analog.RBJFilter_LOW_SHELF
    HIGH_SHELF = _Analog.RBJFilter_HIGH_SHELF

    def __init__(self, *args):
        _Analog.RBJFilter_swiginit(self, _Analog.new_RBJFilter(*args))
    __swig_destroy__ = _Analog.delete_RBJFilter

    def UpdateCoefficients(self):
        return _Analog.RBJFilter_UpdateCoefficients(self)

    def SetSampleRate(self, sr):
        return _Analog.RBJFilter_SetSampleRate(self, sr)

    def SetCutoff(self, c):
        return _Analog.RBJFilter_SetCutoff(self, c)

    def GetCutoff(self):
        return _Analog.RBJFilter_GetCutoff(self)

    def SetQValue(self, q):
        return _Analog.RBJFilter_SetQValue(self, q)

    def GetQValue(self):
        return _Analog.RBJFilter_GetQValue(self)

    def SetType(self, newType):
        return _Analog.RBJFilter_SetType(self, newType)

    def GetType(self):
        return _Analog.RBJFilter_GetType(self)

# Register RBJFilter in _Analog:
_Analog.RBJFilter_swigregister(RBJFilter)

class PinkingFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.PinkingFilter_swiginit(self, _Analog.new_PinkingFilter())

    def process(self, s):
        return _Analog.PinkingFilter_process(self, s)
    __swig_destroy__ = _Analog.delete_PinkingFilter

# Register PinkingFilter in _Analog:
_Analog.PinkingFilter_swigregister(PinkingFilter)

class BrowningFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.BrowningFilter_swiginit(self, _Analog.new_BrowningFilter())

    def process(self, s):
        return _Analog.BrowningFilter_process(self, s)
    __swig_destroy__ = _Analog.delete_BrowningFilter

# Register BrowningFilter in _Analog:
_Analog.BrowningFilter_swigregister(BrowningFilter)

class WhiteNoiseSource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.WhiteNoiseSource_swiginit(self, _Analog.new_WhiteNoiseSource())
    engine = property(_Analog.WhiteNoiseSource_engine_get, _Analog.WhiteNoiseSource_engine_set)
    dist = property(_Analog.WhiteNoiseSource_dist_get, _Analog.WhiteNoiseSource_dist_set)
    __swig_destroy__ = _Analog.delete_WhiteNoiseSource

# Register WhiteNoiseSource in _Analog:
_Analog.WhiteNoiseSource_swigregister(WhiteNoiseSource)

class WhiteNoise(WhiteNoiseSource):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self):
        return _Analog.WhiteNoise___call__(self)

    def __init__(self):
        _Analog.WhiteNoise_swiginit(self, _Analog.new_WhiteNoise())
    __swig_destroy__ = _Analog.delete_WhiteNoise

# Register WhiteNoise in _Analog:
_Analog.WhiteNoise_swigregister(WhiteNoise)

class PinkNoise(WhiteNoiseSource):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self):
        return _Analog.PinkNoise___call__(self)
    f = property(_Analog.PinkNoise_f_get, _Analog.PinkNoise_f_set)

    def __init__(self):
        _Analog.PinkNoise_swiginit(self, _Analog.new_PinkNoise())
    __swig_destroy__ = _Analog.delete_PinkNoise

# Register PinkNoise in _Analog:
_Analog.PinkNoise_swigregister(PinkNoise)

class BrownNoise(WhiteNoiseSource):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self):
        return _Analog.BrownNoise___call__(self)
    f = property(_Analog.BrownNoise_f_get, _Analog.BrownNoise_f_set)

    def __init__(self):
        _Analog.BrownNoise_swiginit(self, _Analog.new_BrownNoise())
    __swig_destroy__ = _Analog.delete_BrownNoise

# Register BrownNoise in _Analog:
_Analog.BrownNoise_swigregister(BrownNoise)

class NoiseGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    WHITE = _Analog.NoiseGenerator_WHITE
    PINK = _Analog.NoiseGenerator_PINK
    BROWN = _Analog.NoiseGenerator_BROWN
    noise_type = property(_Analog.NoiseGenerator_noise_type_get, _Analog.NoiseGenerator_noise_type_set)

    def produce(self, t, sampleRate, channels, seconds):
        return _Analog.NoiseGenerator_produce(self, t, sampleRate, channels, seconds)

    def Tick(self):
        return _Analog.NoiseGenerator_Tick(self)

    def Process(self, *args):
        return _Analog.NoiseGenerator_Process(self, *args)

    def __init__(self):
        _Analog.NoiseGenerator_swiginit(self, _Analog.new_NoiseGenerator())
    __swig_destroy__ = _Analog.delete_NoiseGenerator

# Register NoiseGenerator in _Analog:
_Analog.NoiseGenerator_swigregister(NoiseGenerator)

class LadderFilterBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Analog.delete_LadderFilterBase

    def Process(self, n, samples):
        return _Analog.LadderFilterBase_Process(self, n, samples)

    def SetResonance(self, r):
        return _Analog.LadderFilterBase_SetResonance(self, r)

    def SetCutoff(self, c):
        return _Analog.LadderFilterBase_SetCutoff(self, c)

    def GetResonance(self):
        return _Analog.LadderFilterBase_GetResonance(self)

    def GetCutoff(self):
        return _Analog.LadderFilterBase_GetCutoff(self)

# Register LadderFilterBase in _Analog:
_Analog.LadderFilterBase_swigregister(LadderFilterBase)

class HuovilainenMoog(LadderFilterBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sampleRate):
        _Analog.HuovilainenMoog_swiginit(self, _Analog.new_HuovilainenMoog(sampleRate))
    __swig_destroy__ = _Analog.delete_HuovilainenMoog

    def Process(self, *args):
        return _Analog.HuovilainenMoog_Process(self, *args)

    def Tick(self, input):
        return _Analog.HuovilainenMoog_Tick(self, input)

    def SetResonance(self, r):
        return _Analog.HuovilainenMoog_SetResonance(self, r)

    def SetCutoff(self, c):
        return _Analog.HuovilainenMoog_SetCutoff(self, c)

# Register HuovilainenMoog in _Analog:
_Analog.HuovilainenMoog_swigregister(HuovilainenMoog)

class VAImprovedMoogFilter(LadderFilterBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    VT = property(_Analog.VAImprovedMoogFilter_VT_get)

    def __init__(self, sampleRate):
        _Analog.VAImprovedMoogFilter_swiginit(self, _Analog.new_VAImprovedMoogFilter(sampleRate))
    __swig_destroy__ = _Analog.delete_VAImprovedMoogFilter

    def Process(self, *args):
        return _Analog.VAImprovedMoogFilter_Process(self, *args)

    def SetResonance(self, r):
        return _Analog.VAImprovedMoogFilter_SetResonance(self, r)

    def SetCutoff(self, c):
        return _Analog.VAImprovedMoogFilter_SetCutoff(self, c)

    def Tick(self, input):
        return _Analog.VAImprovedMoogFilter_Tick(self, input)

# Register VAImprovedMoogFilter in _Analog:
_Analog.VAImprovedMoogFilter_swigregister(VAImprovedMoogFilter)

class VAKrajeskiMoogFilter(LadderFilterBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sampleRate):
        _Analog.VAKrajeskiMoogFilter_swiginit(self, _Analog.new_VAKrajeskiMoogFilter(sampleRate))
    __swig_destroy__ = _Analog.delete_VAKrajeskiMoogFilter

    def Process(self, *args):
        return _Analog.VAKrajeskiMoogFilter_Process(self, *args)

    def Tick(self, input):
        return _Analog.VAKrajeskiMoogFilter_Tick(self, input)

    def SetResonance(self, r):
        return _Analog.VAKrajeskiMoogFilter_SetResonance(self, r)

    def SetCutoff(self, c):
        return _Analog.VAKrajeskiMoogFilter_SetCutoff(self, c)

# Register VAKrajeskiMoogFilter in _Analog:
_Analog.VAKrajeskiMoogFilter_swigregister(VAKrajeskiMoogFilter)

class VAMicrotrackerMoogFilter(LadderFilterBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sampleRate):
        _Analog.VAMicrotrackerMoogFilter_swiginit(self, _Analog.new_VAMicrotrackerMoogFilter(sampleRate))
    __swig_destroy__ = _Analog.delete_VAMicrotrackerMoogFilter

    def Process(self, *args):
        return _Analog.VAMicrotrackerMoogFilter_Process(self, *args)

    def Tick(self, input):
        return _Analog.VAMicrotrackerMoogFilter_Tick(self, input)

    def SetResonance(self, r):
        return _Analog.VAMicrotrackerMoogFilter_SetResonance(self, r)

    def SetCutoff(self, c):
        return _Analog.VAMicrotrackerMoogFilter_SetCutoff(self, c)

# Register VAMicrotrackerMoogFilter in _Analog:
_Analog.VAMicrotrackerMoogFilter_swigregister(VAMicrotrackerMoogFilter)

class MusicDSPMoog(LadderFilterBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sampleRate):
        _Analog.MusicDSPMoog_swiginit(self, _Analog.new_MusicDSPMoog(sampleRate))
    __swig_destroy__ = _Analog.delete_MusicDSPMoog

    def Process(self, *args):
        return _Analog.MusicDSPMoog_Process(self, *args)

    def Tick(self, input):
        return _Analog.MusicDSPMoog_Tick(self, input)

    def SetResonance(self, r):
        return _Analog.MusicDSPMoog_SetResonance(self, r)

    def SetCutoff(self, c):
        return _Analog.MusicDSPMoog_SetCutoff(self, c)

# Register MusicDSPMoog in _Analog:
_Analog.MusicDSPMoog_swigregister(MusicDSPMoog)

class VAOnePole(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sr):
        _Analog.VAOnePole_swiginit(self, _Analog.new_VAOnePole(sr))

    def Reset(self):
        return _Analog.VAOnePole_Reset(self)

    def Tick(self, s):
        return _Analog.VAOnePole_Tick(self, s)

    def SetFeedback(self, fb):
        return _Analog.VAOnePole_SetFeedback(self, fb)

    def GetFeedbackOutput(self):
        return _Analog.VAOnePole_GetFeedbackOutput(self)

    def SetAlpha(self, a):
        return _Analog.VAOnePole_SetAlpha(self, a)

    def SetBeta(self, b):
        return _Analog.VAOnePole_SetBeta(self, b)
    __swig_destroy__ = _Analog.delete_VAOnePole

# Register VAOnePole in _Analog:
_Analog.VAOnePole_swigregister(VAOnePole)

class OberheimVariationMoog(LadderFilterBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sampleRate):
        _Analog.OberheimVariationMoog_swiginit(self, _Analog.new_OberheimVariationMoog(sampleRate))
    __swig_destroy__ = _Analog.delete_OberheimVariationMoog

    def Process(self, *args):
        return _Analog.OberheimVariationMoog_Process(self, *args)

    def Tick(self, input):
        return _Analog.OberheimVariationMoog_Tick(self, input)

    def SetResonance(self, r):
        return _Analog.OberheimVariationMoog_SetResonance(self, r)

    def SetCutoff(self, c):
        return _Analog.OberheimVariationMoog_SetCutoff(self, c)

# Register OberheimVariationMoog in _Analog:
_Analog.OberheimVariationMoog_swigregister(OberheimVariationMoog)

class RKSimulationMoog(LadderFilterBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sampleRate):
        _Analog.RKSimulationMoog_swiginit(self, _Analog.new_RKSimulationMoog(sampleRate))
    __swig_destroy__ = _Analog.delete_RKSimulationMoog

    def Process(self, *args):
        return _Analog.RKSimulationMoog_Process(self, *args)

    def Tick(self, input):
        return _Analog.RKSimulationMoog_Tick(self, input)

    def SetResonance(self, r):
        return _Analog.RKSimulationMoog_SetResonance(self, r)

    def SetCutoff(self, c):
        return _Analog.RKSimulationMoog_SetCutoff(self, c)

# Register RKSimulationMoog in _Analog:
_Analog.RKSimulationMoog_swigregister(RKSimulationMoog)

class SimplifiedMoog(LadderFilterBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sampleRate):
        _Analog.SimplifiedMoog_swiginit(self, _Analog.new_SimplifiedMoog(sampleRate))
    __swig_destroy__ = _Analog.delete_SimplifiedMoog

    def Process(self, *args):
        return _Analog.SimplifiedMoog_Process(self, *args)

    def Tick(self, input):
        return _Analog.SimplifiedMoog_Tick(self, input)

    def SetResonance(self, r):
        return _Analog.SimplifiedMoog_SetResonance(self, r)

    def SetCutoff(self, c):
        return _Analog.SimplifiedMoog_SetCutoff(self, c)

# Register SimplifiedMoog in _Analog:
_Analog.SimplifiedMoog_swigregister(SimplifiedMoog)

class StilsonMoog(LadderFilterBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sampleRate):
        _Analog.StilsonMoog_swiginit(self, _Analog.new_StilsonMoog(sampleRate))
    __swig_destroy__ = _Analog.delete_StilsonMoog

    def Process(self, *args):
        return _Analog.StilsonMoog_Process(self, *args)

    def Tick(self, input):
        return _Analog.StilsonMoog_Tick(self, input)

    def SetResonance(self, r):
        return _Analog.StilsonMoog_SetResonance(self, r)

    def SetCutoff(self, c):
        return _Analog.StilsonMoog_SetCutoff(self, c)

# Register StilsonMoog in _Analog:
_Analog.StilsonMoog_swigregister(StilsonMoog)

class VAMoogLadderFilter1(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    f = property(_Analog.VAMoogLadderFilter1_f_get, _Analog.VAMoogLadderFilter1_f_set)
    fs = property(_Analog.VAMoogLadderFilter1_fs_get, _Analog.VAMoogLadderFilter1_fs_set)
    k = property(_Analog.VAMoogLadderFilter1_k_get, _Analog.VAMoogLadderFilter1_k_set)
    p = property(_Analog.VAMoogLadderFilter1_p_get, _Analog.VAMoogLadderFilter1_p_set)
    scale = property(_Analog.VAMoogLadderFilter1_scale_get, _Analog.VAMoogLadderFilter1_scale_set)
    r = property(_Analog.VAMoogLadderFilter1_r_get, _Analog.VAMoogLadderFilter1_r_set)
    y1 = property(_Analog.VAMoogLadderFilter1_y1_get, _Analog.VAMoogLadderFilter1_y1_set)
    y2 = property(_Analog.VAMoogLadderFilter1_y2_get, _Analog.VAMoogLadderFilter1_y2_set)
    y3 = property(_Analog.VAMoogLadderFilter1_y3_get, _Analog.VAMoogLadderFilter1_y3_set)
    y4 = property(_Analog.VAMoogLadderFilter1_y4_get, _Analog.VAMoogLadderFilter1_y4_set)
    oldx = property(_Analog.VAMoogLadderFilter1_oldx_get, _Analog.VAMoogLadderFilter1_oldx_set)
    oldy1 = property(_Analog.VAMoogLadderFilter1_oldy1_get, _Analog.VAMoogLadderFilter1_oldy1_set)
    oldy2 = property(_Analog.VAMoogLadderFilter1_oldy2_get, _Analog.VAMoogLadderFilter1_oldy2_set)
    oldy3 = property(_Analog.VAMoogLadderFilter1_oldy3_get, _Analog.VAMoogLadderFilter1_oldy3_set)
    cutoff = property(_Analog.VAMoogLadderFilter1_cutoff_get, _Analog.VAMoogLadderFilter1_cutoff_set)
    Q = property(_Analog.VAMoogLadderFilter1_Q_get, _Analog.VAMoogLadderFilter1_Q_set)
    x = property(_Analog.VAMoogLadderFilter1_x_get, _Analog.VAMoogLadderFilter1_x_set)

    def __init__(self, sampleRate, cutoff, resonance):
        _Analog.VAMoogLadderFilter1_swiginit(self, _Analog.new_VAMoogLadderFilter1(sampleRate, cutoff, resonance))

    def coefficients(self, sampleRate, frequency, resonance):
        return _Analog.VAMoogLadderFilter1_coefficients(self, sampleRate, frequency, resonance)

    def setCutoff(self, c):
        return _Analog.VAMoogLadderFilter1_setCutoff(self, c)

    def setResonance(self, res):
        return _Analog.VAMoogLadderFilter1_setResonance(self, res)
    PORT_CUTOFF = _Analog.VAMoogLadderFilter1_PORT_CUTOFF
    PORT_RESONANCE = _Analog.VAMoogLadderFilter1_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.VAMoogLadderFilter1_setPort(self, port, v)

    def Tick(self, input, A=1, X=0, Y=0):
        return _Analog.VAMoogLadderFilter1_Tick(self, input, A, X, Y)
    __swig_destroy__ = _Analog.delete_VAMoogLadderFilter1

# Register VAMoogLadderFilter1 in _Analog:
_Analog.VAMoogLadderFilter1_swigregister(VAMoogLadderFilter1)

class VAMoogLadderFilter2(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    f = property(_Analog.VAMoogLadderFilter2_f_get, _Analog.VAMoogLadderFilter2_f_set)
    p = property(_Analog.VAMoogLadderFilter2_p_get, _Analog.VAMoogLadderFilter2_p_set)
    q = property(_Analog.VAMoogLadderFilter2_q_get, _Analog.VAMoogLadderFilter2_q_set)
    b0 = property(_Analog.VAMoogLadderFilter2_b0_get, _Analog.VAMoogLadderFilter2_b0_set)
    b1 = property(_Analog.VAMoogLadderFilter2_b1_get, _Analog.VAMoogLadderFilter2_b1_set)
    b2 = property(_Analog.VAMoogLadderFilter2_b2_get, _Analog.VAMoogLadderFilter2_b2_set)
    b3 = property(_Analog.VAMoogLadderFilter2_b3_get, _Analog.VAMoogLadderFilter2_b3_set)
    b4 = property(_Analog.VAMoogLadderFilter2_b4_get, _Analog.VAMoogLadderFilter2_b4_set)
    t1 = property(_Analog.VAMoogLadderFilter2_t1_get, _Analog.VAMoogLadderFilter2_t1_set)
    t2 = property(_Analog.VAMoogLadderFilter2_t2_get, _Analog.VAMoogLadderFilter2_t2_set)
    fs = property(_Analog.VAMoogLadderFilter2_fs_get, _Analog.VAMoogLadderFilter2_fs_set)
    fc = property(_Analog.VAMoogLadderFilter2_fc_get, _Analog.VAMoogLadderFilter2_fc_set)
    res = property(_Analog.VAMoogLadderFilter2_res_get, _Analog.VAMoogLadderFilter2_res_set)

    def __init__(self, sr, cutoff, r):
        _Analog.VAMoogLadderFilter2_swiginit(self, _Analog.new_VAMoogLadderFilter2(sr, cutoff, r))

    def calc(self):
        return _Analog.VAMoogLadderFilter2_calc(self)

    def setCutoff(self, f):
        return _Analog.VAMoogLadderFilter2_setCutoff(self, f)

    def setResonance(self, r):
        return _Analog.VAMoogLadderFilter2_setResonance(self, r)
    PORT_CUTOFF = _Analog.VAMoogLadderFilter2_PORT_CUTOFF
    PORT_RESONANCE = _Analog.VAMoogLadderFilter2_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.VAMoogLadderFilter2_setPort(self, port, v)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Analog.VAMoogLadderFilter2_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_VAMoogLadderFilter2

# Register VAMoogLadderFilter2 in _Analog:
_Analog.VAMoogLadderFilter2_swigregister(VAMoogLadderFilter2)

class VAMoogLadderVCF(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fc = property(_Analog.VAMoogLadderVCF_fc_get, _Analog.VAMoogLadderVCF_fc_set)
    fs = property(_Analog.VAMoogLadderVCF_fs_get, _Analog.VAMoogLadderVCF_fs_set)
    res = property(_Analog.VAMoogLadderVCF_res_get, _Analog.VAMoogLadderVCF_res_set)
    out1 = property(_Analog.VAMoogLadderVCF_out1_get, _Analog.VAMoogLadderVCF_out1_set)
    out2 = property(_Analog.VAMoogLadderVCF_out2_get, _Analog.VAMoogLadderVCF_out2_set)
    out3 = property(_Analog.VAMoogLadderVCF_out3_get, _Analog.VAMoogLadderVCF_out3_set)
    out4 = property(_Analog.VAMoogLadderVCF_out4_get, _Analog.VAMoogLadderVCF_out4_set)
    in1 = property(_Analog.VAMoogLadderVCF_in1_get, _Analog.VAMoogLadderVCF_in1_set)
    in2 = property(_Analog.VAMoogLadderVCF_in2_get, _Analog.VAMoogLadderVCF_in2_set)
    in3 = property(_Analog.VAMoogLadderVCF_in3_get, _Analog.VAMoogLadderVCF_in3_set)
    in4 = property(_Analog.VAMoogLadderVCF_in4_get, _Analog.VAMoogLadderVCF_in4_set)

    def __init__(self, sr, Fc, R):
        _Analog.VAMoogLadderVCF_swiginit(self, _Analog.new_VAMoogLadderVCF(sr, Fc, R))

    def setCutoff(self, f):
        return _Analog.VAMoogLadderVCF_setCutoff(self, f)

    def setResonance(self, r):
        return _Analog.VAMoogLadderVCF_setResonance(self, r)
    PORT_CUTOFF = _Analog.VAMoogLadderVCF_PORT_CUTOFF
    PORT_RESONANCE = _Analog.VAMoogLadderVCF_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.VAMoogLadderVCF_setPort(self, port, v)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Analog.VAMoogLadderVCF_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_VAMoogLadderVCF

# Register VAMoogLadderVCF in _Analog:
_Analog.VAMoogLadderVCF_swigregister(VAMoogLadderVCF)

class StilsonMoog2(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def crossfade(self, amount, a, b):
        return _Analog.StilsonMoog2_crossfade(self, amount, a, b)
    fc = property(_Analog.StilsonMoog2_fc_get, _Analog.StilsonMoog2_fc_set)
    fs = property(_Analog.StilsonMoog2_fs_get, _Analog.StilsonMoog2_fs_set)
    Q = property(_Analog.StilsonMoog2_Q_get, _Analog.StilsonMoog2_Q_set)
    p = property(_Analog.StilsonMoog2_p_get, _Analog.StilsonMoog2_p_set)
    cutoff = property(_Analog.StilsonMoog2_cutoff_get, _Analog.StilsonMoog2_cutoff_set)
    resonance = property(_Analog.StilsonMoog2_resonance_get, _Analog.StilsonMoog2_resonance_set)
    lowpass = property(_Analog.StilsonMoog2_lowpass_get, _Analog.StilsonMoog2_lowpass_set)
    highpass = property(_Analog.StilsonMoog2_highpass_get, _Analog.StilsonMoog2_highpass_set)
    bandpass = property(_Analog.StilsonMoog2_bandpass_get, _Analog.StilsonMoog2_bandpass_set)
    lastX = property(_Analog.StilsonMoog2_lastX_get, _Analog.StilsonMoog2_lastX_set)
    state = property(_Analog.StilsonMoog2_state_get, _Analog.StilsonMoog2_state_set)
    output = property(_Analog.StilsonMoog2_output_get, _Analog.StilsonMoog2_output_set)
    pre_gain = property(_Analog.StilsonMoog2_pre_gain_get, _Analog.StilsonMoog2_pre_gain_set)
    post_gain = property(_Analog.StilsonMoog2_post_gain_get, _Analog.StilsonMoog2_post_gain_set)

    def __init__(self, Fc, R, Fs):
        _Analog.StilsonMoog2_swiginit(self, _Analog.new_StilsonMoog2(Fc, R, Fs))

    def setResonance(self, resonance):
        return _Analog.StilsonMoog2_setResonance(self, resonance)

    def setCutoff(self, frequency):
        return _Analog.StilsonMoog2_setCutoff(self, frequency)
    PORT_CUTOFF = _Analog.StilsonMoog2_PORT_CUTOFF
    PORT_RESONANCE = _Analog.StilsonMoog2_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.StilsonMoog2_setPort(self, port, v)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Analog.StilsonMoog2_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_StilsonMoog2

# Register StilsonMoog2 in _Analog:
_Analog.StilsonMoog2_swigregister(StilsonMoog2)
gaintable = cvar.gaintable

class VAMoogLikeFilter(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LOWPASS = _Analog.VAMoogLikeFilter_LOWPASS
    HIGHPASS = _Analog.VAMoogLikeFilter_HIGHPASS
    type = property(_Analog.VAMoogLikeFilter_type_get, _Analog.VAMoogLikeFilter_type_set)
    coef = property(_Analog.VAMoogLikeFilter_coef_get, _Analog.VAMoogLikeFilter_coef_set)
    d = property(_Analog.VAMoogLikeFilter_d_get, _Analog.VAMoogLikeFilter_d_set)
    omega = property(_Analog.VAMoogLikeFilter_omega_get, _Analog.VAMoogLikeFilter_omega_set)
    g = property(_Analog.VAMoogLikeFilter_g_get, _Analog.VAMoogLikeFilter_g_set)
    fs = property(_Analog.VAMoogLikeFilter_fs_get, _Analog.VAMoogLikeFilter_fs_set)
    res = property(_Analog.VAMoogLikeFilter_res_get, _Analog.VAMoogLikeFilter_res_set)
    _in = property(_Analog.VAMoogLikeFilter__in_get, _Analog.VAMoogLikeFilter__in_set)
    _out = property(_Analog.VAMoogLikeFilter__out_get, _Analog.VAMoogLikeFilter__out_set)
    k = property(_Analog.VAMoogLikeFilter_k_get, _Analog.VAMoogLikeFilter_k_set)
    p = property(_Analog.VAMoogLikeFilter_p_get, _Analog.VAMoogLikeFilter_p_set)
    q = property(_Analog.VAMoogLikeFilter_q_get, _Analog.VAMoogLikeFilter_q_set)
    a = property(_Analog.VAMoogLikeFilter_a_get, _Analog.VAMoogLikeFilter_a_set)
    a0 = property(_Analog.VAMoogLikeFilter_a0_get, _Analog.VAMoogLikeFilter_a0_set)
    a1 = property(_Analog.VAMoogLikeFilter_a1_get, _Analog.VAMoogLikeFilter_a1_set)
    a2 = property(_Analog.VAMoogLikeFilter_a2_get, _Analog.VAMoogLikeFilter_a2_set)
    a3 = property(_Analog.VAMoogLikeFilter_a3_get, _Analog.VAMoogLikeFilter_a3_set)
    a4 = property(_Analog.VAMoogLikeFilter_a4_get, _Analog.VAMoogLikeFilter_a4_set)

    def __init__(self, Fs, Fc, Q, G):
        _Analog.VAMoogLikeFilter_swiginit(self, _Analog.new_VAMoogLikeFilter(Fs, Fc, Q, G))

    def SetCoefficients(self, Fc, R):
        return _Analog.VAMoogLikeFilter_SetCoefficients(self, Fc, R)
    PORT_CUTOFF = _Analog.VAMoogLikeFilter_PORT_CUTOFF
    PORT_RESONANCE = _Analog.VAMoogLikeFilter_PORT_RESONANCE
    PORT_LPMODE = _Analog.VAMoogLikeFilter_PORT_LPMODE
    PORT_HPMODE = _Analog.VAMoogLikeFilter_PORT_HPMODE

    def setPort(self, port, v):
        return _Analog.VAMoogLikeFilter_setPort(self, port, v)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Analog.VAMoogLikeFilter_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_VAMoogLikeFilter

# Register VAMoogLikeFilter in _Analog:
_Analog.VAMoogLikeFilter_swigregister(VAMoogLikeFilter)

class Filter(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LOWPASS = _Analog.Filter_LOWPASS
    HIGHPASS = _Analog.Filter_HIGHPASS
    BANDPASS = _Analog.Filter_BANDPASS
    ALLPASS = _Analog.Filter_ALLPASS
    NOTCH = _Analog.Filter_NOTCH
    PEAK = _Analog.Filter_PEAK
    LOW_SHELF = _Analog.Filter_LOW_SHELF
    HIGH_SHELF = _Analog.Filter_HIGH_SHELF
    filter = property(_Analog.Filter_filter_get, _Analog.Filter_filter_set)

    def __init__(self, type, cutoff, sample_rate):
        _Analog.Filter_swiginit(self, _Analog.new_Filter(type, cutoff, sample_rate))
    __swig_destroy__ = _Analog.delete_Filter

    def UpdateCoefficients(self):
        return _Analog.Filter_UpdateCoefficients(self)

    def SetCutoff(self, c):
        return _Analog.Filter_SetCutoff(self, c)

    def SetQ(self, q):
        return _Analog.Filter_SetQ(self, q)

    def GetCutoff(self):
        return _Analog.Filter_GetCutoff(self)

    def GetQ(self):
        return _Analog.Filter_GetQ(self)
    PORT_CUTOFF = _Analog.Filter_PORT_CUTOFF
    PORT_RESONANCE = _Analog.Filter_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.Filter_setPort(self, port, v)

    def Process(self, samples, n):
        return _Analog.Filter_Process(self, samples, n)

    def Tick(self, s, A=1, X=1, Y=1):
        return _Analog.Filter_Tick(self, s, A, X, Y)

# Register Filter in _Analog:
_Analog.Filter_swigregister(Filter)

class RBJLowPassFilter(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cutoff, sample_rate=44100):
        _Analog.RBJLowPassFilter_swiginit(self, _Analog.new_RBJLowPassFilter(cutoff, sample_rate))
    __swig_destroy__ = _Analog.delete_RBJLowPassFilter

# Register RBJLowPassFilter in _Analog:
_Analog.RBJLowPassFilter_swigregister(RBJLowPassFilter)

class RBJHighPassFilter(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cutoff, sample_rate=44100):
        _Analog.RBJHighPassFilter_swiginit(self, _Analog.new_RBJHighPassFilter(cutoff, sample_rate))
    __swig_destroy__ = _Analog.delete_RBJHighPassFilter

# Register RBJHighPassFilter in _Analog:
_Analog.RBJHighPassFilter_swigregister(RBJHighPassFilter)

class RBJBandPassFilter(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cutoff, sample_rate=44100):
        _Analog.RBJBandPassFilter_swiginit(self, _Analog.new_RBJBandPassFilter(cutoff, sample_rate))
    __swig_destroy__ = _Analog.delete_RBJBandPassFilter

# Register RBJBandPassFilter in _Analog:
_Analog.RBJBandPassFilter_swigregister(RBJBandPassFilter)

class RBJAllPassFilter(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cutoff, sample_rate=44100):
        _Analog.RBJAllPassFilter_swiginit(self, _Analog.new_RBJAllPassFilter(cutoff, sample_rate))
    __swig_destroy__ = _Analog.delete_RBJAllPassFilter

# Register RBJAllPassFilter in _Analog:
_Analog.RBJAllPassFilter_swigregister(RBJAllPassFilter)

class RBJNotchFilter(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cutoff, sample_rate=44100):
        _Analog.RBJNotchFilter_swiginit(self, _Analog.new_RBJNotchFilter(cutoff, sample_rate))
    __swig_destroy__ = _Analog.delete_RBJNotchFilter

# Register RBJNotchFilter in _Analog:
_Analog.RBJNotchFilter_swigregister(RBJNotchFilter)

class RBJPeakFilter(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cutoff, sample_rate=44100):
        _Analog.RBJPeakFilter_swiginit(self, _Analog.new_RBJPeakFilter(cutoff, sample_rate))
    __swig_destroy__ = _Analog.delete_RBJPeakFilter

# Register RBJPeakFilter in _Analog:
_Analog.RBJPeakFilter_swigregister(RBJPeakFilter)

class RBJLowShelfFilter(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cutoff, sample_rate=44100):
        _Analog.RBJLowShelfFilter_swiginit(self, _Analog.new_RBJLowShelfFilter(cutoff, sample_rate))
    __swig_destroy__ = _Analog.delete_RBJLowShelfFilter

# Register RBJLowShelfFilter in _Analog:
_Analog.RBJLowShelfFilter_swigregister(RBJLowShelfFilter)

class RBJHighShelfFilter(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cutoff, sample_rate=44100):
        _Analog.RBJHighShelfFilter_swiginit(self, _Analog.new_RBJHighShelfFilter(cutoff, sample_rate))
    __swig_destroy__ = _Analog.delete_RBJHighShelfFilter

# Register RBJHighShelfFilter in _Analog:
_Analog.RBJHighShelfFilter_swigregister(RBJHighShelfFilter)

WHITE = _Analog.WHITE
PINK = _Analog.PINK
BROWN = _Analog.BROWN
class NoiseSamples(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    noise = property(_Analog.NoiseSamples_noise_get, _Analog.NoiseSamples_noise_set)
    type = property(_Analog.NoiseSamples_type_get, _Analog.NoiseSamples_type_set)
    sampleRate = property(_Analog.NoiseSamples_sampleRate_get, _Analog.NoiseSamples_sampleRate_set)
    channels = property(_Analog.NoiseSamples_channels_get, _Analog.NoiseSamples_channels_set)

    def __init__(self, type, sampleRate, channels):
        _Analog.NoiseSamples_swiginit(self, _Analog.new_NoiseSamples(type, sampleRate, channels))
    __swig_destroy__ = _Analog.delete_NoiseSamples

    def produce(self, seconds):
        return _Analog.NoiseSamples_produce(self, seconds)

# Register NoiseSamples in _Analog:
_Analog.NoiseSamples_swigregister(NoiseSamples)

FINN_MOOG = _Analog.FINN_MOOG
IMPROVED_MOOG = _Analog.IMPROVED_MOOG
POLISH_MOOG = _Analog.POLISH_MOOG
MICROTRACKER_MOOG = _Analog.MICROTRACKER_MOOG
MUSICDSP_MOOG = _Analog.MUSICDSP_MOOG
OBERHEIM_MOOG = _Analog.OBERHEIM_MOOG
RK_MOOG = _Analog.RK_MOOG
SIMPLIFIED_MOOG = _Analog.SIMPLIFIED_MOOG
STILSON_MOOG = _Analog.STILSON_MOOG
class MoogLadderFilter(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    moog = property(_Analog.MoogLadderFilter_moog_get, _Analog.MoogLadderFilter_moog_set)
    sr = property(_Analog.MoogLadderFilter_sr_get, _Analog.MoogLadderFilter_sr_set)

    def __init__(self, type, sample_rate=44100):
        _Analog.MoogLadderFilter_swiginit(self, _Analog.new_MoogLadderFilter(type, sample_rate))
    __swig_destroy__ = _Analog.delete_MoogLadderFilter

    def Process(self, n, samples):
        return _Analog.MoogLadderFilter_Process(self, n, samples)

    def SetResonance(self, r):
        return _Analog.MoogLadderFilter_SetResonance(self, r)

    def SetCutoff(self, c):
        return _Analog.MoogLadderFilter_SetCutoff(self, c)

    def setType(self, type):
        return _Analog.MoogLadderFilter_setType(self, type)
    PORT_CUTOFF = _Analog.MoogLadderFilter_PORT_CUTOFF
    PORT_RESONANCE = _Analog.MoogLadderFilter_PORT_RESONANCE
    PORT_TYPE = _Analog.MoogLadderFilter_PORT_TYPE

    def setPort(self, port, v):
        return _Analog.MoogLadderFilter_setPort(self, port, v)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Analog.MoogLadderFilter_Tick(self, I, A, X, Y)

# Register MoogLadderFilter in _Analog:
_Analog.MoogLadderFilter_swigregister(MoogLadderFilter)

class MoogLike(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LOWPASS = _Analog.MoogLike_LOWPASS
    HIGHPASS = _Analog.MoogLike_HIGHPASS
    type = property(_Analog.MoogLike_type_get, _Analog.MoogLike_type_set)
    coef = property(_Analog.MoogLike_coef_get, _Analog.MoogLike_coef_set)
    d = property(_Analog.MoogLike_d_get, _Analog.MoogLike_d_set)
    omega = property(_Analog.MoogLike_omega_get, _Analog.MoogLike_omega_set)
    fs = property(_Analog.MoogLike_fs_get, _Analog.MoogLike_fs_set)
    res = property(_Analog.MoogLike_res_get, _Analog.MoogLike_res_set)
    _in = property(_Analog.MoogLike__in_get, _Analog.MoogLike__in_set)
    _out = property(_Analog.MoogLike__out_get, _Analog.MoogLike__out_set)
    k = property(_Analog.MoogLike_k_get, _Analog.MoogLike_k_set)
    p = property(_Analog.MoogLike_p_get, _Analog.MoogLike_p_set)
    q = property(_Analog.MoogLike_q_get, _Analog.MoogLike_q_set)
    g = property(_Analog.MoogLike_g_get, _Analog.MoogLike_g_set)
    a = property(_Analog.MoogLike_a_get, _Analog.MoogLike_a_set)
    a0 = property(_Analog.MoogLike_a0_get, _Analog.MoogLike_a0_set)
    a1 = property(_Analog.MoogLike_a1_get, _Analog.MoogLike_a1_set)
    a2 = property(_Analog.MoogLike_a2_get, _Analog.MoogLike_a2_set)
    a3 = property(_Analog.MoogLike_a3_get, _Analog.MoogLike_a3_set)
    a4 = property(_Analog.MoogLike_a4_get, _Analog.MoogLike_a4_set)

    def __init__(self, Fc, Q, G, Fs):
        _Analog.MoogLike_swiginit(self, _Analog.new_MoogLike(Fc, Q, G, Fs))

    def SetCoefficients(self, Fc, R):
        return _Analog.MoogLike_SetCoefficients(self, Fc, R)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Analog.MoogLike_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_MoogLike

# Register MoogLike in _Analog:
_Analog.MoogLike_swigregister(MoogLike)

class NonLinearMoog(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sr):
        _Analog.NonLinearMoog_swiginit(self, _Analog.new_NonLinearMoog(sr))
    __swig_destroy__ = _Analog.delete_NonLinearMoog

    def Process(self, *args):
        return _Analog.NonLinearMoog_Process(self, *args)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.NonLinearMoog_Tick(self, I, A, X, Y)

    def SetResonance(self, r):
        return _Analog.NonLinearMoog_SetResonance(self, r)

    def SetCutoff(self, c):
        return _Analog.NonLinearMoog_SetCutoff(self, c)

    def GetResonance(self):
        return _Analog.NonLinearMoog_GetResonance(self)

    def GetCutoff(self):
        return _Analog.NonLinearMoog_GetCutoff(self)
    PORT_CUTOFF = _Analog.NonLinearMoog_PORT_CUTOFF
    PORT_RESONANCE = _Analog.NonLinearMoog_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.NonLinearMoog_setPort(self, port, v)
    stage = property(_Analog.NonLinearMoog_stage_get, _Analog.NonLinearMoog_stage_set)
    stageTanh = property(_Analog.NonLinearMoog_stageTanh_get, _Analog.NonLinearMoog_stageTanh_set)
    delay = property(_Analog.NonLinearMoog_delay_get, _Analog.NonLinearMoog_delay_set)
    thermal = property(_Analog.NonLinearMoog_thermal_get, _Analog.NonLinearMoog_thermal_set)
    tune = property(_Analog.NonLinearMoog_tune_get, _Analog.NonLinearMoog_tune_set)
    acr = property(_Analog.NonLinearMoog_acr_get, _Analog.NonLinearMoog_acr_set)
    resQuad = property(_Analog.NonLinearMoog_resQuad_get, _Analog.NonLinearMoog_resQuad_set)
    cutoff = property(_Analog.NonLinearMoog_cutoff_get, _Analog.NonLinearMoog_cutoff_set)
    resonance = property(_Analog.NonLinearMoog_resonance_get, _Analog.NonLinearMoog_resonance_set)
    sampleRate = property(_Analog.NonLinearMoog_sampleRate_get, _Analog.NonLinearMoog_sampleRate_set)

# Register NonLinearMoog in _Analog:
_Analog.NonLinearMoog_swigregister(NonLinearMoog)

class VANonLinearMoogFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.VANonLinearMoogFilter_swiginit(self, _Analog.new_VANonLinearMoogFilter())
    __swig_destroy__ = _Analog.delete_VANonLinearMoogFilter

    def processSamples(self, samples, numSamples):
        return _Analog.VANonLinearMoogFilter_processSamples(self, samples, numSamples)

    def getFrequency(self):
        return _Analog.VANonLinearMoogFilter_getFrequency(self)

    def getResonance(self):
        return _Analog.VANonLinearMoogFilter_getResonance(self)

    def getDrive(self):
        return _Analog.VANonLinearMoogFilter_getDrive(self)

    def setFrequency(self, f):
        return _Analog.VANonLinearMoogFilter_setFrequency(self, f)

    def setResonance(self, r):
        return _Analog.VANonLinearMoogFilter_setResonance(self, r)

    def setSampleRate(self, s):
        return _Analog.VANonLinearMoogFilter_setSampleRate(self, s)

    def setDrive(self, d):
        return _Analog.VANonLinearMoogFilter_setDrive(self, d)
    PORT_CUTOFF = _Analog.VANonLinearMoogFilter_PORT_CUTOFF
    PORT_RESONANCE = _Analog.VANonLinearMoogFilter_PORT_RESONANCE
    PORT_DRIVE = _Analog.VANonLinearMoogFilter_PORT_DRIVE

    def setPort(self, port, v):
        return _Analog.VANonLinearMoogFilter_setPort(self, port, v)

# Register VANonLinearMoogFilter in _Analog:
_Analog.VANonLinearMoogFilter_swigregister(VANonLinearMoogFilter)


def clip(x):
    return _Analog.clip(x)

def crossfade(a, b, p):
    return _Analog.crossfade(a, b, p)

def stepRK4(t, dt, x, len, f):
    return _Analog.stepRK4(t, dt, x, len, f)
class LadderFilter(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    omega0 = property(_Analog.LadderFilter_omega0_get, _Analog.LadderFilter_omega0_set)
    resonance = property(_Analog.LadderFilter_resonance_get, _Analog.LadderFilter_resonance_set)
    state = property(_Analog.LadderFilter_state_get, _Analog.LadderFilter_state_set)
    input = property(_Analog.LadderFilter_input_get, _Analog.LadderFilter_input_set)
    sampleRate = property(_Analog.LadderFilter_sampleRate_get, _Analog.LadderFilter_sampleRate_set)
    LP = _Analog.LadderFilter_LP
    HP = _Analog.LadderFilter_HP
    type = property(_Analog.LadderFilter_type_get, _Analog.LadderFilter_type_set)

    def __init__(self, sr=44100):
        _Analog.LadderFilter_swiginit(self, _Analog.new_LadderFilter(sr))

    def reset(self):
        return _Analog.LadderFilter_reset(self)

    def setCutoff(self, cutoff):
        return _Analog.LadderFilter_setCutoff(self, cutoff)

    def setResonance(self, r):
        return _Analog.LadderFilter_setResonance(self, r)
    PORT_CUTOFF = _Analog.LadderFilter_PORT_CUTOFF
    PORT_RESONANCE = _Analog.LadderFilter_PORT_RESONANCE
    PORT_TYPE = _Analog.LadderFilter_PORT_TYPE
    PORT_RESET = _Analog.LadderFilter_PORT_RESET

    def setPort(self, port, v):
        return _Analog.LadderFilter_setPort(self, port, v)

    def process(self, input, dt):
        return _Analog.LadderFilter_process(self, input, dt)

    def lowpass(self):
        return _Analog.LadderFilter_lowpass(self)

    def highpass(self):
        return _Analog.LadderFilter_highpass(self)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.LadderFilter_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_LadderFilter

# Register LadderFilter in _Analog:
_Analog.LadderFilter_swigregister(LadderFilter)

class FirstOrderFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a1, b0, b1, g):
        _Analog.FirstOrderFilter_swiginit(self, _Analog.new_FirstOrderFilter(a1, b0, b1, g))

    def process(self, _in):
        return _Analog.FirstOrderFilter_process(self, _in)
    __swig_destroy__ = _Analog.delete_FirstOrderFilter

# Register FirstOrderFilter in _Analog:
_Analog.FirstOrderFilter_swigregister(FirstOrderFilter)

class VAMoogVoltageControlledFilter(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a1 = property(_Analog.VAMoogVoltageControlledFilter_a1_get, _Analog.VAMoogVoltageControlledFilter_a1_set)
    b0 = property(_Analog.VAMoogVoltageControlledFilter_b0_get, _Analog.VAMoogVoltageControlledFilter_b0_set)
    b1 = property(_Analog.VAMoogVoltageControlledFilter_b1_get, _Analog.VAMoogVoltageControlledFilter_b1_set)
    g = property(_Analog.VAMoogVoltageControlledFilter_g_get, _Analog.VAMoogVoltageControlledFilter_g_set)
    Fc = property(_Analog.VAMoogVoltageControlledFilter_Fc_get, _Analog.VAMoogVoltageControlledFilter_Fc_set)
    R = property(_Analog.VAMoogVoltageControlledFilter_R_get, _Analog.VAMoogVoltageControlledFilter_R_set)
    sampleRate = property(_Analog.VAMoogVoltageControlledFilter_sampleRate_get, _Analog.VAMoogVoltageControlledFilter_sampleRate_set)
    filters = property(_Analog.VAMoogVoltageControlledFilter_filters_get, _Analog.VAMoogVoltageControlledFilter_filters_set)
    gComp = property(_Analog.VAMoogVoltageControlledFilter_gComp_get)
    gRes = property(_Analog.VAMoogVoltageControlledFilter_gRes_get, _Analog.VAMoogVoltageControlledFilter_gRes_set)
    delayed_filter_output = property(_Analog.VAMoogVoltageControlledFilter_delayed_filter_output_get, _Analog.VAMoogVoltageControlledFilter_delayed_filter_output_set)
    two_pole_low_pass = _Analog.VAMoogVoltageControlledFilter_two_pole_low_pass
    four_pole_low_pass = _Analog.VAMoogVoltageControlledFilter_four_pole_low_pass
    two_pole_band_pass = _Analog.VAMoogVoltageControlledFilter_two_pole_band_pass
    four_pole_band_pass = _Analog.VAMoogVoltageControlledFilter_four_pole_band_pass
    two_pole_high_pass = _Analog.VAMoogVoltageControlledFilter_two_pole_high_pass
    four_pole_high_pass = _Analog.VAMoogVoltageControlledFilter_four_pole_high_pass
    filter_t = property(_Analog.VAMoogVoltageControlledFilter_filter_t_get, _Analog.VAMoogVoltageControlledFilter_filter_t_set)
    filter_weights = property(_Analog.VAMoogVoltageControlledFilter_filter_weights_get, _Analog.VAMoogVoltageControlledFilter_filter_weights_set)

    def __init__(self, sr=44100):
        _Analog.VAMoogVoltageControlledFilter_swiginit(self, _Analog.new_VAMoogVoltageControlledFilter(sr))

    def process(self, _in):
        return _Analog.VAMoogVoltageControlledFilter_process(self, _in)

    def calculate_coefficients(self, sampleRate, frequencyHz, resonance):
        return _Analog.VAMoogVoltageControlledFilter_calculate_coefficients(self, sampleRate, frequencyHz, resonance)

    def set_filter_type(self, type):
        return _Analog.VAMoogVoltageControlledFilter_set_filter_type(self, type)

    def setCutoff(self, f):
        return _Analog.VAMoogVoltageControlledFilter_setCutoff(self, f)

    def setResonance(self, r):
        return _Analog.VAMoogVoltageControlledFilter_setResonance(self, r)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.VAMoogVoltageControlledFilter_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_VAMoogVoltageControlledFilter

# Register VAMoogVoltageControlledFilter in _Analog:
_Analog.VAMoogVoltageControlledFilter_swigregister(VAMoogVoltageControlledFilter)

class VAStilsonMoogFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    gaintable = _Analog.VAStilsonMoogFilter_gaintable

    def crossfade(self, amount, a, b):
        return _Analog.VAStilsonMoogFilter_crossfade(self, amount, a, b)
    fc = property(_Analog.VAStilsonMoogFilter_fc_get, _Analog.VAStilsonMoogFilter_fc_set)
    fs = property(_Analog.VAStilsonMoogFilter_fs_get, _Analog.VAStilsonMoogFilter_fs_set)
    Q = property(_Analog.VAStilsonMoogFilter_Q_get, _Analog.VAStilsonMoogFilter_Q_set)
    p = property(_Analog.VAStilsonMoogFilter_p_get, _Analog.VAStilsonMoogFilter_p_set)
    cutoff = property(_Analog.VAStilsonMoogFilter_cutoff_get, _Analog.VAStilsonMoogFilter_cutoff_set)
    resonance = property(_Analog.VAStilsonMoogFilter_resonance_get, _Analog.VAStilsonMoogFilter_resonance_set)
    lowpass = property(_Analog.VAStilsonMoogFilter_lowpass_get, _Analog.VAStilsonMoogFilter_lowpass_set)
    highpass = property(_Analog.VAStilsonMoogFilter_highpass_get, _Analog.VAStilsonMoogFilter_highpass_set)
    bandpass = property(_Analog.VAStilsonMoogFilter_bandpass_get, _Analog.VAStilsonMoogFilter_bandpass_set)
    lastX = property(_Analog.VAStilsonMoogFilter_lastX_get, _Analog.VAStilsonMoogFilter_lastX_set)
    state = property(_Analog.VAStilsonMoogFilter_state_get, _Analog.VAStilsonMoogFilter_state_set)
    output = property(_Analog.VAStilsonMoogFilter_output_get, _Analog.VAStilsonMoogFilter_output_set)
    pre_gain = property(_Analog.VAStilsonMoogFilter_pre_gain_get, _Analog.VAStilsonMoogFilter_pre_gain_set)
    post_gain = property(_Analog.VAStilsonMoogFilter_post_gain_get, _Analog.VAStilsonMoogFilter_post_gain_set)
    LP = _Analog.VAStilsonMoogFilter_LP
    HP = _Analog.VAStilsonMoogFilter_HP
    BP = _Analog.VAStilsonMoogFilter_BP
    type = property(_Analog.VAStilsonMoogFilter_type_get, _Analog.VAStilsonMoogFilter_type_set)

    def __init__(self, Fc, R, Fs):
        _Analog.VAStilsonMoogFilter_swiginit(self, _Analog.new_VAStilsonMoogFilter(Fc, R, Fs))

    def setResonance(self, resonance):
        return _Analog.VAStilsonMoogFilter_setResonance(self, resonance)

    def setCutoff(self, frequency):
        return _Analog.VAStilsonMoogFilter_setCutoff(self, frequency)
    PORT_CUTOFF = _Analog.VAStilsonMoogFilter_PORT_CUTOFF
    PORT_RESONANCE = _Analog.VAStilsonMoogFilter_PORT_RESONANCE
    PORT_LP = _Analog.VAStilsonMoogFilter_PORT_LP
    PORT_HP = _Analog.VAStilsonMoogFilter_PORT_HP
    PORT_BP = _Analog.VAStilsonMoogFilter_PORT_BP
    PORT_PREGAIN = _Analog.VAStilsonMoogFilter_PORT_PREGAIN
    PORT_POSTGAIN = _Analog.VAStilsonMoogFilter_PORT_POSTGAIN

    def setPort(self, port, v):
        return _Analog.VAStilsonMoogFilter_setPort(self, port, v)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Analog.VAStilsonMoogFilter_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_VAStilsonMoogFilter

# Register VAStilsonMoogFilter in _Analog:
_Analog.VAStilsonMoogFilter_swigregister(VAStilsonMoogFilter)

class VAStilsonMoogFilter2(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    gaintable = _Analog.VAStilsonMoogFilter2_gaintable

    def crossfade(self, amount, a, b):
        return _Analog.VAStilsonMoogFilter2_crossfade(self, amount, a, b)
    fc = property(_Analog.VAStilsonMoogFilter2_fc_get, _Analog.VAStilsonMoogFilter2_fc_set)
    fs = property(_Analog.VAStilsonMoogFilter2_fs_get, _Analog.VAStilsonMoogFilter2_fs_set)
    Q = property(_Analog.VAStilsonMoogFilter2_Q_get, _Analog.VAStilsonMoogFilter2_Q_set)
    p = property(_Analog.VAStilsonMoogFilter2_p_get, _Analog.VAStilsonMoogFilter2_p_set)
    cutoff = property(_Analog.VAStilsonMoogFilter2_cutoff_get, _Analog.VAStilsonMoogFilter2_cutoff_set)
    resonance = property(_Analog.VAStilsonMoogFilter2_resonance_get, _Analog.VAStilsonMoogFilter2_resonance_set)
    lowpass = property(_Analog.VAStilsonMoogFilter2_lowpass_get, _Analog.VAStilsonMoogFilter2_lowpass_set)
    highpass = property(_Analog.VAStilsonMoogFilter2_highpass_get, _Analog.VAStilsonMoogFilter2_highpass_set)
    bandpass = property(_Analog.VAStilsonMoogFilter2_bandpass_get, _Analog.VAStilsonMoogFilter2_bandpass_set)
    lastX = property(_Analog.VAStilsonMoogFilter2_lastX_get, _Analog.VAStilsonMoogFilter2_lastX_set)
    state = property(_Analog.VAStilsonMoogFilter2_state_get, _Analog.VAStilsonMoogFilter2_state_set)
    output = property(_Analog.VAStilsonMoogFilter2_output_get, _Analog.VAStilsonMoogFilter2_output_set)
    pre_gain = property(_Analog.VAStilsonMoogFilter2_pre_gain_get, _Analog.VAStilsonMoogFilter2_pre_gain_set)
    post_gain = property(_Analog.VAStilsonMoogFilter2_post_gain_get, _Analog.VAStilsonMoogFilter2_post_gain_set)
    LP = _Analog.VAStilsonMoogFilter2_LP
    HP = _Analog.VAStilsonMoogFilter2_HP
    BP = _Analog.VAStilsonMoogFilter2_BP
    type = property(_Analog.VAStilsonMoogFilter2_type_get, _Analog.VAStilsonMoogFilter2_type_set)

    def __init__(self, Fc, R, Fs):
        _Analog.VAStilsonMoogFilter2_swiginit(self, _Analog.new_VAStilsonMoogFilter2(Fc, R, Fs))

    def setResonance(self, resonance):
        return _Analog.VAStilsonMoogFilter2_setResonance(self, resonance)

    def setCutoff(self, frequency):
        return _Analog.VAStilsonMoogFilter2_setCutoff(self, frequency)
    PORT_CUTOFF = _Analog.VAStilsonMoogFilter2_PORT_CUTOFF
    PORT_RESONANCE = _Analog.VAStilsonMoogFilter2_PORT_RESONANCE
    PORT_LP = _Analog.VAStilsonMoogFilter2_PORT_LP
    PORT_HP = _Analog.VAStilsonMoogFilter2_PORT_HP
    PORT_BP = _Analog.VAStilsonMoogFilter2_PORT_BP
    PORT_PREGAIN = _Analog.VAStilsonMoogFilter2_PORT_PREGAIN
    PORT_POSTGAIN = _Analog.VAStilsonMoogFilter2_PORT_POSTGAIN

    def setPort(self, port, v):
        return _Analog.VAStilsonMoogFilter2_setPort(self, port, v)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Analog.VAStilsonMoogFilter2_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_VAStilsonMoogFilter2

# Register VAStilsonMoogFilter2 in _Analog:
_Analog.VAStilsonMoogFilter2_swigregister(VAStilsonMoogFilter2)

class DinkyFilter(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FILTER_MODE_LOWPASS = _Analog.DinkyFilter_FILTER_MODE_LOWPASS
    FILTER_MODE_HIGHPASS = _Analog.DinkyFilter_FILTER_MODE_HIGHPASS
    FILTER_MODE_BANDPASS = _Analog.DinkyFilter_FILTER_MODE_BANDPASS
    kNumFilterModes = _Analog.DinkyFilter_kNumFilterModes

    def __init__(self):
        _Analog.DinkyFilter_swiginit(self, _Analog.new_DinkyFilter())

    def process(self, inputValue):
        return _Analog.DinkyFilter_process(self, inputValue)

    def setCutoff(self, newCutoff):
        return _Analog.DinkyFilter_setCutoff(self, newCutoff)

    def setResonance(self, newResonance):
        return _Analog.DinkyFilter_setResonance(self, newResonance)

    def setFilterMode(self, newMode):
        return _Analog.DinkyFilter_setFilterMode(self, newMode)
    PORT_CUTOFF = _Analog.DinkyFilter_PORT_CUTOFF
    PORT_RESONANCE = _Analog.DinkyFilter_PORT_RESONANCE
    PORT_FILTERMODE = _Analog.DinkyFilter_PORT_FILTERMODE

    def setPort(self, port, v):
        return _Analog.DinkyFilter_setPort(self, port, v)

    def Tick(self, _in, A=1, X=0, Y=0):
        return _Analog.DinkyFilter_Tick(self, _in, A, X, Y)
    __swig_destroy__ = _Analog.delete_DinkyFilter

# Register DinkyFilter in _Analog:
_Analog.DinkyFilter_swigregister(DinkyFilter)

class Dioder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vt = property(_Analog.Dioder_vt_get, _Analog.Dioder_vt_set)
    eta = property(_Analog.Dioder_eta_get, _Analog.Dioder_eta_set)
    _is = property(_Analog.Dioder__is_get, _Analog.Dioder__is_set)
    Vt = property(_Analog.Dioder_Vt_get, _Analog.Dioder_Vt_set)
    Eta = property(_Analog.Dioder_Eta_get, _Analog.Dioder_Eta_set)
    Is = property(_Analog.Dioder_Is_get, _Analog.Dioder_Is_set)
    sampleRate = property(_Analog.Dioder_sampleRate_get, _Analog.Dioder_sampleRate_set)
    ctr = property(_Analog.Dioder_ctr_get, _Analog.Dioder_ctr_set)

    def __init__(self, sr=44100.0):
        _Analog.Dioder_swiginit(self, _Analog.new_Dioder(sr))

    def Tick(self, In, V=1, E=1, I=1):
        return _Analog.Dioder_Tick(self, In, V, E, I)
    __swig_destroy__ = _Analog.delete_Dioder

# Register Dioder in _Analog:
_Analog.Dioder_swigregister(Dioder)

class VirtualAnalogDiodeLadderFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eta = property(_Analog.VirtualAnalogDiodeLadderFilter_eta_get, _Analog.VirtualAnalogDiodeLadderFilter_eta_set)
    VT = property(_Analog.VirtualAnalogDiodeLadderFilter_VT_get, _Analog.VirtualAnalogDiodeLadderFilter_VT_set)
    gamma = property(_Analog.VirtualAnalogDiodeLadderFilter_gamma_get, _Analog.VirtualAnalogDiodeLadderFilter_gamma_set)
    C = property(_Analog.VirtualAnalogDiodeLadderFilter_C_get, _Analog.VirtualAnalogDiodeLadderFilter_C_set)
    Mp = property(_Analog.VirtualAnalogDiodeLadderFilter_Mp_get, _Analog.VirtualAnalogDiodeLadderFilter_Mp_set)
    VC1 = property(_Analog.VirtualAnalogDiodeLadderFilter_VC1_get, _Analog.VirtualAnalogDiodeLadderFilter_VC1_set)
    VC2 = property(_Analog.VirtualAnalogDiodeLadderFilter_VC2_get, _Analog.VirtualAnalogDiodeLadderFilter_VC2_set)
    VC3 = property(_Analog.VirtualAnalogDiodeLadderFilter_VC3_get, _Analog.VirtualAnalogDiodeLadderFilter_VC3_set)
    VC4 = property(_Analog.VirtualAnalogDiodeLadderFilter_VC4_get, _Analog.VirtualAnalogDiodeLadderFilter_VC4_set)
    u1 = property(_Analog.VirtualAnalogDiodeLadderFilter_u1_get, _Analog.VirtualAnalogDiodeLadderFilter_u1_set)
    u2 = property(_Analog.VirtualAnalogDiodeLadderFilter_u2_get, _Analog.VirtualAnalogDiodeLadderFilter_u2_set)
    u3 = property(_Analog.VirtualAnalogDiodeLadderFilter_u3_get, _Analog.VirtualAnalogDiodeLadderFilter_u3_set)
    u4 = property(_Analog.VirtualAnalogDiodeLadderFilter_u4_get, _Analog.VirtualAnalogDiodeLadderFilter_u4_set)
    u5 = property(_Analog.VirtualAnalogDiodeLadderFilter_u5_get, _Analog.VirtualAnalogDiodeLadderFilter_u5_set)
    s1 = property(_Analog.VirtualAnalogDiodeLadderFilter_s1_get, _Analog.VirtualAnalogDiodeLadderFilter_s1_set)
    s2 = property(_Analog.VirtualAnalogDiodeLadderFilter_s2_get, _Analog.VirtualAnalogDiodeLadderFilter_s2_set)
    s3 = property(_Analog.VirtualAnalogDiodeLadderFilter_s3_get, _Analog.VirtualAnalogDiodeLadderFilter_s3_set)
    s4 = property(_Analog.VirtualAnalogDiodeLadderFilter_s4_get, _Analog.VirtualAnalogDiodeLadderFilter_s4_set)
    Vin = property(_Analog.VirtualAnalogDiodeLadderFilter_Vin_get, _Analog.VirtualAnalogDiodeLadderFilter_Vin_set)
    Vout = property(_Analog.VirtualAnalogDiodeLadderFilter_Vout_get, _Analog.VirtualAnalogDiodeLadderFilter_Vout_set)
    VoutPrev = property(_Analog.VirtualAnalogDiodeLadderFilter_VoutPrev_get, _Analog.VirtualAnalogDiodeLadderFilter_VoutPrev_set)
    Fs = property(_Analog.VirtualAnalogDiodeLadderFilter_Fs_get, _Analog.VirtualAnalogDiodeLadderFilter_Fs_set)
    inputFs = property(_Analog.VirtualAnalogDiodeLadderFilter_inputFs_get, _Analog.VirtualAnalogDiodeLadderFilter_inputFs_set)
    iteration = property(_Analog.VirtualAnalogDiodeLadderFilter_iteration_get, _Analog.VirtualAnalogDiodeLadderFilter_iteration_set)
    maxNrIterations = property(_Analog.VirtualAnalogDiodeLadderFilter_maxNrIterations_get, _Analog.VirtualAnalogDiodeLadderFilter_maxNrIterations_set)
    biasParameter = property(_Analog.VirtualAnalogDiodeLadderFilter_biasParameter_get, _Analog.VirtualAnalogDiodeLadderFilter_biasParameter_set)
    gainParameter = property(_Analog.VirtualAnalogDiodeLadderFilter_gainParameter_get, _Analog.VirtualAnalogDiodeLadderFilter_gainParameter_set)

    def __init__(self, sr=44100.0):
        _Analog.VirtualAnalogDiodeLadderFilter_swiginit(self, _Analog.new_VirtualAnalogDiodeLadderFilter(sr))

    def setCutoff(self, c):
        return _Analog.VirtualAnalogDiodeLadderFilter_setCutoff(self, c)

    def setResonance(self, q):
        return _Analog.VirtualAnalogDiodeLadderFilter_setResonance(self, q)
    PORT_CUTOFF = _Analog.VirtualAnalogDiodeLadderFilter_PORT_CUTOFF
    PORT_Q = _Analog.VirtualAnalogDiodeLadderFilter_PORT_Q

    def setPort(self, port, v):
        return _Analog.VirtualAnalogDiodeLadderFilter_setPort(self, port, v)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.VirtualAnalogDiodeLadderFilter_Tick(self, I, A, X, Y)

    def ProcessBlock(self, n, _in, out, A=None, X=None, Y=None):
        return _Analog.VirtualAnalogDiodeLadderFilter_ProcessBlock(self, n, _in, out, A, X, Y)
    __swig_destroy__ = _Analog.delete_VirtualAnalogDiodeLadderFilter

# Register VirtualAnalogDiodeLadderFilter in _Analog:
_Analog.VirtualAnalogDiodeLadderFilter_swigregister(VirtualAnalogDiodeLadderFilter)

class MorphableFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.MorphableFilter_swiginit(self, _Analog.new_MorphableFilter())

    def process(self, input):
        return _Analog.MorphableFilter_process(self, input)

    def calculate_coefficients(self, sampleRate, frequencyHz, resonance):
        return _Analog.MorphableFilter_calculate_coefficients(self, sampleRate, frequencyHz, resonance)

    def set_filter_type(self, type):
        return _Analog.MorphableFilter_set_filter_type(self, type)
    __swig_destroy__ = _Analog.delete_MorphableFilter

# Register MorphableFilter in _Analog:
_Analog.MorphableFilter_swigregister(MorphableFilter)

class MS20Filter(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Analog.MS20Filter_swiginit(self, _Analog.new_MS20Filter(*args))
    __swig_destroy__ = _Analog.delete_MS20Filter

    def setSampleRate(self, SR):
        return _Analog.MS20Filter_setSampleRate(self, SR)

    def reset(self):
        return _Analog.MS20Filter_reset(self)

    def signum(self, x):
        return _Analog.MS20Filter_signum(self, x)

    def fx(self, x):
        return _Analog.MS20Filter_fx(self, x)

    def dfx(self, x):
        return _Analog.MS20Filter_dfx(self, x)

    def process(self, Vin, fc, resonance):
        return _Analog.MS20Filter_process(self, Vin, fc, resonance)

    def getOutput(self):
        return _Analog.MS20Filter_getOutput(self)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.MS20Filter_Tick(self, I, A, X, Y)
    Fc = property(_Analog.MS20Filter_Fc_get, _Analog.MS20Filter_Fc_set)
    R = property(_Analog.MS20Filter_R_get, _Analog.MS20Filter_R_set)

    def setCutoff(self, f):
        return _Analog.MS20Filter_setCutoff(self, f)

    def setResonance(self, r):
        return _Analog.MS20Filter_setResonance(self, r)
    PORT_CUTOFF = _Analog.MS20Filter_PORT_CUTOFF
    PORT_RESONANCE = _Analog.MS20Filter_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.MS20Filter_setPort(self, port, v)

# Register MS20Filter in _Analog:
_Analog.MS20Filter_swigregister(MS20Filter)


def getPitch(index):
    return _Analog.getPitch(index)

def tptlpupw(state, inp, cutoff, srInv):
    return _Analog.tptlpupw(state, inp, cutoff, srInv)

def tptlp(state, inp, cutoff, srInv):
    return _Analog.tptlp(state, inp, cutoff, srInv)

def tptpc(state, inp, cutoff):
    return _Analog.tptpc(state, inp, cutoff)

def linsc(param, min, max):
    return _Analog.linsc(param, min, max)

def logsc(param, min, max, rolloff=19.0):
    return _Analog.logsc(param, min, max, rolloff)
class OBXFilter(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SampleRate = property(_Analog.OBXFilter_SampleRate_get, _Analog.OBXFilter_SampleRate_set)
    sampleRateInv = property(_Analog.OBXFilter_sampleRateInv_get, _Analog.OBXFilter_sampleRateInv_set)
    bandPassSw = property(_Analog.OBXFilter_bandPassSw_get, _Analog.OBXFilter_bandPassSw_set)
    mm = property(_Analog.OBXFilter_mm_get, _Analog.OBXFilter_mm_set)
    selfOscPush = property(_Analog.OBXFilter_selfOscPush_get, _Analog.OBXFilter_selfOscPush_set)

    def __init__(self):
        _Analog.OBXFilter_swiginit(self, _Analog.new_OBXFilter())

    def setSampleRate(self, sr):
        return _Analog.OBXFilter_setSampleRate(self, sr)

    def setMultimode(self, m):
        return _Analog.OBXFilter_setMultimode(self, m)

    def setResonance(self, res):
        return _Analog.OBXFilter_setResonance(self, res)

    def setCutoff(self, f):
        return _Analog.OBXFilter_setCutoff(self, f)
    PORT_CUTOFF = _Analog.OBXFilter_PORT_CUTOFF
    PORT_RESONANCE = _Analog.OBXFilter_PORT_RESONANCE
    PORT_MULTIMODE = _Analog.OBXFilter_PORT_MULTIMODE
    PORT_LP24 = _Analog.OBXFilter_PORT_LP24
    PORT_BANDPASSSW = _Analog.OBXFilter_PORT_BANDPASSSW
    PORT_SELFOSCSW = _Analog.OBXFilter_PORT_SELFOSCSW

    def setPort(self, port, v):
        return _Analog.OBXFilter_setPort(self, port, v)

    def diodePairResistanceApprox(self, x):
        return _Analog.OBXFilter_diodePairResistanceApprox(self, x)

    def NR(self, sample, g):
        return _Analog.OBXFilter_NR(self, sample, g)

    def Apply(self, sample, g):
        return _Analog.OBXFilter_Apply(self, sample, g)

    def NR24(self, sample, g, lpc):
        return _Analog.OBXFilter_NR24(self, sample, g, lpc)

    def Apply4Pole(self, sample, g, A=1, X=0, Y=1):
        return _Analog.OBXFilter_Apply4Pole(self, sample, g, A, X, Y)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.OBXFilter_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_OBXFilter

# Register OBXFilter in _Analog:
_Analog.OBXFilter_swigregister(OBXFilter)
sq2_12 = cvar.sq2_12
dc = cvar.dc
ln2 = cvar.ln2
mult = cvar.mult

class RCFilter(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MAX_FILTERS = _Analog.RCFilter_MAX_FILTERS
    i = property(_Analog.RCFilter_i_get, _Analog.RCFilter_i_set)
    last_sample = property(_Analog.RCFilter_last_sample_get, _Analog.RCFilter_last_sample_set)
    max = property(_Analog.RCFilter_max_get, _Analog.RCFilter_max_set)
    amplify = property(_Analog.RCFilter_amplify_get, _Analog.RCFilter_amplify_set)
    R = property(_Analog.RCFilter_R_get, _Analog.RCFilter_R_set)
    C = property(_Analog.RCFilter_C_get, _Analog.RCFilter_C_set)
    invR = property(_Analog.RCFilter_invR_get, _Analog.RCFilter_invR_set)
    dt_div_C = property(_Analog.RCFilter_dt_div_C_get, _Analog.RCFilter_dt_div_C_set)
    di = property(_Analog.RCFilter_di_get, _Analog.RCFilter_di_set)
    out = property(_Analog.RCFilter_out_get, _Analog.RCFilter_out_set)
    freq = property(_Analog.RCFilter_freq_get, _Analog.RCFilter_freq_set)
    sampleRate = property(_Analog.RCFilter_sampleRate_get, _Analog.RCFilter_sampleRate_set)
    LOW = _Analog.RCFilter_LOW
    HIGH = _Analog.RCFilter_HIGH
    BAND = _Analog.RCFilter_BAND
    band = property(_Analog.RCFilter_band_get, _Analog.RCFilter_band_set)

    def __init__(self, max, amplify, sr=44100):
        _Analog.RCFilter_swiginit(self, _Analog.new_RCFilter(max, amplify, sr))

    def LC_filter(self, sound, filter_no):
        return _Analog.RCFilter_LC_filter(self, sound, filter_no)

    def other(self, f, x):
        return _Analog.RCFilter_other(self, f, x)

    def RC_set_freq(self, f):
        return _Analog.RCFilter_RC_set_freq(self, f)

    def setCutoff(self, f):
        return _Analog.RCFilter_setCutoff(self, f)

    def RC_filter(self, sound, mode, filter_no):
        return _Analog.RCFilter_RC_filter(self, sound, mode, filter_no)

    def RC_bandpass(self, sound):
        return _Analog.RCFilter_RC_bandpass(self, sound)

    def RC_highpass(self, sound):
        return _Analog.RCFilter_RC_highpass(self, sound)

    def RC_lowpass(self, sound):
        return _Analog.RCFilter_RC_lowpass(self, sound)
    PORT_CUTOFF = _Analog.RCFilter_PORT_CUTOFF
    PORT_LP = _Analog.RCFilter_PORT_LP
    PORT_HP = _Analog.RCFilter_PORT_HP
    PORT_BP = _Analog.RCFilter_PORT_BP

    def setPort(self, port, v):
        return _Analog.RCFilter_setPort(self, port, v)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.RCFilter_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_RCFilter

# Register RCFilter in _Analog:
_Analog.RCFilter_swigregister(RCFilter)

class RKLadderFilter(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    omega0 = property(_Analog.RKLadderFilter_omega0_get, _Analog.RKLadderFilter_omega0_set)
    resonance = property(_Analog.RKLadderFilter_resonance_get, _Analog.RKLadderFilter_resonance_set)
    state = property(_Analog.RKLadderFilter_state_get, _Analog.RKLadderFilter_state_set)
    input = property(_Analog.RKLadderFilter_input_get, _Analog.RKLadderFilter_input_set)
    sampleRate = property(_Analog.RKLadderFilter_sampleRate_get, _Analog.RKLadderFilter_sampleRate_set)
    LP = _Analog.RKLadderFilter_LP
    HP = _Analog.RKLadderFilter_HP
    type = property(_Analog.RKLadderFilter_type_get, _Analog.RKLadderFilter_type_set)

    def __init__(self, sr):
        _Analog.RKLadderFilter_swiginit(self, _Analog.new_RKLadderFilter(sr))

    def reset(self):
        return _Analog.RKLadderFilter_reset(self)

    def setCutoff(self, cutoff):
        return _Analog.RKLadderFilter_setCutoff(self, cutoff)

    def setResonance(self, r):
        return _Analog.RKLadderFilter_setResonance(self, r)
    PORT_CUTOFF = _Analog.RKLadderFilter_PORT_CUTOFF
    PORT_RESONANCE = _Analog.RKLadderFilter_PORT_RESONANCE
    PORT_LP = _Analog.RKLadderFilter_PORT_LP
    PORT_HP = _Analog.RKLadderFilter_PORT_HP

    def setPort(self, port, v):
        return _Analog.RKLadderFilter_setPort(self, port, v)

    def process(self, input, dt):
        return _Analog.RKLadderFilter_process(self, input, dt)

    def lowpass(self):
        return _Analog.RKLadderFilter_lowpass(self)

    def highpass(self):
        return _Analog.RKLadderFilter_highpass(self)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.RKLadderFilter_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_RKLadderFilter

# Register RKLadderFilter in _Analog:
_Analog.RKLadderFilter_swigregister(RKLadderFilter)

class SlewLimiter(FunctionProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _delta = property(_Analog.SlewLimiter__delta_get, _Analog.SlewLimiter__delta_set)
    _last = property(_Analog.SlewLimiter__last_get, _Analog.SlewLimiter__last_set)

    def __init__(self, sampleRate=1000.0, milliseconds=1.0, range=10.0):
        _Analog.SlewLimiter_swiginit(self, _Analog.new_SlewLimiter(sampleRate, milliseconds, range))

    def setParams(self, sampleRate=1000.0, milliseconds=1.0, range=10.0):
        return _Analog.SlewLimiter_setParams(self, sampleRate, milliseconds, range)

    def setLast(self, last):
        return _Analog.SlewLimiter_setLast(self, last)

    def next(self, *args):
        return _Analog.SlewLimiter_next(self, *args)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.SlewLimiter_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_SlewLimiter

# Register SlewLimiter in _Analog:
_Analog.SlewLimiter_swigregister(SlewLimiter)

class Slew(FunctionProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rise = property(_Analog.Slew_rise_get, _Analog.Slew_rise_set)
    fall = property(_Analog.Slew_fall_get, _Analog.Slew_fall_set)
    target = property(_Analog.Slew_target_get, _Analog.Slew_target_set)
    out = property(_Analog.Slew_out_get, _Analog.Slew_out_set)
    sr = property(_Analog.Slew_sr_get, _Analog.Slew_sr_set)

    def __init__(self, hz, fs):
        _Analog.Slew_swiginit(self, _Analog.new_Slew(hz, fs))

    def setRise(self, hz):
        return _Analog.Slew_setRise(self, hz)

    def setFall(self, hz):
        return _Analog.Slew_setFall(self, hz)

    def setTarget(self, t):
        return _Analog.Slew_setTarget(self, t)
    PORT_RISE = _Analog.Slew_PORT_RISE
    PORT_FALL = _Analog.Slew_PORT_FALL
    PORT_TARGET = _Analog.Slew_PORT_TARGET

    def setPort(self, port, v):
        return _Analog.Slew_setPort(self, port, v)

    def Tick(self, *args):
        return _Analog.Slew_Tick(self, *args)
    __swig_destroy__ = _Analog.delete_Slew

# Register Slew in _Analog:
_Analog.Slew_swigregister(Slew)

class SstFilterState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.SstFilterState_swiginit(self, _Analog.new_SstFilterState())

    def reset(self):
        return _Analog.SstFilterState_reset(self)
    __swig_destroy__ = _Analog.delete_SstFilterState

# Register SstFilterState in _Analog:
_Analog.SstFilterState_swigregister(SstFilterState)

class SstFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fut_none = _Analog.SstFilter_fut_none
    fut_lp12 = _Analog.SstFilter_fut_lp12
    fut_lp24 = _Analog.SstFilter_fut_lp24
    fut_lpmoog = _Analog.SstFilter_fut_lpmoog
    fut_hp12 = _Analog.SstFilter_fut_hp12
    fut_hp24 = _Analog.SstFilter_fut_hp24
    fut_bp12 = _Analog.SstFilter_fut_bp12
    fut_notch12 = _Analog.SstFilter_fut_notch12
    fut_comb_pos = _Analog.SstFilter_fut_comb_pos
    fut_SNH = _Analog.SstFilter_fut_SNH
    fut_vintageladder = _Analog.SstFilter_fut_vintageladder
    fut_obxd_2pole_lp = _Analog.SstFilter_fut_obxd_2pole_lp
    fut_obxd_4pole = _Analog.SstFilter_fut_obxd_4pole
    fut_k35_lp = _Analog.SstFilter_fut_k35_lp
    fut_k35_hp = _Analog.SstFilter_fut_k35_hp
    fut_diode = _Analog.SstFilter_fut_diode
    fut_cutoffwarp_lp = _Analog.SstFilter_fut_cutoffwarp_lp
    fut_cutoffwarp_hp = _Analog.SstFilter_fut_cutoffwarp_hp
    fut_cutoffwarp_n = _Analog.SstFilter_fut_cutoffwarp_n
    fut_cutoffwarp_bp = _Analog.SstFilter_fut_cutoffwarp_bp
    fut_obxd_2pole_hp = _Analog.SstFilter_fut_obxd_2pole_hp
    fut_obxd_2pole_n = _Analog.SstFilter_fut_obxd_2pole_n
    fut_obxd_2pole_bp = _Analog.SstFilter_fut_obxd_2pole_bp
    fut_bp24 = _Analog.SstFilter_fut_bp24
    fut_notch24 = _Analog.SstFilter_fut_notch24
    fut_comb_neg = _Analog.SstFilter_fut_comb_neg
    fut_apf = _Analog.SstFilter_fut_apf
    fut_cutoffwarp_ap = _Analog.SstFilter_fut_cutoffwarp_ap
    fut_resonancewarp_lp = _Analog.SstFilter_fut_resonancewarp_lp
    fut_resonancewarp_hp = _Analog.SstFilter_fut_resonancewarp_hp
    fut_resonancewarp_n = _Analog.SstFilter_fut_resonancewarp_n
    fut_resonancewarp_bp = _Analog.SstFilter_fut_resonancewarp_bp
    fut_resonancewarp_ap = _Analog.SstFilter_fut_resonancewarp_ap
    fut_tripole = _Analog.SstFilter_fut_tripole
    num_filter_types = _Analog.SstFilter_num_filter_types
    st_Standard = _Analog.SstFilter_st_Standard
    st_Driven = _Analog.SstFilter_st_Driven
    st_Clean = _Analog.SstFilter_st_Clean
    st_Medium = _Analog.SstFilter_st_Medium
    st_Notch = _Analog.SstFilter_st_Notch
    st_NotchMild = _Analog.SstFilter_st_NotchMild
    st_lpmoog_6dB = _Analog.SstFilter_st_lpmoog_6dB
    st_lpmoog_12dB = _Analog.SstFilter_st_lpmoog_12dB
    st_lpmoog_18dB = _Analog.SstFilter_st_lpmoog_18dB
    st_lpmoog_24dB = _Analog.SstFilter_st_lpmoog_24dB
    st_diode_6dB = _Analog.SstFilter_st_diode_6dB
    st_diode_12dB = _Analog.SstFilter_st_diode_12dB
    st_diode_18dB = _Analog.SstFilter_st_diode_18dB
    st_diode_24dB = _Analog.SstFilter_st_diode_24dB
    st_cutoffwarp_tanh1 = _Analog.SstFilter_st_cutoffwarp_tanh1
    st_cutoffwarp_tanh2 = _Analog.SstFilter_st_cutoffwarp_tanh2
    st_cutoffwarp_tanh3 = _Analog.SstFilter_st_cutoffwarp_tanh3
    st_cutoffwarp_tanh4 = _Analog.SstFilter_st_cutoffwarp_tanh4
    st_cutoffwarp_softclip1 = _Analog.SstFilter_st_cutoffwarp_softclip1
    st_cutoffwarp_softclip2 = _Analog.SstFilter_st_cutoffwarp_softclip2
    st_cutoffwarp_softclip3 = _Analog.SstFilter_st_cutoffwarp_softclip3
    st_cutoffwarp_softclip4 = _Analog.SstFilter_st_cutoffwarp_softclip4
    st_cutoffwarp_ojd1 = _Analog.SstFilter_st_cutoffwarp_ojd1
    st_cutoffwarp_ojd2 = _Analog.SstFilter_st_cutoffwarp_ojd2
    st_cutoffwarp_ojd3 = _Analog.SstFilter_st_cutoffwarp_ojd3
    st_cutoffwarp_ojd4 = _Analog.SstFilter_st_cutoffwarp_ojd4
    st_resonancewarp_tanh1 = _Analog.SstFilter_st_resonancewarp_tanh1
    st_resonancewarp_tanh2 = _Analog.SstFilter_st_resonancewarp_tanh2
    st_resonancewarp_tanh3 = _Analog.SstFilter_st_resonancewarp_tanh3
    st_resonancewarp_tanh4 = _Analog.SstFilter_st_resonancewarp_tanh4
    st_resonancewarp_softclip1 = _Analog.SstFilter_st_resonancewarp_softclip1
    st_resonancewarp_softclip2 = _Analog.SstFilter_st_resonancewarp_softclip2
    st_resonancewarp_softclip3 = _Analog.SstFilter_st_resonancewarp_softclip3
    st_resonancewarp_softclip4 = _Analog.SstFilter_st_resonancewarp_softclip4
    st_tripole_LLL1 = _Analog.SstFilter_st_tripole_LLL1
    st_tripole_LHL1 = _Analog.SstFilter_st_tripole_LHL1
    st_tripole_HLH1 = _Analog.SstFilter_st_tripole_HLH1
    st_tripole_HHH1 = _Analog.SstFilter_st_tripole_HHH1
    st_tripole_LLL2 = _Analog.SstFilter_st_tripole_LLL2
    st_tripole_LHL2 = _Analog.SstFilter_st_tripole_LHL2
    st_tripole_HLH2 = _Analog.SstFilter_st_tripole_HLH2
    st_tripole_HHH2 = _Analog.SstFilter_st_tripole_HHH2
    st_tripole_LLL3 = _Analog.SstFilter_st_tripole_LLL3
    st_tripole_LHL3 = _Analog.SstFilter_st_tripole_LHL3
    st_tripole_HLH3 = _Analog.SstFilter_st_tripole_HLH3
    st_tripole_HHH3 = _Analog.SstFilter_st_tripole_HHH3
    filters = property(_Analog.SstFilter_filters_get, _Analog.SstFilter_filters_set)
    coeffMaker = property(_Analog.SstFilter_coeffMaker_get, _Analog.SstFilter_coeffMaker_set)
    filterType = property(_Analog.SstFilter_filterType_get, _Analog.SstFilter_filterType_set)
    filterSubType = property(_Analog.SstFilter_filterSubType_get, _Analog.SstFilter_filterSubType_set)
    freqParam = property(_Analog.SstFilter_freqParam_get, _Analog.SstFilter_freqParam_set)
    resParam = property(_Analog.SstFilter_resParam_get, _Analog.SstFilter_resParam_set)

    def __init__(self, *args):
        _Analog.SstFilter_swiginit(self, _Analog.new_SstFilter(*args))
    __swig_destroy__ = _Analog.delete_SstFilter

    def freq_hz_to_note_num(self, freqHz):
        return _Analog.SstFilter_freq_hz_to_note_num(self, freqHz)

    def setCutoff(self, fc):
        return _Analog.SstFilter_setCutoff(self, fc)

    def setResonance(self, r):
        return _Analog.SstFilter_setResonance(self, r)

    def ProcessInplace(self, framesPerBuffer, buffer):
        return _Analog.SstFilter_ProcessInplace(self, framesPerBuffer, buffer)

    def ProcessBlock(self, framesPerBuffer, buffer, out):
        return _Analog.SstFilter_ProcessBlock(self, framesPerBuffer, buffer, out)

# Register SstFilter in _Analog:
_Analog.SstFilter_swigregister(SstFilter)

class F2PAR(GeneratorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filter = property(_Analog.F2PAR_filter_get, _Analog.F2PAR_filter_set)
    attack_rate = property(_Analog.F2PAR_attack_rate_get, _Analog.F2PAR_attack_rate_set)
    release_rate = property(_Analog.F2PAR_release_rate_get, _Analog.F2PAR_release_rate_set)
    current = property(_Analog.F2PAR_current_get, _Analog.F2PAR_current_set)
    sampleRate = property(_Analog.F2PAR_sampleRate_get, _Analog.F2PAR_sampleRate_set)
    ATTACK = _Analog.F2PAR_ATTACK
    RELEASE = _Analog.F2PAR_RELEASE
    IDLE = _Analog.F2PAR_IDLE
    state = property(_Analog.F2PAR_state_get, _Analog.F2PAR_state_set)

    def __init__(self, a, r, sr=44100):
        _Analog.F2PAR_swiginit(self, _Analog.new_F2PAR(a, r, sr))

    def noteOn(self):
        return _Analog.F2PAR_noteOn(self)

    def noteOff(self):
        return _Analog.F2PAR_noteOff(self)
    PORT_ATTACK = _Analog.F2PAR_PORT_ATTACK
    PORT_RELEASE = _Analog.F2PAR_PORT_RELEASE
    PORT_NOTEON = _Analog.F2PAR_PORT_NOTEON
    PORT_NOTEOFF = _Analog.F2PAR_PORT_NOTEOFF

    def setPort(self, port, v):
        return _Analog.F2PAR_setPort(self, port, v)

    def Tick(self, I=1, A=1, X=1, Y=1):
        return _Analog.F2PAR_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_F2PAR

# Register F2PAR in _Analog:
_Analog.F2PAR_swigregister(F2PAR)

class F2PASR(GeneratorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filter = property(_Analog.F2PASR_filter_get, _Analog.F2PASR_filter_set)
    attack_rate = property(_Analog.F2PASR_attack_rate_get, _Analog.F2PASR_attack_rate_set)
    sustain = property(_Analog.F2PASR_sustain_get, _Analog.F2PASR_sustain_set)
    release_rate = property(_Analog.F2PASR_release_rate_get, _Analog.F2PASR_release_rate_set)
    current = property(_Analog.F2PASR_current_get, _Analog.F2PASR_current_set)
    sampleRate = property(_Analog.F2PASR_sampleRate_get, _Analog.F2PASR_sampleRate_set)
    ATTACK = _Analog.F2PASR_ATTACK
    SUSTAIN = _Analog.F2PASR_SUSTAIN
    RELEASE = _Analog.F2PASR_RELEASE
    IDLE = _Analog.F2PASR_IDLE
    state = property(_Analog.F2PASR_state_get, _Analog.F2PASR_state_set)

    def __init__(self, a, s, r, sampleRate=44100):
        _Analog.F2PASR_swiginit(self, _Analog.new_F2PASR(a, s, r, sampleRate))

    def noteOn(self):
        return _Analog.F2PASR_noteOn(self)

    def noteOff(self):
        return _Analog.F2PASR_noteOff(self)
    PORT_ATTACK = _Analog.F2PASR_PORT_ATTACK
    PORT_SUSTAIN = _Analog.F2PASR_PORT_SUSTAIN
    PORT_RELEASE = _Analog.F2PASR_PORT_RELEASE
    PORT_NOTEON = _Analog.F2PASR_PORT_NOTEON
    PORT_NOTEOFF = _Analog.F2PASR_PORT_NOTEOFF

    def setPort(self, port, v):
        return _Analog.F2PASR_setPort(self, port, v)

    def Tick(self, I=1, A=1, X=1, Y=1):
        return _Analog.F2PASR_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_F2PASR

# Register F2PASR in _Analog:
_Analog.F2PASR_swigregister(F2PASR)

class F2PADSR(GeneratorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filter = property(_Analog.F2PADSR_filter_get, _Analog.F2PADSR_filter_set)
    attack_rate = property(_Analog.F2PADSR_attack_rate_get, _Analog.F2PADSR_attack_rate_set)
    decay_rate = property(_Analog.F2PADSR_decay_rate_get, _Analog.F2PADSR_decay_rate_set)
    sustain = property(_Analog.F2PADSR_sustain_get, _Analog.F2PADSR_sustain_set)
    release_rate = property(_Analog.F2PADSR_release_rate_get, _Analog.F2PADSR_release_rate_set)
    current = property(_Analog.F2PADSR_current_get, _Analog.F2PADSR_current_set)
    sampleRate = property(_Analog.F2PADSR_sampleRate_get, _Analog.F2PADSR_sampleRate_set)
    ATTACK = _Analog.F2PADSR_ATTACK
    DECAY = _Analog.F2PADSR_DECAY
    SUSTAIN = _Analog.F2PADSR_SUSTAIN
    RELEASE = _Analog.F2PADSR_RELEASE
    IDLE = _Analog.F2PADSR_IDLE
    state = property(_Analog.F2PADSR_state_get, _Analog.F2PADSR_state_set)

    def __init__(self, a, d, s, r, sampleRate=44100):
        _Analog.F2PADSR_swiginit(self, _Analog.new_F2PADSR(a, d, s, r, sampleRate))

    def noteOn(self):
        return _Analog.F2PADSR_noteOn(self)

    def noteOff(self):
        return _Analog.F2PADSR_noteOff(self)
    PORT_ATTACK = _Analog.F2PADSR_PORT_ATTACK
    PORT_DECAY = _Analog.F2PADSR_PORT_DECAY
    PORT_SUSTAIN = _Analog.F2PADSR_PORT_SUSTAIN
    PORT_RELEASE = _Analog.F2PADSR_PORT_RELEASE
    PORT_NOTEON = _Analog.F2PADSR_PORT_NOTEON
    PORT_NOTEOFF = _Analog.F2PADSR_PORT_NOTEOFF

    def setPort(self, port, v):
        return _Analog.F2PADSR_setPort(self, port, v)

    def Tick(self, I=1, A=1, X=1, Y=1):
        return _Analog.F2PADSR_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_F2PADSR

# Register F2PADSR in _Analog:
_Analog.F2PADSR_swigregister(F2PADSR)

class VCS3DiodeFilter(MonoFXProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eta = property(_Analog.VCS3DiodeFilter_eta_get, _Analog.VCS3DiodeFilter_eta_set)
    VT = property(_Analog.VCS3DiodeFilter_VT_get, _Analog.VCS3DiodeFilter_VT_set)
    gamma = property(_Analog.VCS3DiodeFilter_gamma_get, _Analog.VCS3DiodeFilter_gamma_set)
    C = property(_Analog.VCS3DiodeFilter_C_get, _Analog.VCS3DiodeFilter_C_set)
    Mp = property(_Analog.VCS3DiodeFilter_Mp_get, _Analog.VCS3DiodeFilter_Mp_set)
    biasParameter = property(_Analog.VCS3DiodeFilter_biasParameter_get, _Analog.VCS3DiodeFilter_biasParameter_set)
    gainParameter = property(_Analog.VCS3DiodeFilter_gainParameter_get, _Analog.VCS3DiodeFilter_gainParameter_set)
    VC1 = property(_Analog.VCS3DiodeFilter_VC1_get, _Analog.VCS3DiodeFilter_VC1_set)
    VC2 = property(_Analog.VCS3DiodeFilter_VC2_get, _Analog.VCS3DiodeFilter_VC2_set)
    VC3 = property(_Analog.VCS3DiodeFilter_VC3_get, _Analog.VCS3DiodeFilter_VC3_set)
    VC4 = property(_Analog.VCS3DiodeFilter_VC4_get, _Analog.VCS3DiodeFilter_VC4_set)
    u1 = property(_Analog.VCS3DiodeFilter_u1_get, _Analog.VCS3DiodeFilter_u1_set)
    u2 = property(_Analog.VCS3DiodeFilter_u2_get, _Analog.VCS3DiodeFilter_u2_set)
    u3 = property(_Analog.VCS3DiodeFilter_u3_get, _Analog.VCS3DiodeFilter_u3_set)
    u4 = property(_Analog.VCS3DiodeFilter_u4_get, _Analog.VCS3DiodeFilter_u4_set)
    u5 = property(_Analog.VCS3DiodeFilter_u5_get, _Analog.VCS3DiodeFilter_u5_set)
    s1 = property(_Analog.VCS3DiodeFilter_s1_get, _Analog.VCS3DiodeFilter_s1_set)
    s2 = property(_Analog.VCS3DiodeFilter_s2_get, _Analog.VCS3DiodeFilter_s2_set)
    s3 = property(_Analog.VCS3DiodeFilter_s3_get, _Analog.VCS3DiodeFilter_s3_set)
    s4 = property(_Analog.VCS3DiodeFilter_s4_get, _Analog.VCS3DiodeFilter_s4_set)
    Vin = property(_Analog.VCS3DiodeFilter_Vin_get, _Analog.VCS3DiodeFilter_Vin_set)
    Vout = property(_Analog.VCS3DiodeFilter_Vout_get, _Analog.VCS3DiodeFilter_Vout_set)
    VoutPrev = property(_Analog.VCS3DiodeFilter_VoutPrev_get, _Analog.VCS3DiodeFilter_VoutPrev_set)
    Fs = property(_Analog.VCS3DiodeFilter_Fs_get, _Analog.VCS3DiodeFilter_Fs_set)
    inputFs = property(_Analog.VCS3DiodeFilter_inputFs_get, _Analog.VCS3DiodeFilter_inputFs_set)
    iteration = property(_Analog.VCS3DiodeFilter_iteration_get, _Analog.VCS3DiodeFilter_iteration_set)
    maxNrIterations = property(_Analog.VCS3DiodeFilter_maxNrIterations_get, _Analog.VCS3DiodeFilter_maxNrIterations_set)
    numChannels = property(_Analog.VCS3DiodeFilter_numChannels_get, _Analog.VCS3DiodeFilter_numChannels_set)

    def __init__(self, sr=44100.0):
        _Analog.VCS3DiodeFilter_swiginit(self, _Analog.new_VCS3DiodeFilter(sr))

    def setCutoff(self, f):
        return _Analog.VCS3DiodeFilter_setCutoff(self, f)

    def setResonance(self, G):
        return _Analog.VCS3DiodeFilter_setResonance(self, G)
    PORT_CUTOFF = _Analog.VCS3DiodeFilter_PORT_CUTOFF
    PORT_RESONANCE = _Analog.VCS3DiodeFilter_PORT_RESONANCE

    def setPort(self, port, v):
        return _Analog.VCS3DiodeFilter_setPort(self, port, v)

    def ProcessBlock(self, numSamples, inputs, outputs):
        return _Analog.VCS3DiodeFilter_ProcessBlock(self, numSamples, inputs, outputs)
    __swig_destroy__ = _Analog.delete_VCS3DiodeFilter

# Register VCS3DiodeFilter in _Analog:
_Analog.VCS3DiodeFilter_swigregister(VCS3DiodeFilter)

class VCS3Filter(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Analog.delete_VCS3Filter

# Register VCS3Filter in _Analog:
_Analog.VCS3Filter_swigregister(VCS3Filter)

class onePoleTPTFB_LP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def initialize_LP(self, newSampleRate):
        return _Analog.onePoleTPTFB_LP_initialize_LP(self, newSampleRate)

    def setAlpha_LP(self, alpha):
        return _Analog.onePoleTPTFB_LP_setAlpha_LP(self, alpha)

    def doFilterStage_LP(self, xn, z1fb, ynLP):
        return _Analog.onePoleTPTFB_LP_doFilterStage_LP(self, xn, z1fb, ynLP)

    def __init__(self):
        _Analog.onePoleTPTFB_LP_swiginit(self, _Analog.new_onePoleTPTFB_LP())
    __swig_destroy__ = _Analog.delete_onePoleTPTFB_LP

# Register onePoleTPTFB_LP in _Analog:
_Analog.onePoleTPTFB_LP_swigregister(onePoleTPTFB_LP)

class onePoleTPT_LP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def initialize_LP(self, newSampleRate):
        return _Analog.onePoleTPT_LP_initialize_LP(self, newSampleRate)

    def getSampleRate_LP(self):
        return _Analog.onePoleTPT_LP_getSampleRate_LP(self)

    def getZ1regValue_LP(self):
        return _Analog.onePoleTPT_LP_getZ1regValue_LP(self)

    def setFc_LP(self, fc):
        return _Analog.onePoleTPT_LP_setFc_LP(self, fc)

    def doFilterStage_LP(self, xn, ynLP):
        return _Analog.onePoleTPT_LP_doFilterStage_LP(self, xn, ynLP)

    def __init__(self):
        _Analog.onePoleTPT_LP_swiginit(self, _Analog.new_onePoleTPT_LP())
    __swig_destroy__ = _Analog.delete_onePoleTPT_LP

# Register onePoleTPT_LP in _Analog:
_Analog.onePoleTPT_LP_swigregister(onePoleTPT_LP)
pi = cvar.pi
Fs = cvar.Fs

class onePoleTPT_HP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def initialize_HP(self, newSampleRate):
        return _Analog.onePoleTPT_HP_initialize_HP(self, newSampleRate)

    def getSampleRate_HP(self):
        return _Analog.onePoleTPT_HP_getSampleRate_HP(self)

    def getZ1regValue_HP(self):
        return _Analog.onePoleTPT_HP_getZ1regValue_HP(self)

    def setFc_HP(self, fc):
        return _Analog.onePoleTPT_HP_setFc_HP(self, fc)

    def doFilterStage_HP(self, xn, ynHP):
        return _Analog.onePoleTPT_HP_doFilterStage_HP(self, xn, ynHP)

    def __init__(self):
        _Analog.onePoleTPT_HP_swiginit(self, _Analog.new_onePoleTPT_HP())
    __swig_destroy__ = _Analog.delete_onePoleTPT_HP

# Register onePoleTPT_HP in _Analog:
_Analog.onePoleTPT_HP_swigregister(onePoleTPT_HP)

class onePoleTPT_LPHP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def initialize_LPHP(self, newSampleRate):
        return _Analog.onePoleTPT_LPHP_initialize_LPHP(self, newSampleRate)

    def getSampleRate_LPHP(self):
        return _Analog.onePoleTPT_LPHP_getSampleRate_LPHP(self)

    def getZ1regValue_LPHP(self):
        return _Analog.onePoleTPT_LPHP_getZ1regValue_LPHP(self)

    def setFc_LPHP(self, fc):
        return _Analog.onePoleTPT_LPHP_setFc_LPHP(self, fc)

    def doFilterStage_LPHP(self, xn, ynLP, ynHP):
        return _Analog.onePoleTPT_LPHP_doFilterStage_LPHP(self, xn, ynLP, ynHP)

    def __init__(self):
        _Analog.onePoleTPT_LPHP_swiginit(self, _Analog.new_onePoleTPT_LPHP())
    __swig_destroy__ = _Analog.delete_onePoleTPT_LPHP

# Register onePoleTPT_LPHP in _Analog:
_Analog.onePoleTPT_LPHP_swigregister(onePoleTPT_LPHP)

class onePoleTPT_AP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def initialize_AP(self, newSampleRate):
        return _Analog.onePoleTPT_AP_initialize_AP(self, newSampleRate)

    def getSampleRate_AP(self):
        return _Analog.onePoleTPT_AP_getSampleRate_AP(self)

    def getZ1regValue_AP(self):
        return _Analog.onePoleTPT_AP_getZ1regValue_AP(self)

    def setFc_AP(self, fc):
        return _Analog.onePoleTPT_AP_setFc_AP(self, fc)

    def doFilterStage_AP(self, xn, ynAP):
        return _Analog.onePoleTPT_AP_doFilterStage_AP(self, xn, ynAP)

    def __init__(self):
        _Analog.onePoleTPT_AP_swiginit(self, _Analog.new_onePoleTPT_AP())
    __swig_destroy__ = _Analog.delete_onePoleTPT_AP

# Register onePoleTPT_AP in _Analog:
_Analog.onePoleTPT_AP_swigregister(onePoleTPT_AP)

class xodMoogLadder4P(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Analog.xodMoogLadder4P_swiginit(self, _Analog.new_xodMoogLadder4P())
    LPF1 = property(_Analog.xodMoogLadder4P_LPF1_get, _Analog.xodMoogLadder4P_LPF1_set)
    LPF2 = property(_Analog.xodMoogLadder4P_LPF2_get, _Analog.xodMoogLadder4P_LPF2_set)
    LPF3 = property(_Analog.xodMoogLadder4P_LPF3_get, _Analog.xodMoogLadder4P_LPF3_set)
    LPF4 = property(_Analog.xodMoogLadder4P_LPF4_get, _Analog.xodMoogLadder4P_LPF4_set)

    def initialize(self, newSampleRate):
        return _Analog.xodMoogLadder4P_initialize(self, newSampleRate)

    def setFcAndRes(self, cutoff, resonance, sampleRate):
        return _Analog.xodMoogLadder4P_setFcAndRes(self, cutoff, resonance, sampleRate)

    def advance(self, xn, yn):
        return _Analog.xodMoogLadder4P_advance(self, xn, yn)

    def setCutoff(self, Fc):
        return _Analog.xodMoogLadder4P_setCutoff(self, Fc)

    def setResonance(self, r):
        return _Analog.xodMoogLadder4P_setResonance(self, r)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Analog.xodMoogLadder4P_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Analog.delete_xodMoogLadder4P

# Register xodMoogLadder4P in _Analog:
_Analog.xodMoogLadder4P_swigregister(xodMoogLadder4P)

class VCA(AmplifierProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    gain = property(_Analog.VCA_gain_get, _Analog.VCA_gain_set)
    gainSmooth = property(_Analog.VCA_gainSmooth_get, _Analog.VCA_gainSmooth_set)
    vtSmooth = property(_Analog.VCA_vtSmooth_get, _Analog.VCA_vtSmooth_set)
    etaSmooth = property(_Analog.VCA_etaSmooth_get, _Analog.VCA_etaSmooth_set)
    isSmooth = property(_Analog.VCA_isSmooth_get, _Analog.VCA_isSmooth_set)
    Vt = property(_Analog.VCA_Vt_get, _Analog.VCA_Vt_set)
    Eta = property(_Analog.VCA_Eta_get, _Analog.VCA_Eta_set)
    Is = property(_Analog.VCA_Is_get, _Analog.VCA_Is_set)
    dcBias = property(_Analog.VCA_dcBias_get, _Analog.VCA_dcBias_set)

    def __init__(self, g=1.0, sampleRate=44100.0):
        _Analog.VCA_swiginit(self, _Analog.new_VCA(g, sampleRate))
    PORT_GAIN = _Analog.VCA_PORT_GAIN
    PORT_VT = _Analog.VCA_PORT_VT
    PORT_ETA = _Analog.VCA_PORT_ETA
    PORT_IS = _Analog.VCA_PORT_IS
    PORT_DCBIAS = _Analog.VCA_PORT_DCBIAS
    PORT_RESET = _Analog.VCA_PORT_RESET
    PORT_CIRCUIT = _Analog.VCA_PORT_CIRCUIT
    PORT_RANDOMIZE = _Analog.VCA_PORT_RANDOMIZE

    def setPort(self, port, v):
        return _Analog.VCA_setPort(self, port, v)

    def Reset(self):
        return _Analog.VCA_Reset(self)

    def Randomize(self):
        return _Analog.VCA_Randomize(self)

    def Tick(self, I, A=1, X=-1, Y=1):
        return _Analog.VCA_Tick(self, I, A, X, Y)

    def ProcessBlock(self, n, _in, out):
        return _Analog.VCA_ProcessBlock(self, n, _in, out)
    __swig_destroy__ = _Analog.delete_VCA

# Register VCA in _Analog:
_Analog.VCA_swigregister(VCA)

class VCF(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    f = property(_Analog.VCF_f_get, _Analog.VCF_f_set)
    fs = property(_Analog.VCF_fs_get, _Analog.VCF_fs_set)
    k = property(_Analog.VCF_k_get, _Analog.VCF_k_set)
    p = property(_Analog.VCF_p_get, _Analog.VCF_p_set)
    scale = property(_Analog.VCF_scale_get, _Analog.VCF_scale_set)
    r = property(_Analog.VCF_r_get, _Analog.VCF_r_set)
    y1 = property(_Analog.VCF_y1_get, _Analog.VCF_y1_set)
    y2 = property(_Analog.VCF_y2_get, _Analog.VCF_y2_set)
    y3 = property(_Analog.VCF_y3_get, _Analog.VCF_y3_set)
    y4 = property(_Analog.VCF_y4_get, _Analog.VCF_y4_set)
    oldx = property(_Analog.VCF_oldx_get, _Analog.VCF_oldx_set)
    oldy1 = property(_Analog.VCF_oldy1_get, _Analog.VCF_oldy1_set)
    oldy2 = property(_Analog.VCF_oldy2_get, _Analog.VCF_oldy2_set)
    oldy3 = property(_Analog.VCF_oldy3_get, _Analog.VCF_oldy3_set)
    cutoff = property(_Analog.VCF_cutoff_get, _Analog.VCF_cutoff_set)
    Q = property(_Analog.VCF_Q_get, _Analog.VCF_Q_set)
    F = property(_Analog.VCF_F_get, _Analog.VCF_F_set)
    R = property(_Analog.VCF_R_get, _Analog.VCF_R_set)
    P = property(_Analog.VCF_P_get, _Analog.VCF_P_set)
    SCALE = property(_Analog.VCF_SCALE_get, _Analog.VCF_SCALE_set)
    K = property(_Analog.VCF_K_get, _Analog.VCF_K_set)
    x = property(_Analog.VCF_x_get, _Analog.VCF_x_set)
    envScale = property(_Analog.VCF_envScale_get, _Analog.VCF_envScale_set)
    oversample = property(_Analog.VCF_oversample_get, _Analog.VCF_oversample_set)
    low = property(_Analog.VCF_low_get, _Analog.VCF_low_set)
    high = property(_Analog.VCF_high_get, _Analog.VCF_high_set)
    band = property(_Analog.VCF_band_get, _Analog.VCF_band_set)
    notch = property(_Analog.VCF_notch_get, _Analog.VCF_notch_set)
    machoScale = property(_Analog.VCF_machoScale_get, _Analog.VCF_machoScale_set)
    preGain = property(_Analog.VCF_preGain_get, _Analog.VCF_preGain_set)
    postGain = property(_Analog.VCF_postGain_get, _Analog.VCF_postGain_set)
    dcBias = property(_Analog.VCF_dcBias_get, _Analog.VCF_dcBias_set)
    cMin = property(_Analog.VCF_cMin_get, _Analog.VCF_cMin_set)
    cMax = property(_Analog.VCF_cMax_get, _Analog.VCF_cMax_set)
    sat1 = property(_Analog.VCF_sat1_get, _Analog.VCF_sat1_set)
    sat2 = property(_Analog.VCF_sat2_get, _Analog.VCF_sat2_set)
    sat3 = property(_Analog.VCF_sat3_get, _Analog.VCF_sat3_set)
    sat4 = property(_Analog.VCF_sat4_get, _Analog.VCF_sat4_set)
    sigd1 = property(_Analog.VCF_sigd1_get, _Analog.VCF_sigd1_set)
    sigd2 = property(_Analog.VCF_sigd2_get, _Analog.VCF_sigd2_set)
    invertP = property(_Analog.VCF_invertP_get, _Analog.VCF_invertP_set)
    ONEPOLE = _Analog.VCF_ONEPOLE
    TWOPOLE = _Analog.VCF_TWOPOLE
    THREEPOLE = _Analog.VCF_THREEPOLE
    FOURPOLE = _Analog.VCF_FOURPOLE
    MOOG = _Analog.VCF_MOOG
    LOWPASS = _Analog.VCF_LOWPASS
    HIGHPASS = _Analog.VCF_HIGHPASS
    BANDPASS = _Analog.VCF_BANDPASS
    NOTCH = _Analog.VCF_NOTCH
    APF = _Analog.VCF_APF
    UBS = _Analog.VCF_UBS
    PEAK = _Analog.VCF_PEAK
    SHELF = _Analog.VCF_SHELF
    poles = property(_Analog.VCF_poles_get, _Analog.VCF_poles_set)
    type = property(_Analog.VCF_type_get, _Analog.VCF_type_set)
    PORT_CUTOFF = _Analog.VCF_PORT_CUTOFF
    PORT_RESONANCE = _Analog.VCF_PORT_RESONANCE
    PORT_SAT1 = _Analog.VCF_PORT_SAT1
    PORT_SAT2 = _Analog.VCF_PORT_SAT2
    PORT_SAT3 = _Analog.VCF_PORT_SAT3
    PORT_SAT4 = _Analog.VCF_PORT_SAT4
    PORT_SIGD1 = _Analog.VCF_PORT_SIGD1
    PORT_SIGD2 = _Analog.VCF_PORT_SIGD2
    PORT_INVERTP = _Analog.VCF_PORT_INVERTP
    PORT_ONEPOLE = _Analog.VCF_PORT_ONEPOLE
    PORT_TWOPOLE = _Analog.VCF_PORT_TWOPOLE
    PORT_THREEPOLE = _Analog.VCF_PORT_THREEPOLE
    PORT_FOURPOLE = _Analog.VCF_PORT_FOURPOLE
    PORT_MOOG = _Analog.VCF_PORT_MOOG
    PORT_LP = _Analog.VCF_PORT_LP
    PORT_HP = _Analog.VCF_PORT_HP
    PORT_BP = _Analog.VCF_PORT_BP
    PORT_NOTCH = _Analog.VCF_PORT_NOTCH
    PORT_APF = _Analog.VCF_PORT_APF
    PORT_UBS = _Analog.VCF_PORT_UBS
    PORT_PEAK = _Analog.VCF_PORT_PEAK
    PORT_SHELF = _Analog.VCF_PORT_SHELF
    PORT_DCBIAS = _Analog.VCF_PORT_DCBIAS
    PORT_OVERSAMPLE = _Analog.VCF_PORT_OVERSAMPLE
    PORT_ENVSCALE = _Analog.VCF_PORT_ENVSCALE
    PORT_PREGAIN = _Analog.VCF_PORT_PREGAIN
    PORT_POSTGAIN = _Analog.VCF_PORT_POSTGAIN
    p1 = property(_Analog.VCF_p1_get, _Analog.VCF_p1_set)
    integrator = property(_Analog.VCF_integrator_get, _Analog.VCF_integrator_set)
    cutSmooth = property(_Analog.VCF_cutSmooth_get, _Analog.VCF_cutSmooth_set)
    resSmooth = property(_Analog.VCF_resSmooth_get, _Analog.VCF_resSmooth_set)
    outSmooth = property(_Analog.VCF_outSmooth_get, _Analog.VCF_outSmooth_set)
    x1Smooth = property(_Analog.VCF_x1Smooth_get, _Analog.VCF_x1Smooth_set)
    x2Smooth = property(_Analog.VCF_x2Smooth_get, _Analog.VCF_x2Smooth_set)
    x3Smooth = property(_Analog.VCF_x3Smooth_get, _Analog.VCF_x3Smooth_set)
    x4Smooth = property(_Analog.VCF_x4Smooth_get, _Analog.VCF_x4Smooth_set)

    def __init__(self, sampleRate, cutoff, resonance):
        _Analog.VCF_swiginit(self, _Analog.new_VCF(sampleRate, cutoff, resonance))

    def coefficients(self, sampleRate, frequency, resonance):
        return _Analog.VCF_coefficients(self, sampleRate, frequency, resonance)

    def setCutoff(self, c):
        return _Analog.VCF_setCutoff(self, c)

    def setResonance(self, res):
        return _Analog.VCF_setResonance(self, res)

    def setPort(self, port, v):
        return _Analog.VCF_setPort(self, port, v)

    def saturate(self, x):
        return _Analog.VCF_saturate(self, x)

    def Tick(self, input, A=1, X=2, Y=1):
        return _Analog.VCF_Tick(self, input, A, X, Y)

    def ProcessBlock(self, n, _in, out):
        return _Analog.VCF_ProcessBlock(self, n, _in, out)
    __swig_destroy__ = _Analog.delete_VCF

# Register VCF in _Analog:
_Analog.VCF_swigregister(VCF)

class VCF2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    f1 = property(_Analog.VCF2_f1_get, _Analog.VCF2_f1_set)
    f2 = property(_Analog.VCF2_f2_get, _Analog.VCF2_f2_set)

    def __init__(self, sampleRate, cutoff, resonance):
        _Analog.VCF2_swiginit(self, _Analog.new_VCF2(sampleRate, cutoff, resonance))

    def Cascade(self, x):
        return _Analog.VCF2_Cascade(self, x)

    def Serial(self, x):
        return _Analog.VCF2_Serial(self, x)

    def Parallel(self, x):
        return _Analog.VCF2_Parallel(self, x)

    def Modulus(self, x):
        return _Analog.VCF2_Modulus(self, x)

    def Morph(self, x, f=0.5):
        return _Analog.VCF2_Morph(self, x, f)
    __swig_destroy__ = _Analog.delete_VCF2

# Register VCF2 in _Analog:
_Analog.VCF2_swigregister(VCF2)

class VCFBANK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filters = property(_Analog.VCFBANK_filters_get, _Analog.VCFBANK_filters_set)

    def __init__(self, n, sampleRate=44100.0):
        _Analog.VCFBANK_swiginit(self, _Analog.new_VCFBANK(n, sampleRate))
    __swig_destroy__ = _Analog.delete_VCFBANK

    def Cascade(self, x):
        return _Analog.VCFBANK_Cascade(self, x)

    def Serial(self, x):
        return _Analog.VCFBANK_Serial(self, x)

    def Parallel(self, x):
        return _Analog.VCFBANK_Parallel(self, x)

    def Modulus(self, x):
        return _Analog.VCFBANK_Modulus(self, x)

    def Morph(self, x, f=0.5):
        return _Analog.VCFBANK_Morph(self, x, f)

# Register VCFBANK in _Analog:
_Analog.VCFBANK_swigregister(VCFBANK)


def blep(t, dt):
    return _Analog.blep(t, dt)

def blamp(t, dt):
    return _Analog.blamp(t, dt)
class VCO(OscillatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SINE = _Analog.VCO_SINE
    COSINE = _Analog.VCO_COSINE
    TRIANGLE = _Analog.VCO_TRIANGLE
    SQUARE = _Analog.VCO_SQUARE
    RECTANGLE = _Analog.VCO_RECTANGLE
    SAWTOOTH = _Analog.VCO_SAWTOOTH
    RAMP = _Analog.VCO_RAMP
    MODIFIED_TRIANGLE = _Analog.VCO_MODIFIED_TRIANGLE
    MODIFIED_SQUARE = _Analog.VCO_MODIFIED_SQUARE
    HALF_WAVE_RECTIFIED_SINE = _Analog.VCO_HALF_WAVE_RECTIFIED_SINE
    FULL_WAVE_RECTIFIED_SINE = _Analog.VCO_FULL_WAVE_RECTIFIED_SINE
    TRIANGULAR_PULSE = _Analog.VCO_TRIANGULAR_PULSE
    TRAPEZOID_FIXED = _Analog.VCO_TRAPEZOID_FIXED
    TRAPEZOID_VARIABLE = _Analog.VCO_TRAPEZOID_VARIABLE
    waveform = property(_Analog.VCO_waveform_get, _Analog.VCO_waveform_set)
    sampleRate = property(_Analog.VCO_sampleRate_get, _Analog.VCO_sampleRate_set)
    freqInSecondsPerSample = property(_Analog.VCO_freqInSecondsPerSample_get, _Analog.VCO_freqInSecondsPerSample_set)
    amplitude = property(_Analog.VCO_amplitude_get, _Analog.VCO_amplitude_set)
    pulseWidth = property(_Analog.VCO_pulseWidth_get, _Analog.VCO_pulseWidth_set)
    t = property(_Analog.VCO_t_get, _Analog.VCO_t_set)

    def __init__(self, *args):
        _Analog.VCO_swiginit(self, _Analog.new_VCO(*args))
    __swig_destroy__ = _Analog.delete_VCO

    def setFrequency(self, freqInHz):
        return _Analog.VCO_setFrequency(self, freqInHz)

    def setdt(self, time):
        return _Analog.VCO_setdt(self, time)

    def setSampleRate(self, sampleRate):
        return _Analog.VCO_setSampleRate(self, sampleRate)

    def setWaveform(self, waveform):
        return _Analog.VCO_setWaveform(self, waveform)

    def setPhase(self, p):
        return _Analog.VCO_setPhase(self, p)

    def getPhase(self):
        return _Analog.VCO_getPhase(self)

    def setPulseWidth(self, pw):
        return _Analog.VCO_setPulseWidth(self, pw)

    def get(self):
        return _Analog.VCO_get(self)

    def Tick(self, I=0, A=1, X=0, Y=0):
        return _Analog.VCO_Tick(self, I, A, X, Y)

    def inc(self):
        return _Analog.VCO_inc(self)

    def getAndInc(self):
        return _Analog.VCO_getAndInc(self)

    def getFreqInHz(self):
        return _Analog.VCO_getFreqInHz(self)

    def sync(self, phase):
        return _Analog.VCO_sync(self, phase)

    def sin(self):
        return _Analog.VCO_sin(self)

    def cos(self):
        return _Analog.VCO_cos(self)

    def half(self):
        return _Analog.VCO_half(self)

    def full(self):
        return _Analog.VCO_full(self)

    def tri(self):
        return _Analog.VCO_tri(self)

    def tri2(self):
        return _Analog.VCO_tri2(self)

    def trip(self):
        return _Analog.VCO_trip(self)

    def trap(self):
        return _Analog.VCO_trap(self)

    def trap2(self):
        return _Analog.VCO_trap2(self)

    def sqr(self):
        return _Analog.VCO_sqr(self)

    def sqr2(self):
        return _Analog.VCO_sqr2(self)

    def rect(self):
        return _Analog.VCO_rect(self)

    def saw(self):
        return _Analog.VCO_saw(self)

    def ramp(self):
        return _Analog.VCO_ramp(self)

    def ProcessBlock(self, n, out):
        return _Analog.VCO_ProcessBlock(self, n, out)

# Register VCO in _Analog:
_Analog.VCO_swigregister(VCO)
TWO_PI = cvar.TWO_PI

class float_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Analog.float_vector_swiginit(self, _Analog.new_float_vector(*args))

    def __getitem__(self, i):
        return _Analog.float_vector___getitem__(self, i)

    def __setitem__(self, i, val):
        return _Analog.float_vector___setitem__(self, i, val)

    def ibegin(self):
        return _Analog.float_vector_ibegin(self)

    def iend(self):
        return _Analog.float_vector_iend(self)

    def erase(self, *args):
        return _Analog.float_vector_erase(self, *args)

    def front(self):
        return _Analog.float_vector_front(self)

    def back(self):
        return _Analog.float_vector_back(self)

    def push_back(self, q):
        return _Analog.float_vector_push_back(self, q)

    def pop_back(self):
        return _Analog.float_vector_pop_back(self)

    def at(self, i):
        return _Analog.float_vector_at(self, i)

    def assign(self, n, val):
        return _Analog.float_vector_assign(self, n, val)

    def data(self):
        return _Analog.float_vector_data(self)

    def size(self):
        return _Analog.float_vector_size(self)

    def empty(self):
        return _Analog.float_vector_empty(self)

    def resize(self, n):
        return _Analog.float_vector_resize(self, n)

    def clear(self):
        return _Analog.float_vector_clear(self)

    def swap(self, x):
        return _Analog.float_vector_swap(self, x)

    def shrink_to_fit(self):
        return _Analog.float_vector_shrink_to_fit(self)

    def reserve(self, n):
        return _Analog.float_vector_reserve(self, n)

    def max_size(self):
        return _Analog.float_vector_max_size(self)

    def capacity(self):
        return _Analog.float_vector_capacity(self)
    __swig_destroy__ = _Analog.delete_float_vector

# Register float_vector in _Analog:
_Analog.float_vector_swigregister(float_vector)

class double_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Analog.double_vector_swiginit(self, _Analog.new_double_vector(*args))

    def __getitem__(self, i):
        return _Analog.double_vector___getitem__(self, i)

    def __setitem__(self, i, val):
        return _Analog.double_vector___setitem__(self, i, val)

    def ibegin(self):
        return _Analog.double_vector_ibegin(self)

    def iend(self):
        return _Analog.double_vector_iend(self)

    def erase(self, *args):
        return _Analog.double_vector_erase(self, *args)

    def front(self):
        return _Analog.double_vector_front(self)

    def back(self):
        return _Analog.double_vector_back(self)

    def push_back(self, q):
        return _Analog.double_vector_push_back(self, q)

    def pop_back(self):
        return _Analog.double_vector_pop_back(self)

    def at(self, i):
        return _Analog.double_vector_at(self, i)

    def assign(self, n, val):
        return _Analog.double_vector_assign(self, n, val)

    def data(self):
        return _Analog.double_vector_data(self)

    def size(self):
        return _Analog.double_vector_size(self)

    def empty(self):
        return _Analog.double_vector_empty(self)

    def resize(self, n):
        return _Analog.double_vector_resize(self, n)

    def clear(self):
        return _Analog.double_vector_clear(self)

    def swap(self, x):
        return _Analog.double_vector_swap(self, x)

    def shrink_to_fit(self):
        return _Analog.double_vector_shrink_to_fit(self)

    def reserve(self, n):
        return _Analog.double_vector_reserve(self, n)

    def max_size(self):
        return _Analog.double_vector_max_size(self)

    def capacity(self):
        return _Analog.double_vector_capacity(self)
    __swig_destroy__ = _Analog.delete_double_vector

# Register double_vector in _Analog:
_Analog.double_vector_swigregister(double_vector)

class complex_float_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Analog.complex_float_vector_swiginit(self, _Analog.new_complex_float_vector(*args))

    def __getitem__(self, i):
        return _Analog.complex_float_vector___getitem__(self, i)

    def __setitem__(self, i, val):
        return _Analog.complex_float_vector___setitem__(self, i, val)

    def ibegin(self):
        return _Analog.complex_float_vector_ibegin(self)

    def iend(self):
        return _Analog.complex_float_vector_iend(self)

    def erase(self, *args):
        return _Analog.complex_float_vector_erase(self, *args)

    def front(self):
        return _Analog.complex_float_vector_front(self)

    def back(self):
        return _Analog.complex_float_vector_back(self)

    def push_back(self, q):
        return _Analog.complex_float_vector_push_back(self, q)

    def pop_back(self):
        return _Analog.complex_float_vector_pop_back(self)

    def at(self, i):
        return _Analog.complex_float_vector_at(self, i)

    def assign(self, n, val):
        return _Analog.complex_float_vector_assign(self, n, val)

    def data(self):
        return _Analog.complex_float_vector_data(self)

    def size(self):
        return _Analog.complex_float_vector_size(self)

    def empty(self):
        return _Analog.complex_float_vector_empty(self)

    def resize(self, n):
        return _Analog.complex_float_vector_resize(self, n)

    def clear(self):
        return _Analog.complex_float_vector_clear(self)

    def swap(self, x):
        return _Analog.complex_float_vector_swap(self, x)

    def shrink_to_fit(self):
        return _Analog.complex_float_vector_shrink_to_fit(self)

    def reserve(self, n):
        return _Analog.complex_float_vector_reserve(self, n)

    def max_size(self):
        return _Analog.complex_float_vector_max_size(self)

    def capacity(self):
        return _Analog.complex_float_vector_capacity(self)
    __swig_destroy__ = _Analog.delete_complex_float_vector

# Register complex_float_vector in _Analog:
_Analog.complex_float_vector_swigregister(complex_float_vector)

class complex_double_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Analog.complex_double_vector_swiginit(self, _Analog.new_complex_double_vector(*args))

    def __getitem__(self, i):
        return _Analog.complex_double_vector___getitem__(self, i)

    def __setitem__(self, i, val):
        return _Analog.complex_double_vector___setitem__(self, i, val)

    def ibegin(self):
        return _Analog.complex_double_vector_ibegin(self)

    def iend(self):
        return _Analog.complex_double_vector_iend(self)

    def erase(self, *args):
        return _Analog.complex_double_vector_erase(self, *args)

    def front(self):
        return _Analog.complex_double_vector_front(self)

    def back(self):
        return _Analog.complex_double_vector_back(self)

    def push_back(self, q):
        return _Analog.complex_double_vector_push_back(self, q)

    def pop_back(self):
        return _Analog.complex_double_vector_pop_back(self)

    def at(self, i):
        return _Analog.complex_double_vector_at(self, i)

    def assign(self, n, val):
        return _Analog.complex_double_vector_assign(self, n, val)

    def data(self):
        return _Analog.complex_double_vector_data(self)

    def size(self):
        return _Analog.complex_double_vector_size(self)

    def empty(self):
        return _Analog.complex_double_vector_empty(self)

    def resize(self, n):
        return _Analog.complex_double_vector_resize(self, n)

    def clear(self):
        return _Analog.complex_double_vector_clear(self)

    def swap(self, x):
        return _Analog.complex_double_vector_swap(self, x)

    def shrink_to_fit(self):
        return _Analog.complex_double_vector_shrink_to_fit(self)

    def reserve(self, n):
        return _Analog.complex_double_vector_reserve(self, n)

    def max_size(self):
        return _Analog.complex_double_vector_max_size(self)

    def capacity(self):
        return _Analog.complex_double_vector_capacity(self)
    __swig_destroy__ = _Analog.delete_complex_double_vector

# Register complex_double_vector in _Analog:
_Analog.complex_double_vector_swigregister(complex_double_vector)



