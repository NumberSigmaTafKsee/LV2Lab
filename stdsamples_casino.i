%module stdsamples_casino
%{

#include <complex>
#include <algorithm>
#include <vector>
#include <random>
#include <functional>
#include <memory>
#include <chrono>
#include <cmath>
#include <cassert>

#include <ippcore.h>
#include <ipps.h>

#define DSPFLOATDOUBLE
#include "SoundObject.hpp"

#include "carlo_samples.hpp"

#include "carlo_ipp.hpp"
#include "carlo_ipparray.hpp"
#include "carlo_random.hpp"
#include "carlo_autocorr.hpp"
#include "carlo_xcorr.hpp"
#include "carlo_convolution.hpp"
#include "carlo_dct.hpp"
#include "carlo_dft.hpp"
#include "carlo_fft.hpp"
#include "carlo_firlms.hpp"
#include "carlo_firmr.hpp"
#include "carlo_firsr.hpp"
#include "carlo_hilbert.hpp"
#include "carlo_iir.hpp"
#include "carlo_resample.hpp"

using namespace Casino;
using namespace Casino::MKL;
using namespace Casino::IPP;
%}

%include "stdint.i"
%include "std_math.i"
%include "std_vector.i"
%include "std_string.i"
%include "std_map.i"
%include "lua_fnptr.i"

%include "exception.i"
%except {
	try {
		$function
	}
	catch(std::runtime_error & what) {
		SWIG_exception(SWIG_RuntimeError,what.what());
	}
}
#define DSPFLOATDOUBLE
%include "SoundObject.hpp"

%template(complex_float) std::complex<float>;
%template(complex_double) std::complex<double>;

%template(float_vector)          std::vector<float,cppmkl::cppmkl_allocator<float> >;
%template(double_vector)         std::vector<double,cppmkl::cppmkl_allocator<double> >;
%template(complex_float_vector)  std::vector<std::complex<float>,cppmkl::cppmkl_allocator<std::complex<float>> >;
%template(complex_double_vector) std::vector<std::complex<double>,cppmkl::cppmkl_allocator<std::complex<double>>>;

%template(int8_vector) std::vector<signed char>;
%template(uint8_vector) std::vector<unsigned char>;
%template(int16_vector) std::vector<signed short>;
%template(uint16_vector) std::vector<unsigned short>;
%template(int32_vector) std::vector<signed int>;
%template(uint32_vector) std::vector<unsigned int>;
%template(int64_vector) std::vector<signed long>;
%template(uint64_vector) std::vector<unsigned long>;
#define DSPFLOATDOUBLE
%include "SoundObject.hpp"
%include "carlo_vector.hpp"
%include "carlo_complex_vector.hpp"
%include "carlo_matrix.hpp"
%include "carlo_complex_matrix.hpp"
%include "carlo_mklfft.hpp"

%include "carlo_samples.hpp"

%include "carlo_ipp.hpp"
%include "carlo_ipparray.hpp"
%include "carlo_random.hpp"
%include "carlo_autocorr.hpp"
%include "carlo_xcorr.hpp"
%include "carlo_convolution.hpp"
%include "carlo_dct.hpp"
%include "carlo_dft.hpp"
%include "carlo_fft.hpp"
%include "carlo_firlms.hpp"
%include "carlo_firmr.hpp"
%include "carlo_firsr.hpp"
%include "carlo_hilbert.hpp"
%include "carlo_iir.hpp"
%include "carlo_resample.hpp"

%template(ArrayXf)   Casino::IPP::IPPArray<float>;
%template(ArrayXd)   Casino::IPP::IPPArray<double>;
//%template(ArrayXcf)  Casino::IPP::IPPArray<std::complex<float>>;
//%template(ArrayXcd)  Casino::IPP::IPPArray<std::complex<double>>;
%template(MatrixXcf) Casino::MKL::ComplexMatrix<float>;
%template(MatrixXcd) Casino::MKL::ComplexMatrix<double>;
%template(MatrixXf) Casino::MKL::Matrix<float>;
%template(MatrixXd) Casino::MKL::Matrix<double>;
%template(VectorXcf) Casino::MKL::ComplexVector<float>;
%template(VectorXcd) Casino::MKL::ComplexVector<double>;
%template(VectorXf) Casino::MKL::Vector<float>;
%template(VectorXd) Casino::MKL::Vector<double>;

%template(autocorr_f32) Casino::IPP::AutoCorrelation<float>;
%template(autocorr_f64) Casino::IPP::AutoCorrelation<double>;
%template(xcorr_f32) Casino::IPP::CrossCorrelation<float>;
%template(xcorr_f64) Casino::IPP::CrossCorrelation<double>;
%template(convolve_f32) Casino::IPP::Convolver<float>;
%template(convolve_f64) Casino::IPP::Convolver<double>;
%template(convfilter_f32) Casino::IPP::ConvolutionFilter<float>;
%template(convfilter_f64) Casino::IPP::ConvolutionFilter<double>;
%template(dct_f32) Casino::IPP::DCT<float>;
%template(dct_f64) Casino::IPP::DCT<double>;
%template(dft_f32) Casino::IPP::CDFT<float>;
%template(dft_f64) Casino::IPP::CDFT<double>;
%template(fft_f32) Casino::IPP::CFFT<float>;
%template(fft_f64) Casino::IPP::CFFT<double>;
%template(firmr_f32) Casino::IPP::FIRMR<float>;
%template(firmr_f64) Casino::IPP::FIRMR<double>;
%template(firsr_f32) Casino::IPP::FIRSR<float>;
%template(firsr_f64) Casino::IPP::FIRSR<double>;
%template(iir_f32) Casino::IPP::IIR<float>;
%template(iir_f64) Casino::IPP::IIR<double>;
%template(biquad_f32) Casino::IPP::IIRBiquad<float>;
%template(biquad_f64) Casino::IPP::IIRBiquad<double>;
%template(random_f32) Casino::IPP::RandomUniform<float>;
%template(random_f64) Casino::IPP::RandomUniform<double>;


%template(absf)  Ops::abs<float>;
%template(cubef) Ops::cube<float>;
%template(sqrtf) Ops::sqrt<float>;
%template(expf)  Ops::exp<float>;
%template(exp2f) Ops::exp2<float>;
%template(logf)  Ops::log<float>;
%template(log10f) Ops::log10<float>;
%template(log2f) Ops::log2<float>;
%template(logbf) Ops::logb<float>;
%template(powf) Ops::pow<float>;
%template(floorf) Ops::floor<float>;
%template(acosf) Ops::acos<float>;
%template(asinf) Ops::asin<float>;
%template(atanf) Ops::atan<float>;
%template(atan2f) Ops::atan2<float>;
%template(cosf) Ops::cos<float>;
%template(sinf) Ops::sin<float>;
%template(tanf) Ops::tan<float>;
%template(coshf) Ops::cosh<float>;
%template(sinhf) Ops::sinh<float>;
%template(tanhf) Ops::tanh<float>;
%template(lgammaf) Ops::lgamma<float>;
%template(acoshf) Ops::acosh<float>;
%template(asinhf) Ops::asinh<float>;
%template(atanhf) Ops::atanh<float>;
%template(cbrtf) Ops::cbrt<float>;
%template(ceilf) Ops::cbrt<float>;
%template(copysignf) Ops::copysign<float>;
%template(erff) Ops::erf<float>;
%template(erfcf) Ops::erfc<float>;
%template(expm1f) Ops::expm1<float>;
%template(fdimf) Ops::fdim<float>;
%template(fmaf) Ops::fma<float>;
%template(fmaxf) Ops::fmax<float>;
%template(fminf) Ops::fmin<float>;
%template(fmodf) Ops::fmod<float>;
%template(fpclassifyf) Ops::fpclassify<float>;
%template(hypotf) Ops::hypot<float>;
%template(ilogbf) Ops::ilogb<float>;
%template(isfinitef) Ops::isfinite<float>;
%template(isgreaterf) Ops::isgreater<float>;
%template(isgreaterequalf) Ops::isgreaterequal<float>;
%template(isinff) Ops::isinf<float>;
%template(islessf) Ops::isless<float>;
%template(islessequalf) Ops::islessequal<float>;
%template(isnanf) Ops::isnan<float>;
%template(isnormalf) Ops::isnormal<float>;
%template(isunorderedf) Ops::isunordered<float>;
%template(ldexpf) Ops::ldexp<float>;
%template(lgammaf) Ops::lgamma<float>;
%template(llrintf) Ops::llrint<float>;
%template(llroundf) Ops::llround<float>;
%template(log1pf) Ops::log1p<float>;
%template(lrintf) Ops::lrint<float>;
%template(lroundf) Ops::lround<float>;
%template(nanf) Ops::nan<float>;
%template(nanff) Ops::nanf<float>;
%template(nanlf) Ops::nanl<float>;
%template(nearbyintf) Ops::nearbyint<float>;
%template(nextafterf) Ops::nextafter<float>;
%template(nexttowardf) Ops::nexttoward<float>;
%template(remainderf) Ops::remainder<float>;
%template(rintf) Ops::rint<float>;
%template(roundf) Ops::round<float>;
%template(scalblnf) Ops::scalbln<float>;
%template(scalbnf) Ops::scalbn<float>;
%template(squaref) Ops::square<float>;
%template(tgammaf) Ops::tgamma<float>;
%template(truncf) Ops::trunc<float>;


%template(crealf) std::real<float>;
%template(cimagf) std::imag<float>;
%template(cabsf) std::abs<float>;
%template(cargf) std::arg<float>;
%template(cexpf) std::exp<float>;
%template(clogf) std::log<float>;
%template(clog10f) std::log10<float>;
%template(cpowf) std::pow<float>;
%template(csqrtf) std::sqrt<float>;
%template(cnormf) std::norm<float>;
%template(cprojf) std::proj<float>;
%template(cpolarf) std::polar<float>;
%template(csinf) std::sin<float>;
%template(ccosf) std::cos<float>;
%template(ctanf) std::tan<float>;
%template(casinf) std::asin<float>;
%template(cacosf) std::acos<float>;
%template(catanf) std::atan<float>;
%template(csinhf) std::sinh<float>;
%template(ccoshf) std::cosh<float>;
%template(ctanhf) std::tanh<float>;
%template(casinhf) std::asinh<float>;
%template(cacoshf) std::acosh<float>;
%template(catanhf) std::atanh<float>;%template(absf)  Ops::abs<float>;
%template(cubef) Ops::cube<float>;
%template(sqrtf) Ops::sqrt<float>;
%template(expf)  Ops::exp<float>;
%template(exp2f) Ops::exp2<float>;
%template(logf)  Ops::log<float>;
%template(log10f) Ops::log10<float>;
%template(log2f) Ops::log2<float>;
%template(logbf) Ops::logb<float>;
%template(powf) Ops::pow<float>;
%template(floorf) Ops::floor<float>;
%template(acosf) Ops::acos<float>;
%template(asinf) Ops::asin<float>;
%template(atanf) Ops::atan<float>;
%template(atan2f) Ops::atan2<float>;
%template(cosf) Ops::cos<float>;
%template(sinf) Ops::sin<float>;
%template(tanf) Ops::tan<float>;
%template(coshf) Ops::cosh<float>;
%template(sinhf) Ops::sinh<float>;
%template(tanhf) Ops::tanh<float>;
%template(lgammaf) Ops::lgamma<float>;
%template(acoshf) Ops::acosh<float>;
%template(asinhf) Ops::asinh<float>;
%template(atanhf) Ops::atanh<float>;
%template(cbrtf) Ops::cbrt<float>;
%template(ceilf) Ops::cbrt<float>;
%template(copysignf) Ops::copysign<float>;
%template(erff) Ops::erf<float>;
%template(erfcf) Ops::erfc<float>;
%template(expm1f) Ops::expm1<float>;
%template(fdimf) Ops::fdim<float>;
%template(fmaf) Ops::fma<float>;
%template(fmaxf) Ops::fmax<float>;
%template(fminf) Ops::fmin<float>;
%template(fmodf) Ops::fmod<float>;
%template(fpclassifyf) Ops::fpclassify<float>;
%template(hypotf) Ops::hypot<float>;
%template(ilogbf) Ops::ilogb<float>;
%template(isfinitef) Ops::isfinite<float>;
%template(isgreaterf) Ops::isgreater<float>;
%template(isgreaterequalf) Ops::isgreaterequal<float>;
%template(isinff) Ops::isinf<float>;
%template(islessf) Ops::isless<float>;
%template(islessequalf) Ops::islessequal<float>;
%template(isnanf) Ops::isnan<float>;
%template(isnormalf) Ops::isnormal<float>;
%template(isunorderedf) Ops::isunordered<float>;
%template(ldexpf) Ops::ldexp<float>;
%template(lgammaf) Ops::lgamma<float>;
%template(llrintf) Ops::llrint<float>;
%template(llroundf) Ops::llround<float>;
%template(log1pf) Ops::log1p<float>;
%template(lrintf) Ops::lrint<float>;
%template(lroundf) Ops::lround<float>;
%template(nanf) Ops::nan<float>;
%template(nanff) Ops::nanf<float>;
%template(nanlf) Ops::nanl<float>;
%template(nearbyintf) Ops::nearbyint<float>;
%template(nextafterf) Ops::nextafter<float>;
%template(nexttowardf) Ops::nexttoward<float>;
%template(remainderf) Ops::remainder<float>;
%template(rintf) Ops::rint<float>;
%template(roundf) Ops::round<float>;
%template(scalblnf) Ops::scalbln<float>;
%template(scalbnf) Ops::scalbn<float>;
%template(squaref) Ops::square<float>;
%template(tgammaf) Ops::tgamma<float>;
%template(truncf) Ops::trunc<float>;


%template(crealf) std::real<float>;
%template(cimagf) std::imag<float>;
%template(cabsf) std::abs<float>;
%template(cargf) std::arg<float>;
%template(cexpf) std::exp<float>;
%template(clogf) std::log<float>;
%template(clog10f) std::log10<float>;
%template(cpowf) std::pow<float>;
%template(csqrtf) std::sqrt<float>;
%template(cnormf) std::norm<float>;
%template(cprojf) std::proj<float>;
%template(cpolarf) std::polar<float>;
%template(csinf) std::sin<float>;
%template(ccosf) std::cos<float>;
%template(ctanf) std::tan<float>;
%template(casinf) std::asin<float>;
%template(cacosf) std::acos<float>;
%template(catanf) std::atan<float>;
%template(csinhf) std::sinh<float>;
%template(ccoshf) std::cosh<float>;
%template(ctanhf) std::tanh<float>;
%template(casinhf) std::asinh<float>;
%template(cacoshf) std::acosh<float>;
%template(catanhf) std::atanh<float>;


%template(absd)  Ops::abs<double>;
%template(cubed) Ops::cube<double>;
%template(sqrtd) Ops::sqrt<double>;
%template(expd)  Ops::exp<double>;
%template(exp2d) Ops::exp2<double>;
%template(logd)  Ops::log<double>;
%template(log10d) Ops::log10<double>;
%template(log2d) Ops::log2<double>;
%template(logbd) Ops::logb<double>;
%template(powd) Ops::pow<double>;
%template(floord) Ops::floor<double>;
%template(acosd) Ops::acos<double>;
%template(asind) Ops::asin<double>;
%template(atand) Ops::atan<double>;
%template(atan2d) Ops::atan2<double>;
%template(cosd) Ops::cos<double>;
%template(sind) Ops::sin<double>;
%template(tand) Ops::tan<double>;
%template(coshd) Ops::cosh<double>;
%template(sinhd) Ops::sinh<double>;
%template(tanhd) Ops::tanh<double>;
%template(lgammad) Ops::lgamma<double>;
%template(acoshd) Ops::acosh<double>;
%template(asinhd) Ops::asinh<double>;
%template(atanhd) Ops::atanh<double>;
%template(cbrtd) Ops::cbrt<double>;
%template(ceild) Ops::cbrt<double>;
%template(copysignd) Ops::copysign<double>;
%template(erfd) Ops::erf<double>;
%template(erfcd) Ops::erfc<double>;
%template(expm1d) Ops::expm1<double>;
%template(fdimd) Ops::fdim<double>;
%template(fmad) Ops::fma<double>;
%template(fmaxd) Ops::fmax<double>;
%template(fmind) Ops::fmin<double>;
%template(fmodd) Ops::fmod<double>;
%template(fpclassifyd) Ops::fpclassify<double>;
%template(hypotd) Ops::hypot<double>;
%template(ilogbd) Ops::ilogb<double>;
%template(isfinited) Ops::isfinite<double>;
%template(isgreaterd) Ops::isgreater<double>;
%template(isgreaterequald) Ops::isgreaterequal<double>;
%template(isinfd) Ops::isinf<double>;
%template(islessd) Ops::isless<double>;
%template(islessequald) Ops::islessequal<double>;
%template(isnand) Ops::isnan<double>;
%template(isnormald) Ops::isnormal<double>;
%template(isunorderedd) Ops::isunordered<double>;
%template(ldexpd) Ops::ldexp<double>;
%template(lgammad) Ops::lgamma<double>;
%template(llrintd) Ops::llrint<double>;
%template(llroundd) Ops::llround<double>;
%template(log1pd) Ops::log1p<double>;
%template(lrintd) Ops::lrint<double>;
%template(lroundd) Ops::lround<double>;
%template(nand) Ops::nan<double>;
%template(nanfd) Ops::nanf<double>;
%template(nanld) Ops::nanl<double>;
%template(nearbyintd) Ops::nearbyint<double>;
%template(nextafterd) Ops::nextafter<double>;
%template(nexttowardd) Ops::nexttoward<double>;
%template(remainderd) Ops::remainder<double>;
%template(rintd) Ops::rint<double>;
%template(roundd) Ops::round<double>;
%template(scalblnd) Ops::scalbln<double>;
%template(scalbnd) Ops::scalbn<double>;
%template(squared) Ops::square<double>;
%template(tgammad) Ops::tgamma<double>;
%template(truncd) Ops::trunc<double>;


%template(creald) std::real<double>;
%template(cimagd) std::imag<double>;
%template(cabsd) std::abs<double>;
%template(cargd) std::arg<double>;
%template(cexpd) std::exp<double>;
%template(clogd) std::log<double>;
%template(clog10d) std::log10<double>;
%template(cpowd) std::pow<double>;
%template(csqrtd) std::sqrt<double>;
%template(cnormd) std::norm<double>;
%template(cprojd) std::proj<double>;
%template(cpolard) std::polar<double>;
%template(csind) std::sin<double>;
%template(ccosd) std::cos<double>;
%template(ctand) std::tan<double>;
%template(casind) std::asin<double>;
%template(cacosd) std::acos<double>;
%template(catand) std::atan<double>;
%template(csinhd) std::sinh<double>;
%template(ccoshd) std::cosh<double>;
%template(ctanhd) std::tanh<double>;
%template(casinhd) std::asinh<double>;
%template(cacoshd) std::acosh<double>;
%template(catanhd) std::atanh<double>;%template(absd)  Ops::abs<double>;
%template(cubed) Ops::cube<double>;
%template(sqrtd) Ops::sqrt<double>;
%template(expd)  Ops::exp<double>;
%template(exp2d) Ops::exp2<double>;
%template(logd)  Ops::log<double>;
%template(log10d) Ops::log10<double>;
%template(log2d) Ops::log2<double>;
%template(logbd) Ops::logb<double>;
%template(powd) Ops::pow<double>;
%template(floord) Ops::floor<double>;
%template(acosd) Ops::acos<double>;
%template(asind) Ops::asin<double>;
%template(atand) Ops::atan<double>;
%template(atan2d) Ops::atan2<double>;
%template(cosd) Ops::cos<double>;
%template(sind) Ops::sin<double>;
%template(tand) Ops::tan<double>;
%template(coshd) Ops::cosh<double>;
%template(sinhd) Ops::sinh<double>;
%template(tanhd) Ops::tanh<double>;
%template(lgammad) Ops::lgamma<double>;
%template(acoshd) Ops::acosh<double>;
%template(asinhd) Ops::asinh<double>;
%template(atanhd) Ops::atanh<double>;
%template(cbrtd) Ops::cbrt<double>;
%template(ceild) Ops::cbrt<double>;
%template(copysignd) Ops::copysign<double>;
%template(erfd) Ops::erf<double>;
%template(erfcd) Ops::erfc<double>;
%template(expm1d) Ops::expm1<double>;
%template(fdimd) Ops::fdim<double>;
%template(fmad) Ops::fma<double>;
%template(fmaxd) Ops::fmax<double>;
%template(fmind) Ops::fmin<double>;
%template(fmodd) Ops::fmod<double>;
%template(fpclassifyd) Ops::fpclassify<double>;
%template(hypotd) Ops::hypot<double>;
%template(ilogbd) Ops::ilogb<double>;
%template(isfinited) Ops::isfinite<double>;
%template(isgreaterd) Ops::isgreater<double>;
%template(isgreaterequald) Ops::isgreaterequal<double>;
%template(isinfd) Ops::isinf<double>;
%template(islessd) Ops::isless<double>;
%template(islessequald) Ops::islessequal<double>;
%template(isnand) Ops::isnan<double>;
%template(isnormald) Ops::isnormal<double>;
%template(isunorderedd) Ops::isunordered<double>;
%template(ldexpd) Ops::ldexp<double>;
%template(lgammad) Ops::lgamma<double>;
%template(llrintd) Ops::llrint<double>;
%template(llroundd) Ops::llround<double>;
%template(log1pd) Ops::log1p<double>;
%template(lrintd) Ops::lrint<double>;
%template(lroundd) Ops::lround<double>;
%template(nand) Ops::nan<double>;
%template(nanfd) Ops::nanf<double>;
%template(nanld) Ops::nanl<double>;
%template(nearbyintd) Ops::nearbyint<double>;
%template(nextafterd) Ops::nextafter<double>;
%template(nexttowardd) Ops::nexttoward<double>;
%template(remainderd) Ops::remainder<double>;
%template(rintd) Ops::rint<double>;
%template(roundd) Ops::round<double>;
%template(scalblnd) Ops::scalbln<double>;
%template(scalbnd) Ops::scalbn<double>;
%template(squared) Ops::square<double>;
%template(tgammad) Ops::tgamma<double>;
%template(truncd) Ops::trunc<double>;


%template(creald) std::real<double>;
%template(cimagd) std::imag<double>;
%template(cabsd) std::abs<double>;
%template(cargd) std::arg<double>;
%template(cexpd) std::exp<double>;
%template(clogd) std::log<double>;
%template(clog10d) std::log10<double>;
%template(cpowd) std::pow<double>;
%template(csqrtd) std::sqrt<double>;
%template(cnormd) std::norm<double>;
%template(cprojd) std::proj<double>;
%template(cpolard) std::polar<double>;
%template(csind) std::sin<double>;
%template(ccosd) std::cos<double>;
%template(ctand) std::tan<double>;
%template(casind) std::asin<double>;
%template(cacosd) std::acos<double>;
%template(catand) std::atan<double>;
%template(csinhd) std::sinh<double>;
%template(ccoshd) std::cosh<double>;
%template(ctanhd) std::tanh<double>;
%template(casinhd) std::asinh<double>;
%template(cacoshd) std::acosh<double>;
%template(catanhd) std::atanh<double>;
